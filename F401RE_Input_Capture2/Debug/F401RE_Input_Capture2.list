
F401RE_Input_Capture2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005994  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005b34  08005b34  00015b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ba4  08005ba4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ba4  08005ba4  00015ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bac  08005bac  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bac  08005bac  00015bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bb0  08005bb0  00015bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  2000006c  08005c20  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  08005c20  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f9de  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002840  00000000  00000000  0002fabd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e88  00000000  00000000  00032300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b41  00000000  00000000  00033188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001858d  00000000  00000000  00033cc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012780  00000000  00000000  0004c256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094dc2  00000000  00000000  0005e9d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004310  00000000  00000000  000f3798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000f7aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005b1c 	.word	0x08005b1c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08005b1c 	.word	0x08005b1c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08a      	sub	sp, #40	; 0x28
 8000580:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	613b      	str	r3, [r7, #16]
 8000596:	4b2d      	ldr	r3, [pc, #180]	; (800064c <MX_GPIO_Init+0xd0>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	4a2c      	ldr	r2, [pc, #176]	; (800064c <MX_GPIO_Init+0xd0>)
 800059c:	f043 0304 	orr.w	r3, r3, #4
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
 80005a2:	4b2a      	ldr	r3, [pc, #168]	; (800064c <MX_GPIO_Init+0xd0>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	f003 0304 	and.w	r3, r3, #4
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	4b26      	ldr	r3, [pc, #152]	; (800064c <MX_GPIO_Init+0xd0>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a25      	ldr	r2, [pc, #148]	; (800064c <MX_GPIO_Init+0xd0>)
 80005b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b23      	ldr	r3, [pc, #140]	; (800064c <MX_GPIO_Init+0xd0>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	4b1f      	ldr	r3, [pc, #124]	; (800064c <MX_GPIO_Init+0xd0>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a1e      	ldr	r2, [pc, #120]	; (800064c <MX_GPIO_Init+0xd0>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b1c      	ldr	r3, [pc, #112]	; (800064c <MX_GPIO_Init+0xd0>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	4b18      	ldr	r3, [pc, #96]	; (800064c <MX_GPIO_Init+0xd0>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a17      	ldr	r2, [pc, #92]	; (800064c <MX_GPIO_Init+0xd0>)
 80005f0:	f043 0302 	orr.w	r3, r3, #2
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b15      	ldr	r3, [pc, #84]	; (800064c <MX_GPIO_Init+0xd0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0302 	and.w	r3, r3, #2
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	2120      	movs	r1, #32
 8000606:	4812      	ldr	r0, [pc, #72]	; (8000650 <MX_GPIO_Init+0xd4>)
 8000608:	f001 f8fc 	bl	8001804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800060c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000612:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	4619      	mov	r1, r3
 8000622:	480c      	ldr	r0, [pc, #48]	; (8000654 <MX_GPIO_Init+0xd8>)
 8000624:	f000 ff6a 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000628:	2320      	movs	r3, #32
 800062a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062c:	2301      	movs	r3, #1
 800062e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000634:	2300      	movs	r3, #0
 8000636:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	4619      	mov	r1, r3
 800063e:	4804      	ldr	r0, [pc, #16]	; (8000650 <MX_GPIO_Init+0xd4>)
 8000640:	f000 ff5c 	bl	80014fc <HAL_GPIO_Init>

}
 8000644:	bf00      	nop
 8000646:	3728      	adds	r7, #40	; 0x28
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40023800 	.word	0x40023800
 8000650:	40020000 	.word	0x40020000
 8000654:	40020800 	.word	0x40020800

08000658 <__io_putchar>:
uint32_t IC_Value2 = 0;
uint32_t Duty_Cycle = 0;
uint32_t Frequency = 0;
uint16_t i = 100;

int  __io_putchar(int ch){
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000660:	1d39      	adds	r1, r7, #4
 8000662:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000666:	2201      	movs	r2, #1
 8000668:	4803      	ldr	r0, [pc, #12]	; (8000678 <__io_putchar+0x20>)
 800066a:	f003 fb58 	bl	8003d1e <HAL_UART_Transmit>
	return ch;
 800066e:	687b      	ldr	r3, [r7, #4]
}
 8000670:	4618      	mov	r0, r3
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	2000014c 	.word	0x2000014c

0800067c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	if(htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	7f1b      	ldrb	r3, [r3, #28]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d14d      	bne.n	8000728 <HAL_TIM_IC_CaptureCallback+0xac>
		IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800068c:	2100      	movs	r1, #0
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f002 fd8e 	bl	80031b0 <HAL_TIM_ReadCapturedValue>
 8000694:	4603      	mov	r3, r0
 8000696:	4a26      	ldr	r2, [pc, #152]	; (8000730 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000698:	6013      	str	r3, [r2, #0]
		if(IC_Value1 != 0){
 800069a:	4b25      	ldr	r3, [pc, #148]	; (8000730 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d03c      	beq.n	800071c <HAL_TIM_IC_CaptureCallback+0xa0>
			IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80006a2:	2104      	movs	r1, #4
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f002 fd83 	bl	80031b0 <HAL_TIM_ReadCapturedValue>
 80006aa:	4603      	mov	r3, r0
 80006ac:	4a21      	ldr	r2, [pc, #132]	; (8000734 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80006ae:	6013      	str	r3, [r2, #0]
			if(IC_Value1 > IC_Value2){
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d914      	bls.n	80006e6 <HAL_TIM_IC_CaptureCallback+0x6a>
				Duty_Cycle = (IC_Value2 * 100 / IC_Value1);
 80006bc:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2264      	movs	r2, #100	; 0x64
 80006c2:	fb03 f202 	mul.w	r2, r3, r2
 80006c6:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ce:	4a1a      	ldr	r2, [pc, #104]	; (8000738 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80006d0:	6013      	str	r3, [r2, #0]
				Frequency = HAL_RCC_GetPCLK1Freq() / IC_Value1;
 80006d2:	f001 fd21 	bl	8002118 <HAL_RCC_GetPCLK1Freq>
 80006d6:	4602      	mov	r2, r0
 80006d8:	4b15      	ldr	r3, [pc, #84]	; (8000730 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80006e0:	4a16      	ldr	r2, [pc, #88]	; (800073c <HAL_TIM_IC_CaptureCallback+0xc0>)
 80006e2:	6013      	str	r3, [r2, #0]
		else{
			Duty_Cycle = 0;
			Frequency = 0;
		}
	}
}
 80006e4:	e020      	b.n	8000728 <HAL_TIM_IC_CaptureCallback+0xac>
				Duty_Cycle = (IC_Value2 * 100 / IC_Value2);
 80006e6:	4b13      	ldr	r3, [pc, #76]	; (8000734 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2264      	movs	r2, #100	; 0x64
 80006ec:	fb03 f202 	mul.w	r2, r3, r2
 80006f0:	4b10      	ldr	r3, [pc, #64]	; (8000734 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80006f8:	4a0f      	ldr	r2, [pc, #60]	; (8000738 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80006fa:	6013      	str	r3, [r2, #0]
				Duty_Cycle = 100 - Duty_Cycle;
 80006fc:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000704:	4a0c      	ldr	r2, [pc, #48]	; (8000738 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000706:	6013      	str	r3, [r2, #0]
				Frequency = HAL_RCC_GetPCLK1Freq() / IC_Value2;
 8000708:	f001 fd06 	bl	8002118 <HAL_RCC_GetPCLK1Freq>
 800070c:	4602      	mov	r2, r0
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	fbb2 f3f3 	udiv	r3, r2, r3
 8000716:	4a09      	ldr	r2, [pc, #36]	; (800073c <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000718:	6013      	str	r3, [r2, #0]
}
 800071a:	e005      	b.n	8000728 <HAL_TIM_IC_CaptureCallback+0xac>
			Duty_Cycle = 0;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
			Frequency = 0;
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000088 	.word	0x20000088
 8000734:	2000008c 	.word	0x2000008c
 8000738:	20000090 	.word	0x20000090
 800073c:	20000094 	.word	0x20000094

08000740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000744:	f000 fca0 	bl	8001088 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000748:	f000 f868 	bl	800081c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074c:	f7ff ff16 	bl	800057c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000750:	f000 fbf6 	bl	8000f40 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000754:	f000 f8d6 	bl	8000904 <MX_RTC_Init>
  MX_TIM3_Init();
 8000758:	f000 fa42 	bl	8000be0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800075c:	f000 fab8 	bl	8000cd0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000760:	2100      	movs	r1, #0
 8000762:	4827      	ldr	r0, [pc, #156]	; (8000800 <main+0xc0>)
 8000764:	f002 f89a 	bl	800289c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8000768:	2104      	movs	r1, #4
 800076a:	4825      	ldr	r0, [pc, #148]	; (8000800 <main+0xc0>)
 800076c:	f002 f896 	bl	800289c <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000770:	2100      	movs	r1, #0
 8000772:	4824      	ldr	r0, [pc, #144]	; (8000804 <main+0xc4>)
 8000774:	f001 ff88 	bl	8002688 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  TIM3 -> CCR1 = i;
 8000778:	4b23      	ldr	r3, [pc, #140]	; (8000808 <main+0xc8>)
 800077a:	881a      	ldrh	r2, [r3, #0]
 800077c:	4b23      	ldr	r3, [pc, #140]	; (800080c <main+0xcc>)
 800077e:	635a      	str	r2, [r3, #52]	; 0x34
	  	  if(i >= 100 && i <= 800){
 8000780:	4b21      	ldr	r3, [pc, #132]	; (8000808 <main+0xc8>)
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	2b63      	cmp	r3, #99	; 0x63
 8000786:	d90b      	bls.n	80007a0 <main+0x60>
 8000788:	4b1f      	ldr	r3, [pc, #124]	; (8000808 <main+0xc8>)
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000790:	d806      	bhi.n	80007a0 <main+0x60>
	  		  i = i + 50;
 8000792:	4b1d      	ldr	r3, [pc, #116]	; (8000808 <main+0xc8>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	3332      	adds	r3, #50	; 0x32
 8000798:	b29a      	uxth	r2, r3
 800079a:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <main+0xc8>)
 800079c:	801a      	strh	r2, [r3, #0]
 800079e:	e023      	b.n	80007e8 <main+0xa8>
	  	  }
	  	  else if(i > 800 && i <= 990){
 80007a0:	4b19      	ldr	r3, [pc, #100]	; (8000808 <main+0xc8>)
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80007a8:	d90c      	bls.n	80007c4 <main+0x84>
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <main+0xc8>)
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	f240 32de 	movw	r2, #990	; 0x3de
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d806      	bhi.n	80007c4 <main+0x84>
			  i = i + 5;
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <main+0xc8>)
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	3305      	adds	r3, #5
 80007bc:	b29a      	uxth	r2, r3
 80007be:	4b12      	ldr	r3, [pc, #72]	; (8000808 <main+0xc8>)
 80007c0:	801a      	strh	r2, [r3, #0]
 80007c2:	e011      	b.n	80007e8 <main+0xa8>
		  }
	  	  else{
	  		  i = i + 1;
 80007c4:	4b10      	ldr	r3, [pc, #64]	; (8000808 <main+0xc8>)
 80007c6:	881b      	ldrh	r3, [r3, #0]
 80007c8:	3301      	adds	r3, #1
 80007ca:	b29a      	uxth	r2, r3
 80007cc:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <main+0xc8>)
 80007ce:	801a      	strh	r2, [r3, #0]
	  		HAL_Delay(400);
 80007d0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80007d4:	f000 fcca 	bl	800116c <HAL_Delay>
	  		  if(i > 999){
 80007d8:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <main+0xc8>)
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80007e0:	d302      	bcc.n	80007e8 <main+0xa8>
	  			  i = 100;
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <main+0xc8>)
 80007e4:	2264      	movs	r2, #100	; 0x64
 80007e6:	801a      	strh	r2, [r3, #0]
	  		  }
	  	  }
	  printf("frequency = %ld, Duty Cycle = %ld\r\n", Frequency, Duty_Cycle);
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <main+0xd0>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a09      	ldr	r2, [pc, #36]	; (8000814 <main+0xd4>)
 80007ee:	6812      	ldr	r2, [r2, #0]
 80007f0:	4619      	mov	r1, r3
 80007f2:	4809      	ldr	r0, [pc, #36]	; (8000818 <main+0xd8>)
 80007f4:	f004 fb1c 	bl	8004e30 <iprintf>
	  HAL_Delay(100);
 80007f8:	2064      	movs	r0, #100	; 0x64
 80007fa:	f000 fcb7 	bl	800116c <HAL_Delay>
	  TIM3 -> CCR1 = i;
 80007fe:	e7bb      	b.n	8000778 <main+0x38>
 8000800:	20000104 	.word	0x20000104
 8000804:	200000bc 	.word	0x200000bc
 8000808:	20000000 	.word	0x20000000
 800080c:	40000400 	.word	0x40000400
 8000810:	20000094 	.word	0x20000094
 8000814:	20000090 	.word	0x20000090
 8000818:	08005b34 	.word	0x08005b34

0800081c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b094      	sub	sp, #80	; 0x50
 8000820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000822:	f107 0320 	add.w	r3, r7, #32
 8000826:	2230      	movs	r2, #48	; 0x30
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f004 fb55 	bl	8004eda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000840:	2300      	movs	r3, #0
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	4b2a      	ldr	r3, [pc, #168]	; (80008f0 <SystemClock_Config+0xd4>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000848:	4a29      	ldr	r2, [pc, #164]	; (80008f0 <SystemClock_Config+0xd4>)
 800084a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084e:	6413      	str	r3, [r2, #64]	; 0x40
 8000850:	4b27      	ldr	r3, [pc, #156]	; (80008f0 <SystemClock_Config+0xd4>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800085c:	2300      	movs	r3, #0
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	4b24      	ldr	r3, [pc, #144]	; (80008f4 <SystemClock_Config+0xd8>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000868:	4a22      	ldr	r2, [pc, #136]	; (80008f4 <SystemClock_Config+0xd8>)
 800086a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800086e:	6013      	str	r3, [r2, #0]
 8000870:	4b20      	ldr	r3, [pc, #128]	; (80008f4 <SystemClock_Config+0xd8>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800087c:	2306      	movs	r3, #6
 800087e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000880:	2301      	movs	r3, #1
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000884:	2301      	movs	r3, #1
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000888:	2310      	movs	r3, #16
 800088a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088c:	2302      	movs	r3, #2
 800088e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000890:	2300      	movs	r3, #0
 8000892:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000894:	2310      	movs	r3, #16
 8000896:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000898:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800089c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800089e:	2304      	movs	r3, #4
 80008a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008a2:	2307      	movs	r3, #7
 80008a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a6:	f107 0320 	add.w	r3, r7, #32
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 ffc4 	bl	8001838 <HAL_RCC_OscConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008b6:	f000 f81f 	bl	80008f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ba:	230f      	movs	r3, #15
 80008bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008be:	2302      	movs	r3, #2
 80008c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	2102      	movs	r1, #2
 80008d6:	4618      	mov	r0, r3
 80008d8:	f001 fa26 	bl	8001d28 <HAL_RCC_ClockConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80008e2:	f000 f809 	bl	80008f8 <Error_Handler>
  }
}
 80008e6:	bf00      	nop
 80008e8:	3750      	adds	r7, #80	; 0x50
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40007000 	.word	0x40007000

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000900:	e7fe      	b.n	8000900 <Error_Handler+0x8>
	...

08000904 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_RTC_Init+0x44>)
 800090a:	4a10      	ldr	r2, [pc, #64]	; (800094c <MX_RTC_Init+0x48>)
 800090c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_RTC_Init+0x44>)
 8000910:	2200      	movs	r2, #0
 8000912:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_RTC_Init+0x44>)
 8000916:	227f      	movs	r2, #127	; 0x7f
 8000918:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <MX_RTC_Init+0x44>)
 800091c:	22ff      	movs	r2, #255	; 0xff
 800091e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_RTC_Init+0x44>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <MX_RTC_Init+0x44>)
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_RTC_Init+0x44>)
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_RTC_Init+0x44>)
 8000934:	f001 fd06 	bl	8002344 <HAL_RTC_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800093e:	f7ff ffdb 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000098 	.word	0x20000098
 800094c:	40002800 	.word	0x40002800

08000950 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b088      	sub	sp, #32
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a0c      	ldr	r2, [pc, #48]	; (80009a0 <HAL_RTC_MspInit+0x50>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d111      	bne.n	8000996 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000972:	2302      	movs	r3, #2
 8000974:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000976:	f44f 7380 	mov.w	r3, #256	; 0x100
 800097a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	4618      	mov	r0, r3
 8000982:	f001 fbf1 	bl	8002168 <HAL_RCCEx_PeriphCLKConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800098c:	f7ff ffb4 	bl	80008f8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000990:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <HAL_RTC_MspInit+0x54>)
 8000992:	2201      	movs	r2, #1
 8000994:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000996:	bf00      	nop
 8000998:	3720      	adds	r7, #32
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40002800 	.word	0x40002800
 80009a4:	42470e3c 	.word	0x42470e3c

080009a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <HAL_MspInit+0x4c>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b6:	4a0f      	ldr	r2, [pc, #60]	; (80009f4 <HAL_MspInit+0x4c>)
 80009b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009bc:	6453      	str	r3, [r2, #68]	; 0x44
 80009be:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <HAL_MspInit+0x4c>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <HAL_MspInit+0x4c>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	4a08      	ldr	r2, [pc, #32]	; (80009f4 <HAL_MspInit+0x4c>)
 80009d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d8:	6413      	str	r3, [r2, #64]	; 0x40
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_MspInit+0x4c>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009e6:	2007      	movs	r0, #7
 80009e8:	f000 fcb4 	bl	8001354 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40023800 	.word	0x40023800

080009f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <NMI_Handler+0x4>

080009fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <HardFault_Handler+0x4>

08000a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <MemManage_Handler+0x4>

08000a0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <BusFault_Handler+0x4>

08000a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <UsageFault_Handler+0x4>

08000a16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a44:	f000 fb72 	bl	800112c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a50:	4802      	ldr	r0, [pc, #8]	; (8000a5c <TIM4_IRQHandler+0x10>)
 8000a52:	f002 f83d 	bl	8002ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000104 	.word	0x20000104

08000a60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a64:	4802      	ldr	r0, [pc, #8]	; (8000a70 <USART2_IRQHandler+0x10>)
 8000a66:	f003 f9ed 	bl	8003e44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	2000014c 	.word	0x2000014c

08000a74 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	e00a      	b.n	8000a9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a86:	f3af 8000 	nop.w
 8000a8a:	4601      	mov	r1, r0
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	1c5a      	adds	r2, r3, #1
 8000a90:	60ba      	str	r2, [r7, #8]
 8000a92:	b2ca      	uxtb	r2, r1
 8000a94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	617b      	str	r3, [r7, #20]
 8000a9c:	697a      	ldr	r2, [r7, #20]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	dbf0      	blt.n	8000a86 <_read+0x12>
  }

  return len;
 8000aa4:	687b      	ldr	r3, [r7, #4]
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3718      	adds	r7, #24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b086      	sub	sp, #24
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	60f8      	str	r0, [r7, #12]
 8000ab6:	60b9      	str	r1, [r7, #8]
 8000ab8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	e009      	b.n	8000ad4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	1c5a      	adds	r2, r3, #1
 8000ac4:	60ba      	str	r2, [r7, #8]
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fdc5 	bl	8000658 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	617b      	str	r3, [r7, #20]
 8000ad4:	697a      	ldr	r2, [r7, #20]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	dbf1      	blt.n	8000ac0 <_write+0x12>
  }
  return len;
 8000adc:	687b      	ldr	r3, [r7, #4]
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3718      	adds	r7, #24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <_close>:

int _close(int file)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000afe:	b480      	push	{r7}
 8000b00:	b083      	sub	sp, #12
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
 8000b06:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b0e:	605a      	str	r2, [r3, #4]
  return 0;
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <_isatty>:

int _isatty(int file)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	b083      	sub	sp, #12
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b26:	2301      	movs	r3, #1
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3714      	adds	r7, #20
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
	...

08000b50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b58:	4a14      	ldr	r2, [pc, #80]	; (8000bac <_sbrk+0x5c>)
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <_sbrk+0x60>)
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b64:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <_sbrk+0x64>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d102      	bne.n	8000b72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b6c:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <_sbrk+0x64>)
 8000b6e:	4a12      	ldr	r2, [pc, #72]	; (8000bb8 <_sbrk+0x68>)
 8000b70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <_sbrk+0x64>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d207      	bcs.n	8000b90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b80:	f004 f9fa 	bl	8004f78 <__errno>
 8000b84:	4603      	mov	r3, r0
 8000b86:	220c      	movs	r2, #12
 8000b88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8e:	e009      	b.n	8000ba4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <_sbrk+0x64>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b96:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <_sbrk+0x64>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	4a05      	ldr	r2, [pc, #20]	; (8000bb4 <_sbrk+0x64>)
 8000ba0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20018000 	.word	0x20018000
 8000bb0:	00000400 	.word	0x00000400
 8000bb4:	200000b8 	.word	0x200000b8
 8000bb8:	200002e0 	.word	0x200002e0

08000bbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <SystemInit+0x20>)
 8000bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc6:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <SystemInit+0x20>)
 8000bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08e      	sub	sp, #56	; 0x38
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf4:	f107 0320 	add.w	r3, r7, #32
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
 8000c0c:	615a      	str	r2, [r3, #20]
 8000c0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c10:	4b2d      	ldr	r3, [pc, #180]	; (8000cc8 <MX_TIM3_Init+0xe8>)
 8000c12:	4a2e      	ldr	r2, [pc, #184]	; (8000ccc <MX_TIM3_Init+0xec>)
 8000c14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8000c16:	4b2c      	ldr	r3, [pc, #176]	; (8000cc8 <MX_TIM3_Init+0xe8>)
 8000c18:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000c1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1e:	4b2a      	ldr	r3, [pc, #168]	; (8000cc8 <MX_TIM3_Init+0xe8>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000c24:	4b28      	ldr	r3, [pc, #160]	; (8000cc8 <MX_TIM3_Init+0xe8>)
 8000c26:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2c:	4b26      	ldr	r3, [pc, #152]	; (8000cc8 <MX_TIM3_Init+0xe8>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c32:	4b25      	ldr	r3, [pc, #148]	; (8000cc8 <MX_TIM3_Init+0xe8>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c38:	4823      	ldr	r0, [pc, #140]	; (8000cc8 <MX_TIM3_Init+0xe8>)
 8000c3a:	f001 fc7d 	bl	8002538 <HAL_TIM_Base_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000c44:	f7ff fe58 	bl	80008f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c52:	4619      	mov	r1, r3
 8000c54:	481c      	ldr	r0, [pc, #112]	; (8000cc8 <MX_TIM3_Init+0xe8>)
 8000c56:	f002 f9a1 	bl	8002f9c <HAL_TIM_ConfigClockSource>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000c60:	f7ff fe4a 	bl	80008f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c64:	4818      	ldr	r0, [pc, #96]	; (8000cc8 <MX_TIM3_Init+0xe8>)
 8000c66:	f001 fcb6 	bl	80025d6 <HAL_TIM_PWM_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000c70:	f7ff fe42 	bl	80008f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c74:	2300      	movs	r3, #0
 8000c76:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c7c:	f107 0320 	add.w	r3, r7, #32
 8000c80:	4619      	mov	r1, r3
 8000c82:	4811      	ldr	r0, [pc, #68]	; (8000cc8 <MX_TIM3_Init+0xe8>)
 8000c84:	f002 ff7c 	bl	8003b80 <HAL_TIMEx_MasterConfigSynchronization>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000c8e:	f7ff fe33 	bl	80008f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c92:	2360      	movs	r3, #96	; 0x60
 8000c94:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5000-1;
 8000c96:	f241 3387 	movw	r3, #4999	; 0x1387
 8000c9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4807      	ldr	r0, [pc, #28]	; (8000cc8 <MX_TIM3_Init+0xe8>)
 8000cac:	f002 f8b4 	bl	8002e18 <HAL_TIM_PWM_ConfigChannel>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000cb6:	f7ff fe1f 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cba:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <MX_TIM3_Init+0xe8>)
 8000cbc:	f000 f906 	bl	8000ecc <HAL_TIM_MspPostInit>

}
 8000cc0:	bf00      	nop
 8000cc2:	3738      	adds	r7, #56	; 0x38
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	200000bc 	.word	0x200000bc
 8000ccc:	40000400 	.word	0x40000400

08000cd0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b090      	sub	sp, #64	; 0x40
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ce4:	f107 031c 	add.w	r3, r7, #28
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d0a:	4b3b      	ldr	r3, [pc, #236]	; (8000df8 <MX_TIM4_Init+0x128>)
 8000d0c:	4a3b      	ldr	r2, [pc, #236]	; (8000dfc <MX_TIM4_Init+0x12c>)
 8000d0e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000d10:	4b39      	ldr	r3, [pc, #228]	; (8000df8 <MX_TIM4_Init+0x128>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d16:	4b38      	ldr	r3, [pc, #224]	; (8000df8 <MX_TIM4_Init+0x128>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000d1c:	4b36      	ldr	r3, [pc, #216]	; (8000df8 <MX_TIM4_Init+0x128>)
 8000d1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d22:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d24:	4b34      	ldr	r3, [pc, #208]	; (8000df8 <MX_TIM4_Init+0x128>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2a:	4b33      	ldr	r3, [pc, #204]	; (8000df8 <MX_TIM4_Init+0x128>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d30:	4831      	ldr	r0, [pc, #196]	; (8000df8 <MX_TIM4_Init+0x128>)
 8000d32:	f001 fc01 	bl	8002538 <HAL_TIM_Base_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000d3c:	f7ff fddc 	bl	80008f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d44:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	482a      	ldr	r0, [pc, #168]	; (8000df8 <MX_TIM4_Init+0x128>)
 8000d4e:	f002 f925 	bl	8002f9c <HAL_TIM_ConfigClockSource>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000d58:	f7ff fdce 	bl	80008f8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000d5c:	4826      	ldr	r0, [pc, #152]	; (8000df8 <MX_TIM4_Init+0x128>)
 8000d5e:	f001 fd43 	bl	80027e8 <HAL_TIM_IC_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000d68:	f7ff fdc6 	bl	80008f8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000d6c:	2304      	movs	r3, #4
 8000d6e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8000d70:	2360      	movs	r3, #96	; 0x60
 8000d72:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000d74:	2302      	movs	r3, #2
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000d7c:	f107 031c 	add.w	r3, r7, #28
 8000d80:	4619      	mov	r1, r3
 8000d82:	481d      	ldr	r0, [pc, #116]	; (8000df8 <MX_TIM4_Init+0x128>)
 8000d84:	f002 f9d1 	bl	800312a <HAL_TIM_SlaveConfigSynchro>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM4_Init+0xc2>
  {
    Error_Handler();
 8000d8e:	f7ff fdb3 	bl	80008f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4815      	ldr	r0, [pc, #84]	; (8000df8 <MX_TIM4_Init+0x128>)
 8000da2:	f002 feed 	bl	8003b80 <HAL_TIMEx_MasterConfigSynchronization>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8000dac:	f7ff fda4 	bl	80008f8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000db0:	2300      	movs	r3, #0
 8000db2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000db4:	2301      	movs	r3, #1
 8000db6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	480c      	ldr	r0, [pc, #48]	; (8000df8 <MX_TIM4_Init+0x128>)
 8000dc8:	f001 ff8a 	bl	8002ce0 <HAL_TIM_IC_ConfigChannel>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM4_Init+0x106>
  {
    Error_Handler();
 8000dd2:	f7ff fd91 	bl	80008f8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2204      	movs	r2, #4
 8000dde:	4619      	mov	r1, r3
 8000de0:	4805      	ldr	r0, [pc, #20]	; (8000df8 <MX_TIM4_Init+0x128>)
 8000de2:	f001 ff7d 	bl	8002ce0 <HAL_TIM_IC_ConfigChannel>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM4_Init+0x120>
  {
    Error_Handler();
 8000dec:	f7ff fd84 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000df0:	bf00      	nop
 8000df2:	3740      	adds	r7, #64	; 0x40
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000104 	.word	0x20000104
 8000dfc:	40000800 	.word	0x40000800

08000e00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	; 0x28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a27      	ldr	r2, [pc, #156]	; (8000ebc <HAL_TIM_Base_MspInit+0xbc>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d10e      	bne.n	8000e40 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	4b26      	ldr	r3, [pc, #152]	; (8000ec0 <HAL_TIM_Base_MspInit+0xc0>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	4a25      	ldr	r2, [pc, #148]	; (8000ec0 <HAL_TIM_Base_MspInit+0xc0>)
 8000e2c:	f043 0302 	orr.w	r3, r3, #2
 8000e30:	6413      	str	r3, [r2, #64]	; 0x40
 8000e32:	4b23      	ldr	r3, [pc, #140]	; (8000ec0 <HAL_TIM_Base_MspInit+0xc0>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000e3e:	e038      	b.n	8000eb2 <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM4)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a1f      	ldr	r2, [pc, #124]	; (8000ec4 <HAL_TIM_Base_MspInit+0xc4>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d133      	bne.n	8000eb2 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ec0 <HAL_TIM_Base_MspInit+0xc0>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	4a1b      	ldr	r2, [pc, #108]	; (8000ec0 <HAL_TIM_Base_MspInit+0xc0>)
 8000e54:	f043 0304 	orr.w	r3, r3, #4
 8000e58:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5a:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <HAL_TIM_Base_MspInit+0xc0>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	f003 0304 	and.w	r3, r3, #4
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_TIM_Base_MspInit+0xc0>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a14      	ldr	r2, [pc, #80]	; (8000ec0 <HAL_TIM_Base_MspInit+0xc0>)
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_TIM_Base_MspInit+0xc0>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e82:	23c0      	movs	r3, #192	; 0xc0
 8000e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e92:	2302      	movs	r3, #2
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	480a      	ldr	r0, [pc, #40]	; (8000ec8 <HAL_TIM_Base_MspInit+0xc8>)
 8000e9e:	f000 fb2d 	bl	80014fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	201e      	movs	r0, #30
 8000ea8:	f000 fa5f 	bl	800136a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000eac:	201e      	movs	r0, #30
 8000eae:	f000 fa78 	bl	80013a2 <HAL_NVIC_EnableIRQ>
}
 8000eb2:	bf00      	nop
 8000eb4:	3728      	adds	r7, #40	; 0x28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40000400 	.word	0x40000400
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40000800 	.word	0x40000800
 8000ec8:	40020400 	.word	0x40020400

08000ecc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b088      	sub	sp, #32
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 030c 	add.w	r3, r7, #12
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <HAL_TIM_MspPostInit+0x68>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d11d      	bne.n	8000f2a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <HAL_TIM_MspPostInit+0x6c>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a10      	ldr	r2, [pc, #64]	; (8000f38 <HAL_TIM_MspPostInit+0x6c>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <HAL_TIM_MspPostInit+0x6c>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f0a:	2340      	movs	r3, #64	; 0x40
 8000f0c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f107 030c 	add.w	r3, r7, #12
 8000f22:	4619      	mov	r1, r3
 8000f24:	4805      	ldr	r0, [pc, #20]	; (8000f3c <HAL_TIM_MspPostInit+0x70>)
 8000f26:	f000 fae9 	bl	80014fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f2a:	bf00      	nop
 8000f2c:	3720      	adds	r7, #32
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40000400 	.word	0x40000400
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40020000 	.word	0x40020000

08000f40 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f46:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <MX_USART2_UART_Init+0x50>)
 8000f48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f66:	220c      	movs	r2, #12
 8000f68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f78:	f002 fe84 	bl	8003c84 <HAL_UART_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f82:	f7ff fcb9 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	2000014c 	.word	0x2000014c
 8000f90:	40004400 	.word	0x40004400

08000f94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a1d      	ldr	r2, [pc, #116]	; (8001028 <HAL_UART_MspInit+0x94>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d133      	bne.n	800101e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	4b1c      	ldr	r3, [pc, #112]	; (800102c <HAL_UART_MspInit+0x98>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	4a1b      	ldr	r2, [pc, #108]	; (800102c <HAL_UART_MspInit+0x98>)
 8000fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc6:	4b19      	ldr	r3, [pc, #100]	; (800102c <HAL_UART_MspInit+0x98>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <HAL_UART_MspInit+0x98>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a14      	ldr	r2, [pc, #80]	; (800102c <HAL_UART_MspInit+0x98>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_UART_MspInit+0x98>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fee:	230c      	movs	r3, #12
 8000ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ffe:	2307      	movs	r3, #7
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4619      	mov	r1, r3
 8001008:	4809      	ldr	r0, [pc, #36]	; (8001030 <HAL_UART_MspInit+0x9c>)
 800100a:	f000 fa77 	bl	80014fc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2100      	movs	r1, #0
 8001012:	2026      	movs	r0, #38	; 0x26
 8001014:	f000 f9a9 	bl	800136a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001018:	2026      	movs	r0, #38	; 0x26
 800101a:	f000 f9c2 	bl	80013a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800101e:	bf00      	nop
 8001020:	3728      	adds	r7, #40	; 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40004400 	.word	0x40004400
 800102c:	40023800 	.word	0x40023800
 8001030:	40020000 	.word	0x40020000

08001034 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001034:	f8df d034 	ldr.w	sp, [pc, #52]	; 800106c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001038:	480d      	ldr	r0, [pc, #52]	; (8001070 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800103a:	490e      	ldr	r1, [pc, #56]	; (8001074 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800103c:	4a0e      	ldr	r2, [pc, #56]	; (8001078 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001040:	e002      	b.n	8001048 <LoopCopyDataInit>

08001042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001046:	3304      	adds	r3, #4

08001048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800104c:	d3f9      	bcc.n	8001042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104e:	4a0b      	ldr	r2, [pc, #44]	; (800107c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001050:	4c0b      	ldr	r4, [pc, #44]	; (8001080 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001054:	e001      	b.n	800105a <LoopFillZerobss>

08001056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001058:	3204      	adds	r2, #4

0800105a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800105c:	d3fb      	bcc.n	8001056 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800105e:	f7ff fdad 	bl	8000bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001062:	f003 ff8f 	bl	8004f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001066:	f7ff fb6b 	bl	8000740 <main>
  bx  lr    
 800106a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800106c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001070:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001074:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001078:	08005bb4 	.word	0x08005bb4
  ldr r2, =_sbss
 800107c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001080:	200002e0 	.word	0x200002e0

08001084 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001084:	e7fe      	b.n	8001084 <ADC_IRQHandler>
	...

08001088 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800108c:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <HAL_Init+0x40>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0d      	ldr	r2, [pc, #52]	; (80010c8 <HAL_Init+0x40>)
 8001092:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001096:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001098:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <HAL_Init+0x40>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <HAL_Init+0x40>)
 800109e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <HAL_Init+0x40>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a07      	ldr	r2, [pc, #28]	; (80010c8 <HAL_Init+0x40>)
 80010aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b0:	2003      	movs	r0, #3
 80010b2:	f000 f94f 	bl	8001354 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010b6:	2000      	movs	r0, #0
 80010b8:	f000 f808 	bl	80010cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010bc:	f7ff fc74 	bl	80009a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40023c00 	.word	0x40023c00

080010cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010d4:	4b12      	ldr	r3, [pc, #72]	; (8001120 <HAL_InitTick+0x54>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <HAL_InitTick+0x58>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	4619      	mov	r1, r3
 80010de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 f967 	bl	80013be <HAL_SYSTICK_Config>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e00e      	b.n	8001118 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2b0f      	cmp	r3, #15
 80010fe:	d80a      	bhi.n	8001116 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001100:	2200      	movs	r2, #0
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	f04f 30ff 	mov.w	r0, #4294967295
 8001108:	f000 f92f 	bl	800136a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800110c:	4a06      	ldr	r2, [pc, #24]	; (8001128 <HAL_InitTick+0x5c>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001112:	2300      	movs	r3, #0
 8001114:	e000      	b.n	8001118 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
}
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000004 	.word	0x20000004
 8001124:	2000000c 	.word	0x2000000c
 8001128:	20000008 	.word	0x20000008

0800112c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <HAL_IncTick+0x20>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_IncTick+0x24>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4413      	add	r3, r2
 800113c:	4a04      	ldr	r2, [pc, #16]	; (8001150 <HAL_IncTick+0x24>)
 800113e:	6013      	str	r3, [r2, #0]
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	2000000c 	.word	0x2000000c
 8001150:	20000190 	.word	0x20000190

08001154 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return uwTick;
 8001158:	4b03      	ldr	r3, [pc, #12]	; (8001168 <HAL_GetTick+0x14>)
 800115a:	681b      	ldr	r3, [r3, #0]
}
 800115c:	4618      	mov	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	20000190 	.word	0x20000190

0800116c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001174:	f7ff ffee 	bl	8001154 <HAL_GetTick>
 8001178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001184:	d005      	beq.n	8001192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001186:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <HAL_Delay+0x44>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	461a      	mov	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4413      	add	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001192:	bf00      	nop
 8001194:	f7ff ffde 	bl	8001154 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d8f7      	bhi.n	8001194 <HAL_Delay+0x28>
  {
  }
}
 80011a4:	bf00      	nop
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	2000000c 	.word	0x2000000c

080011b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011d0:	4013      	ands	r3, r2
 80011d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e6:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	60d3      	str	r3, [r2, #12]
}
 80011ec:	bf00      	nop
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001200:	4b04      	ldr	r3, [pc, #16]	; (8001214 <__NVIC_GetPriorityGrouping+0x18>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	0a1b      	lsrs	r3, r3, #8
 8001206:	f003 0307 	and.w	r3, r3, #7
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	2b00      	cmp	r3, #0
 8001228:	db0b      	blt.n	8001242 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	f003 021f 	and.w	r2, r3, #31
 8001230:	4907      	ldr	r1, [pc, #28]	; (8001250 <__NVIC_EnableIRQ+0x38>)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	095b      	lsrs	r3, r3, #5
 8001238:	2001      	movs	r0, #1
 800123a:	fa00 f202 	lsl.w	r2, r0, r2
 800123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000e100 	.word	0xe000e100

08001254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	6039      	str	r1, [r7, #0]
 800125e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001264:	2b00      	cmp	r3, #0
 8001266:	db0a      	blt.n	800127e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	b2da      	uxtb	r2, r3
 800126c:	490c      	ldr	r1, [pc, #48]	; (80012a0 <__NVIC_SetPriority+0x4c>)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	0112      	lsls	r2, r2, #4
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	440b      	add	r3, r1
 8001278:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800127c:	e00a      	b.n	8001294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4908      	ldr	r1, [pc, #32]	; (80012a4 <__NVIC_SetPriority+0x50>)
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	f003 030f 	and.w	r3, r3, #15
 800128a:	3b04      	subs	r3, #4
 800128c:	0112      	lsls	r2, r2, #4
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	440b      	add	r3, r1
 8001292:	761a      	strb	r2, [r3, #24]
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000e100 	.word	0xe000e100
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b089      	sub	sp, #36	; 0x24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f1c3 0307 	rsb	r3, r3, #7
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	bf28      	it	cs
 80012c6:	2304      	movcs	r3, #4
 80012c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3304      	adds	r3, #4
 80012ce:	2b06      	cmp	r3, #6
 80012d0:	d902      	bls.n	80012d8 <NVIC_EncodePriority+0x30>
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3b03      	subs	r3, #3
 80012d6:	e000      	b.n	80012da <NVIC_EncodePriority+0x32>
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	f04f 32ff 	mov.w	r2, #4294967295
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43da      	mvns	r2, r3
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	401a      	ands	r2, r3
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f0:	f04f 31ff 	mov.w	r1, #4294967295
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	fa01 f303 	lsl.w	r3, r1, r3
 80012fa:	43d9      	mvns	r1, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001300:	4313      	orrs	r3, r2
         );
}
 8001302:	4618      	mov	r0, r3
 8001304:	3724      	adds	r7, #36	; 0x24
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3b01      	subs	r3, #1
 800131c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001320:	d301      	bcc.n	8001326 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001322:	2301      	movs	r3, #1
 8001324:	e00f      	b.n	8001346 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001326:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <SysTick_Config+0x40>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3b01      	subs	r3, #1
 800132c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800132e:	210f      	movs	r1, #15
 8001330:	f04f 30ff 	mov.w	r0, #4294967295
 8001334:	f7ff ff8e 	bl	8001254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001338:	4b05      	ldr	r3, [pc, #20]	; (8001350 <SysTick_Config+0x40>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133e:	4b04      	ldr	r3, [pc, #16]	; (8001350 <SysTick_Config+0x40>)
 8001340:	2207      	movs	r2, #7
 8001342:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	e000e010 	.word	0xe000e010

08001354 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff ff29 	bl	80011b4 <__NVIC_SetPriorityGrouping>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800136a:	b580      	push	{r7, lr}
 800136c:	b086      	sub	sp, #24
 800136e:	af00      	add	r7, sp, #0
 8001370:	4603      	mov	r3, r0
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
 8001376:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800137c:	f7ff ff3e 	bl	80011fc <__NVIC_GetPriorityGrouping>
 8001380:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	68b9      	ldr	r1, [r7, #8]
 8001386:	6978      	ldr	r0, [r7, #20]
 8001388:	f7ff ff8e 	bl	80012a8 <NVIC_EncodePriority>
 800138c:	4602      	mov	r2, r0
 800138e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001392:	4611      	mov	r1, r2
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff5d 	bl	8001254 <__NVIC_SetPriority>
}
 800139a:	bf00      	nop
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	4603      	mov	r3, r0
 80013aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff31 	bl	8001218 <__NVIC_EnableIRQ>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff ffa2 	bl	8001310 <SysTick_Config>
 80013cc:	4603      	mov	r3, r0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b084      	sub	sp, #16
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013e4:	f7ff feb6 	bl	8001154 <HAL_GetTick>
 80013e8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d008      	beq.n	8001408 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2280      	movs	r2, #128	; 0x80
 80013fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e052      	b.n	80014ae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f022 0216 	bic.w	r2, r2, #22
 8001416:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	695a      	ldr	r2, [r3, #20]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001426:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	2b00      	cmp	r3, #0
 800142e:	d103      	bne.n	8001438 <HAL_DMA_Abort+0x62>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001434:	2b00      	cmp	r3, #0
 8001436:	d007      	beq.n	8001448 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 0208 	bic.w	r2, r2, #8
 8001446:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 0201 	bic.w	r2, r2, #1
 8001456:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001458:	e013      	b.n	8001482 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800145a:	f7ff fe7b 	bl	8001154 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b05      	cmp	r3, #5
 8001466:	d90c      	bls.n	8001482 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2220      	movs	r2, #32
 800146c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2203      	movs	r2, #3
 8001472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e015      	b.n	80014ae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1e4      	bne.n	800145a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001494:	223f      	movs	r2, #63	; 0x3f
 8001496:	409a      	lsls	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d004      	beq.n	80014d4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2280      	movs	r2, #128	; 0x80
 80014ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e00c      	b.n	80014ee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2205      	movs	r2, #5
 80014d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 0201 	bic.w	r2, r2, #1
 80014ea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
	...

080014fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	; 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800150e:	2300      	movs	r3, #0
 8001510:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
 8001516:	e159      	b.n	80017cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001518:	2201      	movs	r2, #1
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	429a      	cmp	r2, r3
 8001532:	f040 8148 	bne.w	80017c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 0303 	and.w	r3, r3, #3
 800153e:	2b01      	cmp	r3, #1
 8001540:	d005      	beq.n	800154e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800154a:	2b02      	cmp	r3, #2
 800154c:	d130      	bne.n	80015b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	2203      	movs	r2, #3
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	68da      	ldr	r2, [r3, #12]
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001584:	2201      	movs	r2, #1
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	091b      	lsrs	r3, r3, #4
 800159a:	f003 0201 	and.w	r2, r3, #1
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0303 	and.w	r3, r3, #3
 80015b8:	2b03      	cmp	r3, #3
 80015ba:	d017      	beq.n	80015ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	2203      	movs	r2, #3
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d123      	bne.n	8001640 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	08da      	lsrs	r2, r3, #3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3208      	adds	r2, #8
 8001600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001604:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	220f      	movs	r2, #15
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	691a      	ldr	r2, [r3, #16]
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	08da      	lsrs	r2, r3, #3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3208      	adds	r2, #8
 800163a:	69b9      	ldr	r1, [r7, #24]
 800163c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	2203      	movs	r2, #3
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 0203 	and.w	r2, r3, #3
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 80a2 	beq.w	80017c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	4b57      	ldr	r3, [pc, #348]	; (80017e4 <HAL_GPIO_Init+0x2e8>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	4a56      	ldr	r2, [pc, #344]	; (80017e4 <HAL_GPIO_Init+0x2e8>)
 800168c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001690:	6453      	str	r3, [r2, #68]	; 0x44
 8001692:	4b54      	ldr	r3, [pc, #336]	; (80017e4 <HAL_GPIO_Init+0x2e8>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800169e:	4a52      	ldr	r2, [pc, #328]	; (80017e8 <HAL_GPIO_Init+0x2ec>)
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	089b      	lsrs	r3, r3, #2
 80016a4:	3302      	adds	r3, #2
 80016a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	220f      	movs	r2, #15
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4013      	ands	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a49      	ldr	r2, [pc, #292]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d019      	beq.n	80016fe <HAL_GPIO_Init+0x202>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a48      	ldr	r2, [pc, #288]	; (80017f0 <HAL_GPIO_Init+0x2f4>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d013      	beq.n	80016fa <HAL_GPIO_Init+0x1fe>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a47      	ldr	r2, [pc, #284]	; (80017f4 <HAL_GPIO_Init+0x2f8>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d00d      	beq.n	80016f6 <HAL_GPIO_Init+0x1fa>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a46      	ldr	r2, [pc, #280]	; (80017f8 <HAL_GPIO_Init+0x2fc>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d007      	beq.n	80016f2 <HAL_GPIO_Init+0x1f6>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a45      	ldr	r2, [pc, #276]	; (80017fc <HAL_GPIO_Init+0x300>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d101      	bne.n	80016ee <HAL_GPIO_Init+0x1f2>
 80016ea:	2304      	movs	r3, #4
 80016ec:	e008      	b.n	8001700 <HAL_GPIO_Init+0x204>
 80016ee:	2307      	movs	r3, #7
 80016f0:	e006      	b.n	8001700 <HAL_GPIO_Init+0x204>
 80016f2:	2303      	movs	r3, #3
 80016f4:	e004      	b.n	8001700 <HAL_GPIO_Init+0x204>
 80016f6:	2302      	movs	r3, #2
 80016f8:	e002      	b.n	8001700 <HAL_GPIO_Init+0x204>
 80016fa:	2301      	movs	r3, #1
 80016fc:	e000      	b.n	8001700 <HAL_GPIO_Init+0x204>
 80016fe:	2300      	movs	r3, #0
 8001700:	69fa      	ldr	r2, [r7, #28]
 8001702:	f002 0203 	and.w	r2, r2, #3
 8001706:	0092      	lsls	r2, r2, #2
 8001708:	4093      	lsls	r3, r2
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4313      	orrs	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001710:	4935      	ldr	r1, [pc, #212]	; (80017e8 <HAL_GPIO_Init+0x2ec>)
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	089b      	lsrs	r3, r3, #2
 8001716:	3302      	adds	r3, #2
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800171e:	4b38      	ldr	r3, [pc, #224]	; (8001800 <HAL_GPIO_Init+0x304>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	43db      	mvns	r3, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4013      	ands	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	4313      	orrs	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001742:	4a2f      	ldr	r2, [pc, #188]	; (8001800 <HAL_GPIO_Init+0x304>)
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001748:	4b2d      	ldr	r3, [pc, #180]	; (8001800 <HAL_GPIO_Init+0x304>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d003      	beq.n	800176c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800176c:	4a24      	ldr	r2, [pc, #144]	; (8001800 <HAL_GPIO_Init+0x304>)
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001772:	4b23      	ldr	r3, [pc, #140]	; (8001800 <HAL_GPIO_Init+0x304>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	43db      	mvns	r3, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4013      	ands	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001796:	4a1a      	ldr	r2, [pc, #104]	; (8001800 <HAL_GPIO_Init+0x304>)
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800179c:	4b18      	ldr	r3, [pc, #96]	; (8001800 <HAL_GPIO_Init+0x304>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	43db      	mvns	r3, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4013      	ands	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	4313      	orrs	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017c0:	4a0f      	ldr	r2, [pc, #60]	; (8001800 <HAL_GPIO_Init+0x304>)
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3301      	adds	r3, #1
 80017ca:	61fb      	str	r3, [r7, #28]
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	2b0f      	cmp	r3, #15
 80017d0:	f67f aea2 	bls.w	8001518 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017d4:	bf00      	nop
 80017d6:	bf00      	nop
 80017d8:	3724      	adds	r7, #36	; 0x24
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40013800 	.word	0x40013800
 80017ec:	40020000 	.word	0x40020000
 80017f0:	40020400 	.word	0x40020400
 80017f4:	40020800 	.word	0x40020800
 80017f8:	40020c00 	.word	0x40020c00
 80017fc:	40021000 	.word	0x40021000
 8001800:	40013c00 	.word	0x40013c00

08001804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	807b      	strh	r3, [r7, #2]
 8001810:	4613      	mov	r3, r2
 8001812:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001814:	787b      	ldrb	r3, [r7, #1]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800181a:	887a      	ldrh	r2, [r7, #2]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001820:	e003      	b.n	800182a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001822:	887b      	ldrh	r3, [r7, #2]
 8001824:	041a      	lsls	r2, r3, #16
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	619a      	str	r2, [r3, #24]
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e267      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d075      	beq.n	8001942 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001856:	4b88      	ldr	r3, [pc, #544]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 030c 	and.w	r3, r3, #12
 800185e:	2b04      	cmp	r3, #4
 8001860:	d00c      	beq.n	800187c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001862:	4b85      	ldr	r3, [pc, #532]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800186a:	2b08      	cmp	r3, #8
 800186c:	d112      	bne.n	8001894 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800186e:	4b82      	ldr	r3, [pc, #520]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001876:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800187a:	d10b      	bne.n	8001894 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800187c:	4b7e      	ldr	r3, [pc, #504]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d05b      	beq.n	8001940 <HAL_RCC_OscConfig+0x108>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d157      	bne.n	8001940 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e242      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800189c:	d106      	bne.n	80018ac <HAL_RCC_OscConfig+0x74>
 800189e:	4b76      	ldr	r3, [pc, #472]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a75      	ldr	r2, [pc, #468]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80018a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	e01d      	b.n	80018e8 <HAL_RCC_OscConfig+0xb0>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018b4:	d10c      	bne.n	80018d0 <HAL_RCC_OscConfig+0x98>
 80018b6:	4b70      	ldr	r3, [pc, #448]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a6f      	ldr	r2, [pc, #444]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80018bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	4b6d      	ldr	r3, [pc, #436]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a6c      	ldr	r2, [pc, #432]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80018c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	e00b      	b.n	80018e8 <HAL_RCC_OscConfig+0xb0>
 80018d0:	4b69      	ldr	r3, [pc, #420]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a68      	ldr	r2, [pc, #416]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80018d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018da:	6013      	str	r3, [r2, #0]
 80018dc:	4b66      	ldr	r3, [pc, #408]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a65      	ldr	r2, [pc, #404]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80018e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d013      	beq.n	8001918 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f0:	f7ff fc30 	bl	8001154 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f8:	f7ff fc2c 	bl	8001154 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b64      	cmp	r3, #100	; 0x64
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e207      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190a:	4b5b      	ldr	r3, [pc, #364]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d0f0      	beq.n	80018f8 <HAL_RCC_OscConfig+0xc0>
 8001916:	e014      	b.n	8001942 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001918:	f7ff fc1c 	bl	8001154 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001920:	f7ff fc18 	bl	8001154 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b64      	cmp	r3, #100	; 0x64
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e1f3      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001932:	4b51      	ldr	r3, [pc, #324]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1f0      	bne.n	8001920 <HAL_RCC_OscConfig+0xe8>
 800193e:	e000      	b.n	8001942 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d063      	beq.n	8001a16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800194e:	4b4a      	ldr	r3, [pc, #296]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 030c 	and.w	r3, r3, #12
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00b      	beq.n	8001972 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800195a:	4b47      	ldr	r3, [pc, #284]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001962:	2b08      	cmp	r3, #8
 8001964:	d11c      	bne.n	80019a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001966:	4b44      	ldr	r3, [pc, #272]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d116      	bne.n	80019a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001972:	4b41      	ldr	r3, [pc, #260]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d005      	beq.n	800198a <HAL_RCC_OscConfig+0x152>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d001      	beq.n	800198a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e1c7      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198a:	4b3b      	ldr	r3, [pc, #236]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	4937      	ldr	r1, [pc, #220]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 800199a:	4313      	orrs	r3, r2
 800199c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199e:	e03a      	b.n	8001a16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d020      	beq.n	80019ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a8:	4b34      	ldr	r3, [pc, #208]	; (8001a7c <HAL_RCC_OscConfig+0x244>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ae:	f7ff fbd1 	bl	8001154 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019b6:	f7ff fbcd 	bl	8001154 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e1a8      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c8:	4b2b      	ldr	r3, [pc, #172]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0f0      	beq.n	80019b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d4:	4b28      	ldr	r3, [pc, #160]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	4925      	ldr	r1, [pc, #148]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	600b      	str	r3, [r1, #0]
 80019e8:	e015      	b.n	8001a16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ea:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <HAL_RCC_OscConfig+0x244>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f0:	f7ff fbb0 	bl	8001154 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019f8:	f7ff fbac 	bl	8001154 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e187      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0a:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d036      	beq.n	8001a90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d016      	beq.n	8001a58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <HAL_RCC_OscConfig+0x248>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a30:	f7ff fb90 	bl	8001154 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a38:	f7ff fb8c 	bl	8001154 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e167      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 8001a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0f0      	beq.n	8001a38 <HAL_RCC_OscConfig+0x200>
 8001a56:	e01b      	b.n	8001a90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a58:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <HAL_RCC_OscConfig+0x248>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5e:	f7ff fb79 	bl	8001154 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a64:	e00e      	b.n	8001a84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a66:	f7ff fb75 	bl	8001154 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d907      	bls.n	8001a84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e150      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	42470000 	.word	0x42470000
 8001a80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a84:	4b88      	ldr	r3, [pc, #544]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1ea      	bne.n	8001a66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 8097 	beq.w	8001bcc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aa2:	4b81      	ldr	r3, [pc, #516]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10f      	bne.n	8001ace <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	4b7d      	ldr	r3, [pc, #500]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	4a7c      	ldr	r2, [pc, #496]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001abc:	6413      	str	r3, [r2, #64]	; 0x40
 8001abe:	4b7a      	ldr	r3, [pc, #488]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aca:	2301      	movs	r3, #1
 8001acc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ace:	4b77      	ldr	r3, [pc, #476]	; (8001cac <HAL_RCC_OscConfig+0x474>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d118      	bne.n	8001b0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ada:	4b74      	ldr	r3, [pc, #464]	; (8001cac <HAL_RCC_OscConfig+0x474>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a73      	ldr	r2, [pc, #460]	; (8001cac <HAL_RCC_OscConfig+0x474>)
 8001ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ae6:	f7ff fb35 	bl	8001154 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aee:	f7ff fb31 	bl	8001154 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e10c      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b00:	4b6a      	ldr	r3, [pc, #424]	; (8001cac <HAL_RCC_OscConfig+0x474>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0f0      	beq.n	8001aee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d106      	bne.n	8001b22 <HAL_RCC_OscConfig+0x2ea>
 8001b14:	4b64      	ldr	r3, [pc, #400]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b18:	4a63      	ldr	r2, [pc, #396]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b20:	e01c      	b.n	8001b5c <HAL_RCC_OscConfig+0x324>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2b05      	cmp	r3, #5
 8001b28:	d10c      	bne.n	8001b44 <HAL_RCC_OscConfig+0x30c>
 8001b2a:	4b5f      	ldr	r3, [pc, #380]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2e:	4a5e      	ldr	r2, [pc, #376]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001b30:	f043 0304 	orr.w	r3, r3, #4
 8001b34:	6713      	str	r3, [r2, #112]	; 0x70
 8001b36:	4b5c      	ldr	r3, [pc, #368]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3a:	4a5b      	ldr	r2, [pc, #364]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6713      	str	r3, [r2, #112]	; 0x70
 8001b42:	e00b      	b.n	8001b5c <HAL_RCC_OscConfig+0x324>
 8001b44:	4b58      	ldr	r3, [pc, #352]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b48:	4a57      	ldr	r2, [pc, #348]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001b4a:	f023 0301 	bic.w	r3, r3, #1
 8001b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b50:	4b55      	ldr	r3, [pc, #340]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b54:	4a54      	ldr	r2, [pc, #336]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001b56:	f023 0304 	bic.w	r3, r3, #4
 8001b5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d015      	beq.n	8001b90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b64:	f7ff faf6 	bl	8001154 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6a:	e00a      	b.n	8001b82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b6c:	f7ff faf2 	bl	8001154 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e0cb      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b82:	4b49      	ldr	r3, [pc, #292]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0ee      	beq.n	8001b6c <HAL_RCC_OscConfig+0x334>
 8001b8e:	e014      	b.n	8001bba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b90:	f7ff fae0 	bl	8001154 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b96:	e00a      	b.n	8001bae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b98:	f7ff fadc 	bl	8001154 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e0b5      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bae:	4b3e      	ldr	r3, [pc, #248]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1ee      	bne.n	8001b98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bba:	7dfb      	ldrb	r3, [r7, #23]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d105      	bne.n	8001bcc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc0:	4b39      	ldr	r3, [pc, #228]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc4:	4a38      	ldr	r2, [pc, #224]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001bc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 80a1 	beq.w	8001d18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bd6:	4b34      	ldr	r3, [pc, #208]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b08      	cmp	r3, #8
 8001be0:	d05c      	beq.n	8001c9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d141      	bne.n	8001c6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bea:	4b31      	ldr	r3, [pc, #196]	; (8001cb0 <HAL_RCC_OscConfig+0x478>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf0:	f7ff fab0 	bl	8001154 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf8:	f7ff faac 	bl	8001154 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e087      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c0a:	4b27      	ldr	r3, [pc, #156]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69da      	ldr	r2, [r3, #28]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	019b      	lsls	r3, r3, #6
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2c:	085b      	lsrs	r3, r3, #1
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	041b      	lsls	r3, r3, #16
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c38:	061b      	lsls	r3, r3, #24
 8001c3a:	491b      	ldr	r1, [pc, #108]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c40:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <HAL_RCC_OscConfig+0x478>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c46:	f7ff fa85 	bl	8001154 <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c4e:	f7ff fa81 	bl	8001154 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e05c      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c60:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0f0      	beq.n	8001c4e <HAL_RCC_OscConfig+0x416>
 8001c6c:	e054      	b.n	8001d18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <HAL_RCC_OscConfig+0x478>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c74:	f7ff fa6e 	bl	8001154 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c7c:	f7ff fa6a 	bl	8001154 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e045      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f0      	bne.n	8001c7c <HAL_RCC_OscConfig+0x444>
 8001c9a:	e03d      	b.n	8001d18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d107      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e038      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40007000 	.word	0x40007000
 8001cb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cb4:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <HAL_RCC_OscConfig+0x4ec>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d028      	beq.n	8001d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d121      	bne.n	8001d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d11a      	bne.n	8001d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d111      	bne.n	8001d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfa:	085b      	lsrs	r3, r3, #1
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d107      	bne.n	8001d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d001      	beq.n	8001d18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e000      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40023800 	.word	0x40023800

08001d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0cc      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d3c:	4b68      	ldr	r3, [pc, #416]	; (8001ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d90c      	bls.n	8001d64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4a:	4b65      	ldr	r3, [pc, #404]	; (8001ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d52:	4b63      	ldr	r3, [pc, #396]	; (8001ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d001      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0b8      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d020      	beq.n	8001db2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d7c:	4b59      	ldr	r3, [pc, #356]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	4a58      	ldr	r2, [pc, #352]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0308 	and.w	r3, r3, #8
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d005      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d94:	4b53      	ldr	r3, [pc, #332]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	4a52      	ldr	r2, [pc, #328]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da0:	4b50      	ldr	r3, [pc, #320]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	494d      	ldr	r1, [pc, #308]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d044      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d107      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc6:	4b47      	ldr	r3, [pc, #284]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d119      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e07f      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d003      	beq.n	8001de6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d107      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de6:	4b3f      	ldr	r3, [pc, #252]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d109      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e06f      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df6:	4b3b      	ldr	r3, [pc, #236]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e067      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e06:	4b37      	ldr	r3, [pc, #220]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f023 0203 	bic.w	r2, r3, #3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	4934      	ldr	r1, [pc, #208]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e18:	f7ff f99c 	bl	8001154 <HAL_GetTick>
 8001e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1e:	e00a      	b.n	8001e36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e20:	f7ff f998 	bl	8001154 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e04f      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e36:	4b2b      	ldr	r3, [pc, #172]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 020c 	and.w	r2, r3, #12
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d1eb      	bne.n	8001e20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e48:	4b25      	ldr	r3, [pc, #148]	; (8001ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d20c      	bcs.n	8001e70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e56:	4b22      	ldr	r3, [pc, #136]	; (8001ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5e:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d001      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e032      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d008      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e7c:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	4916      	ldr	r1, [pc, #88]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d009      	beq.n	8001eae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e9a:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	490e      	ldr	r1, [pc, #56]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001eae:	f000 f821 	bl	8001ef4 <HAL_RCC_GetSysClockFreq>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	091b      	lsrs	r3, r3, #4
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	490a      	ldr	r1, [pc, #40]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec0:	5ccb      	ldrb	r3, [r1, r3]
 8001ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec6:	4a09      	ldr	r2, [pc, #36]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff f8fc 	bl	80010cc <HAL_InitTick>

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40023c00 	.word	0x40023c00
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	08005b58 	.word	0x08005b58
 8001eec:	20000004 	.word	0x20000004
 8001ef0:	20000008 	.word	0x20000008

08001ef4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ef8:	b094      	sub	sp, #80	; 0x50
 8001efa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	647b      	str	r3, [r7, #68]	; 0x44
 8001f00:	2300      	movs	r3, #0
 8001f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f04:	2300      	movs	r3, #0
 8001f06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f0c:	4b79      	ldr	r3, [pc, #484]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 030c 	and.w	r3, r3, #12
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d00d      	beq.n	8001f34 <HAL_RCC_GetSysClockFreq+0x40>
 8001f18:	2b08      	cmp	r3, #8
 8001f1a:	f200 80e1 	bhi.w	80020e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d002      	beq.n	8001f28 <HAL_RCC_GetSysClockFreq+0x34>
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d003      	beq.n	8001f2e <HAL_RCC_GetSysClockFreq+0x3a>
 8001f26:	e0db      	b.n	80020e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f28:	4b73      	ldr	r3, [pc, #460]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f2a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001f2c:	e0db      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f2e:	4b73      	ldr	r3, [pc, #460]	; (80020fc <HAL_RCC_GetSysClockFreq+0x208>)
 8001f30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f32:	e0d8      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f34:	4b6f      	ldr	r3, [pc, #444]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f3c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f3e:	4b6d      	ldr	r3, [pc, #436]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d063      	beq.n	8002012 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f4a:	4b6a      	ldr	r3, [pc, #424]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	099b      	lsrs	r3, r3, #6
 8001f50:	2200      	movs	r2, #0
 8001f52:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f5c:	633b      	str	r3, [r7, #48]	; 0x30
 8001f5e:	2300      	movs	r3, #0
 8001f60:	637b      	str	r3, [r7, #52]	; 0x34
 8001f62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f66:	4622      	mov	r2, r4
 8001f68:	462b      	mov	r3, r5
 8001f6a:	f04f 0000 	mov.w	r0, #0
 8001f6e:	f04f 0100 	mov.w	r1, #0
 8001f72:	0159      	lsls	r1, r3, #5
 8001f74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f78:	0150      	lsls	r0, r2, #5
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4621      	mov	r1, r4
 8001f80:	1a51      	subs	r1, r2, r1
 8001f82:	6139      	str	r1, [r7, #16]
 8001f84:	4629      	mov	r1, r5
 8001f86:	eb63 0301 	sbc.w	r3, r3, r1
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f98:	4659      	mov	r1, fp
 8001f9a:	018b      	lsls	r3, r1, #6
 8001f9c:	4651      	mov	r1, sl
 8001f9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fa2:	4651      	mov	r1, sl
 8001fa4:	018a      	lsls	r2, r1, #6
 8001fa6:	4651      	mov	r1, sl
 8001fa8:	ebb2 0801 	subs.w	r8, r2, r1
 8001fac:	4659      	mov	r1, fp
 8001fae:	eb63 0901 	sbc.w	r9, r3, r1
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fc6:	4690      	mov	r8, r2
 8001fc8:	4699      	mov	r9, r3
 8001fca:	4623      	mov	r3, r4
 8001fcc:	eb18 0303 	adds.w	r3, r8, r3
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	462b      	mov	r3, r5
 8001fd4:	eb49 0303 	adc.w	r3, r9, r3
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	f04f 0300 	mov.w	r3, #0
 8001fe2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001fe6:	4629      	mov	r1, r5
 8001fe8:	024b      	lsls	r3, r1, #9
 8001fea:	4621      	mov	r1, r4
 8001fec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ff0:	4621      	mov	r1, r4
 8001ff2:	024a      	lsls	r2, r1, #9
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ffe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002000:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002004:	f7fe f93c 	bl	8000280 <__aeabi_uldivmod>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4613      	mov	r3, r2
 800200e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002010:	e058      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002012:	4b38      	ldr	r3, [pc, #224]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	099b      	lsrs	r3, r3, #6
 8002018:	2200      	movs	r2, #0
 800201a:	4618      	mov	r0, r3
 800201c:	4611      	mov	r1, r2
 800201e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002022:	623b      	str	r3, [r7, #32]
 8002024:	2300      	movs	r3, #0
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
 8002028:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800202c:	4642      	mov	r2, r8
 800202e:	464b      	mov	r3, r9
 8002030:	f04f 0000 	mov.w	r0, #0
 8002034:	f04f 0100 	mov.w	r1, #0
 8002038:	0159      	lsls	r1, r3, #5
 800203a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800203e:	0150      	lsls	r0, r2, #5
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4641      	mov	r1, r8
 8002046:	ebb2 0a01 	subs.w	sl, r2, r1
 800204a:	4649      	mov	r1, r9
 800204c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	f04f 0300 	mov.w	r3, #0
 8002058:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800205c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002060:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002064:	ebb2 040a 	subs.w	r4, r2, sl
 8002068:	eb63 050b 	sbc.w	r5, r3, fp
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	f04f 0300 	mov.w	r3, #0
 8002074:	00eb      	lsls	r3, r5, #3
 8002076:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800207a:	00e2      	lsls	r2, r4, #3
 800207c:	4614      	mov	r4, r2
 800207e:	461d      	mov	r5, r3
 8002080:	4643      	mov	r3, r8
 8002082:	18e3      	adds	r3, r4, r3
 8002084:	603b      	str	r3, [r7, #0]
 8002086:	464b      	mov	r3, r9
 8002088:	eb45 0303 	adc.w	r3, r5, r3
 800208c:	607b      	str	r3, [r7, #4]
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	f04f 0300 	mov.w	r3, #0
 8002096:	e9d7 4500 	ldrd	r4, r5, [r7]
 800209a:	4629      	mov	r1, r5
 800209c:	028b      	lsls	r3, r1, #10
 800209e:	4621      	mov	r1, r4
 80020a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020a4:	4621      	mov	r1, r4
 80020a6:	028a      	lsls	r2, r1, #10
 80020a8:	4610      	mov	r0, r2
 80020aa:	4619      	mov	r1, r3
 80020ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ae:	2200      	movs	r2, #0
 80020b0:	61bb      	str	r3, [r7, #24]
 80020b2:	61fa      	str	r2, [r7, #28]
 80020b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020b8:	f7fe f8e2 	bl	8000280 <__aeabi_uldivmod>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4613      	mov	r3, r2
 80020c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	0c1b      	lsrs	r3, r3, #16
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	3301      	adds	r3, #1
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80020d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80020d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020de:	e002      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020e0:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80020e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3750      	adds	r7, #80	; 0x50
 80020ec:	46bd      	mov	sp, r7
 80020ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800
 80020f8:	00f42400 	.word	0x00f42400
 80020fc:	007a1200 	.word	0x007a1200

08002100 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002104:	4b03      	ldr	r3, [pc, #12]	; (8002114 <HAL_RCC_GetHCLKFreq+0x14>)
 8002106:	681b      	ldr	r3, [r3, #0]
}
 8002108:	4618      	mov	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	20000004 	.word	0x20000004

08002118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800211c:	f7ff fff0 	bl	8002100 <HAL_RCC_GetHCLKFreq>
 8002120:	4602      	mov	r2, r0
 8002122:	4b05      	ldr	r3, [pc, #20]	; (8002138 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	0a9b      	lsrs	r3, r3, #10
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	4903      	ldr	r1, [pc, #12]	; (800213c <HAL_RCC_GetPCLK1Freq+0x24>)
 800212e:	5ccb      	ldrb	r3, [r1, r3]
 8002130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002134:	4618      	mov	r0, r3
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40023800 	.word	0x40023800
 800213c:	08005b68 	.word	0x08005b68

08002140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002144:	f7ff ffdc 	bl	8002100 <HAL_RCC_GetHCLKFreq>
 8002148:	4602      	mov	r2, r0
 800214a:	4b05      	ldr	r3, [pc, #20]	; (8002160 <HAL_RCC_GetPCLK2Freq+0x20>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	0b5b      	lsrs	r3, r3, #13
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	4903      	ldr	r1, [pc, #12]	; (8002164 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002156:	5ccb      	ldrb	r3, [r1, r3]
 8002158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800215c:	4618      	mov	r0, r3
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40023800 	.word	0x40023800
 8002164:	08005b68 	.word	0x08005b68

08002168 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002174:	2300      	movs	r3, #0
 8002176:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b00      	cmp	r3, #0
 8002182:	d105      	bne.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800218c:	2b00      	cmp	r3, #0
 800218e:	d035      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002190:	4b67      	ldr	r3, [pc, #412]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002196:	f7fe ffdd 	bl	8001154 <HAL_GetTick>
 800219a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800219c:	e008      	b.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800219e:	f7fe ffd9 	bl	8001154 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e0ba      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021b0:	4b60      	ldr	r3, [pc, #384]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1f0      	bne.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	019a      	lsls	r2, r3, #6
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	071b      	lsls	r3, r3, #28
 80021c8:	495a      	ldr	r1, [pc, #360]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80021d0:	4b57      	ldr	r3, [pc, #348]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80021d6:	f7fe ffbd 	bl	8001154 <HAL_GetTick>
 80021da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021dc:	e008      	b.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80021de:	f7fe ffb9 	bl	8001154 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e09a      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021f0:	4b50      	ldr	r3, [pc, #320]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0f0      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 8083 	beq.w	8002310 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	4b49      	ldr	r3, [pc, #292]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	4a48      	ldr	r2, [pc, #288]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002218:	6413      	str	r3, [r2, #64]	; 0x40
 800221a:	4b46      	ldr	r3, [pc, #280]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002226:	4b44      	ldr	r3, [pc, #272]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a43      	ldr	r2, [pc, #268]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800222c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002230:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002232:	f7fe ff8f 	bl	8001154 <HAL_GetTick>
 8002236:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002238:	e008      	b.n	800224c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800223a:	f7fe ff8b 	bl	8001154 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e06c      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800224c:	4b3a      	ldr	r3, [pc, #232]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0f0      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002258:	4b36      	ldr	r3, [pc, #216]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800225a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002260:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d02f      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	429a      	cmp	r2, r3
 8002274:	d028      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002276:	4b2f      	ldr	r3, [pc, #188]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800227e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002280:	4b2e      	ldr	r3, [pc, #184]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002282:	2201      	movs	r2, #1
 8002284:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002286:	4b2d      	ldr	r3, [pc, #180]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800228c:	4a29      	ldr	r2, [pc, #164]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002292:	4b28      	ldr	r3, [pc, #160]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b01      	cmp	r3, #1
 800229c:	d114      	bne.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800229e:	f7fe ff59 	bl	8001154 <HAL_GetTick>
 80022a2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a4:	e00a      	b.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022a6:	f7fe ff55 	bl	8001154 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d901      	bls.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e034      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022bc:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80022be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0ee      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022d4:	d10d      	bne.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80022d6:	4b17      	ldr	r3, [pc, #92]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80022e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022ea:	4912      	ldr	r1, [pc, #72]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	608b      	str	r3, [r1, #8]
 80022f0:	e005      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x196>
 80022f2:	4b10      	ldr	r3, [pc, #64]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	4a0f      	ldr	r2, [pc, #60]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80022f8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80022fc:	6093      	str	r3, [r2, #8]
 80022fe:	4b0d      	ldr	r3, [pc, #52]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002300:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800230a:	490a      	ldr	r1, [pc, #40]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800230c:	4313      	orrs	r3, r2
 800230e:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0308 	and.w	r3, r3, #8
 8002318:	2b00      	cmp	r3, #0
 800231a:	d003      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	7c1a      	ldrb	r2, [r3, #16]
 8002320:	4b07      	ldr	r3, [pc, #28]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002322:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	42470068 	.word	0x42470068
 8002334:	40023800 	.word	0x40023800
 8002338:	40007000 	.word	0x40007000
 800233c:	42470e40 	.word	0x42470e40
 8002340:	424711e0 	.word	0x424711e0

08002344 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e066      	b.n	8002428 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	7f5b      	ldrb	r3, [r3, #29]
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	d105      	bne.n	8002370 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7fe faf0 	bl	8000950 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	22ca      	movs	r2, #202	; 0xca
 800237c:	625a      	str	r2, [r3, #36]	; 0x24
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2253      	movs	r2, #83	; 0x53
 8002384:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f87a 	bl	8002480 <RTC_EnterInitMode>
 800238c:	4603      	mov	r3, r0
 800238e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002390:	7bfb      	ldrb	r3, [r7, #15]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d12c      	bne.n	80023f0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80023a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023a8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6899      	ldr	r1, [r3, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	431a      	orrs	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	68d2      	ldr	r2, [r2, #12]
 80023d0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6919      	ldr	r1, [r3, #16]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	041a      	lsls	r2, r3, #16
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f881 	bl	80024ee <RTC_ExitInitMode>
 80023ec:	4603      	mov	r3, r0
 80023ee:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d113      	bne.n	800241e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002404:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	699a      	ldr	r2, [r3, #24]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	22ff      	movs	r2, #255	; 0xff
 8002424:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002426:	7bfb      	ldrb	r3, [r7, #15]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800244a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800244c:	f7fe fe82 	bl	8001154 <HAL_GetTick>
 8002450:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002452:	e009      	b.n	8002468 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002454:	f7fe fe7e 	bl	8001154 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002462:	d901      	bls.n	8002468 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e007      	b.n	8002478 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	f003 0320 	and.w	r3, r3, #32
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0ee      	beq.n	8002454 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249a:	2b00      	cmp	r3, #0
 800249c:	d122      	bne.n	80024e4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024ac:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024ae:	f7fe fe51 	bl	8001154 <HAL_GetTick>
 80024b2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80024b4:	e00c      	b.n	80024d0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80024b6:	f7fe fe4d 	bl	8001154 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024c4:	d904      	bls.n	80024d0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2204      	movs	r2, #4
 80024ca:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d102      	bne.n	80024e4 <RTC_EnterInitMode+0x64>
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d1e8      	bne.n	80024b6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b084      	sub	sp, #16
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024f6:	2300      	movs	r3, #0
 80024f8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002508:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 0320 	and.w	r3, r3, #32
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10a      	bne.n	800252e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7ff ff89 	bl	8002430 <HAL_RTC_WaitForSynchro>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d004      	beq.n	800252e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2204      	movs	r2, #4
 8002528:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800252e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e041      	b.n	80025ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d106      	bne.n	8002564 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7fe fc4e 	bl	8000e00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3304      	adds	r3, #4
 8002574:	4619      	mov	r1, r3
 8002576:	4610      	mov	r0, r2
 8002578:	f000 fe86 	bl	8003288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e041      	b.n	800266c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d106      	bne.n	8002602 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f839 	bl	8002674 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2202      	movs	r2, #2
 8002606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3304      	adds	r3, #4
 8002612:	4619      	mov	r1, r3
 8002614:	4610      	mov	r0, r2
 8002616:	f000 fe37 	bl	8003288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d109      	bne.n	80026ac <HAL_TIM_PWM_Start+0x24>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	bf14      	ite	ne
 80026a4:	2301      	movne	r3, #1
 80026a6:	2300      	moveq	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	e022      	b.n	80026f2 <HAL_TIM_PWM_Start+0x6a>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d109      	bne.n	80026c6 <HAL_TIM_PWM_Start+0x3e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	bf14      	ite	ne
 80026be:	2301      	movne	r3, #1
 80026c0:	2300      	moveq	r3, #0
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	e015      	b.n	80026f2 <HAL_TIM_PWM_Start+0x6a>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d109      	bne.n	80026e0 <HAL_TIM_PWM_Start+0x58>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	bf14      	ite	ne
 80026d8:	2301      	movne	r3, #1
 80026da:	2300      	moveq	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	e008      	b.n	80026f2 <HAL_TIM_PWM_Start+0x6a>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	bf14      	ite	ne
 80026ec:	2301      	movne	r3, #1
 80026ee:	2300      	moveq	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e068      	b.n	80027cc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d104      	bne.n	800270a <HAL_TIM_PWM_Start+0x82>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002708:	e013      	b.n	8002732 <HAL_TIM_PWM_Start+0xaa>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b04      	cmp	r3, #4
 800270e:	d104      	bne.n	800271a <HAL_TIM_PWM_Start+0x92>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002718:	e00b      	b.n	8002732 <HAL_TIM_PWM_Start+0xaa>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	2b08      	cmp	r3, #8
 800271e:	d104      	bne.n	800272a <HAL_TIM_PWM_Start+0xa2>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2202      	movs	r2, #2
 8002724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002728:	e003      	b.n	8002732 <HAL_TIM_PWM_Start+0xaa>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2202      	movs	r2, #2
 800272e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2201      	movs	r2, #1
 8002738:	6839      	ldr	r1, [r7, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f001 f9fa 	bl	8003b34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a23      	ldr	r2, [pc, #140]	; (80027d4 <HAL_TIM_PWM_Start+0x14c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d107      	bne.n	800275a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002758:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a1d      	ldr	r2, [pc, #116]	; (80027d4 <HAL_TIM_PWM_Start+0x14c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d018      	beq.n	8002796 <HAL_TIM_PWM_Start+0x10e>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800276c:	d013      	beq.n	8002796 <HAL_TIM_PWM_Start+0x10e>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a19      	ldr	r2, [pc, #100]	; (80027d8 <HAL_TIM_PWM_Start+0x150>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d00e      	beq.n	8002796 <HAL_TIM_PWM_Start+0x10e>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a17      	ldr	r2, [pc, #92]	; (80027dc <HAL_TIM_PWM_Start+0x154>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d009      	beq.n	8002796 <HAL_TIM_PWM_Start+0x10e>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a16      	ldr	r2, [pc, #88]	; (80027e0 <HAL_TIM_PWM_Start+0x158>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d004      	beq.n	8002796 <HAL_TIM_PWM_Start+0x10e>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a14      	ldr	r2, [pc, #80]	; (80027e4 <HAL_TIM_PWM_Start+0x15c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d111      	bne.n	80027ba <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2b06      	cmp	r3, #6
 80027a6:	d010      	beq.n	80027ca <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027b8:	e007      	b.n	80027ca <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f042 0201 	orr.w	r2, r2, #1
 80027c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40010000 	.word	0x40010000
 80027d8:	40000400 	.word	0x40000400
 80027dc:	40000800 	.word	0x40000800
 80027e0:	40000c00 	.word	0x40000c00
 80027e4:	40014000 	.word	0x40014000

080027e8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e041      	b.n	800287e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d106      	bne.n	8002814 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f839 	bl	8002886 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3304      	adds	r3, #4
 8002824:	4619      	mov	r1, r3
 8002826:	4610      	mov	r0, r2
 8002828:	f000 fd2e 	bl	8003288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028a6:	2300      	movs	r3, #0
 80028a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d104      	bne.n	80028ba <HAL_TIM_IC_Start_IT+0x1e>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	e013      	b.n	80028e2 <HAL_TIM_IC_Start_IT+0x46>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d104      	bne.n	80028ca <HAL_TIM_IC_Start_IT+0x2e>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	e00b      	b.n	80028e2 <HAL_TIM_IC_Start_IT+0x46>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d104      	bne.n	80028da <HAL_TIM_IC_Start_IT+0x3e>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	e003      	b.n	80028e2 <HAL_TIM_IC_Start_IT+0x46>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d104      	bne.n	80028f4 <HAL_TIM_IC_Start_IT+0x58>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	e013      	b.n	800291c <HAL_TIM_IC_Start_IT+0x80>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	d104      	bne.n	8002904 <HAL_TIM_IC_Start_IT+0x68>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002900:	b2db      	uxtb	r3, r3
 8002902:	e00b      	b.n	800291c <HAL_TIM_IC_Start_IT+0x80>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	2b08      	cmp	r3, #8
 8002908:	d104      	bne.n	8002914 <HAL_TIM_IC_Start_IT+0x78>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002910:	b2db      	uxtb	r3, r3
 8002912:	e003      	b.n	800291c <HAL_TIM_IC_Start_IT+0x80>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800291a:	b2db      	uxtb	r3, r3
 800291c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800291e:	7bbb      	ldrb	r3, [r7, #14]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d102      	bne.n	800292a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002924:	7b7b      	ldrb	r3, [r7, #13]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d001      	beq.n	800292e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e0c2      	b.n	8002ab4 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d104      	bne.n	800293e <HAL_TIM_IC_Start_IT+0xa2>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800293c:	e013      	b.n	8002966 <HAL_TIM_IC_Start_IT+0xca>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2b04      	cmp	r3, #4
 8002942:	d104      	bne.n	800294e <HAL_TIM_IC_Start_IT+0xb2>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800294c:	e00b      	b.n	8002966 <HAL_TIM_IC_Start_IT+0xca>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2b08      	cmp	r3, #8
 8002952:	d104      	bne.n	800295e <HAL_TIM_IC_Start_IT+0xc2>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800295c:	e003      	b.n	8002966 <HAL_TIM_IC_Start_IT+0xca>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2202      	movs	r2, #2
 8002962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d104      	bne.n	8002976 <HAL_TIM_IC_Start_IT+0xda>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002974:	e013      	b.n	800299e <HAL_TIM_IC_Start_IT+0x102>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2b04      	cmp	r3, #4
 800297a:	d104      	bne.n	8002986 <HAL_TIM_IC_Start_IT+0xea>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002984:	e00b      	b.n	800299e <HAL_TIM_IC_Start_IT+0x102>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	2b08      	cmp	r3, #8
 800298a:	d104      	bne.n	8002996 <HAL_TIM_IC_Start_IT+0xfa>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002994:	e003      	b.n	800299e <HAL_TIM_IC_Start_IT+0x102>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2202      	movs	r2, #2
 800299a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b0c      	cmp	r3, #12
 80029a2:	d841      	bhi.n	8002a28 <HAL_TIM_IC_Start_IT+0x18c>
 80029a4:	a201      	add	r2, pc, #4	; (adr r2, 80029ac <HAL_TIM_IC_Start_IT+0x110>)
 80029a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029aa:	bf00      	nop
 80029ac:	080029e1 	.word	0x080029e1
 80029b0:	08002a29 	.word	0x08002a29
 80029b4:	08002a29 	.word	0x08002a29
 80029b8:	08002a29 	.word	0x08002a29
 80029bc:	080029f3 	.word	0x080029f3
 80029c0:	08002a29 	.word	0x08002a29
 80029c4:	08002a29 	.word	0x08002a29
 80029c8:	08002a29 	.word	0x08002a29
 80029cc:	08002a05 	.word	0x08002a05
 80029d0:	08002a29 	.word	0x08002a29
 80029d4:	08002a29 	.word	0x08002a29
 80029d8:	08002a29 	.word	0x08002a29
 80029dc:	08002a17 	.word	0x08002a17
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 0202 	orr.w	r2, r2, #2
 80029ee:	60da      	str	r2, [r3, #12]
      break;
 80029f0:	e01d      	b.n	8002a2e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f042 0204 	orr.w	r2, r2, #4
 8002a00:	60da      	str	r2, [r3, #12]
      break;
 8002a02:	e014      	b.n	8002a2e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0208 	orr.w	r2, r2, #8
 8002a12:	60da      	str	r2, [r3, #12]
      break;
 8002a14:	e00b      	b.n	8002a2e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68da      	ldr	r2, [r3, #12]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0210 	orr.w	r2, r2, #16
 8002a24:	60da      	str	r2, [r3, #12]
      break;
 8002a26:	e002      	b.n	8002a2e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a2c:	bf00      	nop
  }

  if (status == HAL_OK)
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d13e      	bne.n	8002ab2 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	6839      	ldr	r1, [r7, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f001 f879 	bl	8003b34 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a1d      	ldr	r2, [pc, #116]	; (8002abc <HAL_TIM_IC_Start_IT+0x220>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d018      	beq.n	8002a7e <HAL_TIM_IC_Start_IT+0x1e2>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a54:	d013      	beq.n	8002a7e <HAL_TIM_IC_Start_IT+0x1e2>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a19      	ldr	r2, [pc, #100]	; (8002ac0 <HAL_TIM_IC_Start_IT+0x224>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d00e      	beq.n	8002a7e <HAL_TIM_IC_Start_IT+0x1e2>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a17      	ldr	r2, [pc, #92]	; (8002ac4 <HAL_TIM_IC_Start_IT+0x228>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d009      	beq.n	8002a7e <HAL_TIM_IC_Start_IT+0x1e2>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a16      	ldr	r2, [pc, #88]	; (8002ac8 <HAL_TIM_IC_Start_IT+0x22c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d004      	beq.n	8002a7e <HAL_TIM_IC_Start_IT+0x1e2>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a14      	ldr	r2, [pc, #80]	; (8002acc <HAL_TIM_IC_Start_IT+0x230>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d111      	bne.n	8002aa2 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2b06      	cmp	r3, #6
 8002a8e:	d010      	beq.n	8002ab2 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0201 	orr.w	r2, r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa0:	e007      	b.n	8002ab2 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f042 0201 	orr.w	r2, r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40010000 	.word	0x40010000
 8002ac0:	40000400 	.word	0x40000400
 8002ac4:	40000800 	.word	0x40000800
 8002ac8:	40000c00 	.word	0x40000c00
 8002acc:	40014000 	.word	0x40014000

08002ad0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d122      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d11b      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f06f 0202 	mvn.w	r2, #2
 8002afc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7fd fdb2 	bl	800067c <HAL_TIM_IC_CaptureCallback>
 8002b18:	e005      	b.n	8002b26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 fb96 	bl	800324c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 fb9d 	bl	8003260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d122      	bne.n	8002b80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d11b      	bne.n	8002b80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f06f 0204 	mvn.w	r2, #4
 8002b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2202      	movs	r2, #2
 8002b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7fd fd88 	bl	800067c <HAL_TIM_IC_CaptureCallback>
 8002b6c:	e005      	b.n	8002b7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 fb6c 	bl	800324c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 fb73 	bl	8003260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d122      	bne.n	8002bd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d11b      	bne.n	8002bd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f06f 0208 	mvn.w	r2, #8
 8002ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2204      	movs	r2, #4
 8002baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7fd fd5e 	bl	800067c <HAL_TIM_IC_CaptureCallback>
 8002bc0:	e005      	b.n	8002bce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 fb42 	bl	800324c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 fb49 	bl	8003260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	f003 0310 	and.w	r3, r3, #16
 8002bde:	2b10      	cmp	r3, #16
 8002be0:	d122      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f003 0310 	and.w	r3, r3, #16
 8002bec:	2b10      	cmp	r3, #16
 8002bee:	d11b      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f06f 0210 	mvn.w	r2, #16
 8002bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2208      	movs	r2, #8
 8002bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7fd fd34 	bl	800067c <HAL_TIM_IC_CaptureCallback>
 8002c14:	e005      	b.n	8002c22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 fb18 	bl	800324c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 fb1f 	bl	8003260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d10e      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d107      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f06f 0201 	mvn.w	r2, #1
 8002c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 faf2 	bl	8003238 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5e:	2b80      	cmp	r3, #128	; 0x80
 8002c60:	d10e      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6c:	2b80      	cmp	r3, #128	; 0x80
 8002c6e:	d107      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 fff8 	bl	8003c70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8a:	2b40      	cmp	r3, #64	; 0x40
 8002c8c:	d10e      	bne.n	8002cac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c98:	2b40      	cmp	r3, #64	; 0x40
 8002c9a:	d107      	bne.n	8002cac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 fae4 	bl	8003274 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	f003 0320 	and.w	r3, r3, #32
 8002cb6:	2b20      	cmp	r3, #32
 8002cb8:	d10e      	bne.n	8002cd8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f003 0320 	and.w	r3, r3, #32
 8002cc4:	2b20      	cmp	r3, #32
 8002cc6:	d107      	bne.n	8002cd8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f06f 0220 	mvn.w	r2, #32
 8002cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 ffc2 	bl	8003c5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cd8:	bf00      	nop
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cec:	2300      	movs	r3, #0
 8002cee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d101      	bne.n	8002cfe <HAL_TIM_IC_ConfigChannel+0x1e>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e088      	b.n	8002e10 <HAL_TIM_IC_ConfigChannel+0x130>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d11b      	bne.n	8002d44 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6818      	ldr	r0, [r3, #0]
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	6819      	ldr	r1, [r3, #0]
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f000 fd52 	bl	80037c4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699a      	ldr	r2, [r3, #24]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 020c 	bic.w	r2, r2, #12
 8002d2e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6999      	ldr	r1, [r3, #24]
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	619a      	str	r2, [r3, #24]
 8002d42:	e060      	b.n	8002e06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d11c      	bne.n	8002d84 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6818      	ldr	r0, [r3, #0]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	6819      	ldr	r1, [r3, #0]
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f000 fdca 	bl	80038f2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	699a      	ldr	r2, [r3, #24]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002d6c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6999      	ldr	r1, [r3, #24]
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	021a      	lsls	r2, r3, #8
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	619a      	str	r2, [r3, #24]
 8002d82:	e040      	b.n	8002e06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b08      	cmp	r3, #8
 8002d88:	d11b      	bne.n	8002dc2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6818      	ldr	r0, [r3, #0]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	6819      	ldr	r1, [r3, #0]
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	f000 fe17 	bl	80039cc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	69da      	ldr	r2, [r3, #28]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 020c 	bic.w	r2, r2, #12
 8002dac:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	69d9      	ldr	r1, [r3, #28]
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	61da      	str	r2, [r3, #28]
 8002dc0:	e021      	b.n	8002e06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b0c      	cmp	r3, #12
 8002dc6:	d11c      	bne.n	8002e02 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	6819      	ldr	r1, [r3, #0]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f000 fe34 	bl	8003a44 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	69da      	ldr	r2, [r3, #28]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002dea:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	69d9      	ldr	r1, [r3, #28]
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	021a      	lsls	r2, r3, #8
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	61da      	str	r2, [r3, #28]
 8002e00:	e001      	b.n	8002e06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e0ae      	b.n	8002f94 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b0c      	cmp	r3, #12
 8002e42:	f200 809f 	bhi.w	8002f84 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e46:	a201      	add	r2, pc, #4	; (adr r2, 8002e4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4c:	08002e81 	.word	0x08002e81
 8002e50:	08002f85 	.word	0x08002f85
 8002e54:	08002f85 	.word	0x08002f85
 8002e58:	08002f85 	.word	0x08002f85
 8002e5c:	08002ec1 	.word	0x08002ec1
 8002e60:	08002f85 	.word	0x08002f85
 8002e64:	08002f85 	.word	0x08002f85
 8002e68:	08002f85 	.word	0x08002f85
 8002e6c:	08002f03 	.word	0x08002f03
 8002e70:	08002f85 	.word	0x08002f85
 8002e74:	08002f85 	.word	0x08002f85
 8002e78:	08002f85 	.word	0x08002f85
 8002e7c:	08002f43 	.word	0x08002f43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68b9      	ldr	r1, [r7, #8]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 fa7e 	bl	8003388 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699a      	ldr	r2, [r3, #24]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0208 	orr.w	r2, r2, #8
 8002e9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699a      	ldr	r2, [r3, #24]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0204 	bic.w	r2, r2, #4
 8002eaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6999      	ldr	r1, [r3, #24]
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	691a      	ldr	r2, [r3, #16]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	619a      	str	r2, [r3, #24]
      break;
 8002ebe:	e064      	b.n	8002f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68b9      	ldr	r1, [r7, #8]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 fac4 	bl	8003454 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699a      	ldr	r2, [r3, #24]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699a      	ldr	r2, [r3, #24]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6999      	ldr	r1, [r3, #24]
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	021a      	lsls	r2, r3, #8
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	619a      	str	r2, [r3, #24]
      break;
 8002f00:	e043      	b.n	8002f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68b9      	ldr	r1, [r7, #8]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 fb0f 	bl	800352c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	69da      	ldr	r2, [r3, #28]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f042 0208 	orr.w	r2, r2, #8
 8002f1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	69da      	ldr	r2, [r3, #28]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0204 	bic.w	r2, r2, #4
 8002f2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	69d9      	ldr	r1, [r3, #28]
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	691a      	ldr	r2, [r3, #16]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	61da      	str	r2, [r3, #28]
      break;
 8002f40:	e023      	b.n	8002f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68b9      	ldr	r1, [r7, #8]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 fb59 	bl	8003600 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	69da      	ldr	r2, [r3, #28]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	69da      	ldr	r2, [r3, #28]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	69d9      	ldr	r1, [r3, #28]
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	021a      	lsls	r2, r3, #8
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	61da      	str	r2, [r3, #28]
      break;
 8002f82:	e002      	b.n	8002f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	75fb      	strb	r3, [r7, #23]
      break;
 8002f88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_TIM_ConfigClockSource+0x1c>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e0b4      	b.n	8003122 <HAL_TIM_ConfigClockSource+0x186>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ff0:	d03e      	beq.n	8003070 <HAL_TIM_ConfigClockSource+0xd4>
 8002ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ff6:	f200 8087 	bhi.w	8003108 <HAL_TIM_ConfigClockSource+0x16c>
 8002ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ffe:	f000 8086 	beq.w	800310e <HAL_TIM_ConfigClockSource+0x172>
 8003002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003006:	d87f      	bhi.n	8003108 <HAL_TIM_ConfigClockSource+0x16c>
 8003008:	2b70      	cmp	r3, #112	; 0x70
 800300a:	d01a      	beq.n	8003042 <HAL_TIM_ConfigClockSource+0xa6>
 800300c:	2b70      	cmp	r3, #112	; 0x70
 800300e:	d87b      	bhi.n	8003108 <HAL_TIM_ConfigClockSource+0x16c>
 8003010:	2b60      	cmp	r3, #96	; 0x60
 8003012:	d050      	beq.n	80030b6 <HAL_TIM_ConfigClockSource+0x11a>
 8003014:	2b60      	cmp	r3, #96	; 0x60
 8003016:	d877      	bhi.n	8003108 <HAL_TIM_ConfigClockSource+0x16c>
 8003018:	2b50      	cmp	r3, #80	; 0x50
 800301a:	d03c      	beq.n	8003096 <HAL_TIM_ConfigClockSource+0xfa>
 800301c:	2b50      	cmp	r3, #80	; 0x50
 800301e:	d873      	bhi.n	8003108 <HAL_TIM_ConfigClockSource+0x16c>
 8003020:	2b40      	cmp	r3, #64	; 0x40
 8003022:	d058      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0x13a>
 8003024:	2b40      	cmp	r3, #64	; 0x40
 8003026:	d86f      	bhi.n	8003108 <HAL_TIM_ConfigClockSource+0x16c>
 8003028:	2b30      	cmp	r3, #48	; 0x30
 800302a:	d064      	beq.n	80030f6 <HAL_TIM_ConfigClockSource+0x15a>
 800302c:	2b30      	cmp	r3, #48	; 0x30
 800302e:	d86b      	bhi.n	8003108 <HAL_TIM_ConfigClockSource+0x16c>
 8003030:	2b20      	cmp	r3, #32
 8003032:	d060      	beq.n	80030f6 <HAL_TIM_ConfigClockSource+0x15a>
 8003034:	2b20      	cmp	r3, #32
 8003036:	d867      	bhi.n	8003108 <HAL_TIM_ConfigClockSource+0x16c>
 8003038:	2b00      	cmp	r3, #0
 800303a:	d05c      	beq.n	80030f6 <HAL_TIM_ConfigClockSource+0x15a>
 800303c:	2b10      	cmp	r3, #16
 800303e:	d05a      	beq.n	80030f6 <HAL_TIM_ConfigClockSource+0x15a>
 8003040:	e062      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	6899      	ldr	r1, [r3, #8]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f000 fd4f 	bl	8003af4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003064:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	609a      	str	r2, [r3, #8]
      break;
 800306e:	e04f      	b.n	8003110 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	6899      	ldr	r1, [r3, #8]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	f000 fd38 	bl	8003af4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003092:	609a      	str	r2, [r3, #8]
      break;
 8003094:	e03c      	b.n	8003110 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6818      	ldr	r0, [r3, #0]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	6859      	ldr	r1, [r3, #4]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	461a      	mov	r2, r3
 80030a4:	f000 fbf6 	bl	8003894 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2150      	movs	r1, #80	; 0x50
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 fd05 	bl	8003abe <TIM_ITRx_SetConfig>
      break;
 80030b4:	e02c      	b.n	8003110 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6818      	ldr	r0, [r3, #0]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	6859      	ldr	r1, [r3, #4]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	461a      	mov	r2, r3
 80030c4:	f000 fc52 	bl	800396c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2160      	movs	r1, #96	; 0x60
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 fcf5 	bl	8003abe <TIM_ITRx_SetConfig>
      break;
 80030d4:	e01c      	b.n	8003110 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	6859      	ldr	r1, [r3, #4]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	461a      	mov	r2, r3
 80030e4:	f000 fbd6 	bl	8003894 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2140      	movs	r1, #64	; 0x40
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 fce5 	bl	8003abe <TIM_ITRx_SetConfig>
      break;
 80030f4:	e00c      	b.n	8003110 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4619      	mov	r1, r3
 8003100:	4610      	mov	r0, r2
 8003102:	f000 fcdc 	bl	8003abe <TIM_ITRx_SetConfig>
      break;
 8003106:	e003      	b.n	8003110 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	73fb      	strb	r3, [r7, #15]
      break;
 800310c:	e000      	b.n	8003110 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800310e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003120:	7bfb      	ldrb	r3, [r7, #15]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b082      	sub	sp, #8
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
 8003132:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800313a:	2b01      	cmp	r3, #1
 800313c:	d101      	bne.n	8003142 <HAL_TIM_SlaveConfigSynchro+0x18>
 800313e:	2302      	movs	r3, #2
 8003140:	e031      	b.n	80031a6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2202      	movs	r2, #2
 800314e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003152:	6839      	ldr	r1, [r7, #0]
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 faa3 	bl	80036a0 <TIM_SlaveTimer_SetConfig>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d009      	beq.n	8003174 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e018      	b.n	80031a6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003182:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003192:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b0c      	cmp	r3, #12
 80031c2:	d831      	bhi.n	8003228 <HAL_TIM_ReadCapturedValue+0x78>
 80031c4:	a201      	add	r2, pc, #4	; (adr r2, 80031cc <HAL_TIM_ReadCapturedValue+0x1c>)
 80031c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ca:	bf00      	nop
 80031cc:	08003201 	.word	0x08003201
 80031d0:	08003229 	.word	0x08003229
 80031d4:	08003229 	.word	0x08003229
 80031d8:	08003229 	.word	0x08003229
 80031dc:	0800320b 	.word	0x0800320b
 80031e0:	08003229 	.word	0x08003229
 80031e4:	08003229 	.word	0x08003229
 80031e8:	08003229 	.word	0x08003229
 80031ec:	08003215 	.word	0x08003215
 80031f0:	08003229 	.word	0x08003229
 80031f4:	08003229 	.word	0x08003229
 80031f8:	08003229 	.word	0x08003229
 80031fc:	0800321f 	.word	0x0800321f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003206:	60fb      	str	r3, [r7, #12]

      break;
 8003208:	e00f      	b.n	800322a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003210:	60fb      	str	r3, [r7, #12]

      break;
 8003212:	e00a      	b.n	800322a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321a:	60fb      	str	r3, [r7, #12]

      break;
 800321c:	e005      	b.n	800322a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	60fb      	str	r3, [r7, #12]

      break;
 8003226:	e000      	b.n	800322a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003228:	bf00      	nop
  }

  return tmpreg;
 800322a:	68fb      	ldr	r3, [r7, #12]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a34      	ldr	r2, [pc, #208]	; (800336c <TIM_Base_SetConfig+0xe4>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d00f      	beq.n	80032c0 <TIM_Base_SetConfig+0x38>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a6:	d00b      	beq.n	80032c0 <TIM_Base_SetConfig+0x38>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a31      	ldr	r2, [pc, #196]	; (8003370 <TIM_Base_SetConfig+0xe8>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d007      	beq.n	80032c0 <TIM_Base_SetConfig+0x38>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a30      	ldr	r2, [pc, #192]	; (8003374 <TIM_Base_SetConfig+0xec>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d003      	beq.n	80032c0 <TIM_Base_SetConfig+0x38>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a2f      	ldr	r2, [pc, #188]	; (8003378 <TIM_Base_SetConfig+0xf0>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d108      	bne.n	80032d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a25      	ldr	r2, [pc, #148]	; (800336c <TIM_Base_SetConfig+0xe4>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d01b      	beq.n	8003312 <TIM_Base_SetConfig+0x8a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e0:	d017      	beq.n	8003312 <TIM_Base_SetConfig+0x8a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a22      	ldr	r2, [pc, #136]	; (8003370 <TIM_Base_SetConfig+0xe8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d013      	beq.n	8003312 <TIM_Base_SetConfig+0x8a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a21      	ldr	r2, [pc, #132]	; (8003374 <TIM_Base_SetConfig+0xec>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00f      	beq.n	8003312 <TIM_Base_SetConfig+0x8a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a20      	ldr	r2, [pc, #128]	; (8003378 <TIM_Base_SetConfig+0xf0>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d00b      	beq.n	8003312 <TIM_Base_SetConfig+0x8a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a1f      	ldr	r2, [pc, #124]	; (800337c <TIM_Base_SetConfig+0xf4>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d007      	beq.n	8003312 <TIM_Base_SetConfig+0x8a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a1e      	ldr	r2, [pc, #120]	; (8003380 <TIM_Base_SetConfig+0xf8>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d003      	beq.n	8003312 <TIM_Base_SetConfig+0x8a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a1d      	ldr	r2, [pc, #116]	; (8003384 <TIM_Base_SetConfig+0xfc>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d108      	bne.n	8003324 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4313      	orrs	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	4313      	orrs	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a08      	ldr	r2, [pc, #32]	; (800336c <TIM_Base_SetConfig+0xe4>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d103      	bne.n	8003358 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	691a      	ldr	r2, [r3, #16]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	615a      	str	r2, [r3, #20]
}
 800335e:	bf00      	nop
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	40010000 	.word	0x40010000
 8003370:	40000400 	.word	0x40000400
 8003374:	40000800 	.word	0x40000800
 8003378:	40000c00 	.word	0x40000c00
 800337c:	40014000 	.word	0x40014000
 8003380:	40014400 	.word	0x40014400
 8003384:	40014800 	.word	0x40014800

08003388 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003388:	b480      	push	{r7}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	f023 0201 	bic.w	r2, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f023 0303 	bic.w	r3, r3, #3
 80033be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f023 0302 	bic.w	r3, r3, #2
 80033d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	4313      	orrs	r3, r2
 80033da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a1c      	ldr	r2, [pc, #112]	; (8003450 <TIM_OC1_SetConfig+0xc8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d10c      	bne.n	80033fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f023 0308 	bic.w	r3, r3, #8
 80033ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f023 0304 	bic.w	r3, r3, #4
 80033fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a13      	ldr	r2, [pc, #76]	; (8003450 <TIM_OC1_SetConfig+0xc8>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d111      	bne.n	800342a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800340c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003414:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4313      	orrs	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	621a      	str	r2, [r3, #32]
}
 8003444:	bf00      	nop
 8003446:	371c      	adds	r7, #28
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	40010000 	.word	0x40010000

08003454 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003454:	b480      	push	{r7}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	f023 0210 	bic.w	r2, r3, #16
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800348a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	021b      	lsls	r3, r3, #8
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	4313      	orrs	r3, r2
 8003496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f023 0320 	bic.w	r3, r3, #32
 800349e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a1e      	ldr	r2, [pc, #120]	; (8003528 <TIM_OC2_SetConfig+0xd4>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d10d      	bne.n	80034d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a15      	ldr	r2, [pc, #84]	; (8003528 <TIM_OC2_SetConfig+0xd4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d113      	bne.n	8003500 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	621a      	str	r2, [r3, #32]
}
 800351a:	bf00      	nop
 800351c:	371c      	adds	r7, #28
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	40010000 	.word	0x40010000

0800352c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800352c:	b480      	push	{r7}
 800352e:	b087      	sub	sp, #28
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f023 0303 	bic.w	r3, r3, #3
 8003562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4313      	orrs	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003574:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	021b      	lsls	r3, r3, #8
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	4313      	orrs	r3, r2
 8003580:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a1d      	ldr	r2, [pc, #116]	; (80035fc <TIM_OC3_SetConfig+0xd0>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d10d      	bne.n	80035a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003590:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	021b      	lsls	r3, r3, #8
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	4313      	orrs	r3, r2
 800359c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a14      	ldr	r2, [pc, #80]	; (80035fc <TIM_OC3_SetConfig+0xd0>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d113      	bne.n	80035d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	011b      	lsls	r3, r3, #4
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	011b      	lsls	r3, r3, #4
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	621a      	str	r2, [r3, #32]
}
 80035f0:	bf00      	nop
 80035f2:	371c      	adds	r7, #28
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	40010000 	.word	0x40010000

08003600 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003600:	b480      	push	{r7}
 8003602:	b087      	sub	sp, #28
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800362e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003636:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	021b      	lsls	r3, r3, #8
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	4313      	orrs	r3, r2
 8003642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800364a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	031b      	lsls	r3, r3, #12
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a10      	ldr	r2, [pc, #64]	; (800369c <TIM_OC4_SetConfig+0x9c>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d109      	bne.n	8003674 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003666:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	019b      	lsls	r3, r3, #6
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	4313      	orrs	r3, r2
 8003672:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	621a      	str	r2, [r3, #32]
}
 800368e:	bf00      	nop
 8003690:	371c      	adds	r7, #28
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40010000 	.word	0x40010000

080036a0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036bc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f023 0307 	bic.w	r3, r3, #7
 80036ce:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b70      	cmp	r3, #112	; 0x70
 80036e8:	d01a      	beq.n	8003720 <TIM_SlaveTimer_SetConfig+0x80>
 80036ea:	2b70      	cmp	r3, #112	; 0x70
 80036ec:	d860      	bhi.n	80037b0 <TIM_SlaveTimer_SetConfig+0x110>
 80036ee:	2b60      	cmp	r3, #96	; 0x60
 80036f0:	d054      	beq.n	800379c <TIM_SlaveTimer_SetConfig+0xfc>
 80036f2:	2b60      	cmp	r3, #96	; 0x60
 80036f4:	d85c      	bhi.n	80037b0 <TIM_SlaveTimer_SetConfig+0x110>
 80036f6:	2b50      	cmp	r3, #80	; 0x50
 80036f8:	d046      	beq.n	8003788 <TIM_SlaveTimer_SetConfig+0xe8>
 80036fa:	2b50      	cmp	r3, #80	; 0x50
 80036fc:	d858      	bhi.n	80037b0 <TIM_SlaveTimer_SetConfig+0x110>
 80036fe:	2b40      	cmp	r3, #64	; 0x40
 8003700:	d019      	beq.n	8003736 <TIM_SlaveTimer_SetConfig+0x96>
 8003702:	2b40      	cmp	r3, #64	; 0x40
 8003704:	d854      	bhi.n	80037b0 <TIM_SlaveTimer_SetConfig+0x110>
 8003706:	2b30      	cmp	r3, #48	; 0x30
 8003708:	d055      	beq.n	80037b6 <TIM_SlaveTimer_SetConfig+0x116>
 800370a:	2b30      	cmp	r3, #48	; 0x30
 800370c:	d850      	bhi.n	80037b0 <TIM_SlaveTimer_SetConfig+0x110>
 800370e:	2b20      	cmp	r3, #32
 8003710:	d051      	beq.n	80037b6 <TIM_SlaveTimer_SetConfig+0x116>
 8003712:	2b20      	cmp	r3, #32
 8003714:	d84c      	bhi.n	80037b0 <TIM_SlaveTimer_SetConfig+0x110>
 8003716:	2b00      	cmp	r3, #0
 8003718:	d04d      	beq.n	80037b6 <TIM_SlaveTimer_SetConfig+0x116>
 800371a:	2b10      	cmp	r3, #16
 800371c:	d04b      	beq.n	80037b6 <TIM_SlaveTimer_SetConfig+0x116>
 800371e:	e047      	b.n	80037b0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6818      	ldr	r0, [r3, #0]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	68d9      	ldr	r1, [r3, #12]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	f000 f9e0 	bl	8003af4 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8003734:	e040      	b.n	80037b8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b05      	cmp	r3, #5
 800373c:	d101      	bne.n	8003742 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e03b      	b.n	80037ba <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6a1a      	ldr	r2, [r3, #32]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0201 	bic.w	r2, r2, #1
 8003758:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003768:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	4313      	orrs	r3, r2
 8003774:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	621a      	str	r2, [r3, #32]
      break;
 8003786:	e017      	b.n	80037b8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6818      	ldr	r0, [r3, #0]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	6899      	ldr	r1, [r3, #8]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	461a      	mov	r2, r3
 8003796:	f000 f87d 	bl	8003894 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800379a:	e00d      	b.n	80037b8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6818      	ldr	r0, [r3, #0]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	6899      	ldr	r1, [r3, #8]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	461a      	mov	r2, r3
 80037aa:	f000 f8df 	bl	800396c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80037ae:	e003      	b.n	80037b8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	75fb      	strb	r3, [r7, #23]
      break;
 80037b4:	e000      	b.n	80037b8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80037b6:	bf00      	nop
  }

  return status;
 80037b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3718      	adds	r7, #24
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
	...

080037c4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b087      	sub	sp, #28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
 80037d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	f023 0201 	bic.w	r2, r3, #1
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	4a24      	ldr	r2, [pc, #144]	; (8003880 <TIM_TI1_SetConfig+0xbc>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d013      	beq.n	800381a <TIM_TI1_SetConfig+0x56>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f8:	d00f      	beq.n	800381a <TIM_TI1_SetConfig+0x56>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	4a21      	ldr	r2, [pc, #132]	; (8003884 <TIM_TI1_SetConfig+0xc0>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d00b      	beq.n	800381a <TIM_TI1_SetConfig+0x56>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	4a20      	ldr	r2, [pc, #128]	; (8003888 <TIM_TI1_SetConfig+0xc4>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d007      	beq.n	800381a <TIM_TI1_SetConfig+0x56>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	4a1f      	ldr	r2, [pc, #124]	; (800388c <TIM_TI1_SetConfig+0xc8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d003      	beq.n	800381a <TIM_TI1_SetConfig+0x56>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	4a1e      	ldr	r2, [pc, #120]	; (8003890 <TIM_TI1_SetConfig+0xcc>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d101      	bne.n	800381e <TIM_TI1_SetConfig+0x5a>
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <TIM_TI1_SetConfig+0x5c>
 800381e:	2300      	movs	r3, #0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f023 0303 	bic.w	r3, r3, #3
 800382a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4313      	orrs	r3, r2
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	e003      	b.n	800383e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f043 0301 	orr.w	r3, r3, #1
 800383c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003844:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	b2db      	uxtb	r3, r3
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	4313      	orrs	r3, r2
 8003850:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f023 030a 	bic.w	r3, r3, #10
 8003858:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	f003 030a 	and.w	r3, r3, #10
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	621a      	str	r2, [r3, #32]
}
 8003872:	bf00      	nop
 8003874:	371c      	adds	r7, #28
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40010000 	.word	0x40010000
 8003884:	40000400 	.word	0x40000400
 8003888:	40000800 	.word	0x40000800
 800388c:	40000c00 	.word	0x40000c00
 8003890:	40014000 	.word	0x40014000

08003894 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	f023 0201 	bic.w	r2, r3, #1
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f023 030a 	bic.w	r3, r3, #10
 80038d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	621a      	str	r2, [r3, #32]
}
 80038e6:	bf00      	nop
 80038e8:	371c      	adds	r7, #28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b087      	sub	sp, #28
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	60f8      	str	r0, [r7, #12]
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	607a      	str	r2, [r7, #4]
 80038fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	f023 0210 	bic.w	r2, r3, #16
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800391e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	021b      	lsls	r3, r3, #8
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	4313      	orrs	r3, r2
 8003928:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003930:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	031b      	lsls	r3, r3, #12
 8003936:	b29b      	uxth	r3, r3
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	4313      	orrs	r3, r2
 800393c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003944:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	621a      	str	r2, [r3, #32]
}
 8003960:	bf00      	nop
 8003962:	371c      	adds	r7, #28
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800396c:	b480      	push	{r7}
 800396e:	b087      	sub	sp, #28
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	f023 0210 	bic.w	r2, r3, #16
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003996:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	031b      	lsls	r3, r3, #12
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	4313      	orrs	r3, r2
 80039a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	621a      	str	r2, [r3, #32]
}
 80039c0:	bf00      	nop
 80039c2:	371c      	adds	r7, #28
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
 80039d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f023 0303 	bic.w	r3, r3, #3
 80039f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a08:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003a1c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	021b      	lsls	r3, r3, #8
 8003a22:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	621a      	str	r2, [r3, #32]
}
 8003a38:	bf00      	nop
 8003a3a:	371c      	adds	r7, #28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
 8003a50:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a70:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	021b      	lsls	r3, r3, #8
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a82:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	031b      	lsls	r3, r3, #12
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003a96:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	031b      	lsls	r3, r3, #12
 8003a9c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	621a      	str	r2, [r3, #32]
}
 8003ab2:	bf00      	nop
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b085      	sub	sp, #20
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f043 0307 	orr.w	r3, r3, #7
 8003ae0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	609a      	str	r2, [r3, #8]
}
 8003ae8:	bf00      	nop
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
 8003b00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	021a      	lsls	r2, r3, #8
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	431a      	orrs	r2, r3
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	609a      	str	r2, [r3, #8]
}
 8003b28:	bf00      	nop
 8003b2a:	371c      	adds	r7, #28
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b087      	sub	sp, #28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f003 031f 	and.w	r3, r3, #31
 8003b46:	2201      	movs	r2, #1
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a1a      	ldr	r2, [r3, #32]
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	43db      	mvns	r3, r3
 8003b56:	401a      	ands	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a1a      	ldr	r2, [r3, #32]
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	f003 031f 	and.w	r3, r3, #31
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	621a      	str	r2, [r3, #32]
}
 8003b72:	bf00      	nop
 8003b74:	371c      	adds	r7, #28
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
	...

08003b80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d101      	bne.n	8003b98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b94:	2302      	movs	r3, #2
 8003b96:	e050      	b.n	8003c3a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a1c      	ldr	r2, [pc, #112]	; (8003c48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d018      	beq.n	8003c0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be4:	d013      	beq.n	8003c0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a18      	ldr	r2, [pc, #96]	; (8003c4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d00e      	beq.n	8003c0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a16      	ldr	r2, [pc, #88]	; (8003c50 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d009      	beq.n	8003c0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a15      	ldr	r2, [pc, #84]	; (8003c54 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d004      	beq.n	8003c0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a13      	ldr	r2, [pc, #76]	; (8003c58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d10c      	bne.n	8003c28 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40010000 	.word	0x40010000
 8003c4c:	40000400 	.word	0x40000400
 8003c50:	40000800 	.word	0x40000800
 8003c54:	40000c00 	.word	0x40000c00
 8003c58:	40014000 	.word	0x40014000

08003c5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e03f      	b.n	8003d16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d106      	bne.n	8003cb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7fd f972 	bl	8000f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2224      	movs	r2, #36	; 0x24
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 fd7b 	bl	80047c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	691a      	ldr	r2, [r3, #16]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	695a      	ldr	r2, [r3, #20]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68da      	ldr	r2, [r3, #12]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2220      	movs	r2, #32
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b08a      	sub	sp, #40	; 0x28
 8003d22:	af02      	add	r7, sp, #8
 8003d24:	60f8      	str	r0, [r7, #12]
 8003d26:	60b9      	str	r1, [r7, #8]
 8003d28:	603b      	str	r3, [r7, #0]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b20      	cmp	r3, #32
 8003d3c:	d17c      	bne.n	8003e38 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d002      	beq.n	8003d4a <HAL_UART_Transmit+0x2c>
 8003d44:	88fb      	ldrh	r3, [r7, #6]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e075      	b.n	8003e3a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <HAL_UART_Transmit+0x3e>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e06e      	b.n	8003e3a <HAL_UART_Transmit+0x11c>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2221      	movs	r2, #33	; 0x21
 8003d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d72:	f7fd f9ef 	bl	8001154 <HAL_GetTick>
 8003d76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	88fa      	ldrh	r2, [r7, #6]
 8003d7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	88fa      	ldrh	r2, [r7, #6]
 8003d82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d8c:	d108      	bne.n	8003da0 <HAL_UART_Transmit+0x82>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d104      	bne.n	8003da0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d96:	2300      	movs	r3, #0
 8003d98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	61bb      	str	r3, [r7, #24]
 8003d9e:	e003      	b.n	8003da8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003da4:	2300      	movs	r3, #0
 8003da6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003db0:	e02a      	b.n	8003e08 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	2200      	movs	r2, #0
 8003dba:	2180      	movs	r1, #128	; 0x80
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 faf9 	bl	80043b4 <UART_WaitOnFlagUntilTimeout>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e036      	b.n	8003e3a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10b      	bne.n	8003dea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003de0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	3302      	adds	r3, #2
 8003de6:	61bb      	str	r3, [r7, #24]
 8003de8:	e007      	b.n	8003dfa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	781a      	ldrb	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	3301      	adds	r3, #1
 8003df8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1cf      	bne.n	8003db2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	2140      	movs	r1, #64	; 0x40
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 fac9 	bl	80043b4 <UART_WaitOnFlagUntilTimeout>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e006      	b.n	8003e3a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e34:	2300      	movs	r3, #0
 8003e36:	e000      	b.n	8003e3a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e38:	2302      	movs	r3, #2
  }
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3720      	adds	r7, #32
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
	...

08003e44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b0ba      	sub	sp, #232	; 0xe8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e7a:	f003 030f 	and.w	r3, r3, #15
 8003e7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003e82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10f      	bne.n	8003eaa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e8e:	f003 0320 	and.w	r3, r3, #32
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d009      	beq.n	8003eaa <HAL_UART_IRQHandler+0x66>
 8003e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e9a:	f003 0320 	and.w	r3, r3, #32
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 fbd3 	bl	800464e <UART_Receive_IT>
      return;
 8003ea8:	e256      	b.n	8004358 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003eaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 80de 	beq.w	8004070 <HAL_UART_IRQHandler+0x22c>
 8003eb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d106      	bne.n	8003ece <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ec4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 80d1 	beq.w	8004070 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00b      	beq.n	8003ef2 <HAL_UART_IRQHandler+0xae>
 8003eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d005      	beq.n	8003ef2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	f043 0201 	orr.w	r2, r3, #1
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef6:	f003 0304 	and.w	r3, r3, #4
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00b      	beq.n	8003f16 <HAL_UART_IRQHandler+0xd2>
 8003efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d005      	beq.n	8003f16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	f043 0202 	orr.w	r2, r3, #2
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00b      	beq.n	8003f3a <HAL_UART_IRQHandler+0xf6>
 8003f22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d005      	beq.n	8003f3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	f043 0204 	orr.w	r2, r3, #4
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f3e:	f003 0308 	and.w	r3, r3, #8
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d011      	beq.n	8003f6a <HAL_UART_IRQHandler+0x126>
 8003f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f4a:	f003 0320 	and.w	r3, r3, #32
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d105      	bne.n	8003f5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d005      	beq.n	8003f6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	f043 0208 	orr.w	r2, r3, #8
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 81ed 	beq.w	800434e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f78:	f003 0320 	and.w	r3, r3, #32
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d008      	beq.n	8003f92 <HAL_UART_IRQHandler+0x14e>
 8003f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f84:	f003 0320 	and.w	r3, r3, #32
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 fb5e 	bl	800464e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f9c:	2b40      	cmp	r3, #64	; 0x40
 8003f9e:	bf0c      	ite	eq
 8003fa0:	2301      	moveq	r3, #1
 8003fa2:	2300      	movne	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d103      	bne.n	8003fbe <HAL_UART_IRQHandler+0x17a>
 8003fb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d04f      	beq.n	800405e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fa66 	bl	8004490 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fce:	2b40      	cmp	r3, #64	; 0x40
 8003fd0:	d141      	bne.n	8004056 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	3314      	adds	r3, #20
 8003fd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003fe0:	e853 3f00 	ldrex	r3, [r3]
 8003fe4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003fe8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ff0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	3314      	adds	r3, #20
 8003ffa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ffe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004002:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800400a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800400e:	e841 2300 	strex	r3, r2, [r1]
 8004012:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004016:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1d9      	bne.n	8003fd2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004022:	2b00      	cmp	r3, #0
 8004024:	d013      	beq.n	800404e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402a:	4a7d      	ldr	r2, [pc, #500]	; (8004220 <HAL_UART_IRQHandler+0x3dc>)
 800402c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004032:	4618      	mov	r0, r3
 8004034:	f7fd fa3f 	bl	80014b6 <HAL_DMA_Abort_IT>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d016      	beq.n	800406c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004048:	4610      	mov	r0, r2
 800404a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800404c:	e00e      	b.n	800406c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f99a 	bl	8004388 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004054:	e00a      	b.n	800406c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f996 	bl	8004388 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800405c:	e006      	b.n	800406c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f992 	bl	8004388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800406a:	e170      	b.n	800434e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800406c:	bf00      	nop
    return;
 800406e:	e16e      	b.n	800434e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004074:	2b01      	cmp	r3, #1
 8004076:	f040 814a 	bne.w	800430e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800407a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800407e:	f003 0310 	and.w	r3, r3, #16
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 8143 	beq.w	800430e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800408c:	f003 0310 	and.w	r3, r3, #16
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 813c 	beq.w	800430e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004096:	2300      	movs	r3, #0
 8004098:	60bb      	str	r3, [r7, #8]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	60bb      	str	r3, [r7, #8]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	60bb      	str	r3, [r7, #8]
 80040aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b6:	2b40      	cmp	r3, #64	; 0x40
 80040b8:	f040 80b4 	bne.w	8004224 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 8140 	beq.w	8004352 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040da:	429a      	cmp	r2, r3
 80040dc:	f080 8139 	bcs.w	8004352 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040f2:	f000 8088 	beq.w	8004206 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	330c      	adds	r3, #12
 80040fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004100:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004104:	e853 3f00 	ldrex	r3, [r3]
 8004108:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800410c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004110:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004114:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	330c      	adds	r3, #12
 800411e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004122:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004126:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800412e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004132:	e841 2300 	strex	r3, r2, [r1]
 8004136:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800413a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1d9      	bne.n	80040f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	3314      	adds	r3, #20
 8004148:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800414c:	e853 3f00 	ldrex	r3, [r3]
 8004150:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004152:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004154:	f023 0301 	bic.w	r3, r3, #1
 8004158:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3314      	adds	r3, #20
 8004162:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004166:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800416a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800416e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004172:	e841 2300 	strex	r3, r2, [r1]
 8004176:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004178:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1e1      	bne.n	8004142 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	3314      	adds	r3, #20
 8004184:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004186:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004188:	e853 3f00 	ldrex	r3, [r3]
 800418c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800418e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004194:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	3314      	adds	r3, #20
 800419e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80041a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80041a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041aa:	e841 2300 	strex	r3, r2, [r1]
 80041ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80041b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1e3      	bne.n	800417e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	330c      	adds	r3, #12
 80041ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ce:	e853 3f00 	ldrex	r3, [r3]
 80041d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041d6:	f023 0310 	bic.w	r3, r3, #16
 80041da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	330c      	adds	r3, #12
 80041e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80041e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80041ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041f0:	e841 2300 	strex	r3, r2, [r1]
 80041f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80041f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1e3      	bne.n	80041c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004200:	4618      	mov	r0, r3
 8004202:	f7fd f8e8 	bl	80013d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800420e:	b29b      	uxth	r3, r3
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	b29b      	uxth	r3, r3
 8004214:	4619      	mov	r1, r3
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f8c0 	bl	800439c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800421c:	e099      	b.n	8004352 <HAL_UART_IRQHandler+0x50e>
 800421e:	bf00      	nop
 8004220:	08004557 	.word	0x08004557
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800422c:	b29b      	uxth	r3, r3
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 808b 	beq.w	8004356 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004240:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 8086 	beq.w	8004356 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	330c      	adds	r3, #12
 8004250:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004254:	e853 3f00 	ldrex	r3, [r3]
 8004258:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800425a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800425c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004260:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	330c      	adds	r3, #12
 800426a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800426e:	647a      	str	r2, [r7, #68]	; 0x44
 8004270:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004272:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004274:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004276:	e841 2300 	strex	r3, r2, [r1]
 800427a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800427c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1e3      	bne.n	800424a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	3314      	adds	r3, #20
 8004288:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	e853 3f00 	ldrex	r3, [r3]
 8004290:	623b      	str	r3, [r7, #32]
   return(result);
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	f023 0301 	bic.w	r3, r3, #1
 8004298:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	3314      	adds	r3, #20
 80042a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80042a6:	633a      	str	r2, [r7, #48]	; 0x30
 80042a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ae:	e841 2300 	strex	r3, r2, [r1]
 80042b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1e3      	bne.n	8004282 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2220      	movs	r2, #32
 80042be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	330c      	adds	r3, #12
 80042ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	e853 3f00 	ldrex	r3, [r3]
 80042d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f023 0310 	bic.w	r3, r3, #16
 80042de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	330c      	adds	r3, #12
 80042e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80042ec:	61fa      	str	r2, [r7, #28]
 80042ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f0:	69b9      	ldr	r1, [r7, #24]
 80042f2:	69fa      	ldr	r2, [r7, #28]
 80042f4:	e841 2300 	strex	r3, r2, [r1]
 80042f8:	617b      	str	r3, [r7, #20]
   return(result);
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1e3      	bne.n	80042c8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004300:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004304:	4619      	mov	r1, r3
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f848 	bl	800439c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800430c:	e023      	b.n	8004356 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800430e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004316:	2b00      	cmp	r3, #0
 8004318:	d009      	beq.n	800432e <HAL_UART_IRQHandler+0x4ea>
 800431a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800431e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f929 	bl	800457e <UART_Transmit_IT>
    return;
 800432c:	e014      	b.n	8004358 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800432e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00e      	beq.n	8004358 <HAL_UART_IRQHandler+0x514>
 800433a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800433e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004342:	2b00      	cmp	r3, #0
 8004344:	d008      	beq.n	8004358 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f969 	bl	800461e <UART_EndTransmit_IT>
    return;
 800434c:	e004      	b.n	8004358 <HAL_UART_IRQHandler+0x514>
    return;
 800434e:	bf00      	nop
 8004350:	e002      	b.n	8004358 <HAL_UART_IRQHandler+0x514>
      return;
 8004352:	bf00      	nop
 8004354:	e000      	b.n	8004358 <HAL_UART_IRQHandler+0x514>
      return;
 8004356:	bf00      	nop
  }
}
 8004358:	37e8      	adds	r7, #232	; 0xe8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop

08004360 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	460b      	mov	r3, r1
 80043a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b090      	sub	sp, #64	; 0x40
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	603b      	str	r3, [r7, #0]
 80043c0:	4613      	mov	r3, r2
 80043c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043c4:	e050      	b.n	8004468 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043cc:	d04c      	beq.n	8004468 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d007      	beq.n	80043e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80043d4:	f7fc febe 	bl	8001154 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d241      	bcs.n	8004468 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	330c      	adds	r3, #12
 80043ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ee:	e853 3f00 	ldrex	r3, [r3]
 80043f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	330c      	adds	r3, #12
 8004402:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004404:	637a      	str	r2, [r7, #52]	; 0x34
 8004406:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004408:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800440a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800440c:	e841 2300 	strex	r3, r2, [r1]
 8004410:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1e5      	bne.n	80043e4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	3314      	adds	r3, #20
 800441e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	e853 3f00 	ldrex	r3, [r3]
 8004426:	613b      	str	r3, [r7, #16]
   return(result);
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	f023 0301 	bic.w	r3, r3, #1
 800442e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	3314      	adds	r3, #20
 8004436:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004438:	623a      	str	r2, [r7, #32]
 800443a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443c:	69f9      	ldr	r1, [r7, #28]
 800443e:	6a3a      	ldr	r2, [r7, #32]
 8004440:	e841 2300 	strex	r3, r2, [r1]
 8004444:	61bb      	str	r3, [r7, #24]
   return(result);
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1e5      	bne.n	8004418 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2220      	movs	r2, #32
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2220      	movs	r2, #32
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e00f      	b.n	8004488 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	4013      	ands	r3, r2
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	429a      	cmp	r2, r3
 8004476:	bf0c      	ite	eq
 8004478:	2301      	moveq	r3, #1
 800447a:	2300      	movne	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	461a      	mov	r2, r3
 8004480:	79fb      	ldrb	r3, [r7, #7]
 8004482:	429a      	cmp	r2, r3
 8004484:	d09f      	beq.n	80043c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3740      	adds	r7, #64	; 0x40
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004490:	b480      	push	{r7}
 8004492:	b095      	sub	sp, #84	; 0x54
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	330c      	adds	r3, #12
 800449e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044a2:	e853 3f00 	ldrex	r3, [r3]
 80044a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	330c      	adds	r3, #12
 80044b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044b8:	643a      	str	r2, [r7, #64]	; 0x40
 80044ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044c0:	e841 2300 	strex	r3, r2, [r1]
 80044c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1e5      	bne.n	8004498 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	3314      	adds	r3, #20
 80044d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d4:	6a3b      	ldr	r3, [r7, #32]
 80044d6:	e853 3f00 	ldrex	r3, [r3]
 80044da:	61fb      	str	r3, [r7, #28]
   return(result);
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f023 0301 	bic.w	r3, r3, #1
 80044e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3314      	adds	r3, #20
 80044ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044f4:	e841 2300 	strex	r3, r2, [r1]
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1e5      	bne.n	80044cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004504:	2b01      	cmp	r3, #1
 8004506:	d119      	bne.n	800453c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	330c      	adds	r3, #12
 800450e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	e853 3f00 	ldrex	r3, [r3]
 8004516:	60bb      	str	r3, [r7, #8]
   return(result);
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f023 0310 	bic.w	r3, r3, #16
 800451e:	647b      	str	r3, [r7, #68]	; 0x44
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	330c      	adds	r3, #12
 8004526:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004528:	61ba      	str	r2, [r7, #24]
 800452a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452c:	6979      	ldr	r1, [r7, #20]
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	e841 2300 	strex	r3, r2, [r1]
 8004534:	613b      	str	r3, [r7, #16]
   return(result);
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1e5      	bne.n	8004508 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2220      	movs	r2, #32
 8004540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	631a      	str	r2, [r3, #48]	; 0x30
}
 800454a:	bf00      	nop
 800454c:	3754      	adds	r7, #84	; 0x54
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b084      	sub	sp, #16
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004562:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f7ff ff09 	bl	8004388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004576:	bf00      	nop
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800457e:	b480      	push	{r7}
 8004580:	b085      	sub	sp, #20
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b21      	cmp	r3, #33	; 0x21
 8004590:	d13e      	bne.n	8004610 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800459a:	d114      	bne.n	80045c6 <UART_Transmit_IT+0x48>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d110      	bne.n	80045c6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	1c9a      	adds	r2, r3, #2
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	621a      	str	r2, [r3, #32]
 80045c4:	e008      	b.n	80045d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	1c59      	adds	r1, r3, #1
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	6211      	str	r1, [r2, #32]
 80045d0:	781a      	ldrb	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045dc:	b29b      	uxth	r3, r3
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	4619      	mov	r1, r3
 80045e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10f      	bne.n	800460c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800460a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800460c:	2300      	movs	r3, #0
 800460e:	e000      	b.n	8004612 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004610:	2302      	movs	r3, #2
  }
}
 8004612:	4618      	mov	r0, r3
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b082      	sub	sp, #8
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004634:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2220      	movs	r2, #32
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7ff fe8e 	bl	8004360 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b08c      	sub	sp, #48	; 0x30
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b22      	cmp	r3, #34	; 0x22
 8004660:	f040 80ab 	bne.w	80047ba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800466c:	d117      	bne.n	800469e <UART_Receive_IT+0x50>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d113      	bne.n	800469e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004676:	2300      	movs	r3, #0
 8004678:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	b29b      	uxth	r3, r3
 8004688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800468c:	b29a      	uxth	r2, r3
 800468e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004690:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004696:	1c9a      	adds	r2, r3, #2
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	629a      	str	r2, [r3, #40]	; 0x28
 800469c:	e026      	b.n	80046ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80046a4:	2300      	movs	r3, #0
 80046a6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b0:	d007      	beq.n	80046c2 <UART_Receive_IT+0x74>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10a      	bne.n	80046d0 <UART_Receive_IT+0x82>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d106      	bne.n	80046d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046cc:	701a      	strb	r2, [r3, #0]
 80046ce:	e008      	b.n	80046e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e6:	1c5a      	adds	r2, r3, #1
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	4619      	mov	r1, r3
 80046fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d15a      	bne.n	80047b6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68da      	ldr	r2, [r3, #12]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0220 	bic.w	r2, r2, #32
 800470e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68da      	ldr	r2, [r3, #12]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800471e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	695a      	ldr	r2, [r3, #20]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0201 	bic.w	r2, r2, #1
 800472e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2220      	movs	r2, #32
 8004734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473c:	2b01      	cmp	r3, #1
 800473e:	d135      	bne.n	80047ac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	330c      	adds	r3, #12
 800474c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	e853 3f00 	ldrex	r3, [r3]
 8004754:	613b      	str	r3, [r7, #16]
   return(result);
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	f023 0310 	bic.w	r3, r3, #16
 800475c:	627b      	str	r3, [r7, #36]	; 0x24
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	330c      	adds	r3, #12
 8004764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004766:	623a      	str	r2, [r7, #32]
 8004768:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476a:	69f9      	ldr	r1, [r7, #28]
 800476c:	6a3a      	ldr	r2, [r7, #32]
 800476e:	e841 2300 	strex	r3, r2, [r1]
 8004772:	61bb      	str	r3, [r7, #24]
   return(result);
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1e5      	bne.n	8004746 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0310 	and.w	r3, r3, #16
 8004784:	2b10      	cmp	r3, #16
 8004786:	d10a      	bne.n	800479e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004788:	2300      	movs	r3, #0
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	60fb      	str	r3, [r7, #12]
 800479c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047a2:	4619      	mov	r1, r3
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7ff fdf9 	bl	800439c <HAL_UARTEx_RxEventCallback>
 80047aa:	e002      	b.n	80047b2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7ff fde1 	bl	8004374 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047b2:	2300      	movs	r3, #0
 80047b4:	e002      	b.n	80047bc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	e000      	b.n	80047bc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80047ba:	2302      	movs	r3, #2
  }
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3730      	adds	r7, #48	; 0x30
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047c8:	b0c0      	sub	sp, #256	; 0x100
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80047dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e0:	68d9      	ldr	r1, [r3, #12]
 80047e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	ea40 0301 	orr.w	r3, r0, r1
 80047ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	431a      	orrs	r2, r3
 80047fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	431a      	orrs	r2, r3
 8004804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800481c:	f021 010c 	bic.w	r1, r1, #12
 8004820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800482a:	430b      	orrs	r3, r1
 800482c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800482e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800483a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483e:	6999      	ldr	r1, [r3, #24]
 8004840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	ea40 0301 	orr.w	r3, r0, r1
 800484a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800484c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	4b8f      	ldr	r3, [pc, #572]	; (8004a90 <UART_SetConfig+0x2cc>)
 8004854:	429a      	cmp	r2, r3
 8004856:	d005      	beq.n	8004864 <UART_SetConfig+0xa0>
 8004858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	4b8d      	ldr	r3, [pc, #564]	; (8004a94 <UART_SetConfig+0x2d0>)
 8004860:	429a      	cmp	r2, r3
 8004862:	d104      	bne.n	800486e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004864:	f7fd fc6c 	bl	8002140 <HAL_RCC_GetPCLK2Freq>
 8004868:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800486c:	e003      	b.n	8004876 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800486e:	f7fd fc53 	bl	8002118 <HAL_RCC_GetPCLK1Freq>
 8004872:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004880:	f040 810c 	bne.w	8004a9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004888:	2200      	movs	r2, #0
 800488a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800488e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004892:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004896:	4622      	mov	r2, r4
 8004898:	462b      	mov	r3, r5
 800489a:	1891      	adds	r1, r2, r2
 800489c:	65b9      	str	r1, [r7, #88]	; 0x58
 800489e:	415b      	adcs	r3, r3
 80048a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80048a6:	4621      	mov	r1, r4
 80048a8:	eb12 0801 	adds.w	r8, r2, r1
 80048ac:	4629      	mov	r1, r5
 80048ae:	eb43 0901 	adc.w	r9, r3, r1
 80048b2:	f04f 0200 	mov.w	r2, #0
 80048b6:	f04f 0300 	mov.w	r3, #0
 80048ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048c6:	4690      	mov	r8, r2
 80048c8:	4699      	mov	r9, r3
 80048ca:	4623      	mov	r3, r4
 80048cc:	eb18 0303 	adds.w	r3, r8, r3
 80048d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048d4:	462b      	mov	r3, r5
 80048d6:	eb49 0303 	adc.w	r3, r9, r3
 80048da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80048de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80048ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80048f2:	460b      	mov	r3, r1
 80048f4:	18db      	adds	r3, r3, r3
 80048f6:	653b      	str	r3, [r7, #80]	; 0x50
 80048f8:	4613      	mov	r3, r2
 80048fa:	eb42 0303 	adc.w	r3, r2, r3
 80048fe:	657b      	str	r3, [r7, #84]	; 0x54
 8004900:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004904:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004908:	f7fb fcba 	bl	8000280 <__aeabi_uldivmod>
 800490c:	4602      	mov	r2, r0
 800490e:	460b      	mov	r3, r1
 8004910:	4b61      	ldr	r3, [pc, #388]	; (8004a98 <UART_SetConfig+0x2d4>)
 8004912:	fba3 2302 	umull	r2, r3, r3, r2
 8004916:	095b      	lsrs	r3, r3, #5
 8004918:	011c      	lsls	r4, r3, #4
 800491a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800491e:	2200      	movs	r2, #0
 8004920:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004924:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004928:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800492c:	4642      	mov	r2, r8
 800492e:	464b      	mov	r3, r9
 8004930:	1891      	adds	r1, r2, r2
 8004932:	64b9      	str	r1, [r7, #72]	; 0x48
 8004934:	415b      	adcs	r3, r3
 8004936:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004938:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800493c:	4641      	mov	r1, r8
 800493e:	eb12 0a01 	adds.w	sl, r2, r1
 8004942:	4649      	mov	r1, r9
 8004944:	eb43 0b01 	adc.w	fp, r3, r1
 8004948:	f04f 0200 	mov.w	r2, #0
 800494c:	f04f 0300 	mov.w	r3, #0
 8004950:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004954:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004958:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800495c:	4692      	mov	sl, r2
 800495e:	469b      	mov	fp, r3
 8004960:	4643      	mov	r3, r8
 8004962:	eb1a 0303 	adds.w	r3, sl, r3
 8004966:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800496a:	464b      	mov	r3, r9
 800496c:	eb4b 0303 	adc.w	r3, fp, r3
 8004970:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004980:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004984:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004988:	460b      	mov	r3, r1
 800498a:	18db      	adds	r3, r3, r3
 800498c:	643b      	str	r3, [r7, #64]	; 0x40
 800498e:	4613      	mov	r3, r2
 8004990:	eb42 0303 	adc.w	r3, r2, r3
 8004994:	647b      	str	r3, [r7, #68]	; 0x44
 8004996:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800499a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800499e:	f7fb fc6f 	bl	8000280 <__aeabi_uldivmod>
 80049a2:	4602      	mov	r2, r0
 80049a4:	460b      	mov	r3, r1
 80049a6:	4611      	mov	r1, r2
 80049a8:	4b3b      	ldr	r3, [pc, #236]	; (8004a98 <UART_SetConfig+0x2d4>)
 80049aa:	fba3 2301 	umull	r2, r3, r3, r1
 80049ae:	095b      	lsrs	r3, r3, #5
 80049b0:	2264      	movs	r2, #100	; 0x64
 80049b2:	fb02 f303 	mul.w	r3, r2, r3
 80049b6:	1acb      	subs	r3, r1, r3
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80049be:	4b36      	ldr	r3, [pc, #216]	; (8004a98 <UART_SetConfig+0x2d4>)
 80049c0:	fba3 2302 	umull	r2, r3, r3, r2
 80049c4:	095b      	lsrs	r3, r3, #5
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049cc:	441c      	add	r4, r3
 80049ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049d2:	2200      	movs	r2, #0
 80049d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80049dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80049e0:	4642      	mov	r2, r8
 80049e2:	464b      	mov	r3, r9
 80049e4:	1891      	adds	r1, r2, r2
 80049e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80049e8:	415b      	adcs	r3, r3
 80049ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049f0:	4641      	mov	r1, r8
 80049f2:	1851      	adds	r1, r2, r1
 80049f4:	6339      	str	r1, [r7, #48]	; 0x30
 80049f6:	4649      	mov	r1, r9
 80049f8:	414b      	adcs	r3, r1
 80049fa:	637b      	str	r3, [r7, #52]	; 0x34
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a08:	4659      	mov	r1, fp
 8004a0a:	00cb      	lsls	r3, r1, #3
 8004a0c:	4651      	mov	r1, sl
 8004a0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a12:	4651      	mov	r1, sl
 8004a14:	00ca      	lsls	r2, r1, #3
 8004a16:	4610      	mov	r0, r2
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	4642      	mov	r2, r8
 8004a1e:	189b      	adds	r3, r3, r2
 8004a20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a24:	464b      	mov	r3, r9
 8004a26:	460a      	mov	r2, r1
 8004a28:	eb42 0303 	adc.w	r3, r2, r3
 8004a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a3c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a44:	460b      	mov	r3, r1
 8004a46:	18db      	adds	r3, r3, r3
 8004a48:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	eb42 0303 	adc.w	r3, r2, r3
 8004a50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a5a:	f7fb fc11 	bl	8000280 <__aeabi_uldivmod>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	460b      	mov	r3, r1
 8004a62:	4b0d      	ldr	r3, [pc, #52]	; (8004a98 <UART_SetConfig+0x2d4>)
 8004a64:	fba3 1302 	umull	r1, r3, r3, r2
 8004a68:	095b      	lsrs	r3, r3, #5
 8004a6a:	2164      	movs	r1, #100	; 0x64
 8004a6c:	fb01 f303 	mul.w	r3, r1, r3
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	3332      	adds	r3, #50	; 0x32
 8004a76:	4a08      	ldr	r2, [pc, #32]	; (8004a98 <UART_SetConfig+0x2d4>)
 8004a78:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7c:	095b      	lsrs	r3, r3, #5
 8004a7e:	f003 0207 	and.w	r2, r3, #7
 8004a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4422      	add	r2, r4
 8004a8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a8c:	e106      	b.n	8004c9c <UART_SetConfig+0x4d8>
 8004a8e:	bf00      	nop
 8004a90:	40011000 	.word	0x40011000
 8004a94:	40011400 	.word	0x40011400
 8004a98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004aa6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004aaa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004aae:	4642      	mov	r2, r8
 8004ab0:	464b      	mov	r3, r9
 8004ab2:	1891      	adds	r1, r2, r2
 8004ab4:	6239      	str	r1, [r7, #32]
 8004ab6:	415b      	adcs	r3, r3
 8004ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004abe:	4641      	mov	r1, r8
 8004ac0:	1854      	adds	r4, r2, r1
 8004ac2:	4649      	mov	r1, r9
 8004ac4:	eb43 0501 	adc.w	r5, r3, r1
 8004ac8:	f04f 0200 	mov.w	r2, #0
 8004acc:	f04f 0300 	mov.w	r3, #0
 8004ad0:	00eb      	lsls	r3, r5, #3
 8004ad2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ad6:	00e2      	lsls	r2, r4, #3
 8004ad8:	4614      	mov	r4, r2
 8004ada:	461d      	mov	r5, r3
 8004adc:	4643      	mov	r3, r8
 8004ade:	18e3      	adds	r3, r4, r3
 8004ae0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ae4:	464b      	mov	r3, r9
 8004ae6:	eb45 0303 	adc.w	r3, r5, r3
 8004aea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004afa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	f04f 0300 	mov.w	r3, #0
 8004b06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b0a:	4629      	mov	r1, r5
 8004b0c:	008b      	lsls	r3, r1, #2
 8004b0e:	4621      	mov	r1, r4
 8004b10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b14:	4621      	mov	r1, r4
 8004b16:	008a      	lsls	r2, r1, #2
 8004b18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b1c:	f7fb fbb0 	bl	8000280 <__aeabi_uldivmod>
 8004b20:	4602      	mov	r2, r0
 8004b22:	460b      	mov	r3, r1
 8004b24:	4b60      	ldr	r3, [pc, #384]	; (8004ca8 <UART_SetConfig+0x4e4>)
 8004b26:	fba3 2302 	umull	r2, r3, r3, r2
 8004b2a:	095b      	lsrs	r3, r3, #5
 8004b2c:	011c      	lsls	r4, r3, #4
 8004b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b32:	2200      	movs	r2, #0
 8004b34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b40:	4642      	mov	r2, r8
 8004b42:	464b      	mov	r3, r9
 8004b44:	1891      	adds	r1, r2, r2
 8004b46:	61b9      	str	r1, [r7, #24]
 8004b48:	415b      	adcs	r3, r3
 8004b4a:	61fb      	str	r3, [r7, #28]
 8004b4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b50:	4641      	mov	r1, r8
 8004b52:	1851      	adds	r1, r2, r1
 8004b54:	6139      	str	r1, [r7, #16]
 8004b56:	4649      	mov	r1, r9
 8004b58:	414b      	adcs	r3, r1
 8004b5a:	617b      	str	r3, [r7, #20]
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	f04f 0300 	mov.w	r3, #0
 8004b64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b68:	4659      	mov	r1, fp
 8004b6a:	00cb      	lsls	r3, r1, #3
 8004b6c:	4651      	mov	r1, sl
 8004b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b72:	4651      	mov	r1, sl
 8004b74:	00ca      	lsls	r2, r1, #3
 8004b76:	4610      	mov	r0, r2
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	4642      	mov	r2, r8
 8004b7e:	189b      	adds	r3, r3, r2
 8004b80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b84:	464b      	mov	r3, r9
 8004b86:	460a      	mov	r2, r1
 8004b88:	eb42 0303 	adc.w	r3, r2, r3
 8004b8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b9c:	f04f 0200 	mov.w	r2, #0
 8004ba0:	f04f 0300 	mov.w	r3, #0
 8004ba4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ba8:	4649      	mov	r1, r9
 8004baa:	008b      	lsls	r3, r1, #2
 8004bac:	4641      	mov	r1, r8
 8004bae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bb2:	4641      	mov	r1, r8
 8004bb4:	008a      	lsls	r2, r1, #2
 8004bb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004bba:	f7fb fb61 	bl	8000280 <__aeabi_uldivmod>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	4611      	mov	r1, r2
 8004bc4:	4b38      	ldr	r3, [pc, #224]	; (8004ca8 <UART_SetConfig+0x4e4>)
 8004bc6:	fba3 2301 	umull	r2, r3, r3, r1
 8004bca:	095b      	lsrs	r3, r3, #5
 8004bcc:	2264      	movs	r2, #100	; 0x64
 8004bce:	fb02 f303 	mul.w	r3, r2, r3
 8004bd2:	1acb      	subs	r3, r1, r3
 8004bd4:	011b      	lsls	r3, r3, #4
 8004bd6:	3332      	adds	r3, #50	; 0x32
 8004bd8:	4a33      	ldr	r2, [pc, #204]	; (8004ca8 <UART_SetConfig+0x4e4>)
 8004bda:	fba2 2303 	umull	r2, r3, r2, r3
 8004bde:	095b      	lsrs	r3, r3, #5
 8004be0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004be4:	441c      	add	r4, r3
 8004be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bea:	2200      	movs	r2, #0
 8004bec:	673b      	str	r3, [r7, #112]	; 0x70
 8004bee:	677a      	str	r2, [r7, #116]	; 0x74
 8004bf0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004bf4:	4642      	mov	r2, r8
 8004bf6:	464b      	mov	r3, r9
 8004bf8:	1891      	adds	r1, r2, r2
 8004bfa:	60b9      	str	r1, [r7, #8]
 8004bfc:	415b      	adcs	r3, r3
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c04:	4641      	mov	r1, r8
 8004c06:	1851      	adds	r1, r2, r1
 8004c08:	6039      	str	r1, [r7, #0]
 8004c0a:	4649      	mov	r1, r9
 8004c0c:	414b      	adcs	r3, r1
 8004c0e:	607b      	str	r3, [r7, #4]
 8004c10:	f04f 0200 	mov.w	r2, #0
 8004c14:	f04f 0300 	mov.w	r3, #0
 8004c18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c1c:	4659      	mov	r1, fp
 8004c1e:	00cb      	lsls	r3, r1, #3
 8004c20:	4651      	mov	r1, sl
 8004c22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c26:	4651      	mov	r1, sl
 8004c28:	00ca      	lsls	r2, r1, #3
 8004c2a:	4610      	mov	r0, r2
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4603      	mov	r3, r0
 8004c30:	4642      	mov	r2, r8
 8004c32:	189b      	adds	r3, r3, r2
 8004c34:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c36:	464b      	mov	r3, r9
 8004c38:	460a      	mov	r2, r1
 8004c3a:	eb42 0303 	adc.w	r3, r2, r3
 8004c3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	663b      	str	r3, [r7, #96]	; 0x60
 8004c4a:	667a      	str	r2, [r7, #100]	; 0x64
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	f04f 0300 	mov.w	r3, #0
 8004c54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c58:	4649      	mov	r1, r9
 8004c5a:	008b      	lsls	r3, r1, #2
 8004c5c:	4641      	mov	r1, r8
 8004c5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c62:	4641      	mov	r1, r8
 8004c64:	008a      	lsls	r2, r1, #2
 8004c66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c6a:	f7fb fb09 	bl	8000280 <__aeabi_uldivmod>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	4b0d      	ldr	r3, [pc, #52]	; (8004ca8 <UART_SetConfig+0x4e4>)
 8004c74:	fba3 1302 	umull	r1, r3, r3, r2
 8004c78:	095b      	lsrs	r3, r3, #5
 8004c7a:	2164      	movs	r1, #100	; 0x64
 8004c7c:	fb01 f303 	mul.w	r3, r1, r3
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	011b      	lsls	r3, r3, #4
 8004c84:	3332      	adds	r3, #50	; 0x32
 8004c86:	4a08      	ldr	r2, [pc, #32]	; (8004ca8 <UART_SetConfig+0x4e4>)
 8004c88:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8c:	095b      	lsrs	r3, r3, #5
 8004c8e:	f003 020f 	and.w	r2, r3, #15
 8004c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4422      	add	r2, r4
 8004c9a:	609a      	str	r2, [r3, #8]
}
 8004c9c:	bf00      	nop
 8004c9e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ca8:	51eb851f 	.word	0x51eb851f

08004cac <std>:
 8004cac:	2300      	movs	r3, #0
 8004cae:	b510      	push	{r4, lr}
 8004cb0:	4604      	mov	r4, r0
 8004cb2:	e9c0 3300 	strd	r3, r3, [r0]
 8004cb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004cba:	6083      	str	r3, [r0, #8]
 8004cbc:	8181      	strh	r1, [r0, #12]
 8004cbe:	6643      	str	r3, [r0, #100]	; 0x64
 8004cc0:	81c2      	strh	r2, [r0, #14]
 8004cc2:	6183      	str	r3, [r0, #24]
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	2208      	movs	r2, #8
 8004cc8:	305c      	adds	r0, #92	; 0x5c
 8004cca:	f000 f906 	bl	8004eda <memset>
 8004cce:	4b0d      	ldr	r3, [pc, #52]	; (8004d04 <std+0x58>)
 8004cd0:	6263      	str	r3, [r4, #36]	; 0x24
 8004cd2:	4b0d      	ldr	r3, [pc, #52]	; (8004d08 <std+0x5c>)
 8004cd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004cd6:	4b0d      	ldr	r3, [pc, #52]	; (8004d0c <std+0x60>)
 8004cd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004cda:	4b0d      	ldr	r3, [pc, #52]	; (8004d10 <std+0x64>)
 8004cdc:	6323      	str	r3, [r4, #48]	; 0x30
 8004cde:	4b0d      	ldr	r3, [pc, #52]	; (8004d14 <std+0x68>)
 8004ce0:	6224      	str	r4, [r4, #32]
 8004ce2:	429c      	cmp	r4, r3
 8004ce4:	d006      	beq.n	8004cf4 <std+0x48>
 8004ce6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004cea:	4294      	cmp	r4, r2
 8004cec:	d002      	beq.n	8004cf4 <std+0x48>
 8004cee:	33d0      	adds	r3, #208	; 0xd0
 8004cf0:	429c      	cmp	r4, r3
 8004cf2:	d105      	bne.n	8004d00 <std+0x54>
 8004cf4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cfc:	f000 b966 	b.w	8004fcc <__retarget_lock_init_recursive>
 8004d00:	bd10      	pop	{r4, pc}
 8004d02:	bf00      	nop
 8004d04:	08004e55 	.word	0x08004e55
 8004d08:	08004e77 	.word	0x08004e77
 8004d0c:	08004eaf 	.word	0x08004eaf
 8004d10:	08004ed3 	.word	0x08004ed3
 8004d14:	20000194 	.word	0x20000194

08004d18 <stdio_exit_handler>:
 8004d18:	4a02      	ldr	r2, [pc, #8]	; (8004d24 <stdio_exit_handler+0xc>)
 8004d1a:	4903      	ldr	r1, [pc, #12]	; (8004d28 <stdio_exit_handler+0x10>)
 8004d1c:	4803      	ldr	r0, [pc, #12]	; (8004d2c <stdio_exit_handler+0x14>)
 8004d1e:	f000 b869 	b.w	8004df4 <_fwalk_sglue>
 8004d22:	bf00      	nop
 8004d24:	20000010 	.word	0x20000010
 8004d28:	08005879 	.word	0x08005879
 8004d2c:	2000001c 	.word	0x2000001c

08004d30 <cleanup_stdio>:
 8004d30:	6841      	ldr	r1, [r0, #4]
 8004d32:	4b0c      	ldr	r3, [pc, #48]	; (8004d64 <cleanup_stdio+0x34>)
 8004d34:	4299      	cmp	r1, r3
 8004d36:	b510      	push	{r4, lr}
 8004d38:	4604      	mov	r4, r0
 8004d3a:	d001      	beq.n	8004d40 <cleanup_stdio+0x10>
 8004d3c:	f000 fd9c 	bl	8005878 <_fflush_r>
 8004d40:	68a1      	ldr	r1, [r4, #8]
 8004d42:	4b09      	ldr	r3, [pc, #36]	; (8004d68 <cleanup_stdio+0x38>)
 8004d44:	4299      	cmp	r1, r3
 8004d46:	d002      	beq.n	8004d4e <cleanup_stdio+0x1e>
 8004d48:	4620      	mov	r0, r4
 8004d4a:	f000 fd95 	bl	8005878 <_fflush_r>
 8004d4e:	68e1      	ldr	r1, [r4, #12]
 8004d50:	4b06      	ldr	r3, [pc, #24]	; (8004d6c <cleanup_stdio+0x3c>)
 8004d52:	4299      	cmp	r1, r3
 8004d54:	d004      	beq.n	8004d60 <cleanup_stdio+0x30>
 8004d56:	4620      	mov	r0, r4
 8004d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d5c:	f000 bd8c 	b.w	8005878 <_fflush_r>
 8004d60:	bd10      	pop	{r4, pc}
 8004d62:	bf00      	nop
 8004d64:	20000194 	.word	0x20000194
 8004d68:	200001fc 	.word	0x200001fc
 8004d6c:	20000264 	.word	0x20000264

08004d70 <global_stdio_init.part.0>:
 8004d70:	b510      	push	{r4, lr}
 8004d72:	4b0b      	ldr	r3, [pc, #44]	; (8004da0 <global_stdio_init.part.0+0x30>)
 8004d74:	4c0b      	ldr	r4, [pc, #44]	; (8004da4 <global_stdio_init.part.0+0x34>)
 8004d76:	4a0c      	ldr	r2, [pc, #48]	; (8004da8 <global_stdio_init.part.0+0x38>)
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	4620      	mov	r0, r4
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	2104      	movs	r1, #4
 8004d80:	f7ff ff94 	bl	8004cac <std>
 8004d84:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004d88:	2201      	movs	r2, #1
 8004d8a:	2109      	movs	r1, #9
 8004d8c:	f7ff ff8e 	bl	8004cac <std>
 8004d90:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004d94:	2202      	movs	r2, #2
 8004d96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d9a:	2112      	movs	r1, #18
 8004d9c:	f7ff bf86 	b.w	8004cac <std>
 8004da0:	200002cc 	.word	0x200002cc
 8004da4:	20000194 	.word	0x20000194
 8004da8:	08004d19 	.word	0x08004d19

08004dac <__sfp_lock_acquire>:
 8004dac:	4801      	ldr	r0, [pc, #4]	; (8004db4 <__sfp_lock_acquire+0x8>)
 8004dae:	f000 b90e 	b.w	8004fce <__retarget_lock_acquire_recursive>
 8004db2:	bf00      	nop
 8004db4:	200002d5 	.word	0x200002d5

08004db8 <__sfp_lock_release>:
 8004db8:	4801      	ldr	r0, [pc, #4]	; (8004dc0 <__sfp_lock_release+0x8>)
 8004dba:	f000 b909 	b.w	8004fd0 <__retarget_lock_release_recursive>
 8004dbe:	bf00      	nop
 8004dc0:	200002d5 	.word	0x200002d5

08004dc4 <__sinit>:
 8004dc4:	b510      	push	{r4, lr}
 8004dc6:	4604      	mov	r4, r0
 8004dc8:	f7ff fff0 	bl	8004dac <__sfp_lock_acquire>
 8004dcc:	6a23      	ldr	r3, [r4, #32]
 8004dce:	b11b      	cbz	r3, 8004dd8 <__sinit+0x14>
 8004dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dd4:	f7ff bff0 	b.w	8004db8 <__sfp_lock_release>
 8004dd8:	4b04      	ldr	r3, [pc, #16]	; (8004dec <__sinit+0x28>)
 8004dda:	6223      	str	r3, [r4, #32]
 8004ddc:	4b04      	ldr	r3, [pc, #16]	; (8004df0 <__sinit+0x2c>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1f5      	bne.n	8004dd0 <__sinit+0xc>
 8004de4:	f7ff ffc4 	bl	8004d70 <global_stdio_init.part.0>
 8004de8:	e7f2      	b.n	8004dd0 <__sinit+0xc>
 8004dea:	bf00      	nop
 8004dec:	08004d31 	.word	0x08004d31
 8004df0:	200002cc 	.word	0x200002cc

08004df4 <_fwalk_sglue>:
 8004df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004df8:	4607      	mov	r7, r0
 8004dfa:	4688      	mov	r8, r1
 8004dfc:	4614      	mov	r4, r2
 8004dfe:	2600      	movs	r6, #0
 8004e00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e04:	f1b9 0901 	subs.w	r9, r9, #1
 8004e08:	d505      	bpl.n	8004e16 <_fwalk_sglue+0x22>
 8004e0a:	6824      	ldr	r4, [r4, #0]
 8004e0c:	2c00      	cmp	r4, #0
 8004e0e:	d1f7      	bne.n	8004e00 <_fwalk_sglue+0xc>
 8004e10:	4630      	mov	r0, r6
 8004e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e16:	89ab      	ldrh	r3, [r5, #12]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d907      	bls.n	8004e2c <_fwalk_sglue+0x38>
 8004e1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e20:	3301      	adds	r3, #1
 8004e22:	d003      	beq.n	8004e2c <_fwalk_sglue+0x38>
 8004e24:	4629      	mov	r1, r5
 8004e26:	4638      	mov	r0, r7
 8004e28:	47c0      	blx	r8
 8004e2a:	4306      	orrs	r6, r0
 8004e2c:	3568      	adds	r5, #104	; 0x68
 8004e2e:	e7e9      	b.n	8004e04 <_fwalk_sglue+0x10>

08004e30 <iprintf>:
 8004e30:	b40f      	push	{r0, r1, r2, r3}
 8004e32:	b507      	push	{r0, r1, r2, lr}
 8004e34:	4906      	ldr	r1, [pc, #24]	; (8004e50 <iprintf+0x20>)
 8004e36:	ab04      	add	r3, sp, #16
 8004e38:	6808      	ldr	r0, [r1, #0]
 8004e3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e3e:	6881      	ldr	r1, [r0, #8]
 8004e40:	9301      	str	r3, [sp, #4]
 8004e42:	f000 f9e9 	bl	8005218 <_vfiprintf_r>
 8004e46:	b003      	add	sp, #12
 8004e48:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e4c:	b004      	add	sp, #16
 8004e4e:	4770      	bx	lr
 8004e50:	20000068 	.word	0x20000068

08004e54 <__sread>:
 8004e54:	b510      	push	{r4, lr}
 8004e56:	460c      	mov	r4, r1
 8004e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e5c:	f000 f868 	bl	8004f30 <_read_r>
 8004e60:	2800      	cmp	r0, #0
 8004e62:	bfab      	itete	ge
 8004e64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e66:	89a3      	ldrhlt	r3, [r4, #12]
 8004e68:	181b      	addge	r3, r3, r0
 8004e6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e6e:	bfac      	ite	ge
 8004e70:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e72:	81a3      	strhlt	r3, [r4, #12]
 8004e74:	bd10      	pop	{r4, pc}

08004e76 <__swrite>:
 8004e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e7a:	461f      	mov	r7, r3
 8004e7c:	898b      	ldrh	r3, [r1, #12]
 8004e7e:	05db      	lsls	r3, r3, #23
 8004e80:	4605      	mov	r5, r0
 8004e82:	460c      	mov	r4, r1
 8004e84:	4616      	mov	r6, r2
 8004e86:	d505      	bpl.n	8004e94 <__swrite+0x1e>
 8004e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f000 f83c 	bl	8004f0c <_lseek_r>
 8004e94:	89a3      	ldrh	r3, [r4, #12]
 8004e96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e9e:	81a3      	strh	r3, [r4, #12]
 8004ea0:	4632      	mov	r2, r6
 8004ea2:	463b      	mov	r3, r7
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004eaa:	f000 b853 	b.w	8004f54 <_write_r>

08004eae <__sseek>:
 8004eae:	b510      	push	{r4, lr}
 8004eb0:	460c      	mov	r4, r1
 8004eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eb6:	f000 f829 	bl	8004f0c <_lseek_r>
 8004eba:	1c43      	adds	r3, r0, #1
 8004ebc:	89a3      	ldrh	r3, [r4, #12]
 8004ebe:	bf15      	itete	ne
 8004ec0:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ec2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ec6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004eca:	81a3      	strheq	r3, [r4, #12]
 8004ecc:	bf18      	it	ne
 8004ece:	81a3      	strhne	r3, [r4, #12]
 8004ed0:	bd10      	pop	{r4, pc}

08004ed2 <__sclose>:
 8004ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ed6:	f000 b809 	b.w	8004eec <_close_r>

08004eda <memset>:
 8004eda:	4402      	add	r2, r0
 8004edc:	4603      	mov	r3, r0
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d100      	bne.n	8004ee4 <memset+0xa>
 8004ee2:	4770      	bx	lr
 8004ee4:	f803 1b01 	strb.w	r1, [r3], #1
 8004ee8:	e7f9      	b.n	8004ede <memset+0x4>
	...

08004eec <_close_r>:
 8004eec:	b538      	push	{r3, r4, r5, lr}
 8004eee:	4d06      	ldr	r5, [pc, #24]	; (8004f08 <_close_r+0x1c>)
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	4604      	mov	r4, r0
 8004ef4:	4608      	mov	r0, r1
 8004ef6:	602b      	str	r3, [r5, #0]
 8004ef8:	f7fb fdf5 	bl	8000ae6 <_close>
 8004efc:	1c43      	adds	r3, r0, #1
 8004efe:	d102      	bne.n	8004f06 <_close_r+0x1a>
 8004f00:	682b      	ldr	r3, [r5, #0]
 8004f02:	b103      	cbz	r3, 8004f06 <_close_r+0x1a>
 8004f04:	6023      	str	r3, [r4, #0]
 8004f06:	bd38      	pop	{r3, r4, r5, pc}
 8004f08:	200002d0 	.word	0x200002d0

08004f0c <_lseek_r>:
 8004f0c:	b538      	push	{r3, r4, r5, lr}
 8004f0e:	4d07      	ldr	r5, [pc, #28]	; (8004f2c <_lseek_r+0x20>)
 8004f10:	4604      	mov	r4, r0
 8004f12:	4608      	mov	r0, r1
 8004f14:	4611      	mov	r1, r2
 8004f16:	2200      	movs	r2, #0
 8004f18:	602a      	str	r2, [r5, #0]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	f7fb fe0a 	bl	8000b34 <_lseek>
 8004f20:	1c43      	adds	r3, r0, #1
 8004f22:	d102      	bne.n	8004f2a <_lseek_r+0x1e>
 8004f24:	682b      	ldr	r3, [r5, #0]
 8004f26:	b103      	cbz	r3, 8004f2a <_lseek_r+0x1e>
 8004f28:	6023      	str	r3, [r4, #0]
 8004f2a:	bd38      	pop	{r3, r4, r5, pc}
 8004f2c:	200002d0 	.word	0x200002d0

08004f30 <_read_r>:
 8004f30:	b538      	push	{r3, r4, r5, lr}
 8004f32:	4d07      	ldr	r5, [pc, #28]	; (8004f50 <_read_r+0x20>)
 8004f34:	4604      	mov	r4, r0
 8004f36:	4608      	mov	r0, r1
 8004f38:	4611      	mov	r1, r2
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	602a      	str	r2, [r5, #0]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	f7fb fd98 	bl	8000a74 <_read>
 8004f44:	1c43      	adds	r3, r0, #1
 8004f46:	d102      	bne.n	8004f4e <_read_r+0x1e>
 8004f48:	682b      	ldr	r3, [r5, #0]
 8004f4a:	b103      	cbz	r3, 8004f4e <_read_r+0x1e>
 8004f4c:	6023      	str	r3, [r4, #0]
 8004f4e:	bd38      	pop	{r3, r4, r5, pc}
 8004f50:	200002d0 	.word	0x200002d0

08004f54 <_write_r>:
 8004f54:	b538      	push	{r3, r4, r5, lr}
 8004f56:	4d07      	ldr	r5, [pc, #28]	; (8004f74 <_write_r+0x20>)
 8004f58:	4604      	mov	r4, r0
 8004f5a:	4608      	mov	r0, r1
 8004f5c:	4611      	mov	r1, r2
 8004f5e:	2200      	movs	r2, #0
 8004f60:	602a      	str	r2, [r5, #0]
 8004f62:	461a      	mov	r2, r3
 8004f64:	f7fb fda3 	bl	8000aae <_write>
 8004f68:	1c43      	adds	r3, r0, #1
 8004f6a:	d102      	bne.n	8004f72 <_write_r+0x1e>
 8004f6c:	682b      	ldr	r3, [r5, #0]
 8004f6e:	b103      	cbz	r3, 8004f72 <_write_r+0x1e>
 8004f70:	6023      	str	r3, [r4, #0]
 8004f72:	bd38      	pop	{r3, r4, r5, pc}
 8004f74:	200002d0 	.word	0x200002d0

08004f78 <__errno>:
 8004f78:	4b01      	ldr	r3, [pc, #4]	; (8004f80 <__errno+0x8>)
 8004f7a:	6818      	ldr	r0, [r3, #0]
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	20000068 	.word	0x20000068

08004f84 <__libc_init_array>:
 8004f84:	b570      	push	{r4, r5, r6, lr}
 8004f86:	4d0d      	ldr	r5, [pc, #52]	; (8004fbc <__libc_init_array+0x38>)
 8004f88:	4c0d      	ldr	r4, [pc, #52]	; (8004fc0 <__libc_init_array+0x3c>)
 8004f8a:	1b64      	subs	r4, r4, r5
 8004f8c:	10a4      	asrs	r4, r4, #2
 8004f8e:	2600      	movs	r6, #0
 8004f90:	42a6      	cmp	r6, r4
 8004f92:	d109      	bne.n	8004fa8 <__libc_init_array+0x24>
 8004f94:	4d0b      	ldr	r5, [pc, #44]	; (8004fc4 <__libc_init_array+0x40>)
 8004f96:	4c0c      	ldr	r4, [pc, #48]	; (8004fc8 <__libc_init_array+0x44>)
 8004f98:	f000 fdc0 	bl	8005b1c <_init>
 8004f9c:	1b64      	subs	r4, r4, r5
 8004f9e:	10a4      	asrs	r4, r4, #2
 8004fa0:	2600      	movs	r6, #0
 8004fa2:	42a6      	cmp	r6, r4
 8004fa4:	d105      	bne.n	8004fb2 <__libc_init_array+0x2e>
 8004fa6:	bd70      	pop	{r4, r5, r6, pc}
 8004fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fac:	4798      	blx	r3
 8004fae:	3601      	adds	r6, #1
 8004fb0:	e7ee      	b.n	8004f90 <__libc_init_array+0xc>
 8004fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fb6:	4798      	blx	r3
 8004fb8:	3601      	adds	r6, #1
 8004fba:	e7f2      	b.n	8004fa2 <__libc_init_array+0x1e>
 8004fbc:	08005bac 	.word	0x08005bac
 8004fc0:	08005bac 	.word	0x08005bac
 8004fc4:	08005bac 	.word	0x08005bac
 8004fc8:	08005bb0 	.word	0x08005bb0

08004fcc <__retarget_lock_init_recursive>:
 8004fcc:	4770      	bx	lr

08004fce <__retarget_lock_acquire_recursive>:
 8004fce:	4770      	bx	lr

08004fd0 <__retarget_lock_release_recursive>:
 8004fd0:	4770      	bx	lr
	...

08004fd4 <_free_r>:
 8004fd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fd6:	2900      	cmp	r1, #0
 8004fd8:	d044      	beq.n	8005064 <_free_r+0x90>
 8004fda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fde:	9001      	str	r0, [sp, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f1a1 0404 	sub.w	r4, r1, #4
 8004fe6:	bfb8      	it	lt
 8004fe8:	18e4      	addlt	r4, r4, r3
 8004fea:	f000 f8df 	bl	80051ac <__malloc_lock>
 8004fee:	4a1e      	ldr	r2, [pc, #120]	; (8005068 <_free_r+0x94>)
 8004ff0:	9801      	ldr	r0, [sp, #4]
 8004ff2:	6813      	ldr	r3, [r2, #0]
 8004ff4:	b933      	cbnz	r3, 8005004 <_free_r+0x30>
 8004ff6:	6063      	str	r3, [r4, #4]
 8004ff8:	6014      	str	r4, [r2, #0]
 8004ffa:	b003      	add	sp, #12
 8004ffc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005000:	f000 b8da 	b.w	80051b8 <__malloc_unlock>
 8005004:	42a3      	cmp	r3, r4
 8005006:	d908      	bls.n	800501a <_free_r+0x46>
 8005008:	6825      	ldr	r5, [r4, #0]
 800500a:	1961      	adds	r1, r4, r5
 800500c:	428b      	cmp	r3, r1
 800500e:	bf01      	itttt	eq
 8005010:	6819      	ldreq	r1, [r3, #0]
 8005012:	685b      	ldreq	r3, [r3, #4]
 8005014:	1949      	addeq	r1, r1, r5
 8005016:	6021      	streq	r1, [r4, #0]
 8005018:	e7ed      	b.n	8004ff6 <_free_r+0x22>
 800501a:	461a      	mov	r2, r3
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	b10b      	cbz	r3, 8005024 <_free_r+0x50>
 8005020:	42a3      	cmp	r3, r4
 8005022:	d9fa      	bls.n	800501a <_free_r+0x46>
 8005024:	6811      	ldr	r1, [r2, #0]
 8005026:	1855      	adds	r5, r2, r1
 8005028:	42a5      	cmp	r5, r4
 800502a:	d10b      	bne.n	8005044 <_free_r+0x70>
 800502c:	6824      	ldr	r4, [r4, #0]
 800502e:	4421      	add	r1, r4
 8005030:	1854      	adds	r4, r2, r1
 8005032:	42a3      	cmp	r3, r4
 8005034:	6011      	str	r1, [r2, #0]
 8005036:	d1e0      	bne.n	8004ffa <_free_r+0x26>
 8005038:	681c      	ldr	r4, [r3, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	6053      	str	r3, [r2, #4]
 800503e:	440c      	add	r4, r1
 8005040:	6014      	str	r4, [r2, #0]
 8005042:	e7da      	b.n	8004ffa <_free_r+0x26>
 8005044:	d902      	bls.n	800504c <_free_r+0x78>
 8005046:	230c      	movs	r3, #12
 8005048:	6003      	str	r3, [r0, #0]
 800504a:	e7d6      	b.n	8004ffa <_free_r+0x26>
 800504c:	6825      	ldr	r5, [r4, #0]
 800504e:	1961      	adds	r1, r4, r5
 8005050:	428b      	cmp	r3, r1
 8005052:	bf04      	itt	eq
 8005054:	6819      	ldreq	r1, [r3, #0]
 8005056:	685b      	ldreq	r3, [r3, #4]
 8005058:	6063      	str	r3, [r4, #4]
 800505a:	bf04      	itt	eq
 800505c:	1949      	addeq	r1, r1, r5
 800505e:	6021      	streq	r1, [r4, #0]
 8005060:	6054      	str	r4, [r2, #4]
 8005062:	e7ca      	b.n	8004ffa <_free_r+0x26>
 8005064:	b003      	add	sp, #12
 8005066:	bd30      	pop	{r4, r5, pc}
 8005068:	200002d8 	.word	0x200002d8

0800506c <sbrk_aligned>:
 800506c:	b570      	push	{r4, r5, r6, lr}
 800506e:	4e0e      	ldr	r6, [pc, #56]	; (80050a8 <sbrk_aligned+0x3c>)
 8005070:	460c      	mov	r4, r1
 8005072:	6831      	ldr	r1, [r6, #0]
 8005074:	4605      	mov	r5, r0
 8005076:	b911      	cbnz	r1, 800507e <sbrk_aligned+0x12>
 8005078:	f000 fcbc 	bl	80059f4 <_sbrk_r>
 800507c:	6030      	str	r0, [r6, #0]
 800507e:	4621      	mov	r1, r4
 8005080:	4628      	mov	r0, r5
 8005082:	f000 fcb7 	bl	80059f4 <_sbrk_r>
 8005086:	1c43      	adds	r3, r0, #1
 8005088:	d00a      	beq.n	80050a0 <sbrk_aligned+0x34>
 800508a:	1cc4      	adds	r4, r0, #3
 800508c:	f024 0403 	bic.w	r4, r4, #3
 8005090:	42a0      	cmp	r0, r4
 8005092:	d007      	beq.n	80050a4 <sbrk_aligned+0x38>
 8005094:	1a21      	subs	r1, r4, r0
 8005096:	4628      	mov	r0, r5
 8005098:	f000 fcac 	bl	80059f4 <_sbrk_r>
 800509c:	3001      	adds	r0, #1
 800509e:	d101      	bne.n	80050a4 <sbrk_aligned+0x38>
 80050a0:	f04f 34ff 	mov.w	r4, #4294967295
 80050a4:	4620      	mov	r0, r4
 80050a6:	bd70      	pop	{r4, r5, r6, pc}
 80050a8:	200002dc 	.word	0x200002dc

080050ac <_malloc_r>:
 80050ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050b0:	1ccd      	adds	r5, r1, #3
 80050b2:	f025 0503 	bic.w	r5, r5, #3
 80050b6:	3508      	adds	r5, #8
 80050b8:	2d0c      	cmp	r5, #12
 80050ba:	bf38      	it	cc
 80050bc:	250c      	movcc	r5, #12
 80050be:	2d00      	cmp	r5, #0
 80050c0:	4607      	mov	r7, r0
 80050c2:	db01      	blt.n	80050c8 <_malloc_r+0x1c>
 80050c4:	42a9      	cmp	r1, r5
 80050c6:	d905      	bls.n	80050d4 <_malloc_r+0x28>
 80050c8:	230c      	movs	r3, #12
 80050ca:	603b      	str	r3, [r7, #0]
 80050cc:	2600      	movs	r6, #0
 80050ce:	4630      	mov	r0, r6
 80050d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80051a8 <_malloc_r+0xfc>
 80050d8:	f000 f868 	bl	80051ac <__malloc_lock>
 80050dc:	f8d8 3000 	ldr.w	r3, [r8]
 80050e0:	461c      	mov	r4, r3
 80050e2:	bb5c      	cbnz	r4, 800513c <_malloc_r+0x90>
 80050e4:	4629      	mov	r1, r5
 80050e6:	4638      	mov	r0, r7
 80050e8:	f7ff ffc0 	bl	800506c <sbrk_aligned>
 80050ec:	1c43      	adds	r3, r0, #1
 80050ee:	4604      	mov	r4, r0
 80050f0:	d155      	bne.n	800519e <_malloc_r+0xf2>
 80050f2:	f8d8 4000 	ldr.w	r4, [r8]
 80050f6:	4626      	mov	r6, r4
 80050f8:	2e00      	cmp	r6, #0
 80050fa:	d145      	bne.n	8005188 <_malloc_r+0xdc>
 80050fc:	2c00      	cmp	r4, #0
 80050fe:	d048      	beq.n	8005192 <_malloc_r+0xe6>
 8005100:	6823      	ldr	r3, [r4, #0]
 8005102:	4631      	mov	r1, r6
 8005104:	4638      	mov	r0, r7
 8005106:	eb04 0903 	add.w	r9, r4, r3
 800510a:	f000 fc73 	bl	80059f4 <_sbrk_r>
 800510e:	4581      	cmp	r9, r0
 8005110:	d13f      	bne.n	8005192 <_malloc_r+0xe6>
 8005112:	6821      	ldr	r1, [r4, #0]
 8005114:	1a6d      	subs	r5, r5, r1
 8005116:	4629      	mov	r1, r5
 8005118:	4638      	mov	r0, r7
 800511a:	f7ff ffa7 	bl	800506c <sbrk_aligned>
 800511e:	3001      	adds	r0, #1
 8005120:	d037      	beq.n	8005192 <_malloc_r+0xe6>
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	442b      	add	r3, r5
 8005126:	6023      	str	r3, [r4, #0]
 8005128:	f8d8 3000 	ldr.w	r3, [r8]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d038      	beq.n	80051a2 <_malloc_r+0xf6>
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	42a2      	cmp	r2, r4
 8005134:	d12b      	bne.n	800518e <_malloc_r+0xe2>
 8005136:	2200      	movs	r2, #0
 8005138:	605a      	str	r2, [r3, #4]
 800513a:	e00f      	b.n	800515c <_malloc_r+0xb0>
 800513c:	6822      	ldr	r2, [r4, #0]
 800513e:	1b52      	subs	r2, r2, r5
 8005140:	d41f      	bmi.n	8005182 <_malloc_r+0xd6>
 8005142:	2a0b      	cmp	r2, #11
 8005144:	d917      	bls.n	8005176 <_malloc_r+0xca>
 8005146:	1961      	adds	r1, r4, r5
 8005148:	42a3      	cmp	r3, r4
 800514a:	6025      	str	r5, [r4, #0]
 800514c:	bf18      	it	ne
 800514e:	6059      	strne	r1, [r3, #4]
 8005150:	6863      	ldr	r3, [r4, #4]
 8005152:	bf08      	it	eq
 8005154:	f8c8 1000 	streq.w	r1, [r8]
 8005158:	5162      	str	r2, [r4, r5]
 800515a:	604b      	str	r3, [r1, #4]
 800515c:	4638      	mov	r0, r7
 800515e:	f104 060b 	add.w	r6, r4, #11
 8005162:	f000 f829 	bl	80051b8 <__malloc_unlock>
 8005166:	f026 0607 	bic.w	r6, r6, #7
 800516a:	1d23      	adds	r3, r4, #4
 800516c:	1af2      	subs	r2, r6, r3
 800516e:	d0ae      	beq.n	80050ce <_malloc_r+0x22>
 8005170:	1b9b      	subs	r3, r3, r6
 8005172:	50a3      	str	r3, [r4, r2]
 8005174:	e7ab      	b.n	80050ce <_malloc_r+0x22>
 8005176:	42a3      	cmp	r3, r4
 8005178:	6862      	ldr	r2, [r4, #4]
 800517a:	d1dd      	bne.n	8005138 <_malloc_r+0x8c>
 800517c:	f8c8 2000 	str.w	r2, [r8]
 8005180:	e7ec      	b.n	800515c <_malloc_r+0xb0>
 8005182:	4623      	mov	r3, r4
 8005184:	6864      	ldr	r4, [r4, #4]
 8005186:	e7ac      	b.n	80050e2 <_malloc_r+0x36>
 8005188:	4634      	mov	r4, r6
 800518a:	6876      	ldr	r6, [r6, #4]
 800518c:	e7b4      	b.n	80050f8 <_malloc_r+0x4c>
 800518e:	4613      	mov	r3, r2
 8005190:	e7cc      	b.n	800512c <_malloc_r+0x80>
 8005192:	230c      	movs	r3, #12
 8005194:	603b      	str	r3, [r7, #0]
 8005196:	4638      	mov	r0, r7
 8005198:	f000 f80e 	bl	80051b8 <__malloc_unlock>
 800519c:	e797      	b.n	80050ce <_malloc_r+0x22>
 800519e:	6025      	str	r5, [r4, #0]
 80051a0:	e7dc      	b.n	800515c <_malloc_r+0xb0>
 80051a2:	605b      	str	r3, [r3, #4]
 80051a4:	deff      	udf	#255	; 0xff
 80051a6:	bf00      	nop
 80051a8:	200002d8 	.word	0x200002d8

080051ac <__malloc_lock>:
 80051ac:	4801      	ldr	r0, [pc, #4]	; (80051b4 <__malloc_lock+0x8>)
 80051ae:	f7ff bf0e 	b.w	8004fce <__retarget_lock_acquire_recursive>
 80051b2:	bf00      	nop
 80051b4:	200002d4 	.word	0x200002d4

080051b8 <__malloc_unlock>:
 80051b8:	4801      	ldr	r0, [pc, #4]	; (80051c0 <__malloc_unlock+0x8>)
 80051ba:	f7ff bf09 	b.w	8004fd0 <__retarget_lock_release_recursive>
 80051be:	bf00      	nop
 80051c0:	200002d4 	.word	0x200002d4

080051c4 <__sfputc_r>:
 80051c4:	6893      	ldr	r3, [r2, #8]
 80051c6:	3b01      	subs	r3, #1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	b410      	push	{r4}
 80051cc:	6093      	str	r3, [r2, #8]
 80051ce:	da08      	bge.n	80051e2 <__sfputc_r+0x1e>
 80051d0:	6994      	ldr	r4, [r2, #24]
 80051d2:	42a3      	cmp	r3, r4
 80051d4:	db01      	blt.n	80051da <__sfputc_r+0x16>
 80051d6:	290a      	cmp	r1, #10
 80051d8:	d103      	bne.n	80051e2 <__sfputc_r+0x1e>
 80051da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051de:	f000 bb73 	b.w	80058c8 <__swbuf_r>
 80051e2:	6813      	ldr	r3, [r2, #0]
 80051e4:	1c58      	adds	r0, r3, #1
 80051e6:	6010      	str	r0, [r2, #0]
 80051e8:	7019      	strb	r1, [r3, #0]
 80051ea:	4608      	mov	r0, r1
 80051ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <__sfputs_r>:
 80051f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051f4:	4606      	mov	r6, r0
 80051f6:	460f      	mov	r7, r1
 80051f8:	4614      	mov	r4, r2
 80051fa:	18d5      	adds	r5, r2, r3
 80051fc:	42ac      	cmp	r4, r5
 80051fe:	d101      	bne.n	8005204 <__sfputs_r+0x12>
 8005200:	2000      	movs	r0, #0
 8005202:	e007      	b.n	8005214 <__sfputs_r+0x22>
 8005204:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005208:	463a      	mov	r2, r7
 800520a:	4630      	mov	r0, r6
 800520c:	f7ff ffda 	bl	80051c4 <__sfputc_r>
 8005210:	1c43      	adds	r3, r0, #1
 8005212:	d1f3      	bne.n	80051fc <__sfputs_r+0xa>
 8005214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005218 <_vfiprintf_r>:
 8005218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800521c:	460d      	mov	r5, r1
 800521e:	b09d      	sub	sp, #116	; 0x74
 8005220:	4614      	mov	r4, r2
 8005222:	4698      	mov	r8, r3
 8005224:	4606      	mov	r6, r0
 8005226:	b118      	cbz	r0, 8005230 <_vfiprintf_r+0x18>
 8005228:	6a03      	ldr	r3, [r0, #32]
 800522a:	b90b      	cbnz	r3, 8005230 <_vfiprintf_r+0x18>
 800522c:	f7ff fdca 	bl	8004dc4 <__sinit>
 8005230:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005232:	07d9      	lsls	r1, r3, #31
 8005234:	d405      	bmi.n	8005242 <_vfiprintf_r+0x2a>
 8005236:	89ab      	ldrh	r3, [r5, #12]
 8005238:	059a      	lsls	r2, r3, #22
 800523a:	d402      	bmi.n	8005242 <_vfiprintf_r+0x2a>
 800523c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800523e:	f7ff fec6 	bl	8004fce <__retarget_lock_acquire_recursive>
 8005242:	89ab      	ldrh	r3, [r5, #12]
 8005244:	071b      	lsls	r3, r3, #28
 8005246:	d501      	bpl.n	800524c <_vfiprintf_r+0x34>
 8005248:	692b      	ldr	r3, [r5, #16]
 800524a:	b99b      	cbnz	r3, 8005274 <_vfiprintf_r+0x5c>
 800524c:	4629      	mov	r1, r5
 800524e:	4630      	mov	r0, r6
 8005250:	f000 fb78 	bl	8005944 <__swsetup_r>
 8005254:	b170      	cbz	r0, 8005274 <_vfiprintf_r+0x5c>
 8005256:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005258:	07dc      	lsls	r4, r3, #31
 800525a:	d504      	bpl.n	8005266 <_vfiprintf_r+0x4e>
 800525c:	f04f 30ff 	mov.w	r0, #4294967295
 8005260:	b01d      	add	sp, #116	; 0x74
 8005262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005266:	89ab      	ldrh	r3, [r5, #12]
 8005268:	0598      	lsls	r0, r3, #22
 800526a:	d4f7      	bmi.n	800525c <_vfiprintf_r+0x44>
 800526c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800526e:	f7ff feaf 	bl	8004fd0 <__retarget_lock_release_recursive>
 8005272:	e7f3      	b.n	800525c <_vfiprintf_r+0x44>
 8005274:	2300      	movs	r3, #0
 8005276:	9309      	str	r3, [sp, #36]	; 0x24
 8005278:	2320      	movs	r3, #32
 800527a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800527e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005282:	2330      	movs	r3, #48	; 0x30
 8005284:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005438 <_vfiprintf_r+0x220>
 8005288:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800528c:	f04f 0901 	mov.w	r9, #1
 8005290:	4623      	mov	r3, r4
 8005292:	469a      	mov	sl, r3
 8005294:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005298:	b10a      	cbz	r2, 800529e <_vfiprintf_r+0x86>
 800529a:	2a25      	cmp	r2, #37	; 0x25
 800529c:	d1f9      	bne.n	8005292 <_vfiprintf_r+0x7a>
 800529e:	ebba 0b04 	subs.w	fp, sl, r4
 80052a2:	d00b      	beq.n	80052bc <_vfiprintf_r+0xa4>
 80052a4:	465b      	mov	r3, fp
 80052a6:	4622      	mov	r2, r4
 80052a8:	4629      	mov	r1, r5
 80052aa:	4630      	mov	r0, r6
 80052ac:	f7ff ffa1 	bl	80051f2 <__sfputs_r>
 80052b0:	3001      	adds	r0, #1
 80052b2:	f000 80a9 	beq.w	8005408 <_vfiprintf_r+0x1f0>
 80052b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052b8:	445a      	add	r2, fp
 80052ba:	9209      	str	r2, [sp, #36]	; 0x24
 80052bc:	f89a 3000 	ldrb.w	r3, [sl]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 80a1 	beq.w	8005408 <_vfiprintf_r+0x1f0>
 80052c6:	2300      	movs	r3, #0
 80052c8:	f04f 32ff 	mov.w	r2, #4294967295
 80052cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052d0:	f10a 0a01 	add.w	sl, sl, #1
 80052d4:	9304      	str	r3, [sp, #16]
 80052d6:	9307      	str	r3, [sp, #28]
 80052d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052dc:	931a      	str	r3, [sp, #104]	; 0x68
 80052de:	4654      	mov	r4, sl
 80052e0:	2205      	movs	r2, #5
 80052e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052e6:	4854      	ldr	r0, [pc, #336]	; (8005438 <_vfiprintf_r+0x220>)
 80052e8:	f7fa ff7a 	bl	80001e0 <memchr>
 80052ec:	9a04      	ldr	r2, [sp, #16]
 80052ee:	b9d8      	cbnz	r0, 8005328 <_vfiprintf_r+0x110>
 80052f0:	06d1      	lsls	r1, r2, #27
 80052f2:	bf44      	itt	mi
 80052f4:	2320      	movmi	r3, #32
 80052f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052fa:	0713      	lsls	r3, r2, #28
 80052fc:	bf44      	itt	mi
 80052fe:	232b      	movmi	r3, #43	; 0x2b
 8005300:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005304:	f89a 3000 	ldrb.w	r3, [sl]
 8005308:	2b2a      	cmp	r3, #42	; 0x2a
 800530a:	d015      	beq.n	8005338 <_vfiprintf_r+0x120>
 800530c:	9a07      	ldr	r2, [sp, #28]
 800530e:	4654      	mov	r4, sl
 8005310:	2000      	movs	r0, #0
 8005312:	f04f 0c0a 	mov.w	ip, #10
 8005316:	4621      	mov	r1, r4
 8005318:	f811 3b01 	ldrb.w	r3, [r1], #1
 800531c:	3b30      	subs	r3, #48	; 0x30
 800531e:	2b09      	cmp	r3, #9
 8005320:	d94d      	bls.n	80053be <_vfiprintf_r+0x1a6>
 8005322:	b1b0      	cbz	r0, 8005352 <_vfiprintf_r+0x13a>
 8005324:	9207      	str	r2, [sp, #28]
 8005326:	e014      	b.n	8005352 <_vfiprintf_r+0x13a>
 8005328:	eba0 0308 	sub.w	r3, r0, r8
 800532c:	fa09 f303 	lsl.w	r3, r9, r3
 8005330:	4313      	orrs	r3, r2
 8005332:	9304      	str	r3, [sp, #16]
 8005334:	46a2      	mov	sl, r4
 8005336:	e7d2      	b.n	80052de <_vfiprintf_r+0xc6>
 8005338:	9b03      	ldr	r3, [sp, #12]
 800533a:	1d19      	adds	r1, r3, #4
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	9103      	str	r1, [sp, #12]
 8005340:	2b00      	cmp	r3, #0
 8005342:	bfbb      	ittet	lt
 8005344:	425b      	neglt	r3, r3
 8005346:	f042 0202 	orrlt.w	r2, r2, #2
 800534a:	9307      	strge	r3, [sp, #28]
 800534c:	9307      	strlt	r3, [sp, #28]
 800534e:	bfb8      	it	lt
 8005350:	9204      	strlt	r2, [sp, #16]
 8005352:	7823      	ldrb	r3, [r4, #0]
 8005354:	2b2e      	cmp	r3, #46	; 0x2e
 8005356:	d10c      	bne.n	8005372 <_vfiprintf_r+0x15a>
 8005358:	7863      	ldrb	r3, [r4, #1]
 800535a:	2b2a      	cmp	r3, #42	; 0x2a
 800535c:	d134      	bne.n	80053c8 <_vfiprintf_r+0x1b0>
 800535e:	9b03      	ldr	r3, [sp, #12]
 8005360:	1d1a      	adds	r2, r3, #4
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	9203      	str	r2, [sp, #12]
 8005366:	2b00      	cmp	r3, #0
 8005368:	bfb8      	it	lt
 800536a:	f04f 33ff 	movlt.w	r3, #4294967295
 800536e:	3402      	adds	r4, #2
 8005370:	9305      	str	r3, [sp, #20]
 8005372:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005448 <_vfiprintf_r+0x230>
 8005376:	7821      	ldrb	r1, [r4, #0]
 8005378:	2203      	movs	r2, #3
 800537a:	4650      	mov	r0, sl
 800537c:	f7fa ff30 	bl	80001e0 <memchr>
 8005380:	b138      	cbz	r0, 8005392 <_vfiprintf_r+0x17a>
 8005382:	9b04      	ldr	r3, [sp, #16]
 8005384:	eba0 000a 	sub.w	r0, r0, sl
 8005388:	2240      	movs	r2, #64	; 0x40
 800538a:	4082      	lsls	r2, r0
 800538c:	4313      	orrs	r3, r2
 800538e:	3401      	adds	r4, #1
 8005390:	9304      	str	r3, [sp, #16]
 8005392:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005396:	4829      	ldr	r0, [pc, #164]	; (800543c <_vfiprintf_r+0x224>)
 8005398:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800539c:	2206      	movs	r2, #6
 800539e:	f7fa ff1f 	bl	80001e0 <memchr>
 80053a2:	2800      	cmp	r0, #0
 80053a4:	d03f      	beq.n	8005426 <_vfiprintf_r+0x20e>
 80053a6:	4b26      	ldr	r3, [pc, #152]	; (8005440 <_vfiprintf_r+0x228>)
 80053a8:	bb1b      	cbnz	r3, 80053f2 <_vfiprintf_r+0x1da>
 80053aa:	9b03      	ldr	r3, [sp, #12]
 80053ac:	3307      	adds	r3, #7
 80053ae:	f023 0307 	bic.w	r3, r3, #7
 80053b2:	3308      	adds	r3, #8
 80053b4:	9303      	str	r3, [sp, #12]
 80053b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053b8:	443b      	add	r3, r7
 80053ba:	9309      	str	r3, [sp, #36]	; 0x24
 80053bc:	e768      	b.n	8005290 <_vfiprintf_r+0x78>
 80053be:	fb0c 3202 	mla	r2, ip, r2, r3
 80053c2:	460c      	mov	r4, r1
 80053c4:	2001      	movs	r0, #1
 80053c6:	e7a6      	b.n	8005316 <_vfiprintf_r+0xfe>
 80053c8:	2300      	movs	r3, #0
 80053ca:	3401      	adds	r4, #1
 80053cc:	9305      	str	r3, [sp, #20]
 80053ce:	4619      	mov	r1, r3
 80053d0:	f04f 0c0a 	mov.w	ip, #10
 80053d4:	4620      	mov	r0, r4
 80053d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053da:	3a30      	subs	r2, #48	; 0x30
 80053dc:	2a09      	cmp	r2, #9
 80053de:	d903      	bls.n	80053e8 <_vfiprintf_r+0x1d0>
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d0c6      	beq.n	8005372 <_vfiprintf_r+0x15a>
 80053e4:	9105      	str	r1, [sp, #20]
 80053e6:	e7c4      	b.n	8005372 <_vfiprintf_r+0x15a>
 80053e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80053ec:	4604      	mov	r4, r0
 80053ee:	2301      	movs	r3, #1
 80053f0:	e7f0      	b.n	80053d4 <_vfiprintf_r+0x1bc>
 80053f2:	ab03      	add	r3, sp, #12
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	462a      	mov	r2, r5
 80053f8:	4b12      	ldr	r3, [pc, #72]	; (8005444 <_vfiprintf_r+0x22c>)
 80053fa:	a904      	add	r1, sp, #16
 80053fc:	4630      	mov	r0, r6
 80053fe:	f3af 8000 	nop.w
 8005402:	4607      	mov	r7, r0
 8005404:	1c78      	adds	r0, r7, #1
 8005406:	d1d6      	bne.n	80053b6 <_vfiprintf_r+0x19e>
 8005408:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800540a:	07d9      	lsls	r1, r3, #31
 800540c:	d405      	bmi.n	800541a <_vfiprintf_r+0x202>
 800540e:	89ab      	ldrh	r3, [r5, #12]
 8005410:	059a      	lsls	r2, r3, #22
 8005412:	d402      	bmi.n	800541a <_vfiprintf_r+0x202>
 8005414:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005416:	f7ff fddb 	bl	8004fd0 <__retarget_lock_release_recursive>
 800541a:	89ab      	ldrh	r3, [r5, #12]
 800541c:	065b      	lsls	r3, r3, #25
 800541e:	f53f af1d 	bmi.w	800525c <_vfiprintf_r+0x44>
 8005422:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005424:	e71c      	b.n	8005260 <_vfiprintf_r+0x48>
 8005426:	ab03      	add	r3, sp, #12
 8005428:	9300      	str	r3, [sp, #0]
 800542a:	462a      	mov	r2, r5
 800542c:	4b05      	ldr	r3, [pc, #20]	; (8005444 <_vfiprintf_r+0x22c>)
 800542e:	a904      	add	r1, sp, #16
 8005430:	4630      	mov	r0, r6
 8005432:	f000 f879 	bl	8005528 <_printf_i>
 8005436:	e7e4      	b.n	8005402 <_vfiprintf_r+0x1ea>
 8005438:	08005b70 	.word	0x08005b70
 800543c:	08005b7a 	.word	0x08005b7a
 8005440:	00000000 	.word	0x00000000
 8005444:	080051f3 	.word	0x080051f3
 8005448:	08005b76 	.word	0x08005b76

0800544c <_printf_common>:
 800544c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005450:	4616      	mov	r6, r2
 8005452:	4699      	mov	r9, r3
 8005454:	688a      	ldr	r2, [r1, #8]
 8005456:	690b      	ldr	r3, [r1, #16]
 8005458:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800545c:	4293      	cmp	r3, r2
 800545e:	bfb8      	it	lt
 8005460:	4613      	movlt	r3, r2
 8005462:	6033      	str	r3, [r6, #0]
 8005464:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005468:	4607      	mov	r7, r0
 800546a:	460c      	mov	r4, r1
 800546c:	b10a      	cbz	r2, 8005472 <_printf_common+0x26>
 800546e:	3301      	adds	r3, #1
 8005470:	6033      	str	r3, [r6, #0]
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	0699      	lsls	r1, r3, #26
 8005476:	bf42      	ittt	mi
 8005478:	6833      	ldrmi	r3, [r6, #0]
 800547a:	3302      	addmi	r3, #2
 800547c:	6033      	strmi	r3, [r6, #0]
 800547e:	6825      	ldr	r5, [r4, #0]
 8005480:	f015 0506 	ands.w	r5, r5, #6
 8005484:	d106      	bne.n	8005494 <_printf_common+0x48>
 8005486:	f104 0a19 	add.w	sl, r4, #25
 800548a:	68e3      	ldr	r3, [r4, #12]
 800548c:	6832      	ldr	r2, [r6, #0]
 800548e:	1a9b      	subs	r3, r3, r2
 8005490:	42ab      	cmp	r3, r5
 8005492:	dc26      	bgt.n	80054e2 <_printf_common+0x96>
 8005494:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005498:	1e13      	subs	r3, r2, #0
 800549a:	6822      	ldr	r2, [r4, #0]
 800549c:	bf18      	it	ne
 800549e:	2301      	movne	r3, #1
 80054a0:	0692      	lsls	r2, r2, #26
 80054a2:	d42b      	bmi.n	80054fc <_printf_common+0xb0>
 80054a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054a8:	4649      	mov	r1, r9
 80054aa:	4638      	mov	r0, r7
 80054ac:	47c0      	blx	r8
 80054ae:	3001      	adds	r0, #1
 80054b0:	d01e      	beq.n	80054f0 <_printf_common+0xa4>
 80054b2:	6823      	ldr	r3, [r4, #0]
 80054b4:	6922      	ldr	r2, [r4, #16]
 80054b6:	f003 0306 	and.w	r3, r3, #6
 80054ba:	2b04      	cmp	r3, #4
 80054bc:	bf02      	ittt	eq
 80054be:	68e5      	ldreq	r5, [r4, #12]
 80054c0:	6833      	ldreq	r3, [r6, #0]
 80054c2:	1aed      	subeq	r5, r5, r3
 80054c4:	68a3      	ldr	r3, [r4, #8]
 80054c6:	bf0c      	ite	eq
 80054c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054cc:	2500      	movne	r5, #0
 80054ce:	4293      	cmp	r3, r2
 80054d0:	bfc4      	itt	gt
 80054d2:	1a9b      	subgt	r3, r3, r2
 80054d4:	18ed      	addgt	r5, r5, r3
 80054d6:	2600      	movs	r6, #0
 80054d8:	341a      	adds	r4, #26
 80054da:	42b5      	cmp	r5, r6
 80054dc:	d11a      	bne.n	8005514 <_printf_common+0xc8>
 80054de:	2000      	movs	r0, #0
 80054e0:	e008      	b.n	80054f4 <_printf_common+0xa8>
 80054e2:	2301      	movs	r3, #1
 80054e4:	4652      	mov	r2, sl
 80054e6:	4649      	mov	r1, r9
 80054e8:	4638      	mov	r0, r7
 80054ea:	47c0      	blx	r8
 80054ec:	3001      	adds	r0, #1
 80054ee:	d103      	bne.n	80054f8 <_printf_common+0xac>
 80054f0:	f04f 30ff 	mov.w	r0, #4294967295
 80054f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054f8:	3501      	adds	r5, #1
 80054fa:	e7c6      	b.n	800548a <_printf_common+0x3e>
 80054fc:	18e1      	adds	r1, r4, r3
 80054fe:	1c5a      	adds	r2, r3, #1
 8005500:	2030      	movs	r0, #48	; 0x30
 8005502:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005506:	4422      	add	r2, r4
 8005508:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800550c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005510:	3302      	adds	r3, #2
 8005512:	e7c7      	b.n	80054a4 <_printf_common+0x58>
 8005514:	2301      	movs	r3, #1
 8005516:	4622      	mov	r2, r4
 8005518:	4649      	mov	r1, r9
 800551a:	4638      	mov	r0, r7
 800551c:	47c0      	blx	r8
 800551e:	3001      	adds	r0, #1
 8005520:	d0e6      	beq.n	80054f0 <_printf_common+0xa4>
 8005522:	3601      	adds	r6, #1
 8005524:	e7d9      	b.n	80054da <_printf_common+0x8e>
	...

08005528 <_printf_i>:
 8005528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800552c:	7e0f      	ldrb	r7, [r1, #24]
 800552e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005530:	2f78      	cmp	r7, #120	; 0x78
 8005532:	4691      	mov	r9, r2
 8005534:	4680      	mov	r8, r0
 8005536:	460c      	mov	r4, r1
 8005538:	469a      	mov	sl, r3
 800553a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800553e:	d807      	bhi.n	8005550 <_printf_i+0x28>
 8005540:	2f62      	cmp	r7, #98	; 0x62
 8005542:	d80a      	bhi.n	800555a <_printf_i+0x32>
 8005544:	2f00      	cmp	r7, #0
 8005546:	f000 80d4 	beq.w	80056f2 <_printf_i+0x1ca>
 800554a:	2f58      	cmp	r7, #88	; 0x58
 800554c:	f000 80c0 	beq.w	80056d0 <_printf_i+0x1a8>
 8005550:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005554:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005558:	e03a      	b.n	80055d0 <_printf_i+0xa8>
 800555a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800555e:	2b15      	cmp	r3, #21
 8005560:	d8f6      	bhi.n	8005550 <_printf_i+0x28>
 8005562:	a101      	add	r1, pc, #4	; (adr r1, 8005568 <_printf_i+0x40>)
 8005564:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005568:	080055c1 	.word	0x080055c1
 800556c:	080055d5 	.word	0x080055d5
 8005570:	08005551 	.word	0x08005551
 8005574:	08005551 	.word	0x08005551
 8005578:	08005551 	.word	0x08005551
 800557c:	08005551 	.word	0x08005551
 8005580:	080055d5 	.word	0x080055d5
 8005584:	08005551 	.word	0x08005551
 8005588:	08005551 	.word	0x08005551
 800558c:	08005551 	.word	0x08005551
 8005590:	08005551 	.word	0x08005551
 8005594:	080056d9 	.word	0x080056d9
 8005598:	08005601 	.word	0x08005601
 800559c:	08005693 	.word	0x08005693
 80055a0:	08005551 	.word	0x08005551
 80055a4:	08005551 	.word	0x08005551
 80055a8:	080056fb 	.word	0x080056fb
 80055ac:	08005551 	.word	0x08005551
 80055b0:	08005601 	.word	0x08005601
 80055b4:	08005551 	.word	0x08005551
 80055b8:	08005551 	.word	0x08005551
 80055bc:	0800569b 	.word	0x0800569b
 80055c0:	682b      	ldr	r3, [r5, #0]
 80055c2:	1d1a      	adds	r2, r3, #4
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	602a      	str	r2, [r5, #0]
 80055c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055d0:	2301      	movs	r3, #1
 80055d2:	e09f      	b.n	8005714 <_printf_i+0x1ec>
 80055d4:	6820      	ldr	r0, [r4, #0]
 80055d6:	682b      	ldr	r3, [r5, #0]
 80055d8:	0607      	lsls	r7, r0, #24
 80055da:	f103 0104 	add.w	r1, r3, #4
 80055de:	6029      	str	r1, [r5, #0]
 80055e0:	d501      	bpl.n	80055e6 <_printf_i+0xbe>
 80055e2:	681e      	ldr	r6, [r3, #0]
 80055e4:	e003      	b.n	80055ee <_printf_i+0xc6>
 80055e6:	0646      	lsls	r6, r0, #25
 80055e8:	d5fb      	bpl.n	80055e2 <_printf_i+0xba>
 80055ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80055ee:	2e00      	cmp	r6, #0
 80055f0:	da03      	bge.n	80055fa <_printf_i+0xd2>
 80055f2:	232d      	movs	r3, #45	; 0x2d
 80055f4:	4276      	negs	r6, r6
 80055f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055fa:	485a      	ldr	r0, [pc, #360]	; (8005764 <_printf_i+0x23c>)
 80055fc:	230a      	movs	r3, #10
 80055fe:	e012      	b.n	8005626 <_printf_i+0xfe>
 8005600:	682b      	ldr	r3, [r5, #0]
 8005602:	6820      	ldr	r0, [r4, #0]
 8005604:	1d19      	adds	r1, r3, #4
 8005606:	6029      	str	r1, [r5, #0]
 8005608:	0605      	lsls	r5, r0, #24
 800560a:	d501      	bpl.n	8005610 <_printf_i+0xe8>
 800560c:	681e      	ldr	r6, [r3, #0]
 800560e:	e002      	b.n	8005616 <_printf_i+0xee>
 8005610:	0641      	lsls	r1, r0, #25
 8005612:	d5fb      	bpl.n	800560c <_printf_i+0xe4>
 8005614:	881e      	ldrh	r6, [r3, #0]
 8005616:	4853      	ldr	r0, [pc, #332]	; (8005764 <_printf_i+0x23c>)
 8005618:	2f6f      	cmp	r7, #111	; 0x6f
 800561a:	bf0c      	ite	eq
 800561c:	2308      	moveq	r3, #8
 800561e:	230a      	movne	r3, #10
 8005620:	2100      	movs	r1, #0
 8005622:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005626:	6865      	ldr	r5, [r4, #4]
 8005628:	60a5      	str	r5, [r4, #8]
 800562a:	2d00      	cmp	r5, #0
 800562c:	bfa2      	ittt	ge
 800562e:	6821      	ldrge	r1, [r4, #0]
 8005630:	f021 0104 	bicge.w	r1, r1, #4
 8005634:	6021      	strge	r1, [r4, #0]
 8005636:	b90e      	cbnz	r6, 800563c <_printf_i+0x114>
 8005638:	2d00      	cmp	r5, #0
 800563a:	d04b      	beq.n	80056d4 <_printf_i+0x1ac>
 800563c:	4615      	mov	r5, r2
 800563e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005642:	fb03 6711 	mls	r7, r3, r1, r6
 8005646:	5dc7      	ldrb	r7, [r0, r7]
 8005648:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800564c:	4637      	mov	r7, r6
 800564e:	42bb      	cmp	r3, r7
 8005650:	460e      	mov	r6, r1
 8005652:	d9f4      	bls.n	800563e <_printf_i+0x116>
 8005654:	2b08      	cmp	r3, #8
 8005656:	d10b      	bne.n	8005670 <_printf_i+0x148>
 8005658:	6823      	ldr	r3, [r4, #0]
 800565a:	07de      	lsls	r6, r3, #31
 800565c:	d508      	bpl.n	8005670 <_printf_i+0x148>
 800565e:	6923      	ldr	r3, [r4, #16]
 8005660:	6861      	ldr	r1, [r4, #4]
 8005662:	4299      	cmp	r1, r3
 8005664:	bfde      	ittt	le
 8005666:	2330      	movle	r3, #48	; 0x30
 8005668:	f805 3c01 	strble.w	r3, [r5, #-1]
 800566c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005670:	1b52      	subs	r2, r2, r5
 8005672:	6122      	str	r2, [r4, #16]
 8005674:	f8cd a000 	str.w	sl, [sp]
 8005678:	464b      	mov	r3, r9
 800567a:	aa03      	add	r2, sp, #12
 800567c:	4621      	mov	r1, r4
 800567e:	4640      	mov	r0, r8
 8005680:	f7ff fee4 	bl	800544c <_printf_common>
 8005684:	3001      	adds	r0, #1
 8005686:	d14a      	bne.n	800571e <_printf_i+0x1f6>
 8005688:	f04f 30ff 	mov.w	r0, #4294967295
 800568c:	b004      	add	sp, #16
 800568e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005692:	6823      	ldr	r3, [r4, #0]
 8005694:	f043 0320 	orr.w	r3, r3, #32
 8005698:	6023      	str	r3, [r4, #0]
 800569a:	4833      	ldr	r0, [pc, #204]	; (8005768 <_printf_i+0x240>)
 800569c:	2778      	movs	r7, #120	; 0x78
 800569e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80056a2:	6823      	ldr	r3, [r4, #0]
 80056a4:	6829      	ldr	r1, [r5, #0]
 80056a6:	061f      	lsls	r7, r3, #24
 80056a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80056ac:	d402      	bmi.n	80056b4 <_printf_i+0x18c>
 80056ae:	065f      	lsls	r7, r3, #25
 80056b0:	bf48      	it	mi
 80056b2:	b2b6      	uxthmi	r6, r6
 80056b4:	07df      	lsls	r7, r3, #31
 80056b6:	bf48      	it	mi
 80056b8:	f043 0320 	orrmi.w	r3, r3, #32
 80056bc:	6029      	str	r1, [r5, #0]
 80056be:	bf48      	it	mi
 80056c0:	6023      	strmi	r3, [r4, #0]
 80056c2:	b91e      	cbnz	r6, 80056cc <_printf_i+0x1a4>
 80056c4:	6823      	ldr	r3, [r4, #0]
 80056c6:	f023 0320 	bic.w	r3, r3, #32
 80056ca:	6023      	str	r3, [r4, #0]
 80056cc:	2310      	movs	r3, #16
 80056ce:	e7a7      	b.n	8005620 <_printf_i+0xf8>
 80056d0:	4824      	ldr	r0, [pc, #144]	; (8005764 <_printf_i+0x23c>)
 80056d2:	e7e4      	b.n	800569e <_printf_i+0x176>
 80056d4:	4615      	mov	r5, r2
 80056d6:	e7bd      	b.n	8005654 <_printf_i+0x12c>
 80056d8:	682b      	ldr	r3, [r5, #0]
 80056da:	6826      	ldr	r6, [r4, #0]
 80056dc:	6961      	ldr	r1, [r4, #20]
 80056de:	1d18      	adds	r0, r3, #4
 80056e0:	6028      	str	r0, [r5, #0]
 80056e2:	0635      	lsls	r5, r6, #24
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	d501      	bpl.n	80056ec <_printf_i+0x1c4>
 80056e8:	6019      	str	r1, [r3, #0]
 80056ea:	e002      	b.n	80056f2 <_printf_i+0x1ca>
 80056ec:	0670      	lsls	r0, r6, #25
 80056ee:	d5fb      	bpl.n	80056e8 <_printf_i+0x1c0>
 80056f0:	8019      	strh	r1, [r3, #0]
 80056f2:	2300      	movs	r3, #0
 80056f4:	6123      	str	r3, [r4, #16]
 80056f6:	4615      	mov	r5, r2
 80056f8:	e7bc      	b.n	8005674 <_printf_i+0x14c>
 80056fa:	682b      	ldr	r3, [r5, #0]
 80056fc:	1d1a      	adds	r2, r3, #4
 80056fe:	602a      	str	r2, [r5, #0]
 8005700:	681d      	ldr	r5, [r3, #0]
 8005702:	6862      	ldr	r2, [r4, #4]
 8005704:	2100      	movs	r1, #0
 8005706:	4628      	mov	r0, r5
 8005708:	f7fa fd6a 	bl	80001e0 <memchr>
 800570c:	b108      	cbz	r0, 8005712 <_printf_i+0x1ea>
 800570e:	1b40      	subs	r0, r0, r5
 8005710:	6060      	str	r0, [r4, #4]
 8005712:	6863      	ldr	r3, [r4, #4]
 8005714:	6123      	str	r3, [r4, #16]
 8005716:	2300      	movs	r3, #0
 8005718:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800571c:	e7aa      	b.n	8005674 <_printf_i+0x14c>
 800571e:	6923      	ldr	r3, [r4, #16]
 8005720:	462a      	mov	r2, r5
 8005722:	4649      	mov	r1, r9
 8005724:	4640      	mov	r0, r8
 8005726:	47d0      	blx	sl
 8005728:	3001      	adds	r0, #1
 800572a:	d0ad      	beq.n	8005688 <_printf_i+0x160>
 800572c:	6823      	ldr	r3, [r4, #0]
 800572e:	079b      	lsls	r3, r3, #30
 8005730:	d413      	bmi.n	800575a <_printf_i+0x232>
 8005732:	68e0      	ldr	r0, [r4, #12]
 8005734:	9b03      	ldr	r3, [sp, #12]
 8005736:	4298      	cmp	r0, r3
 8005738:	bfb8      	it	lt
 800573a:	4618      	movlt	r0, r3
 800573c:	e7a6      	b.n	800568c <_printf_i+0x164>
 800573e:	2301      	movs	r3, #1
 8005740:	4632      	mov	r2, r6
 8005742:	4649      	mov	r1, r9
 8005744:	4640      	mov	r0, r8
 8005746:	47d0      	blx	sl
 8005748:	3001      	adds	r0, #1
 800574a:	d09d      	beq.n	8005688 <_printf_i+0x160>
 800574c:	3501      	adds	r5, #1
 800574e:	68e3      	ldr	r3, [r4, #12]
 8005750:	9903      	ldr	r1, [sp, #12]
 8005752:	1a5b      	subs	r3, r3, r1
 8005754:	42ab      	cmp	r3, r5
 8005756:	dcf2      	bgt.n	800573e <_printf_i+0x216>
 8005758:	e7eb      	b.n	8005732 <_printf_i+0x20a>
 800575a:	2500      	movs	r5, #0
 800575c:	f104 0619 	add.w	r6, r4, #25
 8005760:	e7f5      	b.n	800574e <_printf_i+0x226>
 8005762:	bf00      	nop
 8005764:	08005b81 	.word	0x08005b81
 8005768:	08005b92 	.word	0x08005b92

0800576c <__sflush_r>:
 800576c:	898a      	ldrh	r2, [r1, #12]
 800576e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005772:	4605      	mov	r5, r0
 8005774:	0710      	lsls	r0, r2, #28
 8005776:	460c      	mov	r4, r1
 8005778:	d458      	bmi.n	800582c <__sflush_r+0xc0>
 800577a:	684b      	ldr	r3, [r1, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	dc05      	bgt.n	800578c <__sflush_r+0x20>
 8005780:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005782:	2b00      	cmp	r3, #0
 8005784:	dc02      	bgt.n	800578c <__sflush_r+0x20>
 8005786:	2000      	movs	r0, #0
 8005788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800578c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800578e:	2e00      	cmp	r6, #0
 8005790:	d0f9      	beq.n	8005786 <__sflush_r+0x1a>
 8005792:	2300      	movs	r3, #0
 8005794:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005798:	682f      	ldr	r7, [r5, #0]
 800579a:	6a21      	ldr	r1, [r4, #32]
 800579c:	602b      	str	r3, [r5, #0]
 800579e:	d032      	beq.n	8005806 <__sflush_r+0x9a>
 80057a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80057a2:	89a3      	ldrh	r3, [r4, #12]
 80057a4:	075a      	lsls	r2, r3, #29
 80057a6:	d505      	bpl.n	80057b4 <__sflush_r+0x48>
 80057a8:	6863      	ldr	r3, [r4, #4]
 80057aa:	1ac0      	subs	r0, r0, r3
 80057ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80057ae:	b10b      	cbz	r3, 80057b4 <__sflush_r+0x48>
 80057b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057b2:	1ac0      	subs	r0, r0, r3
 80057b4:	2300      	movs	r3, #0
 80057b6:	4602      	mov	r2, r0
 80057b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057ba:	6a21      	ldr	r1, [r4, #32]
 80057bc:	4628      	mov	r0, r5
 80057be:	47b0      	blx	r6
 80057c0:	1c43      	adds	r3, r0, #1
 80057c2:	89a3      	ldrh	r3, [r4, #12]
 80057c4:	d106      	bne.n	80057d4 <__sflush_r+0x68>
 80057c6:	6829      	ldr	r1, [r5, #0]
 80057c8:	291d      	cmp	r1, #29
 80057ca:	d82b      	bhi.n	8005824 <__sflush_r+0xb8>
 80057cc:	4a29      	ldr	r2, [pc, #164]	; (8005874 <__sflush_r+0x108>)
 80057ce:	410a      	asrs	r2, r1
 80057d0:	07d6      	lsls	r6, r2, #31
 80057d2:	d427      	bmi.n	8005824 <__sflush_r+0xb8>
 80057d4:	2200      	movs	r2, #0
 80057d6:	6062      	str	r2, [r4, #4]
 80057d8:	04d9      	lsls	r1, r3, #19
 80057da:	6922      	ldr	r2, [r4, #16]
 80057dc:	6022      	str	r2, [r4, #0]
 80057de:	d504      	bpl.n	80057ea <__sflush_r+0x7e>
 80057e0:	1c42      	adds	r2, r0, #1
 80057e2:	d101      	bne.n	80057e8 <__sflush_r+0x7c>
 80057e4:	682b      	ldr	r3, [r5, #0]
 80057e6:	b903      	cbnz	r3, 80057ea <__sflush_r+0x7e>
 80057e8:	6560      	str	r0, [r4, #84]	; 0x54
 80057ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057ec:	602f      	str	r7, [r5, #0]
 80057ee:	2900      	cmp	r1, #0
 80057f0:	d0c9      	beq.n	8005786 <__sflush_r+0x1a>
 80057f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057f6:	4299      	cmp	r1, r3
 80057f8:	d002      	beq.n	8005800 <__sflush_r+0x94>
 80057fa:	4628      	mov	r0, r5
 80057fc:	f7ff fbea 	bl	8004fd4 <_free_r>
 8005800:	2000      	movs	r0, #0
 8005802:	6360      	str	r0, [r4, #52]	; 0x34
 8005804:	e7c0      	b.n	8005788 <__sflush_r+0x1c>
 8005806:	2301      	movs	r3, #1
 8005808:	4628      	mov	r0, r5
 800580a:	47b0      	blx	r6
 800580c:	1c41      	adds	r1, r0, #1
 800580e:	d1c8      	bne.n	80057a2 <__sflush_r+0x36>
 8005810:	682b      	ldr	r3, [r5, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d0c5      	beq.n	80057a2 <__sflush_r+0x36>
 8005816:	2b1d      	cmp	r3, #29
 8005818:	d001      	beq.n	800581e <__sflush_r+0xb2>
 800581a:	2b16      	cmp	r3, #22
 800581c:	d101      	bne.n	8005822 <__sflush_r+0xb6>
 800581e:	602f      	str	r7, [r5, #0]
 8005820:	e7b1      	b.n	8005786 <__sflush_r+0x1a>
 8005822:	89a3      	ldrh	r3, [r4, #12]
 8005824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005828:	81a3      	strh	r3, [r4, #12]
 800582a:	e7ad      	b.n	8005788 <__sflush_r+0x1c>
 800582c:	690f      	ldr	r7, [r1, #16]
 800582e:	2f00      	cmp	r7, #0
 8005830:	d0a9      	beq.n	8005786 <__sflush_r+0x1a>
 8005832:	0793      	lsls	r3, r2, #30
 8005834:	680e      	ldr	r6, [r1, #0]
 8005836:	bf08      	it	eq
 8005838:	694b      	ldreq	r3, [r1, #20]
 800583a:	600f      	str	r7, [r1, #0]
 800583c:	bf18      	it	ne
 800583e:	2300      	movne	r3, #0
 8005840:	eba6 0807 	sub.w	r8, r6, r7
 8005844:	608b      	str	r3, [r1, #8]
 8005846:	f1b8 0f00 	cmp.w	r8, #0
 800584a:	dd9c      	ble.n	8005786 <__sflush_r+0x1a>
 800584c:	6a21      	ldr	r1, [r4, #32]
 800584e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005850:	4643      	mov	r3, r8
 8005852:	463a      	mov	r2, r7
 8005854:	4628      	mov	r0, r5
 8005856:	47b0      	blx	r6
 8005858:	2800      	cmp	r0, #0
 800585a:	dc06      	bgt.n	800586a <__sflush_r+0xfe>
 800585c:	89a3      	ldrh	r3, [r4, #12]
 800585e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005862:	81a3      	strh	r3, [r4, #12]
 8005864:	f04f 30ff 	mov.w	r0, #4294967295
 8005868:	e78e      	b.n	8005788 <__sflush_r+0x1c>
 800586a:	4407      	add	r7, r0
 800586c:	eba8 0800 	sub.w	r8, r8, r0
 8005870:	e7e9      	b.n	8005846 <__sflush_r+0xda>
 8005872:	bf00      	nop
 8005874:	dfbffffe 	.word	0xdfbffffe

08005878 <_fflush_r>:
 8005878:	b538      	push	{r3, r4, r5, lr}
 800587a:	690b      	ldr	r3, [r1, #16]
 800587c:	4605      	mov	r5, r0
 800587e:	460c      	mov	r4, r1
 8005880:	b913      	cbnz	r3, 8005888 <_fflush_r+0x10>
 8005882:	2500      	movs	r5, #0
 8005884:	4628      	mov	r0, r5
 8005886:	bd38      	pop	{r3, r4, r5, pc}
 8005888:	b118      	cbz	r0, 8005892 <_fflush_r+0x1a>
 800588a:	6a03      	ldr	r3, [r0, #32]
 800588c:	b90b      	cbnz	r3, 8005892 <_fflush_r+0x1a>
 800588e:	f7ff fa99 	bl	8004dc4 <__sinit>
 8005892:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d0f3      	beq.n	8005882 <_fflush_r+0xa>
 800589a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800589c:	07d0      	lsls	r0, r2, #31
 800589e:	d404      	bmi.n	80058aa <_fflush_r+0x32>
 80058a0:	0599      	lsls	r1, r3, #22
 80058a2:	d402      	bmi.n	80058aa <_fflush_r+0x32>
 80058a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058a6:	f7ff fb92 	bl	8004fce <__retarget_lock_acquire_recursive>
 80058aa:	4628      	mov	r0, r5
 80058ac:	4621      	mov	r1, r4
 80058ae:	f7ff ff5d 	bl	800576c <__sflush_r>
 80058b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058b4:	07da      	lsls	r2, r3, #31
 80058b6:	4605      	mov	r5, r0
 80058b8:	d4e4      	bmi.n	8005884 <_fflush_r+0xc>
 80058ba:	89a3      	ldrh	r3, [r4, #12]
 80058bc:	059b      	lsls	r3, r3, #22
 80058be:	d4e1      	bmi.n	8005884 <_fflush_r+0xc>
 80058c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058c2:	f7ff fb85 	bl	8004fd0 <__retarget_lock_release_recursive>
 80058c6:	e7dd      	b.n	8005884 <_fflush_r+0xc>

080058c8 <__swbuf_r>:
 80058c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ca:	460e      	mov	r6, r1
 80058cc:	4614      	mov	r4, r2
 80058ce:	4605      	mov	r5, r0
 80058d0:	b118      	cbz	r0, 80058da <__swbuf_r+0x12>
 80058d2:	6a03      	ldr	r3, [r0, #32]
 80058d4:	b90b      	cbnz	r3, 80058da <__swbuf_r+0x12>
 80058d6:	f7ff fa75 	bl	8004dc4 <__sinit>
 80058da:	69a3      	ldr	r3, [r4, #24]
 80058dc:	60a3      	str	r3, [r4, #8]
 80058de:	89a3      	ldrh	r3, [r4, #12]
 80058e0:	071a      	lsls	r2, r3, #28
 80058e2:	d525      	bpl.n	8005930 <__swbuf_r+0x68>
 80058e4:	6923      	ldr	r3, [r4, #16]
 80058e6:	b31b      	cbz	r3, 8005930 <__swbuf_r+0x68>
 80058e8:	6823      	ldr	r3, [r4, #0]
 80058ea:	6922      	ldr	r2, [r4, #16]
 80058ec:	1a98      	subs	r0, r3, r2
 80058ee:	6963      	ldr	r3, [r4, #20]
 80058f0:	b2f6      	uxtb	r6, r6
 80058f2:	4283      	cmp	r3, r0
 80058f4:	4637      	mov	r7, r6
 80058f6:	dc04      	bgt.n	8005902 <__swbuf_r+0x3a>
 80058f8:	4621      	mov	r1, r4
 80058fa:	4628      	mov	r0, r5
 80058fc:	f7ff ffbc 	bl	8005878 <_fflush_r>
 8005900:	b9e0      	cbnz	r0, 800593c <__swbuf_r+0x74>
 8005902:	68a3      	ldr	r3, [r4, #8]
 8005904:	3b01      	subs	r3, #1
 8005906:	60a3      	str	r3, [r4, #8]
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	1c5a      	adds	r2, r3, #1
 800590c:	6022      	str	r2, [r4, #0]
 800590e:	701e      	strb	r6, [r3, #0]
 8005910:	6962      	ldr	r2, [r4, #20]
 8005912:	1c43      	adds	r3, r0, #1
 8005914:	429a      	cmp	r2, r3
 8005916:	d004      	beq.n	8005922 <__swbuf_r+0x5a>
 8005918:	89a3      	ldrh	r3, [r4, #12]
 800591a:	07db      	lsls	r3, r3, #31
 800591c:	d506      	bpl.n	800592c <__swbuf_r+0x64>
 800591e:	2e0a      	cmp	r6, #10
 8005920:	d104      	bne.n	800592c <__swbuf_r+0x64>
 8005922:	4621      	mov	r1, r4
 8005924:	4628      	mov	r0, r5
 8005926:	f7ff ffa7 	bl	8005878 <_fflush_r>
 800592a:	b938      	cbnz	r0, 800593c <__swbuf_r+0x74>
 800592c:	4638      	mov	r0, r7
 800592e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005930:	4621      	mov	r1, r4
 8005932:	4628      	mov	r0, r5
 8005934:	f000 f806 	bl	8005944 <__swsetup_r>
 8005938:	2800      	cmp	r0, #0
 800593a:	d0d5      	beq.n	80058e8 <__swbuf_r+0x20>
 800593c:	f04f 37ff 	mov.w	r7, #4294967295
 8005940:	e7f4      	b.n	800592c <__swbuf_r+0x64>
	...

08005944 <__swsetup_r>:
 8005944:	b538      	push	{r3, r4, r5, lr}
 8005946:	4b2a      	ldr	r3, [pc, #168]	; (80059f0 <__swsetup_r+0xac>)
 8005948:	4605      	mov	r5, r0
 800594a:	6818      	ldr	r0, [r3, #0]
 800594c:	460c      	mov	r4, r1
 800594e:	b118      	cbz	r0, 8005958 <__swsetup_r+0x14>
 8005950:	6a03      	ldr	r3, [r0, #32]
 8005952:	b90b      	cbnz	r3, 8005958 <__swsetup_r+0x14>
 8005954:	f7ff fa36 	bl	8004dc4 <__sinit>
 8005958:	89a3      	ldrh	r3, [r4, #12]
 800595a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800595e:	0718      	lsls	r0, r3, #28
 8005960:	d422      	bmi.n	80059a8 <__swsetup_r+0x64>
 8005962:	06d9      	lsls	r1, r3, #27
 8005964:	d407      	bmi.n	8005976 <__swsetup_r+0x32>
 8005966:	2309      	movs	r3, #9
 8005968:	602b      	str	r3, [r5, #0]
 800596a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800596e:	81a3      	strh	r3, [r4, #12]
 8005970:	f04f 30ff 	mov.w	r0, #4294967295
 8005974:	e034      	b.n	80059e0 <__swsetup_r+0x9c>
 8005976:	0758      	lsls	r0, r3, #29
 8005978:	d512      	bpl.n	80059a0 <__swsetup_r+0x5c>
 800597a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800597c:	b141      	cbz	r1, 8005990 <__swsetup_r+0x4c>
 800597e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005982:	4299      	cmp	r1, r3
 8005984:	d002      	beq.n	800598c <__swsetup_r+0x48>
 8005986:	4628      	mov	r0, r5
 8005988:	f7ff fb24 	bl	8004fd4 <_free_r>
 800598c:	2300      	movs	r3, #0
 800598e:	6363      	str	r3, [r4, #52]	; 0x34
 8005990:	89a3      	ldrh	r3, [r4, #12]
 8005992:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005996:	81a3      	strh	r3, [r4, #12]
 8005998:	2300      	movs	r3, #0
 800599a:	6063      	str	r3, [r4, #4]
 800599c:	6923      	ldr	r3, [r4, #16]
 800599e:	6023      	str	r3, [r4, #0]
 80059a0:	89a3      	ldrh	r3, [r4, #12]
 80059a2:	f043 0308 	orr.w	r3, r3, #8
 80059a6:	81a3      	strh	r3, [r4, #12]
 80059a8:	6923      	ldr	r3, [r4, #16]
 80059aa:	b94b      	cbnz	r3, 80059c0 <__swsetup_r+0x7c>
 80059ac:	89a3      	ldrh	r3, [r4, #12]
 80059ae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80059b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059b6:	d003      	beq.n	80059c0 <__swsetup_r+0x7c>
 80059b8:	4621      	mov	r1, r4
 80059ba:	4628      	mov	r0, r5
 80059bc:	f000 f850 	bl	8005a60 <__smakebuf_r>
 80059c0:	89a0      	ldrh	r0, [r4, #12]
 80059c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059c6:	f010 0301 	ands.w	r3, r0, #1
 80059ca:	d00a      	beq.n	80059e2 <__swsetup_r+0x9e>
 80059cc:	2300      	movs	r3, #0
 80059ce:	60a3      	str	r3, [r4, #8]
 80059d0:	6963      	ldr	r3, [r4, #20]
 80059d2:	425b      	negs	r3, r3
 80059d4:	61a3      	str	r3, [r4, #24]
 80059d6:	6923      	ldr	r3, [r4, #16]
 80059d8:	b943      	cbnz	r3, 80059ec <__swsetup_r+0xa8>
 80059da:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80059de:	d1c4      	bne.n	800596a <__swsetup_r+0x26>
 80059e0:	bd38      	pop	{r3, r4, r5, pc}
 80059e2:	0781      	lsls	r1, r0, #30
 80059e4:	bf58      	it	pl
 80059e6:	6963      	ldrpl	r3, [r4, #20]
 80059e8:	60a3      	str	r3, [r4, #8]
 80059ea:	e7f4      	b.n	80059d6 <__swsetup_r+0x92>
 80059ec:	2000      	movs	r0, #0
 80059ee:	e7f7      	b.n	80059e0 <__swsetup_r+0x9c>
 80059f0:	20000068 	.word	0x20000068

080059f4 <_sbrk_r>:
 80059f4:	b538      	push	{r3, r4, r5, lr}
 80059f6:	4d06      	ldr	r5, [pc, #24]	; (8005a10 <_sbrk_r+0x1c>)
 80059f8:	2300      	movs	r3, #0
 80059fa:	4604      	mov	r4, r0
 80059fc:	4608      	mov	r0, r1
 80059fe:	602b      	str	r3, [r5, #0]
 8005a00:	f7fb f8a6 	bl	8000b50 <_sbrk>
 8005a04:	1c43      	adds	r3, r0, #1
 8005a06:	d102      	bne.n	8005a0e <_sbrk_r+0x1a>
 8005a08:	682b      	ldr	r3, [r5, #0]
 8005a0a:	b103      	cbz	r3, 8005a0e <_sbrk_r+0x1a>
 8005a0c:	6023      	str	r3, [r4, #0]
 8005a0e:	bd38      	pop	{r3, r4, r5, pc}
 8005a10:	200002d0 	.word	0x200002d0

08005a14 <__swhatbuf_r>:
 8005a14:	b570      	push	{r4, r5, r6, lr}
 8005a16:	460c      	mov	r4, r1
 8005a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a1c:	2900      	cmp	r1, #0
 8005a1e:	b096      	sub	sp, #88	; 0x58
 8005a20:	4615      	mov	r5, r2
 8005a22:	461e      	mov	r6, r3
 8005a24:	da0d      	bge.n	8005a42 <__swhatbuf_r+0x2e>
 8005a26:	89a3      	ldrh	r3, [r4, #12]
 8005a28:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005a2c:	f04f 0100 	mov.w	r1, #0
 8005a30:	bf0c      	ite	eq
 8005a32:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005a36:	2340      	movne	r3, #64	; 0x40
 8005a38:	2000      	movs	r0, #0
 8005a3a:	6031      	str	r1, [r6, #0]
 8005a3c:	602b      	str	r3, [r5, #0]
 8005a3e:	b016      	add	sp, #88	; 0x58
 8005a40:	bd70      	pop	{r4, r5, r6, pc}
 8005a42:	466a      	mov	r2, sp
 8005a44:	f000 f848 	bl	8005ad8 <_fstat_r>
 8005a48:	2800      	cmp	r0, #0
 8005a4a:	dbec      	blt.n	8005a26 <__swhatbuf_r+0x12>
 8005a4c:	9901      	ldr	r1, [sp, #4]
 8005a4e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005a52:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005a56:	4259      	negs	r1, r3
 8005a58:	4159      	adcs	r1, r3
 8005a5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a5e:	e7eb      	b.n	8005a38 <__swhatbuf_r+0x24>

08005a60 <__smakebuf_r>:
 8005a60:	898b      	ldrh	r3, [r1, #12]
 8005a62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a64:	079d      	lsls	r5, r3, #30
 8005a66:	4606      	mov	r6, r0
 8005a68:	460c      	mov	r4, r1
 8005a6a:	d507      	bpl.n	8005a7c <__smakebuf_r+0x1c>
 8005a6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a70:	6023      	str	r3, [r4, #0]
 8005a72:	6123      	str	r3, [r4, #16]
 8005a74:	2301      	movs	r3, #1
 8005a76:	6163      	str	r3, [r4, #20]
 8005a78:	b002      	add	sp, #8
 8005a7a:	bd70      	pop	{r4, r5, r6, pc}
 8005a7c:	ab01      	add	r3, sp, #4
 8005a7e:	466a      	mov	r2, sp
 8005a80:	f7ff ffc8 	bl	8005a14 <__swhatbuf_r>
 8005a84:	9900      	ldr	r1, [sp, #0]
 8005a86:	4605      	mov	r5, r0
 8005a88:	4630      	mov	r0, r6
 8005a8a:	f7ff fb0f 	bl	80050ac <_malloc_r>
 8005a8e:	b948      	cbnz	r0, 8005aa4 <__smakebuf_r+0x44>
 8005a90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a94:	059a      	lsls	r2, r3, #22
 8005a96:	d4ef      	bmi.n	8005a78 <__smakebuf_r+0x18>
 8005a98:	f023 0303 	bic.w	r3, r3, #3
 8005a9c:	f043 0302 	orr.w	r3, r3, #2
 8005aa0:	81a3      	strh	r3, [r4, #12]
 8005aa2:	e7e3      	b.n	8005a6c <__smakebuf_r+0xc>
 8005aa4:	89a3      	ldrh	r3, [r4, #12]
 8005aa6:	6020      	str	r0, [r4, #0]
 8005aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aac:	81a3      	strh	r3, [r4, #12]
 8005aae:	9b00      	ldr	r3, [sp, #0]
 8005ab0:	6163      	str	r3, [r4, #20]
 8005ab2:	9b01      	ldr	r3, [sp, #4]
 8005ab4:	6120      	str	r0, [r4, #16]
 8005ab6:	b15b      	cbz	r3, 8005ad0 <__smakebuf_r+0x70>
 8005ab8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005abc:	4630      	mov	r0, r6
 8005abe:	f000 f81d 	bl	8005afc <_isatty_r>
 8005ac2:	b128      	cbz	r0, 8005ad0 <__smakebuf_r+0x70>
 8005ac4:	89a3      	ldrh	r3, [r4, #12]
 8005ac6:	f023 0303 	bic.w	r3, r3, #3
 8005aca:	f043 0301 	orr.w	r3, r3, #1
 8005ace:	81a3      	strh	r3, [r4, #12]
 8005ad0:	89a3      	ldrh	r3, [r4, #12]
 8005ad2:	431d      	orrs	r5, r3
 8005ad4:	81a5      	strh	r5, [r4, #12]
 8005ad6:	e7cf      	b.n	8005a78 <__smakebuf_r+0x18>

08005ad8 <_fstat_r>:
 8005ad8:	b538      	push	{r3, r4, r5, lr}
 8005ada:	4d07      	ldr	r5, [pc, #28]	; (8005af8 <_fstat_r+0x20>)
 8005adc:	2300      	movs	r3, #0
 8005ade:	4604      	mov	r4, r0
 8005ae0:	4608      	mov	r0, r1
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	602b      	str	r3, [r5, #0]
 8005ae6:	f7fb f80a 	bl	8000afe <_fstat>
 8005aea:	1c43      	adds	r3, r0, #1
 8005aec:	d102      	bne.n	8005af4 <_fstat_r+0x1c>
 8005aee:	682b      	ldr	r3, [r5, #0]
 8005af0:	b103      	cbz	r3, 8005af4 <_fstat_r+0x1c>
 8005af2:	6023      	str	r3, [r4, #0]
 8005af4:	bd38      	pop	{r3, r4, r5, pc}
 8005af6:	bf00      	nop
 8005af8:	200002d0 	.word	0x200002d0

08005afc <_isatty_r>:
 8005afc:	b538      	push	{r3, r4, r5, lr}
 8005afe:	4d06      	ldr	r5, [pc, #24]	; (8005b18 <_isatty_r+0x1c>)
 8005b00:	2300      	movs	r3, #0
 8005b02:	4604      	mov	r4, r0
 8005b04:	4608      	mov	r0, r1
 8005b06:	602b      	str	r3, [r5, #0]
 8005b08:	f7fb f809 	bl	8000b1e <_isatty>
 8005b0c:	1c43      	adds	r3, r0, #1
 8005b0e:	d102      	bne.n	8005b16 <_isatty_r+0x1a>
 8005b10:	682b      	ldr	r3, [r5, #0]
 8005b12:	b103      	cbz	r3, 8005b16 <_isatty_r+0x1a>
 8005b14:	6023      	str	r3, [r4, #0]
 8005b16:	bd38      	pop	{r3, r4, r5, pc}
 8005b18:	200002d0 	.word	0x200002d0

08005b1c <_init>:
 8005b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b1e:	bf00      	nop
 8005b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b22:	bc08      	pop	{r3}
 8005b24:	469e      	mov	lr, r3
 8005b26:	4770      	bx	lr

08005b28 <_fini>:
 8005b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2a:	bf00      	nop
 8005b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b2e:	bc08      	pop	{r3}
 8005b30:	469e      	mov	lr, r3
 8005b32:	4770      	bx	lr
