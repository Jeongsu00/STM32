/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file    gpio.c
  * @brief   This file provides code for the configuration
  *          of all used GPIO pins.
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "gpio.h"

/* USER CODE BEGIN 0 */
char key[4][4] = {
			{'1', '2', '3', 'C'},
			{'4', '5', '6', 'D'},
			{'7', '8', '9', 'E'},
			{'A', '0', 'B', 'F'},
};
/* USER CODE END 0 */

/*----------------------------------------------------------------------------*/
/* Configure GPIO                                                             */
/*----------------------------------------------------------------------------*/
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

/** Configure pins as
        * Analog
        * Input
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PAPin PA6 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB1 PB2 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 2 */
void Keypads_action(){

//	Keypads_SET();

	for(int control = 0; control < 1; control++){
		for(int Col = 1; Col < 5; Col++){
			if(Col == 1){
				WPINB1;
				if(RPINB1) printf("%c\n\r", key[0][0]);
				else if(RPINB2) printf("%c\n\r", key[0][1]);
				else if(RPINB3) printf("%c\n\r", key[0][2]);
				else if(RPINB4) printf("%c\n\r", key[0][3]);
				WPINB1R;
			}
			else if(Col == 2){
				WPINB2;
				if(RPINB1) printf("%c\n\r", key[1][0]);
				else if(RPINB2) printf("%c\n\r", key[1][1]);
				else if(RPINB3) printf("%c\n\r", key[1][2]);
				else if(RPINB4) printf("%c\n\r", key[1][3]);
				WPINB2R;
			}
			else if(Col == 3){
				WPINB3;
				if(RPINB1) printf("%c\n\r", key[2][0]);
				else if(RPINB2) printf("%c\n\r", key[2][1]);
				else if(RPINB3) printf("%c\n\r", key[2][2]);
				else if(RPINB4) printf("%c\n\r", key[2][3]);
				WPINB3R;
			}
			else if(Col == 4){
				WPINB4;
				if(RPINB1) printf("%c\n\r", key[3][0]);
				else if(RPINB2) printf("%c\n\r", key[3][1]);
				else if(RPINB3) printf("%c\n\r", key[3][2]);
				else if(RPINB4) printf("%c\n\r", key[3][3]);
				WPINB4R;
			}
		}
	}
	HAL_Delay(150);
}
/* USER CODE END 2 */
