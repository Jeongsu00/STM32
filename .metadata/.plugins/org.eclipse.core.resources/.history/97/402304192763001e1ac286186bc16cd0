/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file    dma.c
  * @brief   This file provides code for the configuration
  *          of all the requested memory to memory DMA transfers.
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
#include "main.h"
#include "gpio.h"
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "dma.h"

/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/*----------------------------------------------------------------------------*/
/* Configure DMA                                                              */
/*----------------------------------------------------------------------------*/

/* USER CODE BEGIN 1 */
  uint32_t Adc[2];
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)Adc, 2);
  const char *ch[] = {"right\n\r", "left\n\r", "up\n\r", "down\n\r"};
/* USER CODE END 1 */

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);

}

/* USER CODE BEGIN 2 */
void ADc(void){
	while (1){
		if(Adc[0] <= 500){
			  HAL_UART_Transmit(&huart2, (uint8_t *)ch[0], strlen(ch[0]), 1000);
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
		//		  printf("X = %ld\r\n", Adc[0]);
			  HAL_Delay(1000);
		}
		else if(Adc[0] >= 4000){
			  HAL_UART_Transmit(&huart2, (uint8_t *)ch[1], strlen(ch[1]), 1000);
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
		//		  printf("X = %ld\r\n", Adc[0]);
			  HAL_Delay(1000);
		}
		else if(Adc[1] >= 4000){
			  HAL_UART_Transmit(&huart2, (uint8_t *)ch[2], strlen(ch[2]), 1000);
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
		//		  printf("Y = %ld\r\n", Adc[1]);
			  HAL_Delay(1000);
		}
		else if(Adc[1] <= 500){
			  HAL_UART_Transmit(&huart2, (uint8_t *)ch[3], strlen(ch[3]), 1000);
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
		//		  printf("Y = %ld\r\n", Adc[1]);
			  HAL_Delay(1000);
		}
	}
}
/* USER CODE END 2 */

