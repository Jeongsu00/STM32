
F401RE_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003090  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003224  08003224  00013224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800323c  0800323c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800323c  0800323c  0001323c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003244  08003244  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003244  08003244  00013244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003248  08003248  00013248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800324c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08003258  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08003258  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d3e1  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fca  00000000  00000000  0002d460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c48  00000000  00000000  0002f430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000997  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015c0d  00000000  00000000  00030a0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000efbd  00000000  00000000  0004661c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008963a  00000000  00000000  000555d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000032e0  00000000  00000000  000dec14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000e1ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800320c 	.word	0x0800320c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800320c 	.word	0x0800320c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08a      	sub	sp, #40	; 0x28
 80004d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 0314 	add.w	r3, r7, #20
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e6:	2300      	movs	r3, #0
 80004e8:	613b      	str	r3, [r7, #16]
 80004ea:	4b38      	ldr	r3, [pc, #224]	; (80005cc <MX_GPIO_Init+0xfc>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	4a37      	ldr	r2, [pc, #220]	; (80005cc <MX_GPIO_Init+0xfc>)
 80004f0:	f043 0304 	orr.w	r3, r3, #4
 80004f4:	6313      	str	r3, [r2, #48]	; 0x30
 80004f6:	4b35      	ldr	r3, [pc, #212]	; (80005cc <MX_GPIO_Init+0xfc>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	f003 0304 	and.w	r3, r3, #4
 80004fe:	613b      	str	r3, [r7, #16]
 8000500:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000502:	2300      	movs	r3, #0
 8000504:	60fb      	str	r3, [r7, #12]
 8000506:	4b31      	ldr	r3, [pc, #196]	; (80005cc <MX_GPIO_Init+0xfc>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	4a30      	ldr	r2, [pc, #192]	; (80005cc <MX_GPIO_Init+0xfc>)
 800050c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000510:	6313      	str	r3, [r2, #48]	; 0x30
 8000512:	4b2e      	ldr	r3, [pc, #184]	; (80005cc <MX_GPIO_Init+0xfc>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	4b2a      	ldr	r3, [pc, #168]	; (80005cc <MX_GPIO_Init+0xfc>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a29      	ldr	r2, [pc, #164]	; (80005cc <MX_GPIO_Init+0xfc>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b27      	ldr	r3, [pc, #156]	; (80005cc <MX_GPIO_Init+0xfc>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	4b23      	ldr	r3, [pc, #140]	; (80005cc <MX_GPIO_Init+0xfc>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a22      	ldr	r2, [pc, #136]	; (80005cc <MX_GPIO_Init+0xfc>)
 8000544:	f043 0302 	orr.w	r3, r3, #2
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b20      	ldr	r3, [pc, #128]	; (80005cc <MX_GPIO_Init+0xfc>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0302 	and.w	r3, r3, #2
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800055c:	481c      	ldr	r0, [pc, #112]	; (80005d0 <MX_GPIO_Init+0x100>)
 800055e:	f000 fe03 	bl	8001168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	2130      	movs	r1, #48	; 0x30
 8000566:	481b      	ldr	r0, [pc, #108]	; (80005d4 <MX_GPIO_Init+0x104>)
 8000568:	f000 fdfe 	bl	8001168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800056c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000572:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000576:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000578:	2300      	movs	r3, #0
 800057a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800057c:	f107 0314 	add.w	r3, r7, #20
 8000580:	4619      	mov	r1, r3
 8000582:	4815      	ldr	r0, [pc, #84]	; (80005d8 <MX_GPIO_Init+0x108>)
 8000584:	f000 fc6c 	bl	8000e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 8000588:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800058c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058e:	2301      	movs	r3, #1
 8000590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	2300      	movs	r3, #0
 8000594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000596:	2300      	movs	r3, #0
 8000598:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	4619      	mov	r1, r3
 80005a0:	480b      	ldr	r0, [pc, #44]	; (80005d0 <MX_GPIO_Init+0x100>)
 80005a2:	f000 fc5d 	bl	8000e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80005a6:	2330      	movs	r3, #48	; 0x30
 80005a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005aa:	2301      	movs	r3, #1
 80005ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b2:	2300      	movs	r3, #0
 80005b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	4619      	mov	r1, r3
 80005bc:	4805      	ldr	r0, [pc, #20]	; (80005d4 <MX_GPIO_Init+0x104>)
 80005be:	f000 fc4f 	bl	8000e60 <HAL_GPIO_Init>

}
 80005c2:	bf00      	nop
 80005c4:	3728      	adds	r7, #40	; 0x28
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40023800 	.word	0x40023800
 80005d0:	40020000 	.word	0x40020000
 80005d4:	40020400 	.word	0x40020400
 80005d8:	40020800 	.word	0x40020800

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fa28 	bl	8000a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f80c 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f7ff ff72 	bl	80004d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ec:	f000 f97e 	bl	80008ec <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80005f0:	f000 f906 	bl	8000800 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);   // 타미어 초기화 함수
 80005f4:	4801      	ldr	r0, [pc, #4]	; (80005fc <main+0x20>)
 80005f6:	f001 fad3 	bl	8001ba0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fa:	e7fe      	b.n	80005fa <main+0x1e>
 80005fc:	20000028 	.word	0x20000028

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	; 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f002 fdd0 	bl	80031b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	4b29      	ldr	r3, [pc, #164]	; (80006d0 <SystemClock_Config+0xd0>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	4a28      	ldr	r2, [pc, #160]	; (80006d0 <SystemClock_Config+0xd0>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	; 0x40
 8000634:	4b26      	ldr	r3, [pc, #152]	; (80006d0 <SystemClock_Config+0xd0>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <SystemClock_Config+0xd4>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800064c:	4a21      	ldr	r2, [pc, #132]	; (80006d4 <SystemClock_Config+0xd4>)
 800064e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <SystemClock_Config+0xd4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000668:	2310      	movs	r3, #16
 800066a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066c:	2302      	movs	r3, #2
 800066e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000670:	2300      	movs	r3, #0
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000674:	2310      	movs	r3, #16
 8000676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000678:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800067c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800067e:	2304      	movs	r3, #4
 8000680:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000682:	2307      	movs	r3, #7
 8000684:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	4618      	mov	r0, r3
 800068c:	f000 fda0 	bl	80011d0 <HAL_RCC_OscConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000696:	f000 f835 	bl	8000704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069a:	230f      	movs	r3, #15
 800069c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069e:	2302      	movs	r3, #2
 80006a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2102      	movs	r1, #2
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 f802 	bl	80016c0 <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006c2:	f000 f81f 	bl	8000704 <Error_Handler>
  }
}
 80006c6:	bf00      	nop
 80006c8:	3750      	adds	r7, #80	; 0x50
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *him){   //PeriodRlapsedCallback : 모듈의 주기가 만료될
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);                                   // 때 호출되는 함수
 80006e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e4:	4805      	ldr	r0, [pc, #20]	; (80006fc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80006e6:	f000 fd58 	bl	800119a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5 | GPIO_PIN_4);
 80006ea:	2130      	movs	r1, #48	; 0x30
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80006ee:	f000 fd54 	bl	800119a <HAL_GPIO_TogglePin>
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40020000 	.word	0x40020000
 8000700:	40020400 	.word	0x40020400

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000708:	b672      	cpsid	i
}
 800070a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800070c:	e7fe      	b.n	800070c <Error_Handler+0x8>
	...

08000710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <HAL_MspInit+0x4c>)
 800071c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071e:	4a0f      	ldr	r2, [pc, #60]	; (800075c <HAL_MspInit+0x4c>)
 8000720:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000724:	6453      	str	r3, [r2, #68]	; 0x44
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <HAL_MspInit+0x4c>)
 8000728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <HAL_MspInit+0x4c>)
 8000738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073a:	4a08      	ldr	r2, [pc, #32]	; (800075c <HAL_MspInit+0x4c>)
 800073c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000740:	6413      	str	r3, [r2, #64]	; 0x40
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <HAL_MspInit+0x4c>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800074e:	2007      	movs	r0, #7
 8000750:	f000 fab2 	bl	8000cb8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40023800 	.word	0x40023800

08000760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <NMI_Handler+0x4>

08000766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <HardFault_Handler+0x4>

0800076c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <MemManage_Handler+0x4>

08000772 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <BusFault_Handler+0x4>

08000778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <UsageFault_Handler+0x4>

0800077e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr

0800079a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ac:	f000 f994 	bl	8000ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80007b8:	4802      	ldr	r0, [pc, #8]	; (80007c4 <TIM3_IRQHandler+0x10>)
 80007ba:	f001 fa53 	bl	8001c64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000028 	.word	0x20000028

080007c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007cc:	4802      	ldr	r0, [pc, #8]	; (80007d8 <USART2_IRQHandler+0x10>)
 80007ce:	f001 fe2b 	bl	8002428 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000070 	.word	0x20000070

080007dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <SystemInit+0x20>)
 80007e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007e6:	4a05      	ldr	r2, [pc, #20]	; (80007fc <SystemInit+0x20>)
 80007e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000806:	f107 0308 	add.w	r3, r7, #8
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000814:	463b      	mov	r3, r7
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800081c:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <MX_TIM3_Init+0x94>)
 800081e:	4a1e      	ldr	r2, [pc, #120]	; (8000898 <MX_TIM3_Init+0x98>)
 8000820:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8000822:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <MX_TIM3_Init+0x94>)
 8000824:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000828:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082a:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <MX_TIM3_Init+0x94>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8000830:	4b18      	ldr	r3, [pc, #96]	; (8000894 <MX_TIM3_Init+0x94>)
 8000832:	f242 720f 	movw	r2, #9999	; 0x270f
 8000836:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000838:	4b16      	ldr	r3, [pc, #88]	; (8000894 <MX_TIM3_Init+0x94>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <MX_TIM3_Init+0x94>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000844:	4813      	ldr	r0, [pc, #76]	; (8000894 <MX_TIM3_Init+0x94>)
 8000846:	f001 f95b 	bl	8001b00 <HAL_TIM_Base_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000850:	f7ff ff58 	bl	8000704 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000858:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800085a:	f107 0308 	add.w	r3, r7, #8
 800085e:	4619      	mov	r1, r3
 8000860:	480c      	ldr	r0, [pc, #48]	; (8000894 <MX_TIM3_Init+0x94>)
 8000862:	f001 fb07 	bl	8001e74 <HAL_TIM_ConfigClockSource>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800086c:	f7ff ff4a 	bl	8000704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000870:	2300      	movs	r3, #0
 8000872:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000878:	463b      	mov	r3, r7
 800087a:	4619      	mov	r1, r3
 800087c:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_TIM3_Init+0x94>)
 800087e:	f001 fd03 	bl	8002288 <HAL_TIMEx_MasterConfigSynchronization>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000888:	f7ff ff3c 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	3718      	adds	r7, #24
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000028 	.word	0x20000028
 8000898:	40000400 	.word	0x40000400

0800089c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a0e      	ldr	r2, [pc, #56]	; (80008e4 <HAL_TIM_Base_MspInit+0x48>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d115      	bne.n	80008da <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <HAL_TIM_Base_MspInit+0x4c>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	4a0c      	ldr	r2, [pc, #48]	; (80008e8 <HAL_TIM_Base_MspInit+0x4c>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6413      	str	r3, [r2, #64]	; 0x40
 80008be:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <HAL_TIM_Base_MspInit+0x4c>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2100      	movs	r1, #0
 80008ce:	201d      	movs	r0, #29
 80008d0:	f000 f9fd 	bl	8000cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80008d4:	201d      	movs	r0, #29
 80008d6:	f000 fa16 	bl	8000d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80008da:	bf00      	nop
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40000400 	.word	0x40000400
 80008e8:	40023800 	.word	0x40023800

080008ec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 80008f2:	4a12      	ldr	r2, [pc, #72]	; (800093c <MX_USART2_UART_Init+0x50>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 80008f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000924:	f001 fd32 	bl	800238c <HAL_UART_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800092e:	f7ff fee9 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000070 	.word	0x20000070
 800093c:	40004400 	.word	0x40004400

08000940 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08a      	sub	sp, #40	; 0x28
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a1d      	ldr	r2, [pc, #116]	; (80009d4 <HAL_UART_MspInit+0x94>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d133      	bne.n	80009ca <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <HAL_UART_MspInit+0x98>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	4a1b      	ldr	r2, [pc, #108]	; (80009d8 <HAL_UART_MspInit+0x98>)
 800096c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000970:	6413      	str	r3, [r2, #64]	; 0x40
 8000972:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <HAL_UART_MspInit+0x98>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <HAL_UART_MspInit+0x98>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a14      	ldr	r2, [pc, #80]	; (80009d8 <HAL_UART_MspInit+0x98>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <HAL_UART_MspInit+0x98>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800099a:	230c      	movs	r3, #12
 800099c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a6:	2303      	movs	r3, #3
 80009a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009aa:	2307      	movs	r3, #7
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4619      	mov	r1, r3
 80009b4:	4809      	ldr	r0, [pc, #36]	; (80009dc <HAL_UART_MspInit+0x9c>)
 80009b6:	f000 fa53 	bl	8000e60 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	2026      	movs	r0, #38	; 0x26
 80009c0:	f000 f985 	bl	8000cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009c4:	2026      	movs	r0, #38	; 0x26
 80009c6:	f000 f99e 	bl	8000d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009ca:	bf00      	nop
 80009cc:	3728      	adds	r7, #40	; 0x28
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40004400 	.word	0x40004400
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40020000 	.word	0x40020000

080009e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009e4:	480d      	ldr	r0, [pc, #52]	; (8000a1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009e6:	490e      	ldr	r1, [pc, #56]	; (8000a20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009e8:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ec:	e002      	b.n	80009f4 <LoopCopyDataInit>

080009ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f2:	3304      	adds	r3, #4

080009f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f8:	d3f9      	bcc.n	80009ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fa:	4a0b      	ldr	r2, [pc, #44]	; (8000a28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009fc:	4c0b      	ldr	r4, [pc, #44]	; (8000a2c <LoopFillZerobss+0x26>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a00:	e001      	b.n	8000a06 <LoopFillZerobss>

08000a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a04:	3204      	adds	r2, #4

08000a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a08:	d3fb      	bcc.n	8000a02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a0a:	f7ff fee7 	bl	80007dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a0e:	f002 fbd9 	bl	80031c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a12:	f7ff fde3 	bl	80005dc <main>
  bx  lr    
 8000a16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a18:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a20:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a24:	0800324c 	.word	0x0800324c
  ldr r2, =_sbss
 8000a28:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a2c:	200000b8 	.word	0x200000b8

08000a30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a30:	e7fe      	b.n	8000a30 <ADC_IRQHandler>
	...

08000a34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a38:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <HAL_Init+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a0d      	ldr	r2, [pc, #52]	; (8000a74 <HAL_Init+0x40>)
 8000a3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a44:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <HAL_Init+0x40>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <HAL_Init+0x40>)
 8000a4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <HAL_Init+0x40>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a07      	ldr	r2, [pc, #28]	; (8000a74 <HAL_Init+0x40>)
 8000a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a5c:	2003      	movs	r0, #3
 8000a5e:	f000 f92b 	bl	8000cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a62:	2000      	movs	r0, #0
 8000a64:	f000 f808 	bl	8000a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a68:	f7ff fe52 	bl	8000710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40023c00 	.word	0x40023c00

08000a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <HAL_InitTick+0x54>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_InitTick+0x58>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 f943 	bl	8000d22 <HAL_SYSTICK_Config>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e00e      	b.n	8000ac4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2b0f      	cmp	r3, #15
 8000aaa:	d80a      	bhi.n	8000ac2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aac:	2200      	movs	r2, #0
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	f000 f90b 	bl	8000cce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab8:	4a06      	ldr	r2, [pc, #24]	; (8000ad4 <HAL_InitTick+0x5c>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e000      	b.n	8000ac4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	20000004 	.word	0x20000004

08000ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_IncTick+0x20>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_IncTick+0x24>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	4a04      	ldr	r2, [pc, #16]	; (8000afc <HAL_IncTick+0x24>)
 8000aea:	6013      	str	r3, [r2, #0]
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	20000008 	.word	0x20000008
 8000afc:	200000b4 	.word	0x200000b4

08000b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return uwTick;
 8000b04:	4b03      	ldr	r3, [pc, #12]	; (8000b14 <HAL_GetTick+0x14>)
 8000b06:	681b      	ldr	r3, [r3, #0]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	200000b4 	.word	0x200000b4

08000b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <__NVIC_SetPriorityGrouping+0x44>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b34:	4013      	ands	r3, r2
 8000b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4a:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	60d3      	str	r3, [r2, #12]
}
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <__NVIC_GetPriorityGrouping+0x18>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	0a1b      	lsrs	r3, r3, #8
 8000b6a:	f003 0307 	and.w	r3, r3, #7
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	db0b      	blt.n	8000ba6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	f003 021f 	and.w	r2, r3, #31
 8000b94:	4907      	ldr	r1, [pc, #28]	; (8000bb4 <__NVIC_EnableIRQ+0x38>)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	095b      	lsrs	r3, r3, #5
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000e100 	.word	0xe000e100

08000bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	db0a      	blt.n	8000be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	490c      	ldr	r1, [pc, #48]	; (8000c04 <__NVIC_SetPriority+0x4c>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	0112      	lsls	r2, r2, #4
 8000bd8:	b2d2      	uxtb	r2, r2
 8000bda:	440b      	add	r3, r1
 8000bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be0:	e00a      	b.n	8000bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4908      	ldr	r1, [pc, #32]	; (8000c08 <__NVIC_SetPriority+0x50>)
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	f003 030f 	and.w	r3, r3, #15
 8000bee:	3b04      	subs	r3, #4
 8000bf0:	0112      	lsls	r2, r2, #4
 8000bf2:	b2d2      	uxtb	r2, r2
 8000bf4:	440b      	add	r3, r1
 8000bf6:	761a      	strb	r2, [r3, #24]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000e100 	.word	0xe000e100
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b089      	sub	sp, #36	; 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	f1c3 0307 	rsb	r3, r3, #7
 8000c26:	2b04      	cmp	r3, #4
 8000c28:	bf28      	it	cs
 8000c2a:	2304      	movcs	r3, #4
 8000c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3304      	adds	r3, #4
 8000c32:	2b06      	cmp	r3, #6
 8000c34:	d902      	bls.n	8000c3c <NVIC_EncodePriority+0x30>
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3b03      	subs	r3, #3
 8000c3a:	e000      	b.n	8000c3e <NVIC_EncodePriority+0x32>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	f04f 32ff 	mov.w	r2, #4294967295
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43da      	mvns	r2, r3
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	401a      	ands	r2, r3
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c54:	f04f 31ff 	mov.w	r1, #4294967295
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5e:	43d9      	mvns	r1, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c64:	4313      	orrs	r3, r2
         );
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3724      	adds	r7, #36	; 0x24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
	...

08000c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c84:	d301      	bcc.n	8000c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c86:	2301      	movs	r3, #1
 8000c88:	e00f      	b.n	8000caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <SysTick_Config+0x40>)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c92:	210f      	movs	r1, #15
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295
 8000c98:	f7ff ff8e 	bl	8000bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <SysTick_Config+0x40>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca2:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <SysTick_Config+0x40>)
 8000ca4:	2207      	movs	r2, #7
 8000ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	e000e010 	.word	0xe000e010

08000cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff ff29 	bl	8000b18 <__NVIC_SetPriorityGrouping>
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b086      	sub	sp, #24
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	60b9      	str	r1, [r7, #8]
 8000cd8:	607a      	str	r2, [r7, #4]
 8000cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce0:	f7ff ff3e 	bl	8000b60 <__NVIC_GetPriorityGrouping>
 8000ce4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	68b9      	ldr	r1, [r7, #8]
 8000cea:	6978      	ldr	r0, [r7, #20]
 8000cec:	f7ff ff8e 	bl	8000c0c <NVIC_EncodePriority>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff5d 	bl	8000bb8 <__NVIC_SetPriority>
}
 8000cfe:	bf00      	nop
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ff31 	bl	8000b7c <__NVIC_EnableIRQ>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f7ff ffa2 	bl	8000c74 <SysTick_Config>
 8000d30:	4603      	mov	r3, r0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b084      	sub	sp, #16
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d46:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d48:	f7ff feda 	bl	8000b00 <HAL_GetTick>
 8000d4c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d008      	beq.n	8000d6c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2280      	movs	r2, #128	; 0x80
 8000d5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2200      	movs	r2, #0
 8000d64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e052      	b.n	8000e12 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f022 0216 	bic.w	r2, r2, #22
 8000d7a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	695a      	ldr	r2, [r3, #20]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d8a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d103      	bne.n	8000d9c <HAL_DMA_Abort+0x62>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d007      	beq.n	8000dac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f022 0208 	bic.w	r2, r2, #8
 8000daa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f022 0201 	bic.w	r2, r2, #1
 8000dba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dbc:	e013      	b.n	8000de6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000dbe:	f7ff fe9f 	bl	8000b00 <HAL_GetTick>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	2b05      	cmp	r3, #5
 8000dca:	d90c      	bls.n	8000de6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2220      	movs	r2, #32
 8000dd0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000de2:	2303      	movs	r3, #3
 8000de4:	e015      	b.n	8000e12 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d1e4      	bne.n	8000dbe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000df8:	223f      	movs	r2, #63	; 0x3f
 8000dfa:	409a      	lsls	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2201      	movs	r2, #1
 8000e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b083      	sub	sp, #12
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d004      	beq.n	8000e38 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2280      	movs	r2, #128	; 0x80
 8000e32:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e34:	2301      	movs	r3, #1
 8000e36:	e00c      	b.n	8000e52 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2205      	movs	r2, #5
 8000e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f022 0201 	bic.w	r2, r2, #1
 8000e4e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
	...

08000e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b089      	sub	sp, #36	; 0x24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
 8000e7a:	e159      	b.n	8001130 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	697a      	ldr	r2, [r7, #20]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	f040 8148 	bne.w	800112a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 0303 	and.w	r3, r3, #3
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d005      	beq.n	8000eb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d130      	bne.n	8000f14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	68da      	ldr	r2, [r3, #12]
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ee8:	2201      	movs	r2, #1
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	091b      	lsrs	r3, r3, #4
 8000efe:	f003 0201 	and.w	r2, r3, #1
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	2b03      	cmp	r3, #3
 8000f1e:	d017      	beq.n	8000f50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	689a      	ldr	r2, [r3, #8]
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d123      	bne.n	8000fa4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	08da      	lsrs	r2, r3, #3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3208      	adds	r2, #8
 8000f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	f003 0307 	and.w	r3, r3, #7
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	220f      	movs	r2, #15
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	691a      	ldr	r2, [r3, #16]
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	08da      	lsrs	r2, r3, #3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3208      	adds	r2, #8
 8000f9e:	69b9      	ldr	r1, [r7, #24]
 8000fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	2203      	movs	r2, #3
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0203 	and.w	r2, r3, #3
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f000 80a2 	beq.w	800112a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	4b57      	ldr	r3, [pc, #348]	; (8001148 <HAL_GPIO_Init+0x2e8>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fee:	4a56      	ldr	r2, [pc, #344]	; (8001148 <HAL_GPIO_Init+0x2e8>)
 8000ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff6:	4b54      	ldr	r3, [pc, #336]	; (8001148 <HAL_GPIO_Init+0x2e8>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001002:	4a52      	ldr	r2, [pc, #328]	; (800114c <HAL_GPIO_Init+0x2ec>)
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	089b      	lsrs	r3, r3, #2
 8001008:	3302      	adds	r3, #2
 800100a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f003 0303 	and.w	r3, r3, #3
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	220f      	movs	r2, #15
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a49      	ldr	r2, [pc, #292]	; (8001150 <HAL_GPIO_Init+0x2f0>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d019      	beq.n	8001062 <HAL_GPIO_Init+0x202>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a48      	ldr	r2, [pc, #288]	; (8001154 <HAL_GPIO_Init+0x2f4>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d013      	beq.n	800105e <HAL_GPIO_Init+0x1fe>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a47      	ldr	r2, [pc, #284]	; (8001158 <HAL_GPIO_Init+0x2f8>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d00d      	beq.n	800105a <HAL_GPIO_Init+0x1fa>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a46      	ldr	r2, [pc, #280]	; (800115c <HAL_GPIO_Init+0x2fc>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d007      	beq.n	8001056 <HAL_GPIO_Init+0x1f6>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a45      	ldr	r2, [pc, #276]	; (8001160 <HAL_GPIO_Init+0x300>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d101      	bne.n	8001052 <HAL_GPIO_Init+0x1f2>
 800104e:	2304      	movs	r3, #4
 8001050:	e008      	b.n	8001064 <HAL_GPIO_Init+0x204>
 8001052:	2307      	movs	r3, #7
 8001054:	e006      	b.n	8001064 <HAL_GPIO_Init+0x204>
 8001056:	2303      	movs	r3, #3
 8001058:	e004      	b.n	8001064 <HAL_GPIO_Init+0x204>
 800105a:	2302      	movs	r3, #2
 800105c:	e002      	b.n	8001064 <HAL_GPIO_Init+0x204>
 800105e:	2301      	movs	r3, #1
 8001060:	e000      	b.n	8001064 <HAL_GPIO_Init+0x204>
 8001062:	2300      	movs	r3, #0
 8001064:	69fa      	ldr	r2, [r7, #28]
 8001066:	f002 0203 	and.w	r2, r2, #3
 800106a:	0092      	lsls	r2, r2, #2
 800106c:	4093      	lsls	r3, r2
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001074:	4935      	ldr	r1, [pc, #212]	; (800114c <HAL_GPIO_Init+0x2ec>)
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	089b      	lsrs	r3, r3, #2
 800107a:	3302      	adds	r3, #2
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001082:	4b38      	ldr	r3, [pc, #224]	; (8001164 <HAL_GPIO_Init+0x304>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010a6:	4a2f      	ldr	r2, [pc, #188]	; (8001164 <HAL_GPIO_Init+0x304>)
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010ac:	4b2d      	ldr	r3, [pc, #180]	; (8001164 <HAL_GPIO_Init+0x304>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010d0:	4a24      	ldr	r2, [pc, #144]	; (8001164 <HAL_GPIO_Init+0x304>)
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010d6:	4b23      	ldr	r3, [pc, #140]	; (8001164 <HAL_GPIO_Init+0x304>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010fa:	4a1a      	ldr	r2, [pc, #104]	; (8001164 <HAL_GPIO_Init+0x304>)
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001100:	4b18      	ldr	r3, [pc, #96]	; (8001164 <HAL_GPIO_Init+0x304>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001124:	4a0f      	ldr	r2, [pc, #60]	; (8001164 <HAL_GPIO_Init+0x304>)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3301      	adds	r3, #1
 800112e:	61fb      	str	r3, [r7, #28]
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	2b0f      	cmp	r3, #15
 8001134:	f67f aea2 	bls.w	8000e7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	3724      	adds	r7, #36	; 0x24
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40023800 	.word	0x40023800
 800114c:	40013800 	.word	0x40013800
 8001150:	40020000 	.word	0x40020000
 8001154:	40020400 	.word	0x40020400
 8001158:	40020800 	.word	0x40020800
 800115c:	40020c00 	.word	0x40020c00
 8001160:	40021000 	.word	0x40021000
 8001164:	40013c00 	.word	0x40013c00

08001168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	807b      	strh	r3, [r7, #2]
 8001174:	4613      	mov	r3, r2
 8001176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001178:	787b      	ldrb	r3, [r7, #1]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800117e:	887a      	ldrh	r2, [r7, #2]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001184:	e003      	b.n	800118e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001186:	887b      	ldrh	r3, [r7, #2]
 8001188:	041a      	lsls	r2, r3, #16
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	619a      	str	r2, [r3, #24]
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800119a:	b480      	push	{r7}
 800119c:	b085      	sub	sp, #20
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
 80011a2:	460b      	mov	r3, r1
 80011a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011ac:	887a      	ldrh	r2, [r7, #2]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	4013      	ands	r3, r2
 80011b2:	041a      	lsls	r2, r3, #16
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	43d9      	mvns	r1, r3
 80011b8:	887b      	ldrh	r3, [r7, #2]
 80011ba:	400b      	ands	r3, r1
 80011bc:	431a      	orrs	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	619a      	str	r2, [r3, #24]
}
 80011c2:	bf00      	nop
 80011c4:	3714      	adds	r7, #20
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e267      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d075      	beq.n	80012da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011ee:	4b88      	ldr	r3, [pc, #544]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 030c 	and.w	r3, r3, #12
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	d00c      	beq.n	8001214 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011fa:	4b85      	ldr	r3, [pc, #532]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001202:	2b08      	cmp	r3, #8
 8001204:	d112      	bne.n	800122c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001206:	4b82      	ldr	r3, [pc, #520]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800120e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001212:	d10b      	bne.n	800122c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001214:	4b7e      	ldr	r3, [pc, #504]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d05b      	beq.n	80012d8 <HAL_RCC_OscConfig+0x108>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d157      	bne.n	80012d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e242      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001234:	d106      	bne.n	8001244 <HAL_RCC_OscConfig+0x74>
 8001236:	4b76      	ldr	r3, [pc, #472]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a75      	ldr	r2, [pc, #468]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 800123c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	e01d      	b.n	8001280 <HAL_RCC_OscConfig+0xb0>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800124c:	d10c      	bne.n	8001268 <HAL_RCC_OscConfig+0x98>
 800124e:	4b70      	ldr	r3, [pc, #448]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a6f      	ldr	r2, [pc, #444]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	4b6d      	ldr	r3, [pc, #436]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a6c      	ldr	r2, [pc, #432]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	e00b      	b.n	8001280 <HAL_RCC_OscConfig+0xb0>
 8001268:	4b69      	ldr	r3, [pc, #420]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a68      	ldr	r2, [pc, #416]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 800126e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	4b66      	ldr	r3, [pc, #408]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a65      	ldr	r2, [pc, #404]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 800127a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800127e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d013      	beq.n	80012b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001288:	f7ff fc3a 	bl	8000b00 <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001290:	f7ff fc36 	bl	8000b00 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b64      	cmp	r3, #100	; 0x64
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e207      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a2:	4b5b      	ldr	r3, [pc, #364]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0f0      	beq.n	8001290 <HAL_RCC_OscConfig+0xc0>
 80012ae:	e014      	b.n	80012da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b0:	f7ff fc26 	bl	8000b00 <HAL_GetTick>
 80012b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012b8:	f7ff fc22 	bl	8000b00 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b64      	cmp	r3, #100	; 0x64
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e1f3      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ca:	4b51      	ldr	r3, [pc, #324]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f0      	bne.n	80012b8 <HAL_RCC_OscConfig+0xe8>
 80012d6:	e000      	b.n	80012da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d063      	beq.n	80013ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012e6:	4b4a      	ldr	r3, [pc, #296]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 030c 	and.w	r3, r3, #12
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00b      	beq.n	800130a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012f2:	4b47      	ldr	r3, [pc, #284]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012fa:	2b08      	cmp	r3, #8
 80012fc:	d11c      	bne.n	8001338 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012fe:	4b44      	ldr	r3, [pc, #272]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d116      	bne.n	8001338 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130a:	4b41      	ldr	r3, [pc, #260]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d005      	beq.n	8001322 <HAL_RCC_OscConfig+0x152>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d001      	beq.n	8001322 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e1c7      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001322:	4b3b      	ldr	r3, [pc, #236]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	4937      	ldr	r1, [pc, #220]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001332:	4313      	orrs	r3, r2
 8001334:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001336:	e03a      	b.n	80013ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d020      	beq.n	8001382 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001340:	4b34      	ldr	r3, [pc, #208]	; (8001414 <HAL_RCC_OscConfig+0x244>)
 8001342:	2201      	movs	r2, #1
 8001344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001346:	f7ff fbdb 	bl	8000b00 <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800134e:	f7ff fbd7 	bl	8000b00 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e1a8      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001360:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0f0      	beq.n	800134e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136c:	4b28      	ldr	r3, [pc, #160]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	691b      	ldr	r3, [r3, #16]
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	4925      	ldr	r1, [pc, #148]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 800137c:	4313      	orrs	r3, r2
 800137e:	600b      	str	r3, [r1, #0]
 8001380:	e015      	b.n	80013ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001382:	4b24      	ldr	r3, [pc, #144]	; (8001414 <HAL_RCC_OscConfig+0x244>)
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001388:	f7ff fbba 	bl	8000b00 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001390:	f7ff fbb6 	bl	8000b00 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e187      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a2:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f0      	bne.n	8001390 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d036      	beq.n	8001428 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d016      	beq.n	80013f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <HAL_RCC_OscConfig+0x248>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c8:	f7ff fb9a 	bl	8000b00 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013d0:	f7ff fb96 	bl	8000b00 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e167      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 80013e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0f0      	beq.n	80013d0 <HAL_RCC_OscConfig+0x200>
 80013ee:	e01b      	b.n	8001428 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <HAL_RCC_OscConfig+0x248>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f6:	f7ff fb83 	bl	8000b00 <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013fc:	e00e      	b.n	800141c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013fe:	f7ff fb7f 	bl	8000b00 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d907      	bls.n	800141c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e150      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
 8001410:	40023800 	.word	0x40023800
 8001414:	42470000 	.word	0x42470000
 8001418:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800141c:	4b88      	ldr	r3, [pc, #544]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 800141e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1ea      	bne.n	80013fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 8097 	beq.w	8001564 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001436:	2300      	movs	r3, #0
 8001438:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800143a:	4b81      	ldr	r3, [pc, #516]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10f      	bne.n	8001466 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	4b7d      	ldr	r3, [pc, #500]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	4a7c      	ldr	r2, [pc, #496]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 8001450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001454:	6413      	str	r3, [r2, #64]	; 0x40
 8001456:	4b7a      	ldr	r3, [pc, #488]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001462:	2301      	movs	r3, #1
 8001464:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001466:	4b77      	ldr	r3, [pc, #476]	; (8001644 <HAL_RCC_OscConfig+0x474>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146e:	2b00      	cmp	r3, #0
 8001470:	d118      	bne.n	80014a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001472:	4b74      	ldr	r3, [pc, #464]	; (8001644 <HAL_RCC_OscConfig+0x474>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a73      	ldr	r2, [pc, #460]	; (8001644 <HAL_RCC_OscConfig+0x474>)
 8001478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800147e:	f7ff fb3f 	bl	8000b00 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001486:	f7ff fb3b 	bl	8000b00 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e10c      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001498:	4b6a      	ldr	r3, [pc, #424]	; (8001644 <HAL_RCC_OscConfig+0x474>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0f0      	beq.n	8001486 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d106      	bne.n	80014ba <HAL_RCC_OscConfig+0x2ea>
 80014ac:	4b64      	ldr	r3, [pc, #400]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b0:	4a63      	ldr	r2, [pc, #396]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6713      	str	r3, [r2, #112]	; 0x70
 80014b8:	e01c      	b.n	80014f4 <HAL_RCC_OscConfig+0x324>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	2b05      	cmp	r3, #5
 80014c0:	d10c      	bne.n	80014dc <HAL_RCC_OscConfig+0x30c>
 80014c2:	4b5f      	ldr	r3, [pc, #380]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c6:	4a5e      	ldr	r2, [pc, #376]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	6713      	str	r3, [r2, #112]	; 0x70
 80014ce:	4b5c      	ldr	r3, [pc, #368]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d2:	4a5b      	ldr	r2, [pc, #364]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6713      	str	r3, [r2, #112]	; 0x70
 80014da:	e00b      	b.n	80014f4 <HAL_RCC_OscConfig+0x324>
 80014dc:	4b58      	ldr	r3, [pc, #352]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e0:	4a57      	ldr	r2, [pc, #348]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014e2:	f023 0301 	bic.w	r3, r3, #1
 80014e6:	6713      	str	r3, [r2, #112]	; 0x70
 80014e8:	4b55      	ldr	r3, [pc, #340]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ec:	4a54      	ldr	r2, [pc, #336]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014ee:	f023 0304 	bic.w	r3, r3, #4
 80014f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d015      	beq.n	8001528 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014fc:	f7ff fb00 	bl	8000b00 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001502:	e00a      	b.n	800151a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001504:	f7ff fafc 	bl	8000b00 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001512:	4293      	cmp	r3, r2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e0cb      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800151a:	4b49      	ldr	r3, [pc, #292]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 800151c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0ee      	beq.n	8001504 <HAL_RCC_OscConfig+0x334>
 8001526:	e014      	b.n	8001552 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001528:	f7ff faea 	bl	8000b00 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800152e:	e00a      	b.n	8001546 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001530:	f7ff fae6 	bl	8000b00 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	f241 3288 	movw	r2, #5000	; 0x1388
 800153e:	4293      	cmp	r3, r2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e0b5      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001546:	4b3e      	ldr	r3, [pc, #248]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 8001548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1ee      	bne.n	8001530 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001552:	7dfb      	ldrb	r3, [r7, #23]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d105      	bne.n	8001564 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001558:	4b39      	ldr	r3, [pc, #228]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	4a38      	ldr	r2, [pc, #224]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 800155e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001562:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	2b00      	cmp	r3, #0
 800156a:	f000 80a1 	beq.w	80016b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800156e:	4b34      	ldr	r3, [pc, #208]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f003 030c 	and.w	r3, r3, #12
 8001576:	2b08      	cmp	r3, #8
 8001578:	d05c      	beq.n	8001634 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	2b02      	cmp	r3, #2
 8001580:	d141      	bne.n	8001606 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001582:	4b31      	ldr	r3, [pc, #196]	; (8001648 <HAL_RCC_OscConfig+0x478>)
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001588:	f7ff faba 	bl	8000b00 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001590:	f7ff fab6 	bl	8000b00 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e087      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a2:	4b27      	ldr	r3, [pc, #156]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69da      	ldr	r2, [r3, #28]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	431a      	orrs	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015bc:	019b      	lsls	r3, r3, #6
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c4:	085b      	lsrs	r3, r3, #1
 80015c6:	3b01      	subs	r3, #1
 80015c8:	041b      	lsls	r3, r3, #16
 80015ca:	431a      	orrs	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d0:	061b      	lsls	r3, r3, #24
 80015d2:	491b      	ldr	r1, [pc, #108]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015d8:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <HAL_RCC_OscConfig+0x478>)
 80015da:	2201      	movs	r2, #1
 80015dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015de:	f7ff fa8f 	bl	8000b00 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e6:	f7ff fa8b 	bl	8000b00 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e05c      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0f0      	beq.n	80015e6 <HAL_RCC_OscConfig+0x416>
 8001604:	e054      	b.n	80016b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <HAL_RCC_OscConfig+0x478>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7ff fa78 	bl	8000b00 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001614:	f7ff fa74 	bl	8000b00 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e045      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0x444>
 8001632:	e03d      	b.n	80016b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d107      	bne.n	800164c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e038      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
 8001640:	40023800 	.word	0x40023800
 8001644:	40007000 	.word	0x40007000
 8001648:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <HAL_RCC_OscConfig+0x4ec>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d028      	beq.n	80016ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001664:	429a      	cmp	r2, r3
 8001666:	d121      	bne.n	80016ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001672:	429a      	cmp	r2, r3
 8001674:	d11a      	bne.n	80016ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800167c:	4013      	ands	r3, r2
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001682:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001684:	4293      	cmp	r3, r2
 8001686:	d111      	bne.n	80016ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001692:	085b      	lsrs	r3, r3, #1
 8001694:	3b01      	subs	r3, #1
 8001696:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001698:	429a      	cmp	r2, r3
 800169a:	d107      	bne.n	80016ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d001      	beq.n	80016b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e000      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800

080016c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0cc      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016d4:	4b68      	ldr	r3, [pc, #416]	; (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d90c      	bls.n	80016fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e2:	4b65      	ldr	r3, [pc, #404]	; (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ea:	4b63      	ldr	r3, [pc, #396]	; (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0b8      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d020      	beq.n	800174a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001714:	4b59      	ldr	r3, [pc, #356]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	4a58      	ldr	r2, [pc, #352]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800171e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800172c:	4b53      	ldr	r3, [pc, #332]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	4a52      	ldr	r2, [pc, #328]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001736:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001738:	4b50      	ldr	r3, [pc, #320]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	494d      	ldr	r1, [pc, #308]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	4313      	orrs	r3, r2
 8001748:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d044      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d107      	bne.n	800176e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175e:	4b47      	ldr	r3, [pc, #284]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d119      	bne.n	800179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e07f      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d003      	beq.n	800177e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800177a:	2b03      	cmp	r3, #3
 800177c:	d107      	bne.n	800178e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800177e:	4b3f      	ldr	r3, [pc, #252]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d109      	bne.n	800179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e06f      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178e:	4b3b      	ldr	r3, [pc, #236]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e067      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800179e:	4b37      	ldr	r3, [pc, #220]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f023 0203 	bic.w	r2, r3, #3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	4934      	ldr	r1, [pc, #208]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017b0:	f7ff f9a6 	bl	8000b00 <HAL_GetTick>
 80017b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b6:	e00a      	b.n	80017ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b8:	f7ff f9a2 	bl	8000b00 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e04f      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ce:	4b2b      	ldr	r3, [pc, #172]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 020c 	and.w	r2, r3, #12
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	429a      	cmp	r2, r3
 80017de:	d1eb      	bne.n	80017b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017e0:	4b25      	ldr	r3, [pc, #148]	; (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d20c      	bcs.n	8001808 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ee:	4b22      	ldr	r3, [pc, #136]	; (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f6:	4b20      	ldr	r3, [pc, #128]	; (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	d001      	beq.n	8001808 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e032      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	d008      	beq.n	8001826 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001814:	4b19      	ldr	r3, [pc, #100]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4916      	ldr	r1, [pc, #88]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	4313      	orrs	r3, r2
 8001824:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	2b00      	cmp	r3, #0
 8001830:	d009      	beq.n	8001846 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001832:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	490e      	ldr	r1, [pc, #56]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	4313      	orrs	r3, r2
 8001844:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001846:	f000 f821 	bl	800188c <HAL_RCC_GetSysClockFreq>
 800184a:	4602      	mov	r2, r0
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	091b      	lsrs	r3, r3, #4
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	490a      	ldr	r1, [pc, #40]	; (8001880 <HAL_RCC_ClockConfig+0x1c0>)
 8001858:	5ccb      	ldrb	r3, [r1, r3]
 800185a:	fa22 f303 	lsr.w	r3, r2, r3
 800185e:	4a09      	ldr	r2, [pc, #36]	; (8001884 <HAL_RCC_ClockConfig+0x1c4>)
 8001860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <HAL_RCC_ClockConfig+0x1c8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff f906 	bl	8000a78 <HAL_InitTick>

  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023c00 	.word	0x40023c00
 800187c:	40023800 	.word	0x40023800
 8001880:	08003224 	.word	0x08003224
 8001884:	20000000 	.word	0x20000000
 8001888:	20000004 	.word	0x20000004

0800188c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800188c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001890:	b094      	sub	sp, #80	; 0x50
 8001892:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001894:	2300      	movs	r3, #0
 8001896:	647b      	str	r3, [r7, #68]	; 0x44
 8001898:	2300      	movs	r3, #0
 800189a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800189c:	2300      	movs	r3, #0
 800189e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018a4:	4b79      	ldr	r3, [pc, #484]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x200>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 030c 	and.w	r3, r3, #12
 80018ac:	2b08      	cmp	r3, #8
 80018ae:	d00d      	beq.n	80018cc <HAL_RCC_GetSysClockFreq+0x40>
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	f200 80e1 	bhi.w	8001a78 <HAL_RCC_GetSysClockFreq+0x1ec>
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d002      	beq.n	80018c0 <HAL_RCC_GetSysClockFreq+0x34>
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d003      	beq.n	80018c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80018be:	e0db      	b.n	8001a78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018c0:	4b73      	ldr	r3, [pc, #460]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x204>)
 80018c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80018c4:	e0db      	b.n	8001a7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018c6:	4b73      	ldr	r3, [pc, #460]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x208>)
 80018c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018ca:	e0d8      	b.n	8001a7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018cc:	4b6f      	ldr	r3, [pc, #444]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x200>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018d6:	4b6d      	ldr	r3, [pc, #436]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x200>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d063      	beq.n	80019aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e2:	4b6a      	ldr	r3, [pc, #424]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x200>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	099b      	lsrs	r3, r3, #6
 80018e8:	2200      	movs	r2, #0
 80018ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80018ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80018ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018f4:	633b      	str	r3, [r7, #48]	; 0x30
 80018f6:	2300      	movs	r3, #0
 80018f8:	637b      	str	r3, [r7, #52]	; 0x34
 80018fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80018fe:	4622      	mov	r2, r4
 8001900:	462b      	mov	r3, r5
 8001902:	f04f 0000 	mov.w	r0, #0
 8001906:	f04f 0100 	mov.w	r1, #0
 800190a:	0159      	lsls	r1, r3, #5
 800190c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001910:	0150      	lsls	r0, r2, #5
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4621      	mov	r1, r4
 8001918:	1a51      	subs	r1, r2, r1
 800191a:	6139      	str	r1, [r7, #16]
 800191c:	4629      	mov	r1, r5
 800191e:	eb63 0301 	sbc.w	r3, r3, r1
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	f04f 0300 	mov.w	r3, #0
 800192c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001930:	4659      	mov	r1, fp
 8001932:	018b      	lsls	r3, r1, #6
 8001934:	4651      	mov	r1, sl
 8001936:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800193a:	4651      	mov	r1, sl
 800193c:	018a      	lsls	r2, r1, #6
 800193e:	4651      	mov	r1, sl
 8001940:	ebb2 0801 	subs.w	r8, r2, r1
 8001944:	4659      	mov	r1, fp
 8001946:	eb63 0901 	sbc.w	r9, r3, r1
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	f04f 0300 	mov.w	r3, #0
 8001952:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001956:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800195a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800195e:	4690      	mov	r8, r2
 8001960:	4699      	mov	r9, r3
 8001962:	4623      	mov	r3, r4
 8001964:	eb18 0303 	adds.w	r3, r8, r3
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	462b      	mov	r3, r5
 800196c:	eb49 0303 	adc.w	r3, r9, r3
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	f04f 0300 	mov.w	r3, #0
 800197a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800197e:	4629      	mov	r1, r5
 8001980:	024b      	lsls	r3, r1, #9
 8001982:	4621      	mov	r1, r4
 8001984:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001988:	4621      	mov	r1, r4
 800198a:	024a      	lsls	r2, r1, #9
 800198c:	4610      	mov	r0, r2
 800198e:	4619      	mov	r1, r3
 8001990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001992:	2200      	movs	r2, #0
 8001994:	62bb      	str	r3, [r7, #40]	; 0x28
 8001996:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001998:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800199c:	f7fe fc1a 	bl	80001d4 <__aeabi_uldivmod>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4613      	mov	r3, r2
 80019a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019a8:	e058      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019aa:	4b38      	ldr	r3, [pc, #224]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x200>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	099b      	lsrs	r3, r3, #6
 80019b0:	2200      	movs	r2, #0
 80019b2:	4618      	mov	r0, r3
 80019b4:	4611      	mov	r1, r2
 80019b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019ba:	623b      	str	r3, [r7, #32]
 80019bc:	2300      	movs	r3, #0
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
 80019c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019c4:	4642      	mov	r2, r8
 80019c6:	464b      	mov	r3, r9
 80019c8:	f04f 0000 	mov.w	r0, #0
 80019cc:	f04f 0100 	mov.w	r1, #0
 80019d0:	0159      	lsls	r1, r3, #5
 80019d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019d6:	0150      	lsls	r0, r2, #5
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4641      	mov	r1, r8
 80019de:	ebb2 0a01 	subs.w	sl, r2, r1
 80019e2:	4649      	mov	r1, r9
 80019e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80019e8:	f04f 0200 	mov.w	r2, #0
 80019ec:	f04f 0300 	mov.w	r3, #0
 80019f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019fc:	ebb2 040a 	subs.w	r4, r2, sl
 8001a00:	eb63 050b 	sbc.w	r5, r3, fp
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	00eb      	lsls	r3, r5, #3
 8001a0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a12:	00e2      	lsls	r2, r4, #3
 8001a14:	4614      	mov	r4, r2
 8001a16:	461d      	mov	r5, r3
 8001a18:	4643      	mov	r3, r8
 8001a1a:	18e3      	adds	r3, r4, r3
 8001a1c:	603b      	str	r3, [r7, #0]
 8001a1e:	464b      	mov	r3, r9
 8001a20:	eb45 0303 	adc.w	r3, r5, r3
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a32:	4629      	mov	r1, r5
 8001a34:	028b      	lsls	r3, r1, #10
 8001a36:	4621      	mov	r1, r4
 8001a38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a3c:	4621      	mov	r1, r4
 8001a3e:	028a      	lsls	r2, r1, #10
 8001a40:	4610      	mov	r0, r2
 8001a42:	4619      	mov	r1, r3
 8001a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a46:	2200      	movs	r2, #0
 8001a48:	61bb      	str	r3, [r7, #24]
 8001a4a:	61fa      	str	r2, [r7, #28]
 8001a4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a50:	f7fe fbc0 	bl	80001d4 <__aeabi_uldivmod>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4613      	mov	r3, r2
 8001a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	0c1b      	lsrs	r3, r3, #16
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	3301      	adds	r3, #1
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001a6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a76:	e002      	b.n	8001a7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3750      	adds	r7, #80	; 0x50
 8001a84:	46bd      	mov	sp, r7
 8001a86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	00f42400 	.word	0x00f42400
 8001a94:	007a1200 	.word	0x007a1200

08001a98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a9c:	4b03      	ldr	r3, [pc, #12]	; (8001aac <HAL_RCC_GetHCLKFreq+0x14>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	20000000 	.word	0x20000000

08001ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ab4:	f7ff fff0 	bl	8001a98 <HAL_RCC_GetHCLKFreq>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	0a9b      	lsrs	r3, r3, #10
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	4903      	ldr	r1, [pc, #12]	; (8001ad4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ac6:	5ccb      	ldrb	r3, [r1, r3]
 8001ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	08003234 	.word	0x08003234

08001ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001adc:	f7ff ffdc 	bl	8001a98 <HAL_RCC_GetHCLKFreq>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	0b5b      	lsrs	r3, r3, #13
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	4903      	ldr	r1, [pc, #12]	; (8001afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aee:	5ccb      	ldrb	r3, [r1, r3]
 8001af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40023800 	.word	0x40023800
 8001afc:	08003234 	.word	0x08003234

08001b00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e041      	b.n	8001b96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d106      	bne.n	8001b2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7fe feb8 	bl	800089c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2202      	movs	r2, #2
 8001b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3304      	adds	r3, #4
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4610      	mov	r0, r2
 8001b40:	f000 fa88 	bl	8002054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d001      	beq.n	8001bb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e044      	b.n	8001c42 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2202      	movs	r2, #2
 8001bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0201 	orr.w	r2, r2, #1
 8001bce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a1e      	ldr	r2, [pc, #120]	; (8001c50 <HAL_TIM_Base_Start_IT+0xb0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d018      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x6c>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be2:	d013      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x6c>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a1a      	ldr	r2, [pc, #104]	; (8001c54 <HAL_TIM_Base_Start_IT+0xb4>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d00e      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x6c>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a19      	ldr	r2, [pc, #100]	; (8001c58 <HAL_TIM_Base_Start_IT+0xb8>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d009      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x6c>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a17      	ldr	r2, [pc, #92]	; (8001c5c <HAL_TIM_Base_Start_IT+0xbc>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d004      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x6c>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a16      	ldr	r2, [pc, #88]	; (8001c60 <HAL_TIM_Base_Start_IT+0xc0>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d111      	bne.n	8001c30 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2b06      	cmp	r3, #6
 8001c1c:	d010      	beq.n	8001c40 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f042 0201 	orr.w	r2, r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c2e:	e007      	b.n	8001c40 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 0201 	orr.w	r2, r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	40010000 	.word	0x40010000
 8001c54:	40000400 	.word	0x40000400
 8001c58:	40000800 	.word	0x40000800
 8001c5c:	40000c00 	.word	0x40000c00
 8001c60:	40014000 	.word	0x40014000

08001c64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d122      	bne.n	8001cc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d11b      	bne.n	8001cc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f06f 0202 	mvn.w	r2, #2
 8001c90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f9b5 	bl	8002016 <HAL_TIM_IC_CaptureCallback>
 8001cac:	e005      	b.n	8001cba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f9a7 	bl	8002002 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f9b8 	bl	800202a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d122      	bne.n	8001d14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	d11b      	bne.n	8001d14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f06f 0204 	mvn.w	r2, #4
 8001ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2202      	movs	r2, #2
 8001cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f98b 	bl	8002016 <HAL_TIM_IC_CaptureCallback>
 8001d00:	e005      	b.n	8001d0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f97d 	bl	8002002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f98e 	bl	800202a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b08      	cmp	r3, #8
 8001d20:	d122      	bne.n	8001d68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d11b      	bne.n	8001d68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f06f 0208 	mvn.w	r2, #8
 8001d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2204      	movs	r2, #4
 8001d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f961 	bl	8002016 <HAL_TIM_IC_CaptureCallback>
 8001d54:	e005      	b.n	8001d62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f953 	bl	8002002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f964 	bl	800202a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f003 0310 	and.w	r3, r3, #16
 8001d72:	2b10      	cmp	r3, #16
 8001d74:	d122      	bne.n	8001dbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f003 0310 	and.w	r3, r3, #16
 8001d80:	2b10      	cmp	r3, #16
 8001d82:	d11b      	bne.n	8001dbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f06f 0210 	mvn.w	r2, #16
 8001d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2208      	movs	r2, #8
 8001d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f937 	bl	8002016 <HAL_TIM_IC_CaptureCallback>
 8001da8:	e005      	b.n	8001db6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f929 	bl	8002002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f93a 	bl	800202a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d10e      	bne.n	8001de8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d107      	bne.n	8001de8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f06f 0201 	mvn.w	r2, #1
 8001de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7fe fc78 	bl	80006d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df2:	2b80      	cmp	r3, #128	; 0x80
 8001df4:	d10e      	bne.n	8001e14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e00:	2b80      	cmp	r3, #128	; 0x80
 8001e02:	d107      	bne.n	8001e14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 fab2 	bl	8002378 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e1e:	2b40      	cmp	r3, #64	; 0x40
 8001e20:	d10e      	bne.n	8001e40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e2c:	2b40      	cmp	r3, #64	; 0x40
 8001e2e:	d107      	bne.n	8001e40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f8ff 	bl	800203e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	f003 0320 	and.w	r3, r3, #32
 8001e4a:	2b20      	cmp	r3, #32
 8001e4c:	d10e      	bne.n	8001e6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f003 0320 	and.w	r3, r3, #32
 8001e58:	2b20      	cmp	r3, #32
 8001e5a:	d107      	bne.n	8001e6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f06f 0220 	mvn.w	r2, #32
 8001e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 fa7c 	bl	8002364 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e6c:	bf00      	nop
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d101      	bne.n	8001e90 <HAL_TIM_ConfigClockSource+0x1c>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	e0b4      	b.n	8001ffa <HAL_TIM_ConfigClockSource+0x186>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001eae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001eb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68ba      	ldr	r2, [r7, #8]
 8001ebe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ec8:	d03e      	beq.n	8001f48 <HAL_TIM_ConfigClockSource+0xd4>
 8001eca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ece:	f200 8087 	bhi.w	8001fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8001ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ed6:	f000 8086 	beq.w	8001fe6 <HAL_TIM_ConfigClockSource+0x172>
 8001eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ede:	d87f      	bhi.n	8001fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8001ee0:	2b70      	cmp	r3, #112	; 0x70
 8001ee2:	d01a      	beq.n	8001f1a <HAL_TIM_ConfigClockSource+0xa6>
 8001ee4:	2b70      	cmp	r3, #112	; 0x70
 8001ee6:	d87b      	bhi.n	8001fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8001ee8:	2b60      	cmp	r3, #96	; 0x60
 8001eea:	d050      	beq.n	8001f8e <HAL_TIM_ConfigClockSource+0x11a>
 8001eec:	2b60      	cmp	r3, #96	; 0x60
 8001eee:	d877      	bhi.n	8001fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8001ef0:	2b50      	cmp	r3, #80	; 0x50
 8001ef2:	d03c      	beq.n	8001f6e <HAL_TIM_ConfigClockSource+0xfa>
 8001ef4:	2b50      	cmp	r3, #80	; 0x50
 8001ef6:	d873      	bhi.n	8001fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8001ef8:	2b40      	cmp	r3, #64	; 0x40
 8001efa:	d058      	beq.n	8001fae <HAL_TIM_ConfigClockSource+0x13a>
 8001efc:	2b40      	cmp	r3, #64	; 0x40
 8001efe:	d86f      	bhi.n	8001fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8001f00:	2b30      	cmp	r3, #48	; 0x30
 8001f02:	d064      	beq.n	8001fce <HAL_TIM_ConfigClockSource+0x15a>
 8001f04:	2b30      	cmp	r3, #48	; 0x30
 8001f06:	d86b      	bhi.n	8001fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8001f08:	2b20      	cmp	r3, #32
 8001f0a:	d060      	beq.n	8001fce <HAL_TIM_ConfigClockSource+0x15a>
 8001f0c:	2b20      	cmp	r3, #32
 8001f0e:	d867      	bhi.n	8001fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d05c      	beq.n	8001fce <HAL_TIM_ConfigClockSource+0x15a>
 8001f14:	2b10      	cmp	r3, #16
 8001f16:	d05a      	beq.n	8001fce <HAL_TIM_ConfigClockSource+0x15a>
 8001f18:	e062      	b.n	8001fe0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6818      	ldr	r0, [r3, #0]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	6899      	ldr	r1, [r3, #8]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	f000 f98d 	bl	8002248 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	609a      	str	r2, [r3, #8]
      break;
 8001f46:	e04f      	b.n	8001fe8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6818      	ldr	r0, [r3, #0]
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	6899      	ldr	r1, [r3, #8]
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f000 f976 	bl	8002248 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f6a:	609a      	str	r2, [r3, #8]
      break;
 8001f6c:	e03c      	b.n	8001fe8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6818      	ldr	r0, [r3, #0]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	6859      	ldr	r1, [r3, #4]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	f000 f8ea 	bl	8002154 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2150      	movs	r1, #80	; 0x50
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 f943 	bl	8002212 <TIM_ITRx_SetConfig>
      break;
 8001f8c:	e02c      	b.n	8001fe8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6818      	ldr	r0, [r3, #0]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	6859      	ldr	r1, [r3, #4]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	f000 f909 	bl	80021b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2160      	movs	r1, #96	; 0x60
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 f933 	bl	8002212 <TIM_ITRx_SetConfig>
      break;
 8001fac:	e01c      	b.n	8001fe8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6818      	ldr	r0, [r3, #0]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	6859      	ldr	r1, [r3, #4]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	f000 f8ca 	bl	8002154 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2140      	movs	r1, #64	; 0x40
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 f923 	bl	8002212 <TIM_ITRx_SetConfig>
      break;
 8001fcc:	e00c      	b.n	8001fe8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4610      	mov	r0, r2
 8001fda:	f000 f91a 	bl	8002212 <TIM_ITRx_SetConfig>
      break;
 8001fde:	e003      	b.n	8001fe8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8001fe4:	e000      	b.n	8001fe8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001fe6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a34      	ldr	r2, [pc, #208]	; (8002138 <TIM_Base_SetConfig+0xe4>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d00f      	beq.n	800208c <TIM_Base_SetConfig+0x38>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002072:	d00b      	beq.n	800208c <TIM_Base_SetConfig+0x38>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a31      	ldr	r2, [pc, #196]	; (800213c <TIM_Base_SetConfig+0xe8>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d007      	beq.n	800208c <TIM_Base_SetConfig+0x38>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a30      	ldr	r2, [pc, #192]	; (8002140 <TIM_Base_SetConfig+0xec>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d003      	beq.n	800208c <TIM_Base_SetConfig+0x38>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a2f      	ldr	r2, [pc, #188]	; (8002144 <TIM_Base_SetConfig+0xf0>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d108      	bne.n	800209e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	4313      	orrs	r3, r2
 800209c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a25      	ldr	r2, [pc, #148]	; (8002138 <TIM_Base_SetConfig+0xe4>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d01b      	beq.n	80020de <TIM_Base_SetConfig+0x8a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ac:	d017      	beq.n	80020de <TIM_Base_SetConfig+0x8a>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a22      	ldr	r2, [pc, #136]	; (800213c <TIM_Base_SetConfig+0xe8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d013      	beq.n	80020de <TIM_Base_SetConfig+0x8a>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a21      	ldr	r2, [pc, #132]	; (8002140 <TIM_Base_SetConfig+0xec>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d00f      	beq.n	80020de <TIM_Base_SetConfig+0x8a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a20      	ldr	r2, [pc, #128]	; (8002144 <TIM_Base_SetConfig+0xf0>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d00b      	beq.n	80020de <TIM_Base_SetConfig+0x8a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a1f      	ldr	r2, [pc, #124]	; (8002148 <TIM_Base_SetConfig+0xf4>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d007      	beq.n	80020de <TIM_Base_SetConfig+0x8a>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a1e      	ldr	r2, [pc, #120]	; (800214c <TIM_Base_SetConfig+0xf8>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d003      	beq.n	80020de <TIM_Base_SetConfig+0x8a>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a1d      	ldr	r2, [pc, #116]	; (8002150 <TIM_Base_SetConfig+0xfc>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d108      	bne.n	80020f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a08      	ldr	r2, [pc, #32]	; (8002138 <TIM_Base_SetConfig+0xe4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d103      	bne.n	8002124 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	691a      	ldr	r2, [r3, #16]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	615a      	str	r2, [r3, #20]
}
 800212a:	bf00      	nop
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40010000 	.word	0x40010000
 800213c:	40000400 	.word	0x40000400
 8002140:	40000800 	.word	0x40000800
 8002144:	40000c00 	.word	0x40000c00
 8002148:	40014000 	.word	0x40014000
 800214c:	40014400 	.word	0x40014400
 8002150:	40014800 	.word	0x40014800

08002154 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002154:	b480      	push	{r7}
 8002156:	b087      	sub	sp, #28
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	f023 0201 	bic.w	r2, r3, #1
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800217e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	011b      	lsls	r3, r3, #4
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f023 030a 	bic.w	r3, r3, #10
 8002190:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	4313      	orrs	r3, r2
 8002198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	621a      	str	r2, [r3, #32]
}
 80021a6:	bf00      	nop
 80021a8:	371c      	adds	r7, #28
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b087      	sub	sp, #28
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	f023 0210 	bic.w	r2, r3, #16
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80021dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	031b      	lsls	r3, r3, #12
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80021ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	621a      	str	r2, [r3, #32]
}
 8002206:	bf00      	nop
 8002208:	371c      	adds	r7, #28
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002212:	b480      	push	{r7}
 8002214:	b085      	sub	sp, #20
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002228:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4313      	orrs	r3, r2
 8002230:	f043 0307 	orr.w	r3, r3, #7
 8002234:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	609a      	str	r2, [r3, #8]
}
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002248:	b480      	push	{r7}
 800224a:	b087      	sub	sp, #28
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
 8002254:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002262:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	021a      	lsls	r2, r3, #8
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	431a      	orrs	r2, r3
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	4313      	orrs	r3, r2
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	4313      	orrs	r3, r2
 8002274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	609a      	str	r2, [r3, #8]
}
 800227c:	bf00      	nop
 800227e:	371c      	adds	r7, #28
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002298:	2b01      	cmp	r3, #1
 800229a:	d101      	bne.n	80022a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800229c:	2302      	movs	r3, #2
 800229e:	e050      	b.n	8002342 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2202      	movs	r2, #2
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a1c      	ldr	r2, [pc, #112]	; (8002350 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d018      	beq.n	8002316 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ec:	d013      	beq.n	8002316 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a18      	ldr	r2, [pc, #96]	; (8002354 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d00e      	beq.n	8002316 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a16      	ldr	r2, [pc, #88]	; (8002358 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d009      	beq.n	8002316 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a15      	ldr	r2, [pc, #84]	; (800235c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d004      	beq.n	8002316 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a13      	ldr	r2, [pc, #76]	; (8002360 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d10c      	bne.n	8002330 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800231c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	4313      	orrs	r3, r2
 8002326:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40010000 	.word	0x40010000
 8002354:	40000400 	.word	0x40000400
 8002358:	40000800 	.word	0x40000800
 800235c:	40000c00 	.word	0x40000c00
 8002360:	40014000 	.word	0x40014000

08002364 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e03f      	b.n	800241e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d106      	bne.n	80023b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7fe fac4 	bl	8000940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2224      	movs	r2, #36	; 0x24
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 fc7b 	bl	8002ccc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695a      	ldr	r2, [r3, #20]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68da      	ldr	r2, [r3, #12]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002404:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2220      	movs	r2, #32
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2220      	movs	r2, #32
 8002418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
	...

08002428 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b0ba      	sub	sp, #232	; 0xe8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800244e:	2300      	movs	r3, #0
 8002450:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002454:	2300      	movs	r3, #0
 8002456:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800245a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002466:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10f      	bne.n	800248e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800246e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002472:	f003 0320 	and.w	r3, r3, #32
 8002476:	2b00      	cmp	r3, #0
 8002478:	d009      	beq.n	800248e <HAL_UART_IRQHandler+0x66>
 800247a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800247e:	f003 0320 	and.w	r3, r3, #32
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 fb65 	bl	8002b56 <UART_Receive_IT>
      return;
 800248c:	e256      	b.n	800293c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800248e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 80de 	beq.w	8002654 <HAL_UART_IRQHandler+0x22c>
 8002498:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d106      	bne.n	80024b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80024a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 80d1 	beq.w	8002654 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00b      	beq.n	80024d6 <HAL_UART_IRQHandler+0xae>
 80024be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d005      	beq.n	80024d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f043 0201 	orr.w	r2, r3, #1
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024da:	f003 0304 	and.w	r3, r3, #4
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00b      	beq.n	80024fa <HAL_UART_IRQHandler+0xd2>
 80024e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d005      	beq.n	80024fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	f043 0202 	orr.w	r2, r3, #2
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00b      	beq.n	800251e <HAL_UART_IRQHandler+0xf6>
 8002506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d005      	beq.n	800251e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f043 0204 	orr.w	r2, r3, #4
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800251e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	2b00      	cmp	r3, #0
 8002528:	d011      	beq.n	800254e <HAL_UART_IRQHandler+0x126>
 800252a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800252e:	f003 0320 	and.w	r3, r3, #32
 8002532:	2b00      	cmp	r3, #0
 8002534:	d105      	bne.n	8002542 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d005      	beq.n	800254e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	f043 0208 	orr.w	r2, r3, #8
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 81ed 	beq.w	8002932 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800255c:	f003 0320 	and.w	r3, r3, #32
 8002560:	2b00      	cmp	r3, #0
 8002562:	d008      	beq.n	8002576 <HAL_UART_IRQHandler+0x14e>
 8002564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002568:	f003 0320 	and.w	r3, r3, #32
 800256c:	2b00      	cmp	r3, #0
 800256e:	d002      	beq.n	8002576 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 faf0 	bl	8002b56 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002580:	2b40      	cmp	r3, #64	; 0x40
 8002582:	bf0c      	ite	eq
 8002584:	2301      	moveq	r3, #1
 8002586:	2300      	movne	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d103      	bne.n	80025a2 <HAL_UART_IRQHandler+0x17a>
 800259a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d04f      	beq.n	8002642 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f9f8 	bl	8002998 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b2:	2b40      	cmp	r3, #64	; 0x40
 80025b4:	d141      	bne.n	800263a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	3314      	adds	r3, #20
 80025bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025c4:	e853 3f00 	ldrex	r3, [r3]
 80025c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80025cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	3314      	adds	r3, #20
 80025de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80025e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80025e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80025ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80025f2:	e841 2300 	strex	r3, r2, [r1]
 80025f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80025fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1d9      	bne.n	80025b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002606:	2b00      	cmp	r3, #0
 8002608:	d013      	beq.n	8002632 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260e:	4a7d      	ldr	r2, [pc, #500]	; (8002804 <HAL_UART_IRQHandler+0x3dc>)
 8002610:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002616:	4618      	mov	r0, r3
 8002618:	f7fe fbff 	bl	8000e1a <HAL_DMA_Abort_IT>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d016      	beq.n	8002650 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800262c:	4610      	mov	r0, r2
 800262e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002630:	e00e      	b.n	8002650 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f99a 	bl	800296c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002638:	e00a      	b.n	8002650 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f996 	bl	800296c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002640:	e006      	b.n	8002650 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f992 	bl	800296c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800264e:	e170      	b.n	8002932 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002650:	bf00      	nop
    return;
 8002652:	e16e      	b.n	8002932 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002658:	2b01      	cmp	r3, #1
 800265a:	f040 814a 	bne.w	80028f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800265e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 8143 	beq.w	80028f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800266c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002670:	f003 0310 	and.w	r3, r3, #16
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 813c 	beq.w	80028f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800267a:	2300      	movs	r3, #0
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800269a:	2b40      	cmp	r3, #64	; 0x40
 800269c:	f040 80b4 	bne.w	8002808 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80026ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 8140 	beq.w	8002936 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80026ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026be:	429a      	cmp	r2, r3
 80026c0:	f080 8139 	bcs.w	8002936 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026d6:	f000 8088 	beq.w	80027ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	330c      	adds	r3, #12
 80026e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026e8:	e853 3f00 	ldrex	r3, [r3]
 80026ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80026f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	330c      	adds	r3, #12
 8002702:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002706:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800270a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800270e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002712:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002716:	e841 2300 	strex	r3, r2, [r1]
 800271a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800271e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1d9      	bne.n	80026da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	3314      	adds	r3, #20
 800272c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800272e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002730:	e853 3f00 	ldrex	r3, [r3]
 8002734:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002736:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002738:	f023 0301 	bic.w	r3, r3, #1
 800273c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	3314      	adds	r3, #20
 8002746:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800274a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800274e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002750:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002752:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002756:	e841 2300 	strex	r3, r2, [r1]
 800275a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800275c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1e1      	bne.n	8002726 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	3314      	adds	r3, #20
 8002768:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800276a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800276c:	e853 3f00 	ldrex	r3, [r3]
 8002770:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002772:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002778:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	3314      	adds	r3, #20
 8002782:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002786:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002788:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800278a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800278c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800278e:	e841 2300 	strex	r3, r2, [r1]
 8002792:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002794:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1e3      	bne.n	8002762 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2220      	movs	r2, #32
 800279e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	330c      	adds	r3, #12
 80027ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027b2:	e853 3f00 	ldrex	r3, [r3]
 80027b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80027b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027ba:	f023 0310 	bic.w	r3, r3, #16
 80027be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	330c      	adds	r3, #12
 80027c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80027cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80027ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027d4:	e841 2300 	strex	r3, r2, [r1]
 80027d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80027da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1e3      	bne.n	80027a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7fe faa8 	bl	8000d3a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	4619      	mov	r1, r3
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f8c0 	bl	8002980 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002800:	e099      	b.n	8002936 <HAL_UART_IRQHandler+0x50e>
 8002802:	bf00      	nop
 8002804:	08002a5f 	.word	0x08002a5f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002810:	b29b      	uxth	r3, r3
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800281c:	b29b      	uxth	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 808b 	beq.w	800293a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002824:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 8086 	beq.w	800293a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	330c      	adds	r3, #12
 8002834:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002838:	e853 3f00 	ldrex	r3, [r3]
 800283c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800283e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002840:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002844:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	330c      	adds	r3, #12
 800284e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002852:	647a      	str	r2, [r7, #68]	; 0x44
 8002854:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002856:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002858:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800285a:	e841 2300 	strex	r3, r2, [r1]
 800285e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1e3      	bne.n	800282e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	3314      	adds	r3, #20
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	e853 3f00 	ldrex	r3, [r3]
 8002874:	623b      	str	r3, [r7, #32]
   return(result);
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	f023 0301 	bic.w	r3, r3, #1
 800287c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	3314      	adds	r3, #20
 8002886:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800288a:	633a      	str	r2, [r7, #48]	; 0x30
 800288c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800288e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002892:	e841 2300 	strex	r3, r2, [r1]
 8002896:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1e3      	bne.n	8002866 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2220      	movs	r2, #32
 80028a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	330c      	adds	r3, #12
 80028b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	e853 3f00 	ldrex	r3, [r3]
 80028ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f023 0310 	bic.w	r3, r3, #16
 80028c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	330c      	adds	r3, #12
 80028cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80028d0:	61fa      	str	r2, [r7, #28]
 80028d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d4:	69b9      	ldr	r1, [r7, #24]
 80028d6:	69fa      	ldr	r2, [r7, #28]
 80028d8:	e841 2300 	strex	r3, r2, [r1]
 80028dc:	617b      	str	r3, [r7, #20]
   return(result);
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1e3      	bne.n	80028ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028e8:	4619      	mov	r1, r3
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f848 	bl	8002980 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028f0:	e023      	b.n	800293a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80028f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d009      	beq.n	8002912 <HAL_UART_IRQHandler+0x4ea>
 80028fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f8bb 	bl	8002a86 <UART_Transmit_IT>
    return;
 8002910:	e014      	b.n	800293c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00e      	beq.n	800293c <HAL_UART_IRQHandler+0x514>
 800291e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002926:	2b00      	cmp	r3, #0
 8002928:	d008      	beq.n	800293c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f8fb 	bl	8002b26 <UART_EndTransmit_IT>
    return;
 8002930:	e004      	b.n	800293c <HAL_UART_IRQHandler+0x514>
    return;
 8002932:	bf00      	nop
 8002934:	e002      	b.n	800293c <HAL_UART_IRQHandler+0x514>
      return;
 8002936:	bf00      	nop
 8002938:	e000      	b.n	800293c <HAL_UART_IRQHandler+0x514>
      return;
 800293a:	bf00      	nop
  }
}
 800293c:	37e8      	adds	r7, #232	; 0xe8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop

08002944 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002998:	b480      	push	{r7}
 800299a:	b095      	sub	sp, #84	; 0x54
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	330c      	adds	r3, #12
 80029a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029aa:	e853 3f00 	ldrex	r3, [r3]
 80029ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80029b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80029b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	330c      	adds	r3, #12
 80029be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029c0:	643a      	str	r2, [r7, #64]	; 0x40
 80029c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80029c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80029c8:	e841 2300 	strex	r3, r2, [r1]
 80029cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80029ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1e5      	bne.n	80029a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	3314      	adds	r3, #20
 80029da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	e853 3f00 	ldrex	r3, [r3]
 80029e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f023 0301 	bic.w	r3, r3, #1
 80029ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	3314      	adds	r3, #20
 80029f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029fc:	e841 2300 	strex	r3, r2, [r1]
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1e5      	bne.n	80029d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d119      	bne.n	8002a44 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	330c      	adds	r3, #12
 8002a16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	e853 3f00 	ldrex	r3, [r3]
 8002a1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f023 0310 	bic.w	r3, r3, #16
 8002a26:	647b      	str	r3, [r7, #68]	; 0x44
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	330c      	adds	r3, #12
 8002a2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a30:	61ba      	str	r2, [r7, #24]
 8002a32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a34:	6979      	ldr	r1, [r7, #20]
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	e841 2300 	strex	r3, r2, [r1]
 8002a3c:	613b      	str	r3, [r7, #16]
   return(result);
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1e5      	bne.n	8002a10 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002a52:	bf00      	nop
 8002a54:	3754      	adds	r7, #84	; 0x54
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b084      	sub	sp, #16
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f7ff ff77 	bl	800296c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a7e:	bf00      	nop
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b085      	sub	sp, #20
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b21      	cmp	r3, #33	; 0x21
 8002a98:	d13e      	bne.n	8002b18 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aa2:	d114      	bne.n	8002ace <UART_Transmit_IT+0x48>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d110      	bne.n	8002ace <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ac0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	1c9a      	adds	r2, r3, #2
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	621a      	str	r2, [r3, #32]
 8002acc:	e008      	b.n	8002ae0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	1c59      	adds	r1, r3, #1
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6211      	str	r1, [r2, #32]
 8002ad8:	781a      	ldrb	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	4619      	mov	r1, r3
 8002aee:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10f      	bne.n	8002b14 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b02:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b12:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b14:	2300      	movs	r3, #0
 8002b16:	e000      	b.n	8002b1a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b18:	2302      	movs	r3, #2
  }
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b082      	sub	sp, #8
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68da      	ldr	r2, [r3, #12]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b3c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2220      	movs	r2, #32
 8002b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7ff fefc 	bl	8002944 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b08c      	sub	sp, #48	; 0x30
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b22      	cmp	r3, #34	; 0x22
 8002b68:	f040 80ab 	bne.w	8002cc2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b74:	d117      	bne.n	8002ba6 <UART_Receive_IT+0x50>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d113      	bne.n	8002ba6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b86:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b98:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9e:	1c9a      	adds	r2, r3, #2
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ba4:	e026      	b.n	8002bf4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002baa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002bac:	2300      	movs	r3, #0
 8002bae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb8:	d007      	beq.n	8002bca <UART_Receive_IT+0x74>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10a      	bne.n	8002bd8 <UART_Receive_IT+0x82>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d106      	bne.n	8002bd8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd4:	701a      	strb	r2, [r3, #0]
 8002bd6:	e008      	b.n	8002bea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	4619      	mov	r1, r3
 8002c02:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d15a      	bne.n	8002cbe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0220 	bic.w	r2, r2, #32
 8002c16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	695a      	ldr	r2, [r3, #20]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0201 	bic.w	r2, r2, #1
 8002c36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d135      	bne.n	8002cb4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	330c      	adds	r3, #12
 8002c54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	e853 3f00 	ldrex	r3, [r3]
 8002c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	f023 0310 	bic.w	r3, r3, #16
 8002c64:	627b      	str	r3, [r7, #36]	; 0x24
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	330c      	adds	r3, #12
 8002c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6e:	623a      	str	r2, [r7, #32]
 8002c70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c72:	69f9      	ldr	r1, [r7, #28]
 8002c74:	6a3a      	ldr	r2, [r7, #32]
 8002c76:	e841 2300 	strex	r3, r2, [r1]
 8002c7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1e5      	bne.n	8002c4e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0310 	and.w	r3, r3, #16
 8002c8c:	2b10      	cmp	r3, #16
 8002c8e:	d10a      	bne.n	8002ca6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c90:	2300      	movs	r3, #0
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002caa:	4619      	mov	r1, r3
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7ff fe67 	bl	8002980 <HAL_UARTEx_RxEventCallback>
 8002cb2:	e002      	b.n	8002cba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7ff fe4f 	bl	8002958 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	e002      	b.n	8002cc4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	e000      	b.n	8002cc4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002cc2:	2302      	movs	r3, #2
  }
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3730      	adds	r7, #48	; 0x30
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cd0:	b0c0      	sub	sp, #256	; 0x100
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce8:	68d9      	ldr	r1, [r3, #12]
 8002cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	ea40 0301 	orr.w	r3, r0, r1
 8002cf4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	431a      	orrs	r2, r3
 8002d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d24:	f021 010c 	bic.w	r1, r1, #12
 8002d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d32:	430b      	orrs	r3, r1
 8002d34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d46:	6999      	ldr	r1, [r3, #24]
 8002d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	ea40 0301 	orr.w	r3, r0, r1
 8002d52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	4b8f      	ldr	r3, [pc, #572]	; (8002f98 <UART_SetConfig+0x2cc>)
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d005      	beq.n	8002d6c <UART_SetConfig+0xa0>
 8002d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	4b8d      	ldr	r3, [pc, #564]	; (8002f9c <UART_SetConfig+0x2d0>)
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d104      	bne.n	8002d76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d6c:	f7fe feb4 	bl	8001ad8 <HAL_RCC_GetPCLK2Freq>
 8002d70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002d74:	e003      	b.n	8002d7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d76:	f7fe fe9b 	bl	8001ab0 <HAL_RCC_GetPCLK1Freq>
 8002d7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d88:	f040 810c 	bne.w	8002fa4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d90:	2200      	movs	r2, #0
 8002d92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002d96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002d9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002d9e:	4622      	mov	r2, r4
 8002da0:	462b      	mov	r3, r5
 8002da2:	1891      	adds	r1, r2, r2
 8002da4:	65b9      	str	r1, [r7, #88]	; 0x58
 8002da6:	415b      	adcs	r3, r3
 8002da8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002daa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002dae:	4621      	mov	r1, r4
 8002db0:	eb12 0801 	adds.w	r8, r2, r1
 8002db4:	4629      	mov	r1, r5
 8002db6:	eb43 0901 	adc.w	r9, r3, r1
 8002dba:	f04f 0200 	mov.w	r2, #0
 8002dbe:	f04f 0300 	mov.w	r3, #0
 8002dc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dce:	4690      	mov	r8, r2
 8002dd0:	4699      	mov	r9, r3
 8002dd2:	4623      	mov	r3, r4
 8002dd4:	eb18 0303 	adds.w	r3, r8, r3
 8002dd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ddc:	462b      	mov	r3, r5
 8002dde:	eb49 0303 	adc.w	r3, r9, r3
 8002de2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002df2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002df6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	18db      	adds	r3, r3, r3
 8002dfe:	653b      	str	r3, [r7, #80]	; 0x50
 8002e00:	4613      	mov	r3, r2
 8002e02:	eb42 0303 	adc.w	r3, r2, r3
 8002e06:	657b      	str	r3, [r7, #84]	; 0x54
 8002e08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002e10:	f7fd f9e0 	bl	80001d4 <__aeabi_uldivmod>
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	4b61      	ldr	r3, [pc, #388]	; (8002fa0 <UART_SetConfig+0x2d4>)
 8002e1a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	011c      	lsls	r4, r3, #4
 8002e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e26:	2200      	movs	r2, #0
 8002e28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002e30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002e34:	4642      	mov	r2, r8
 8002e36:	464b      	mov	r3, r9
 8002e38:	1891      	adds	r1, r2, r2
 8002e3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002e3c:	415b      	adcs	r3, r3
 8002e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e44:	4641      	mov	r1, r8
 8002e46:	eb12 0a01 	adds.w	sl, r2, r1
 8002e4a:	4649      	mov	r1, r9
 8002e4c:	eb43 0b01 	adc.w	fp, r3, r1
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e64:	4692      	mov	sl, r2
 8002e66:	469b      	mov	fp, r3
 8002e68:	4643      	mov	r3, r8
 8002e6a:	eb1a 0303 	adds.w	r3, sl, r3
 8002e6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e72:	464b      	mov	r3, r9
 8002e74:	eb4b 0303 	adc.w	r3, fp, r3
 8002e78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002e8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002e90:	460b      	mov	r3, r1
 8002e92:	18db      	adds	r3, r3, r3
 8002e94:	643b      	str	r3, [r7, #64]	; 0x40
 8002e96:	4613      	mov	r3, r2
 8002e98:	eb42 0303 	adc.w	r3, r2, r3
 8002e9c:	647b      	str	r3, [r7, #68]	; 0x44
 8002e9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ea2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002ea6:	f7fd f995 	bl	80001d4 <__aeabi_uldivmod>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4611      	mov	r1, r2
 8002eb0:	4b3b      	ldr	r3, [pc, #236]	; (8002fa0 <UART_SetConfig+0x2d4>)
 8002eb2:	fba3 2301 	umull	r2, r3, r3, r1
 8002eb6:	095b      	lsrs	r3, r3, #5
 8002eb8:	2264      	movs	r2, #100	; 0x64
 8002eba:	fb02 f303 	mul.w	r3, r2, r3
 8002ebe:	1acb      	subs	r3, r1, r3
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002ec6:	4b36      	ldr	r3, [pc, #216]	; (8002fa0 <UART_SetConfig+0x2d4>)
 8002ec8:	fba3 2302 	umull	r2, r3, r3, r2
 8002ecc:	095b      	lsrs	r3, r3, #5
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ed4:	441c      	add	r4, r3
 8002ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002eda:	2200      	movs	r2, #0
 8002edc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ee0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002ee4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002ee8:	4642      	mov	r2, r8
 8002eea:	464b      	mov	r3, r9
 8002eec:	1891      	adds	r1, r2, r2
 8002eee:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ef0:	415b      	adcs	r3, r3
 8002ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ef4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ef8:	4641      	mov	r1, r8
 8002efa:	1851      	adds	r1, r2, r1
 8002efc:	6339      	str	r1, [r7, #48]	; 0x30
 8002efe:	4649      	mov	r1, r9
 8002f00:	414b      	adcs	r3, r1
 8002f02:	637b      	str	r3, [r7, #52]	; 0x34
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002f10:	4659      	mov	r1, fp
 8002f12:	00cb      	lsls	r3, r1, #3
 8002f14:	4651      	mov	r1, sl
 8002f16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f1a:	4651      	mov	r1, sl
 8002f1c:	00ca      	lsls	r2, r1, #3
 8002f1e:	4610      	mov	r0, r2
 8002f20:	4619      	mov	r1, r3
 8002f22:	4603      	mov	r3, r0
 8002f24:	4642      	mov	r2, r8
 8002f26:	189b      	adds	r3, r3, r2
 8002f28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f2c:	464b      	mov	r3, r9
 8002f2e:	460a      	mov	r2, r1
 8002f30:	eb42 0303 	adc.w	r3, r2, r3
 8002f34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002f48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	18db      	adds	r3, r3, r3
 8002f50:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f52:	4613      	mov	r3, r2
 8002f54:	eb42 0303 	adc.w	r3, r2, r3
 8002f58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002f62:	f7fd f937 	bl	80001d4 <__aeabi_uldivmod>
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	4b0d      	ldr	r3, [pc, #52]	; (8002fa0 <UART_SetConfig+0x2d4>)
 8002f6c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f70:	095b      	lsrs	r3, r3, #5
 8002f72:	2164      	movs	r1, #100	; 0x64
 8002f74:	fb01 f303 	mul.w	r3, r1, r3
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	3332      	adds	r3, #50	; 0x32
 8002f7e:	4a08      	ldr	r2, [pc, #32]	; (8002fa0 <UART_SetConfig+0x2d4>)
 8002f80:	fba2 2303 	umull	r2, r3, r2, r3
 8002f84:	095b      	lsrs	r3, r3, #5
 8002f86:	f003 0207 	and.w	r2, r3, #7
 8002f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4422      	add	r2, r4
 8002f92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f94:	e106      	b.n	80031a4 <UART_SetConfig+0x4d8>
 8002f96:	bf00      	nop
 8002f98:	40011000 	.word	0x40011000
 8002f9c:	40011400 	.word	0x40011400
 8002fa0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002fae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002fb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002fb6:	4642      	mov	r2, r8
 8002fb8:	464b      	mov	r3, r9
 8002fba:	1891      	adds	r1, r2, r2
 8002fbc:	6239      	str	r1, [r7, #32]
 8002fbe:	415b      	adcs	r3, r3
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fc6:	4641      	mov	r1, r8
 8002fc8:	1854      	adds	r4, r2, r1
 8002fca:	4649      	mov	r1, r9
 8002fcc:	eb43 0501 	adc.w	r5, r3, r1
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	00eb      	lsls	r3, r5, #3
 8002fda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fde:	00e2      	lsls	r2, r4, #3
 8002fe0:	4614      	mov	r4, r2
 8002fe2:	461d      	mov	r5, r3
 8002fe4:	4643      	mov	r3, r8
 8002fe6:	18e3      	adds	r3, r4, r3
 8002fe8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002fec:	464b      	mov	r3, r9
 8002fee:	eb45 0303 	adc.w	r3, r5, r3
 8002ff2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003002:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003006:	f04f 0200 	mov.w	r2, #0
 800300a:	f04f 0300 	mov.w	r3, #0
 800300e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003012:	4629      	mov	r1, r5
 8003014:	008b      	lsls	r3, r1, #2
 8003016:	4621      	mov	r1, r4
 8003018:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800301c:	4621      	mov	r1, r4
 800301e:	008a      	lsls	r2, r1, #2
 8003020:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003024:	f7fd f8d6 	bl	80001d4 <__aeabi_uldivmod>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4b60      	ldr	r3, [pc, #384]	; (80031b0 <UART_SetConfig+0x4e4>)
 800302e:	fba3 2302 	umull	r2, r3, r3, r2
 8003032:	095b      	lsrs	r3, r3, #5
 8003034:	011c      	lsls	r4, r3, #4
 8003036:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800303a:	2200      	movs	r2, #0
 800303c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003040:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003044:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003048:	4642      	mov	r2, r8
 800304a:	464b      	mov	r3, r9
 800304c:	1891      	adds	r1, r2, r2
 800304e:	61b9      	str	r1, [r7, #24]
 8003050:	415b      	adcs	r3, r3
 8003052:	61fb      	str	r3, [r7, #28]
 8003054:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003058:	4641      	mov	r1, r8
 800305a:	1851      	adds	r1, r2, r1
 800305c:	6139      	str	r1, [r7, #16]
 800305e:	4649      	mov	r1, r9
 8003060:	414b      	adcs	r3, r1
 8003062:	617b      	str	r3, [r7, #20]
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003070:	4659      	mov	r1, fp
 8003072:	00cb      	lsls	r3, r1, #3
 8003074:	4651      	mov	r1, sl
 8003076:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800307a:	4651      	mov	r1, sl
 800307c:	00ca      	lsls	r2, r1, #3
 800307e:	4610      	mov	r0, r2
 8003080:	4619      	mov	r1, r3
 8003082:	4603      	mov	r3, r0
 8003084:	4642      	mov	r2, r8
 8003086:	189b      	adds	r3, r3, r2
 8003088:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800308c:	464b      	mov	r3, r9
 800308e:	460a      	mov	r2, r1
 8003090:	eb42 0303 	adc.w	r3, r2, r3
 8003094:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80030a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80030a4:	f04f 0200 	mov.w	r2, #0
 80030a8:	f04f 0300 	mov.w	r3, #0
 80030ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80030b0:	4649      	mov	r1, r9
 80030b2:	008b      	lsls	r3, r1, #2
 80030b4:	4641      	mov	r1, r8
 80030b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030ba:	4641      	mov	r1, r8
 80030bc:	008a      	lsls	r2, r1, #2
 80030be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80030c2:	f7fd f887 	bl	80001d4 <__aeabi_uldivmod>
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	4611      	mov	r1, r2
 80030cc:	4b38      	ldr	r3, [pc, #224]	; (80031b0 <UART_SetConfig+0x4e4>)
 80030ce:	fba3 2301 	umull	r2, r3, r3, r1
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	2264      	movs	r2, #100	; 0x64
 80030d6:	fb02 f303 	mul.w	r3, r2, r3
 80030da:	1acb      	subs	r3, r1, r3
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	3332      	adds	r3, #50	; 0x32
 80030e0:	4a33      	ldr	r2, [pc, #204]	; (80031b0 <UART_SetConfig+0x4e4>)
 80030e2:	fba2 2303 	umull	r2, r3, r2, r3
 80030e6:	095b      	lsrs	r3, r3, #5
 80030e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030ec:	441c      	add	r4, r3
 80030ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030f2:	2200      	movs	r2, #0
 80030f4:	673b      	str	r3, [r7, #112]	; 0x70
 80030f6:	677a      	str	r2, [r7, #116]	; 0x74
 80030f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80030fc:	4642      	mov	r2, r8
 80030fe:	464b      	mov	r3, r9
 8003100:	1891      	adds	r1, r2, r2
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	415b      	adcs	r3, r3
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800310c:	4641      	mov	r1, r8
 800310e:	1851      	adds	r1, r2, r1
 8003110:	6039      	str	r1, [r7, #0]
 8003112:	4649      	mov	r1, r9
 8003114:	414b      	adcs	r3, r1
 8003116:	607b      	str	r3, [r7, #4]
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	f04f 0300 	mov.w	r3, #0
 8003120:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003124:	4659      	mov	r1, fp
 8003126:	00cb      	lsls	r3, r1, #3
 8003128:	4651      	mov	r1, sl
 800312a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800312e:	4651      	mov	r1, sl
 8003130:	00ca      	lsls	r2, r1, #3
 8003132:	4610      	mov	r0, r2
 8003134:	4619      	mov	r1, r3
 8003136:	4603      	mov	r3, r0
 8003138:	4642      	mov	r2, r8
 800313a:	189b      	adds	r3, r3, r2
 800313c:	66bb      	str	r3, [r7, #104]	; 0x68
 800313e:	464b      	mov	r3, r9
 8003140:	460a      	mov	r2, r1
 8003142:	eb42 0303 	adc.w	r3, r2, r3
 8003146:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	663b      	str	r3, [r7, #96]	; 0x60
 8003152:	667a      	str	r2, [r7, #100]	; 0x64
 8003154:	f04f 0200 	mov.w	r2, #0
 8003158:	f04f 0300 	mov.w	r3, #0
 800315c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003160:	4649      	mov	r1, r9
 8003162:	008b      	lsls	r3, r1, #2
 8003164:	4641      	mov	r1, r8
 8003166:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800316a:	4641      	mov	r1, r8
 800316c:	008a      	lsls	r2, r1, #2
 800316e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003172:	f7fd f82f 	bl	80001d4 <__aeabi_uldivmod>
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4b0d      	ldr	r3, [pc, #52]	; (80031b0 <UART_SetConfig+0x4e4>)
 800317c:	fba3 1302 	umull	r1, r3, r3, r2
 8003180:	095b      	lsrs	r3, r3, #5
 8003182:	2164      	movs	r1, #100	; 0x64
 8003184:	fb01 f303 	mul.w	r3, r1, r3
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	3332      	adds	r3, #50	; 0x32
 800318e:	4a08      	ldr	r2, [pc, #32]	; (80031b0 <UART_SetConfig+0x4e4>)
 8003190:	fba2 2303 	umull	r2, r3, r2, r3
 8003194:	095b      	lsrs	r3, r3, #5
 8003196:	f003 020f 	and.w	r2, r3, #15
 800319a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4422      	add	r2, r4
 80031a2:	609a      	str	r2, [r3, #8]
}
 80031a4:	bf00      	nop
 80031a6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80031aa:	46bd      	mov	sp, r7
 80031ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031b0:	51eb851f 	.word	0x51eb851f

080031b4 <memset>:
 80031b4:	4402      	add	r2, r0
 80031b6:	4603      	mov	r3, r0
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d100      	bne.n	80031be <memset+0xa>
 80031bc:	4770      	bx	lr
 80031be:	f803 1b01 	strb.w	r1, [r3], #1
 80031c2:	e7f9      	b.n	80031b8 <memset+0x4>

080031c4 <__libc_init_array>:
 80031c4:	b570      	push	{r4, r5, r6, lr}
 80031c6:	4d0d      	ldr	r5, [pc, #52]	; (80031fc <__libc_init_array+0x38>)
 80031c8:	4c0d      	ldr	r4, [pc, #52]	; (8003200 <__libc_init_array+0x3c>)
 80031ca:	1b64      	subs	r4, r4, r5
 80031cc:	10a4      	asrs	r4, r4, #2
 80031ce:	2600      	movs	r6, #0
 80031d0:	42a6      	cmp	r6, r4
 80031d2:	d109      	bne.n	80031e8 <__libc_init_array+0x24>
 80031d4:	4d0b      	ldr	r5, [pc, #44]	; (8003204 <__libc_init_array+0x40>)
 80031d6:	4c0c      	ldr	r4, [pc, #48]	; (8003208 <__libc_init_array+0x44>)
 80031d8:	f000 f818 	bl	800320c <_init>
 80031dc:	1b64      	subs	r4, r4, r5
 80031de:	10a4      	asrs	r4, r4, #2
 80031e0:	2600      	movs	r6, #0
 80031e2:	42a6      	cmp	r6, r4
 80031e4:	d105      	bne.n	80031f2 <__libc_init_array+0x2e>
 80031e6:	bd70      	pop	{r4, r5, r6, pc}
 80031e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80031ec:	4798      	blx	r3
 80031ee:	3601      	adds	r6, #1
 80031f0:	e7ee      	b.n	80031d0 <__libc_init_array+0xc>
 80031f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80031f6:	4798      	blx	r3
 80031f8:	3601      	adds	r6, #1
 80031fa:	e7f2      	b.n	80031e2 <__libc_init_array+0x1e>
 80031fc:	08003244 	.word	0x08003244
 8003200:	08003244 	.word	0x08003244
 8003204:	08003244 	.word	0x08003244
 8003208:	08003248 	.word	0x08003248

0800320c <_init>:
 800320c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800320e:	bf00      	nop
 8003210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003212:	bc08      	pop	{r3}
 8003214:	469e      	mov	lr, r3
 8003216:	4770      	bx	lr

08003218 <_fini>:
 8003218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800321a:	bf00      	nop
 800321c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800321e:	bc08      	pop	{r3}
 8003220:	469e      	mov	lr, r3
 8003222:	4770      	bx	lr
