
F401RE_SPI_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ca8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003e3c  08003e3c  00013e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e54  08003e54  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003e54  08003e54  00013e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e5c  08003e5c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e5c  08003e5c  00013e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e60  08003e60  00013e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000010  08003e74  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08003e74  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fb23  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024d0  00000000  00000000  0002fba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e68  00000000  00000000  00032078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b3f  00000000  00000000  00032ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000172e6  00000000  00000000  00033a1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001201a  00000000  00000000  0004ad05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ea5b  00000000  00000000  0005cd1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003bec  00000000  00000000  000eb77c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000ef368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003e24 	.word	0x08003e24

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08003e24 	.word	0x08003e24

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08a      	sub	sp, #40	; 0x28
 80004d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 0314 	add.w	r3, r7, #20
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e6:	2300      	movs	r3, #0
 80004e8:	613b      	str	r3, [r7, #16]
 80004ea:	4b33      	ldr	r3, [pc, #204]	; (80005b8 <MX_GPIO_Init+0xe8>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	4a32      	ldr	r2, [pc, #200]	; (80005b8 <MX_GPIO_Init+0xe8>)
 80004f0:	f043 0304 	orr.w	r3, r3, #4
 80004f4:	6313      	str	r3, [r2, #48]	; 0x30
 80004f6:	4b30      	ldr	r3, [pc, #192]	; (80005b8 <MX_GPIO_Init+0xe8>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	f003 0304 	and.w	r3, r3, #4
 80004fe:	613b      	str	r3, [r7, #16]
 8000500:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000502:	2300      	movs	r3, #0
 8000504:	60fb      	str	r3, [r7, #12]
 8000506:	4b2c      	ldr	r3, [pc, #176]	; (80005b8 <MX_GPIO_Init+0xe8>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	4a2b      	ldr	r2, [pc, #172]	; (80005b8 <MX_GPIO_Init+0xe8>)
 800050c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000510:	6313      	str	r3, [r2, #48]	; 0x30
 8000512:	4b29      	ldr	r3, [pc, #164]	; (80005b8 <MX_GPIO_Init+0xe8>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	4b25      	ldr	r3, [pc, #148]	; (80005b8 <MX_GPIO_Init+0xe8>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a24      	ldr	r2, [pc, #144]	; (80005b8 <MX_GPIO_Init+0xe8>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <MX_GPIO_Init+0xe8>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	4b1e      	ldr	r3, [pc, #120]	; (80005b8 <MX_GPIO_Init+0xe8>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a1d      	ldr	r2, [pc, #116]	; (80005b8 <MX_GPIO_Init+0xe8>)
 8000544:	f043 0302 	orr.w	r3, r3, #2
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b1b      	ldr	r3, [pc, #108]	; (80005b8 <MX_GPIO_Init+0xe8>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0302 	and.w	r3, r3, #2
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	21a0      	movs	r1, #160	; 0xa0
 800055a:	4818      	ldr	r0, [pc, #96]	; (80005bc <MX_GPIO_Init+0xec>)
 800055c:	f000 ff04 	bl	8001368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000560:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000566:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800056a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	2300      	movs	r3, #0
 800056e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	4619      	mov	r1, r3
 8000576:	4812      	ldr	r0, [pc, #72]	; (80005c0 <MX_GPIO_Init+0xf0>)
 8000578:	f000 fd5a 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7;
 800057c:	23a0      	movs	r3, #160	; 0xa0
 800057e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000580:	2301      	movs	r3, #1
 8000582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000588:	2300      	movs	r3, #0
 800058a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	4619      	mov	r1, r3
 8000592:	480a      	ldr	r0, [pc, #40]	; (80005bc <MX_GPIO_Init+0xec>)
 8000594:	f000 fd4c 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000598:	2340      	movs	r3, #64	; 0x40
 800059a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800059c:	2300      	movs	r3, #0
 800059e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a4:	f107 0314 	add.w	r3, r7, #20
 80005a8:	4619      	mov	r1, r3
 80005aa:	4804      	ldr	r0, [pc, #16]	; (80005bc <MX_GPIO_Init+0xec>)
 80005ac:	f000 fd40 	bl	8001030 <HAL_GPIO_Init>

}
 80005b0:	bf00      	nop
 80005b2:	3728      	adds	r7, #40	; 0x28
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40023800 	.word	0x40023800
 80005bc:	40020000 	.word	0x40020000
 80005c0:	40020800 	.word	0x40020800

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f000 fb58 	bl	8000c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f80c 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f7ff ff7e 	bl	80004d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d4:	f000 faae 	bl	8000b34 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80005d8:	f000 f88a 	bl	80006f0 <MX_SPI2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SPI_Transmit();
 80005dc:	f000 f92e 	bl	800083c <SPI_Transmit>
	  SPI_Receive();
 80005e0:	f000 f984 	bl	80008ec <SPI_Receive>
	  SPI_Transmit();
 80005e4:	e7fa      	b.n	80005dc <main+0x18>
	...

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	; 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2230      	movs	r2, #48	; 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 fbe8 	bl	8003dcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <SystemClock_Config+0xd0>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	4a28      	ldr	r2, [pc, #160]	; (80006b8 <SystemClock_Config+0xd0>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	; 0x40
 800061c:	4b26      	ldr	r3, [pc, #152]	; (80006b8 <SystemClock_Config+0xd0>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b23      	ldr	r3, [pc, #140]	; (80006bc <SystemClock_Config+0xd4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000634:	4a21      	ldr	r2, [pc, #132]	; (80006bc <SystemClock_Config+0xd4>)
 8000636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <SystemClock_Config+0xd4>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000648:	2302      	movs	r3, #2
 800064a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000650:	2310      	movs	r3, #16
 8000652:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000654:	2302      	movs	r3, #2
 8000656:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000658:	2300      	movs	r3, #0
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800065c:	2310      	movs	r3, #16
 800065e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000660:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000664:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000666:	2304      	movs	r3, #4
 8000668:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800066a:	2307      	movs	r3, #7
 800066c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	4618      	mov	r0, r3
 8000674:	f000 fe92 	bl	800139c <HAL_RCC_OscConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800067e:	f000 f831 	bl	80006e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000682:	230f      	movs	r3, #15
 8000684:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000686:	2302      	movs	r3, #2
 8000688:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000692:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2102      	movs	r1, #2
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 f8f4 	bl	800188c <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006aa:	f000 f81b 	bl	80006e4 <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3750      	adds	r7, #80	; 0x50
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d101      	bne.n	80006d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006d2:	f000 faf5 	bl	8000cc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40000800 	.word	0x40000800

080006e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e8:	b672      	cpsid	i
}
 80006ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ec:	e7fe      	b.n	80006ec <Error_Handler+0x8>
	...

080006f0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80006f4:	4b17      	ldr	r3, [pc, #92]	; (8000754 <MX_SPI2_Init+0x64>)
 80006f6:	4a18      	ldr	r2, [pc, #96]	; (8000758 <MX_SPI2_Init+0x68>)
 80006f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006fa:	4b16      	ldr	r3, [pc, #88]	; (8000754 <MX_SPI2_Init+0x64>)
 80006fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000700:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_SPI2_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_SPI2_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_SPI2_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_SPI2_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_SPI2_Init+0x64>)
 800071c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000720:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_SPI2_Init+0x64>)
 8000724:	2218      	movs	r2, #24
 8000726:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <MX_SPI2_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_SPI2_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <MX_SPI2_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_SPI2_Init+0x64>)
 800073c:	220a      	movs	r2, #10
 800073e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <MX_SPI2_Init+0x64>)
 8000742:	f001 faf5 	bl	8001d30 <HAL_SPI_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800074c:	f7ff ffca 	bl	80006e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000034 	.word	0x20000034
 8000758:	40003800 	.word	0x40003800

0800075c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	; 0x28
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a2c      	ldr	r2, [pc, #176]	; (800082c <HAL_SPI_MspInit+0xd0>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d152      	bne.n	8000824 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
 8000782:	4b2b      	ldr	r3, [pc, #172]	; (8000830 <HAL_SPI_MspInit+0xd4>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000786:	4a2a      	ldr	r2, [pc, #168]	; (8000830 <HAL_SPI_MspInit+0xd4>)
 8000788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800078c:	6413      	str	r3, [r2, #64]	; 0x40
 800078e:	4b28      	ldr	r3, [pc, #160]	; (8000830 <HAL_SPI_MspInit+0xd4>)
 8000790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	4b24      	ldr	r3, [pc, #144]	; (8000830 <HAL_SPI_MspInit+0xd4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a23      	ldr	r2, [pc, #140]	; (8000830 <HAL_SPI_MspInit+0xd4>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b21      	ldr	r3, [pc, #132]	; (8000830 <HAL_SPI_MspInit+0xd4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	4b1d      	ldr	r3, [pc, #116]	; (8000830 <HAL_SPI_MspInit+0xd4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a1c      	ldr	r2, [pc, #112]	; (8000830 <HAL_SPI_MspInit+0xd4>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <HAL_SPI_MspInit+0xd4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007d2:	230c      	movs	r3, #12
 80007d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d6:	2302      	movs	r3, #2
 80007d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007de:	2303      	movs	r3, #3
 80007e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007e2:	2305      	movs	r3, #5
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	4619      	mov	r1, r3
 80007ec:	4811      	ldr	r0, [pc, #68]	; (8000834 <HAL_SPI_MspInit+0xd8>)
 80007ee:	f000 fc1f 	bl	8001030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80007f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f8:	2302      	movs	r3, #2
 80007fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000800:	2303      	movs	r3, #3
 8000802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000804:	2305      	movs	r3, #5
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4619      	mov	r1, r3
 800080e:	480a      	ldr	r0, [pc, #40]	; (8000838 <HAL_SPI_MspInit+0xdc>)
 8000810:	f000 fc0e 	bl	8001030 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000814:	2200      	movs	r2, #0
 8000816:	2100      	movs	r1, #0
 8000818:	2024      	movs	r0, #36	; 0x24
 800081a:	f000 fb4d 	bl	8000eb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800081e:	2024      	movs	r0, #36	; 0x24
 8000820:	f000 fb66 	bl	8000ef0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000824:	bf00      	nop
 8000826:	3728      	adds	r7, #40	; 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40003800 	.word	0x40003800
 8000830:	40023800 	.word	0x40023800
 8000834:	40020800 	.word	0x40020800
 8000838:	40020400 	.word	0x40020400

0800083c <SPI_Transmit>:
  /* USER CODE END SPI2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void SPI_Transmit(){
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6))
 8000840:	2140      	movs	r1, #64	; 0x40
 8000842:	4823      	ldr	r0, [pc, #140]	; (80008d0 <SPI_Transmit+0x94>)
 8000844:	f000 fd78 	bl	8001338 <HAL_GPIO_ReadPin>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d037      	beq.n	80008be <SPI_Transmit+0x82>
	{
		if(temp == 0)
 800084e:	4b21      	ldr	r3, [pc, #132]	; (80008d4 <SPI_Transmit+0x98>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d107      	bne.n	8000866 <SPI_Transmit+0x2a>
			HAL_SPI_Transmit(&hspi2, (uint8_t *)&T_buffer[0], 1, 0xFFFF);
 8000856:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800085a:	2201      	movs	r2, #1
 800085c:	491e      	ldr	r1, [pc, #120]	; (80008d8 <SPI_Transmit+0x9c>)
 800085e:	481f      	ldr	r0, [pc, #124]	; (80008dc <SPI_Transmit+0xa0>)
 8000860:	f001 faef 	bl	8001e42 <HAL_SPI_Transmit>
 8000864:	e022      	b.n	80008ac <SPI_Transmit+0x70>
		else if(temp == 1)
 8000866:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <SPI_Transmit+0x98>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d107      	bne.n	800087e <SPI_Transmit+0x42>
			HAL_SPI_Transmit(&hspi2, (uint8_t *)&T_buffer[1], 1, 0xFFFF);
 800086e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000872:	2201      	movs	r2, #1
 8000874:	491a      	ldr	r1, [pc, #104]	; (80008e0 <SPI_Transmit+0xa4>)
 8000876:	4819      	ldr	r0, [pc, #100]	; (80008dc <SPI_Transmit+0xa0>)
 8000878:	f001 fae3 	bl	8001e42 <HAL_SPI_Transmit>
 800087c:	e016      	b.n	80008ac <SPI_Transmit+0x70>
		else if(temp == 2)
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <SPI_Transmit+0x98>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2b02      	cmp	r3, #2
 8000884:	d107      	bne.n	8000896 <SPI_Transmit+0x5a>
			HAL_SPI_Transmit(&hspi2, (uint8_t *)&T_buffer[2], 1, 0xFFFF);
 8000886:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800088a:	2201      	movs	r2, #1
 800088c:	4915      	ldr	r1, [pc, #84]	; (80008e4 <SPI_Transmit+0xa8>)
 800088e:	4813      	ldr	r0, [pc, #76]	; (80008dc <SPI_Transmit+0xa0>)
 8000890:	f001 fad7 	bl	8001e42 <HAL_SPI_Transmit>
 8000894:	e00a      	b.n	80008ac <SPI_Transmit+0x70>
		else if(temp == 3)
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <SPI_Transmit+0x98>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2b03      	cmp	r3, #3
 800089c:	d106      	bne.n	80008ac <SPI_Transmit+0x70>
			HAL_SPI_Transmit(&hspi2, (uint8_t *)&T_buffer[3], 1, 0xFFFF);
 800089e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008a2:	2201      	movs	r2, #1
 80008a4:	4910      	ldr	r1, [pc, #64]	; (80008e8 <SPI_Transmit+0xac>)
 80008a6:	480d      	ldr	r0, [pc, #52]	; (80008dc <SPI_Transmit+0xa0>)
 80008a8:	f001 facb 	bl	8001e42 <HAL_SPI_Transmit>

		temp +=1;
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <SPI_Transmit+0x98>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	3301      	adds	r3, #1
 80008b2:	4a08      	ldr	r2, [pc, #32]	; (80008d4 <SPI_Transmit+0x98>)
 80008b4:	6013      	str	r3, [r2, #0]
		HAL_Delay(500);
 80008b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008ba:	f000 fa21 	bl	8000d00 <HAL_Delay>
	}
	if(temp >= 4){
 80008be:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <SPI_Transmit+0x98>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2b03      	cmp	r3, #3
 80008c4:	dd02      	ble.n	80008cc <SPI_Transmit+0x90>
		temp = 0;
 80008c6:	4b03      	ldr	r3, [pc, #12]	; (80008d4 <SPI_Transmit+0x98>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
	}
}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40020000 	.word	0x40020000
 80008d4:	20000030 	.word	0x20000030
 80008d8:	20000000 	.word	0x20000000
 80008dc:	20000034 	.word	0x20000034
 80008e0:	20000001 	.word	0x20000001
 80008e4:	20000002 	.word	0x20000002
 80008e8:	20000003 	.word	0x20000003

080008ec <SPI_Receive>:

void SPI_Receive(){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	HAL_SPI_Receive(&hspi2, (uint8_t *)&R_buffer[0], 1, 0xFFFF);
 80008f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008f4:	2201      	movs	r2, #1
 80008f6:	490c      	ldr	r1, [pc, #48]	; (8000928 <SPI_Receive+0x3c>)
 80008f8:	480c      	ldr	r0, [pc, #48]	; (800092c <SPI_Receive+0x40>)
 80008fa:	f001 fbde 	bl	80020ba <HAL_SPI_Receive>
	if (R_buffer[0] == 0x01){
 80008fe:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <SPI_Receive+0x3c>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d104      	bne.n	8000910 <SPI_Receive+0x24>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8000906:	2201      	movs	r2, #1
 8000908:	2180      	movs	r1, #128	; 0x80
 800090a:	4809      	ldr	r0, [pc, #36]	; (8000930 <SPI_Receive+0x44>)
 800090c:	f000 fd2c 	bl	8001368 <HAL_GPIO_WritePin>
	}
	if (R_buffer[0] == 0xFF){
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <SPI_Receive+0x3c>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2bff      	cmp	r3, #255	; 0xff
 8000916:	d104      	bne.n	8000922 <SPI_Receive+0x36>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	2180      	movs	r1, #128	; 0x80
 800091c:	4804      	ldr	r0, [pc, #16]	; (8000930 <SPI_Receive+0x44>)
 800091e:	f000 fd23 	bl	8001368 <HAL_GPIO_WritePin>
	}
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	2000002c 	.word	0x2000002c
 800092c:	20000034 	.word	0x20000034
 8000930:	40020000 	.word	0x40020000

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <HAL_MspInit+0x4c>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	4a0f      	ldr	r2, [pc, #60]	; (8000980 <HAL_MspInit+0x4c>)
 8000944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000948:	6453      	str	r3, [r2, #68]	; 0x44
 800094a:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <HAL_MspInit+0x4c>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <HAL_MspInit+0x4c>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	4a08      	ldr	r2, [pc, #32]	; (8000980 <HAL_MspInit+0x4c>)
 8000960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000964:	6413      	str	r3, [r2, #64]	; 0x40
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_MspInit+0x4c>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000972:	2007      	movs	r0, #7
 8000974:	f000 fa95 	bl	8000ea2 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40023800 	.word	0x40023800

08000984 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08e      	sub	sp, #56	; 0x38
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800098c:	2300      	movs	r3, #0
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000994:	2300      	movs	r3, #0
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	4b33      	ldr	r3, [pc, #204]	; (8000a68 <HAL_InitTick+0xe4>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099c:	4a32      	ldr	r2, [pc, #200]	; (8000a68 <HAL_InitTick+0xe4>)
 800099e:	f043 0304 	orr.w	r3, r3, #4
 80009a2:	6413      	str	r3, [r2, #64]	; 0x40
 80009a4:	4b30      	ldr	r3, [pc, #192]	; (8000a68 <HAL_InitTick+0xe4>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a8:	f003 0304 	and.w	r3, r3, #4
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009b0:	f107 0210 	add.w	r2, r7, #16
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	4611      	mov	r1, r2
 80009ba:	4618      	mov	r0, r3
 80009bc:	f001 f986 	bl	8001ccc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009c0:	6a3b      	ldr	r3, [r7, #32]
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d103      	bne.n	80009d2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009ca:	f001 f957 	bl	8001c7c <HAL_RCC_GetPCLK1Freq>
 80009ce:	6378      	str	r0, [r7, #52]	; 0x34
 80009d0:	e004      	b.n	80009dc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009d2:	f001 f953 	bl	8001c7c <HAL_RCC_GetPCLK1Freq>
 80009d6:	4603      	mov	r3, r0
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009de:	4a23      	ldr	r2, [pc, #140]	; (8000a6c <HAL_InitTick+0xe8>)
 80009e0:	fba2 2303 	umull	r2, r3, r2, r3
 80009e4:	0c9b      	lsrs	r3, r3, #18
 80009e6:	3b01      	subs	r3, #1
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80009ea:	4b21      	ldr	r3, [pc, #132]	; (8000a70 <HAL_InitTick+0xec>)
 80009ec:	4a21      	ldr	r2, [pc, #132]	; (8000a74 <HAL_InitTick+0xf0>)
 80009ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80009f0:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <HAL_InitTick+0xec>)
 80009f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009f6:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80009f8:	4a1d      	ldr	r2, [pc, #116]	; (8000a70 <HAL_InitTick+0xec>)
 80009fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009fc:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80009fe:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <HAL_InitTick+0xec>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a04:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <HAL_InitTick+0xec>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0a:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <HAL_InitTick+0xec>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000a10:	4817      	ldr	r0, [pc, #92]	; (8000a70 <HAL_InitTick+0xec>)
 8000a12:	f002 f847 	bl	8002aa4 <HAL_TIM_Base_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d11b      	bne.n	8000a5c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000a24:	4812      	ldr	r0, [pc, #72]	; (8000a70 <HAL_InitTick+0xec>)
 8000a26:	f002 f897 	bl	8002b58 <HAL_TIM_Base_Start_IT>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d111      	bne.n	8000a5c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000a38:	201e      	movs	r0, #30
 8000a3a:	f000 fa59 	bl	8000ef0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2b0f      	cmp	r3, #15
 8000a42:	d808      	bhi.n	8000a56 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000a44:	2200      	movs	r2, #0
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	201e      	movs	r0, #30
 8000a4a:	f000 fa35 	bl	8000eb8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <HAL_InitTick+0xf4>)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6013      	str	r3, [r2, #0]
 8000a54:	e002      	b.n	8000a5c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3738      	adds	r7, #56	; 0x38
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	431bde83 	.word	0x431bde83
 8000a70:	2000008c 	.word	0x2000008c
 8000a74:	40000800 	.word	0x40000800
 8000a78:	20000008 	.word	0x20000008

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <NMI_Handler+0x4>

08000a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <MemManage_Handler+0x4>

08000a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
	...

08000ad4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ad8:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <TIM4_IRQHandler+0x10>)
 8000ada:	f002 f89f 	bl	8002c1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	2000008c 	.word	0x2000008c

08000ae8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <SPI2_IRQHandler+0x10>)
 8000aee:	f001 fd97 	bl	8002620 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000034 	.word	0x20000034

08000afc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b00:	4802      	ldr	r0, [pc, #8]	; (8000b0c <USART2_IRQHandler+0x10>)
 8000b02:	f002 fa9d 	bl	8003040 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200000d4 	.word	0x200000d4

08000b10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <SystemInit+0x20>)
 8000b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b1a:	4a05      	ldr	r2, [pc, #20]	; (8000b30 <SystemInit+0x20>)
 8000b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <MX_USART2_UART_Init+0x50>)
 8000b3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b58:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b6c:	f002 fa1a 	bl	8002fa4 <HAL_UART_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b76:	f7ff fdb5 	bl	80006e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200000d4 	.word	0x200000d4
 8000b84:	40004400 	.word	0x40004400

08000b88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a1d      	ldr	r2, [pc, #116]	; (8000c1c <HAL_UART_MspInit+0x94>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d133      	bne.n	8000c12 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	4b1c      	ldr	r3, [pc, #112]	; (8000c20 <HAL_UART_MspInit+0x98>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	4a1b      	ldr	r2, [pc, #108]	; (8000c20 <HAL_UART_MspInit+0x98>)
 8000bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bba:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <HAL_UART_MspInit+0x98>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <HAL_UART_MspInit+0x98>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a14      	ldr	r2, [pc, #80]	; (8000c20 <HAL_UART_MspInit+0x98>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <HAL_UART_MspInit+0x98>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000be2:	230c      	movs	r3, #12
 8000be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bf2:	2307      	movs	r3, #7
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4809      	ldr	r0, [pc, #36]	; (8000c24 <HAL_UART_MspInit+0x9c>)
 8000bfe:	f000 fa17 	bl	8001030 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2100      	movs	r1, #0
 8000c06:	2026      	movs	r0, #38	; 0x26
 8000c08:	f000 f956 	bl	8000eb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c0c:	2026      	movs	r0, #38	; 0x26
 8000c0e:	f000 f96f 	bl	8000ef0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c12:	bf00      	nop
 8000c14:	3728      	adds	r7, #40	; 0x28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40004400 	.word	0x40004400
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020000 	.word	0x40020000

08000c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c2c:	480d      	ldr	r0, [pc, #52]	; (8000c64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c2e:	490e      	ldr	r1, [pc, #56]	; (8000c68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c30:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c42:	4a0b      	ldr	r2, [pc, #44]	; (8000c70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c44:	4c0b      	ldr	r4, [pc, #44]	; (8000c74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c52:	f7ff ff5d 	bl	8000b10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c56:	f003 f8c1 	bl	8003ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5a:	f7ff fcb3 	bl	80005c4 <main>
  bx  lr    
 8000c5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c60:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c68:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c6c:	08003e64 	.word	0x08003e64
  ldr r2, =_sbss
 8000c70:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c74:	2000011c 	.word	0x2000011c

08000c78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c78:	e7fe      	b.n	8000c78 <ADC_IRQHandler>
	...

08000c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0d      	ldr	r2, [pc, #52]	; (8000cbc <HAL_Init+0x40>)
 8000c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <HAL_Init+0x40>)
 8000c92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a07      	ldr	r2, [pc, #28]	; (8000cbc <HAL_Init+0x40>)
 8000c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	f000 f8fc 	bl	8000ea2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000caa:	2000      	movs	r0, #0
 8000cac:	f7ff fe6a 	bl	8000984 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb0:	f7ff fe40 	bl	8000934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023c00 	.word	0x40023c00

08000cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_IncTick+0x20>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_IncTick+0x24>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4413      	add	r3, r2
 8000cd0:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <HAL_IncTick+0x24>)
 8000cd2:	6013      	str	r3, [r2, #0]
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	2000000c 	.word	0x2000000c
 8000ce4:	20000118 	.word	0x20000118

08000ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return uwTick;
 8000cec:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <HAL_GetTick+0x14>)
 8000cee:	681b      	ldr	r3, [r3, #0]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000118 	.word	0x20000118

08000d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d08:	f7ff ffee 	bl	8000ce8 <HAL_GetTick>
 8000d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d18:	d005      	beq.n	8000d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <HAL_Delay+0x44>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	4413      	add	r3, r2
 8000d24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d26:	bf00      	nop
 8000d28:	f7ff ffde 	bl	8000ce8 <HAL_GetTick>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d8f7      	bhi.n	8000d28 <HAL_Delay+0x28>
  {
  }
}
 8000d38:	bf00      	nop
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	2000000c 	.word	0x2000000c

08000d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d64:	4013      	ands	r3, r2
 8000d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7a:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	60d3      	str	r3, [r2, #12]
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <__NVIC_GetPriorityGrouping+0x18>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	0a1b      	lsrs	r3, r3, #8
 8000d9a:	f003 0307 	and.w	r3, r3, #7
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	db0b      	blt.n	8000dd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	f003 021f 	and.w	r2, r3, #31
 8000dc4:	4907      	ldr	r1, [pc, #28]	; (8000de4 <__NVIC_EnableIRQ+0x38>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	095b      	lsrs	r3, r3, #5
 8000dcc:	2001      	movs	r0, #1
 8000dce:	fa00 f202 	lsl.w	r2, r0, r2
 8000dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000e100 	.word	0xe000e100

08000de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	db0a      	blt.n	8000e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	490c      	ldr	r1, [pc, #48]	; (8000e34 <__NVIC_SetPriority+0x4c>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	0112      	lsls	r2, r2, #4
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e10:	e00a      	b.n	8000e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4908      	ldr	r1, [pc, #32]	; (8000e38 <__NVIC_SetPriority+0x50>)
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	f003 030f 	and.w	r3, r3, #15
 8000e1e:	3b04      	subs	r3, #4
 8000e20:	0112      	lsls	r2, r2, #4
 8000e22:	b2d2      	uxtb	r2, r2
 8000e24:	440b      	add	r3, r1
 8000e26:	761a      	strb	r2, [r3, #24]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000e100 	.word	0xe000e100
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	; 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f1c3 0307 	rsb	r3, r3, #7
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	bf28      	it	cs
 8000e5a:	2304      	movcs	r3, #4
 8000e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3304      	adds	r3, #4
 8000e62:	2b06      	cmp	r3, #6
 8000e64:	d902      	bls.n	8000e6c <NVIC_EncodePriority+0x30>
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3b03      	subs	r3, #3
 8000e6a:	e000      	b.n	8000e6e <NVIC_EncodePriority+0x32>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	f04f 32ff 	mov.w	r2, #4294967295
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43da      	mvns	r2, r3
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	401a      	ands	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e84:	f04f 31ff 	mov.w	r1, #4294967295
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8e:	43d9      	mvns	r1, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	4313      	orrs	r3, r2
         );
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3724      	adds	r7, #36	; 0x24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff ff4c 	bl	8000d48 <__NVIC_SetPriorityGrouping>
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
 8000ec4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eca:	f7ff ff61 	bl	8000d90 <__NVIC_GetPriorityGrouping>
 8000ece:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	68b9      	ldr	r1, [r7, #8]
 8000ed4:	6978      	ldr	r0, [r7, #20]
 8000ed6:	f7ff ffb1 	bl	8000e3c <NVIC_EncodePriority>
 8000eda:	4602      	mov	r2, r0
 8000edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee0:	4611      	mov	r1, r2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ff80 	bl	8000de8 <__NVIC_SetPriority>
}
 8000ee8:	bf00      	nop
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ff54 	bl	8000dac <__NVIC_EnableIRQ>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f18:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f1a:	f7ff fee5 	bl	8000ce8 <HAL_GetTick>
 8000f1e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d008      	beq.n	8000f3e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2280      	movs	r2, #128	; 0x80
 8000f30:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e052      	b.n	8000fe4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f022 0216 	bic.w	r2, r2, #22
 8000f4c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	695a      	ldr	r2, [r3, #20]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f5c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d103      	bne.n	8000f6e <HAL_DMA_Abort+0x62>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d007      	beq.n	8000f7e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f022 0208 	bic.w	r2, r2, #8
 8000f7c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f022 0201 	bic.w	r2, r2, #1
 8000f8c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f8e:	e013      	b.n	8000fb8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f90:	f7ff feaa 	bl	8000ce8 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	2b05      	cmp	r3, #5
 8000f9c:	d90c      	bls.n	8000fb8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2220      	movs	r2, #32
 8000fa2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	e015      	b.n	8000fe4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d1e4      	bne.n	8000f90 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fca:	223f      	movs	r2, #63	; 0x3f
 8000fcc:	409a      	lsls	r2, r3
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d004      	beq.n	800100a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2280      	movs	r2, #128	; 0x80
 8001004:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e00c      	b.n	8001024 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2205      	movs	r2, #5
 800100e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f022 0201 	bic.w	r2, r2, #1
 8001020:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001042:	2300      	movs	r3, #0
 8001044:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
 800104a:	e159      	b.n	8001300 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800104c:	2201      	movs	r2, #1
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	429a      	cmp	r2, r3
 8001066:	f040 8148 	bne.w	80012fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 0303 	and.w	r3, r3, #3
 8001072:	2b01      	cmp	r3, #1
 8001074:	d005      	beq.n	8001082 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800107e:	2b02      	cmp	r3, #2
 8001080:	d130      	bne.n	80010e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	2203      	movs	r2, #3
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	68da      	ldr	r2, [r3, #12]
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b8:	2201      	movs	r2, #1
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	091b      	lsrs	r3, r3, #4
 80010ce:	f003 0201 	and.w	r2, r3, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	2b03      	cmp	r3, #3
 80010ee:	d017      	beq.n	8001120 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	2203      	movs	r2, #3
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d123      	bne.n	8001174 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	08da      	lsrs	r2, r3, #3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3208      	adds	r2, #8
 8001134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	f003 0307 	and.w	r3, r3, #7
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	220f      	movs	r2, #15
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	691a      	ldr	r2, [r3, #16]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	08da      	lsrs	r2, r3, #3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3208      	adds	r2, #8
 800116e:	69b9      	ldr	r1, [r7, #24]
 8001170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	2203      	movs	r2, #3
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0203 	and.w	r2, r3, #3
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 80a2 	beq.w	80012fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4b57      	ldr	r3, [pc, #348]	; (8001318 <HAL_GPIO_Init+0x2e8>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	4a56      	ldr	r2, [pc, #344]	; (8001318 <HAL_GPIO_Init+0x2e8>)
 80011c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c4:	6453      	str	r3, [r2, #68]	; 0x44
 80011c6:	4b54      	ldr	r3, [pc, #336]	; (8001318 <HAL_GPIO_Init+0x2e8>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011d2:	4a52      	ldr	r2, [pc, #328]	; (800131c <HAL_GPIO_Init+0x2ec>)
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	089b      	lsrs	r3, r3, #2
 80011d8:	3302      	adds	r3, #2
 80011da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f003 0303 	and.w	r3, r3, #3
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	220f      	movs	r2, #15
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a49      	ldr	r2, [pc, #292]	; (8001320 <HAL_GPIO_Init+0x2f0>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d019      	beq.n	8001232 <HAL_GPIO_Init+0x202>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a48      	ldr	r2, [pc, #288]	; (8001324 <HAL_GPIO_Init+0x2f4>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d013      	beq.n	800122e <HAL_GPIO_Init+0x1fe>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a47      	ldr	r2, [pc, #284]	; (8001328 <HAL_GPIO_Init+0x2f8>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d00d      	beq.n	800122a <HAL_GPIO_Init+0x1fa>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a46      	ldr	r2, [pc, #280]	; (800132c <HAL_GPIO_Init+0x2fc>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d007      	beq.n	8001226 <HAL_GPIO_Init+0x1f6>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a45      	ldr	r2, [pc, #276]	; (8001330 <HAL_GPIO_Init+0x300>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d101      	bne.n	8001222 <HAL_GPIO_Init+0x1f2>
 800121e:	2304      	movs	r3, #4
 8001220:	e008      	b.n	8001234 <HAL_GPIO_Init+0x204>
 8001222:	2307      	movs	r3, #7
 8001224:	e006      	b.n	8001234 <HAL_GPIO_Init+0x204>
 8001226:	2303      	movs	r3, #3
 8001228:	e004      	b.n	8001234 <HAL_GPIO_Init+0x204>
 800122a:	2302      	movs	r3, #2
 800122c:	e002      	b.n	8001234 <HAL_GPIO_Init+0x204>
 800122e:	2301      	movs	r3, #1
 8001230:	e000      	b.n	8001234 <HAL_GPIO_Init+0x204>
 8001232:	2300      	movs	r3, #0
 8001234:	69fa      	ldr	r2, [r7, #28]
 8001236:	f002 0203 	and.w	r2, r2, #3
 800123a:	0092      	lsls	r2, r2, #2
 800123c:	4093      	lsls	r3, r2
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001244:	4935      	ldr	r1, [pc, #212]	; (800131c <HAL_GPIO_Init+0x2ec>)
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	089b      	lsrs	r3, r3, #2
 800124a:	3302      	adds	r3, #2
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001252:	4b38      	ldr	r3, [pc, #224]	; (8001334 <HAL_GPIO_Init+0x304>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001276:	4a2f      	ldr	r2, [pc, #188]	; (8001334 <HAL_GPIO_Init+0x304>)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800127c:	4b2d      	ldr	r3, [pc, #180]	; (8001334 <HAL_GPIO_Init+0x304>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012a0:	4a24      	ldr	r2, [pc, #144]	; (8001334 <HAL_GPIO_Init+0x304>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012a6:	4b23      	ldr	r3, [pc, #140]	; (8001334 <HAL_GPIO_Init+0x304>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012ca:	4a1a      	ldr	r2, [pc, #104]	; (8001334 <HAL_GPIO_Init+0x304>)
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012d0:	4b18      	ldr	r3, [pc, #96]	; (8001334 <HAL_GPIO_Init+0x304>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012f4:	4a0f      	ldr	r2, [pc, #60]	; (8001334 <HAL_GPIO_Init+0x304>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3301      	adds	r3, #1
 80012fe:	61fb      	str	r3, [r7, #28]
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	2b0f      	cmp	r3, #15
 8001304:	f67f aea2 	bls.w	800104c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001308:	bf00      	nop
 800130a:	bf00      	nop
 800130c:	3724      	adds	r7, #36	; 0x24
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800
 800131c:	40013800 	.word	0x40013800
 8001320:	40020000 	.word	0x40020000
 8001324:	40020400 	.word	0x40020400
 8001328:	40020800 	.word	0x40020800
 800132c:	40020c00 	.word	0x40020c00
 8001330:	40021000 	.word	0x40021000
 8001334:	40013c00 	.word	0x40013c00

08001338 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	691a      	ldr	r2, [r3, #16]
 8001348:	887b      	ldrh	r3, [r7, #2]
 800134a:	4013      	ands	r3, r2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d002      	beq.n	8001356 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001350:	2301      	movs	r3, #1
 8001352:	73fb      	strb	r3, [r7, #15]
 8001354:	e001      	b.n	800135a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001356:	2300      	movs	r3, #0
 8001358:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800135a:	7bfb      	ldrb	r3, [r7, #15]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	807b      	strh	r3, [r7, #2]
 8001374:	4613      	mov	r3, r2
 8001376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001378:	787b      	ldrb	r3, [r7, #1]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800137e:	887a      	ldrh	r2, [r7, #2]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001384:	e003      	b.n	800138e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001386:	887b      	ldrh	r3, [r7, #2]
 8001388:	041a      	lsls	r2, r3, #16
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	619a      	str	r2, [r3, #24]
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e267      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d075      	beq.n	80014a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ba:	4b88      	ldr	r3, [pc, #544]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	d00c      	beq.n	80013e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013c6:	4b85      	ldr	r3, [pc, #532]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ce:	2b08      	cmp	r3, #8
 80013d0:	d112      	bne.n	80013f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013d2:	4b82      	ldr	r3, [pc, #520]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013de:	d10b      	bne.n	80013f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e0:	4b7e      	ldr	r3, [pc, #504]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d05b      	beq.n	80014a4 <HAL_RCC_OscConfig+0x108>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d157      	bne.n	80014a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e242      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001400:	d106      	bne.n	8001410 <HAL_RCC_OscConfig+0x74>
 8001402:	4b76      	ldr	r3, [pc, #472]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a75      	ldr	r2, [pc, #468]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	e01d      	b.n	800144c <HAL_RCC_OscConfig+0xb0>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001418:	d10c      	bne.n	8001434 <HAL_RCC_OscConfig+0x98>
 800141a:	4b70      	ldr	r3, [pc, #448]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a6f      	ldr	r2, [pc, #444]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	4b6d      	ldr	r3, [pc, #436]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a6c      	ldr	r2, [pc, #432]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 800142c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	e00b      	b.n	800144c <HAL_RCC_OscConfig+0xb0>
 8001434:	4b69      	ldr	r3, [pc, #420]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a68      	ldr	r2, [pc, #416]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 800143a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800143e:	6013      	str	r3, [r2, #0]
 8001440:	4b66      	ldr	r3, [pc, #408]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a65      	ldr	r2, [pc, #404]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800144a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d013      	beq.n	800147c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001454:	f7ff fc48 	bl	8000ce8 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800145c:	f7ff fc44 	bl	8000ce8 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b64      	cmp	r3, #100	; 0x64
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e207      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146e:	4b5b      	ldr	r3, [pc, #364]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0f0      	beq.n	800145c <HAL_RCC_OscConfig+0xc0>
 800147a:	e014      	b.n	80014a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147c:	f7ff fc34 	bl	8000ce8 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001484:	f7ff fc30 	bl	8000ce8 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b64      	cmp	r3, #100	; 0x64
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e1f3      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001496:	4b51      	ldr	r3, [pc, #324]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0xe8>
 80014a2:	e000      	b.n	80014a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d063      	beq.n	800157a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014b2:	4b4a      	ldr	r3, [pc, #296]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 030c 	and.w	r3, r3, #12
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00b      	beq.n	80014d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014be:	4b47      	ldr	r3, [pc, #284]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014c6:	2b08      	cmp	r3, #8
 80014c8:	d11c      	bne.n	8001504 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ca:	4b44      	ldr	r3, [pc, #272]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d116      	bne.n	8001504 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014d6:	4b41      	ldr	r3, [pc, #260]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d005      	beq.n	80014ee <HAL_RCC_OscConfig+0x152>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d001      	beq.n	80014ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e1c7      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ee:	4b3b      	ldr	r3, [pc, #236]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	4937      	ldr	r1, [pc, #220]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001502:	e03a      	b.n	800157a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d020      	beq.n	800154e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800150c:	4b34      	ldr	r3, [pc, #208]	; (80015e0 <HAL_RCC_OscConfig+0x244>)
 800150e:	2201      	movs	r2, #1
 8001510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001512:	f7ff fbe9 	bl	8000ce8 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800151a:	f7ff fbe5 	bl	8000ce8 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e1a8      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152c:	4b2b      	ldr	r3, [pc, #172]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001538:	4b28      	ldr	r3, [pc, #160]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	4925      	ldr	r1, [pc, #148]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001548:	4313      	orrs	r3, r2
 800154a:	600b      	str	r3, [r1, #0]
 800154c:	e015      	b.n	800157a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800154e:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <HAL_RCC_OscConfig+0x244>)
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001554:	f7ff fbc8 	bl	8000ce8 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800155c:	f7ff fbc4 	bl	8000ce8 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e187      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156e:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	2b00      	cmp	r3, #0
 8001584:	d036      	beq.n	80015f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d016      	beq.n	80015bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <HAL_RCC_OscConfig+0x248>)
 8001590:	2201      	movs	r2, #1
 8001592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001594:	f7ff fba8 	bl	8000ce8 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800159c:	f7ff fba4 	bl	8000ce8 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e167      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80015b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f0      	beq.n	800159c <HAL_RCC_OscConfig+0x200>
 80015ba:	e01b      	b.n	80015f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <HAL_RCC_OscConfig+0x248>)
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c2:	f7ff fb91 	bl	8000ce8 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c8:	e00e      	b.n	80015e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ca:	f7ff fb8d 	bl	8000ce8 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d907      	bls.n	80015e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e150      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
 80015dc:	40023800 	.word	0x40023800
 80015e0:	42470000 	.word	0x42470000
 80015e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e8:	4b88      	ldr	r3, [pc, #544]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80015ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1ea      	bne.n	80015ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 8097 	beq.w	8001730 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001606:	4b81      	ldr	r3, [pc, #516]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10f      	bne.n	8001632 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	4b7d      	ldr	r3, [pc, #500]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	4a7c      	ldr	r2, [pc, #496]	; (800180c <HAL_RCC_OscConfig+0x470>)
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001620:	6413      	str	r3, [r2, #64]	; 0x40
 8001622:	4b7a      	ldr	r3, [pc, #488]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800162e:	2301      	movs	r3, #1
 8001630:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001632:	4b77      	ldr	r3, [pc, #476]	; (8001810 <HAL_RCC_OscConfig+0x474>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163a:	2b00      	cmp	r3, #0
 800163c:	d118      	bne.n	8001670 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800163e:	4b74      	ldr	r3, [pc, #464]	; (8001810 <HAL_RCC_OscConfig+0x474>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a73      	ldr	r2, [pc, #460]	; (8001810 <HAL_RCC_OscConfig+0x474>)
 8001644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800164a:	f7ff fb4d 	bl	8000ce8 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001652:	f7ff fb49 	bl	8000ce8 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e10c      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001664:	4b6a      	ldr	r3, [pc, #424]	; (8001810 <HAL_RCC_OscConfig+0x474>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f0      	beq.n	8001652 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d106      	bne.n	8001686 <HAL_RCC_OscConfig+0x2ea>
 8001678:	4b64      	ldr	r3, [pc, #400]	; (800180c <HAL_RCC_OscConfig+0x470>)
 800167a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167c:	4a63      	ldr	r2, [pc, #396]	; (800180c <HAL_RCC_OscConfig+0x470>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	6713      	str	r3, [r2, #112]	; 0x70
 8001684:	e01c      	b.n	80016c0 <HAL_RCC_OscConfig+0x324>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b05      	cmp	r3, #5
 800168c:	d10c      	bne.n	80016a8 <HAL_RCC_OscConfig+0x30c>
 800168e:	4b5f      	ldr	r3, [pc, #380]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001692:	4a5e      	ldr	r2, [pc, #376]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001694:	f043 0304 	orr.w	r3, r3, #4
 8001698:	6713      	str	r3, [r2, #112]	; 0x70
 800169a:	4b5c      	ldr	r3, [pc, #368]	; (800180c <HAL_RCC_OscConfig+0x470>)
 800169c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169e:	4a5b      	ldr	r2, [pc, #364]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6713      	str	r3, [r2, #112]	; 0x70
 80016a6:	e00b      	b.n	80016c0 <HAL_RCC_OscConfig+0x324>
 80016a8:	4b58      	ldr	r3, [pc, #352]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80016aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ac:	4a57      	ldr	r2, [pc, #348]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80016ae:	f023 0301 	bic.w	r3, r3, #1
 80016b2:	6713      	str	r3, [r2, #112]	; 0x70
 80016b4:	4b55      	ldr	r3, [pc, #340]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80016b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b8:	4a54      	ldr	r2, [pc, #336]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80016ba:	f023 0304 	bic.w	r3, r3, #4
 80016be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d015      	beq.n	80016f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c8:	f7ff fb0e 	bl	8000ce8 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ce:	e00a      	b.n	80016e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d0:	f7ff fb0a 	bl	8000ce8 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	f241 3288 	movw	r2, #5000	; 0x1388
 80016de:	4293      	cmp	r3, r2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e0cb      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e6:	4b49      	ldr	r3, [pc, #292]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80016e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0ee      	beq.n	80016d0 <HAL_RCC_OscConfig+0x334>
 80016f2:	e014      	b.n	800171e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f4:	f7ff faf8 	bl	8000ce8 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016fa:	e00a      	b.n	8001712 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016fc:	f7ff faf4 	bl	8000ce8 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	f241 3288 	movw	r2, #5000	; 0x1388
 800170a:	4293      	cmp	r3, r2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e0b5      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001712:	4b3e      	ldr	r3, [pc, #248]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1ee      	bne.n	80016fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800171e:	7dfb      	ldrb	r3, [r7, #23]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d105      	bne.n	8001730 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001724:	4b39      	ldr	r3, [pc, #228]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	4a38      	ldr	r2, [pc, #224]	; (800180c <HAL_RCC_OscConfig+0x470>)
 800172a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800172e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 80a1 	beq.w	800187c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800173a:	4b34      	ldr	r3, [pc, #208]	; (800180c <HAL_RCC_OscConfig+0x470>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 030c 	and.w	r3, r3, #12
 8001742:	2b08      	cmp	r3, #8
 8001744:	d05c      	beq.n	8001800 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d141      	bne.n	80017d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174e:	4b31      	ldr	r3, [pc, #196]	; (8001814 <HAL_RCC_OscConfig+0x478>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001754:	f7ff fac8 	bl	8000ce8 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800175c:	f7ff fac4 	bl	8000ce8 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e087      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176e:	4b27      	ldr	r3, [pc, #156]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69da      	ldr	r2, [r3, #28]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	431a      	orrs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	019b      	lsls	r3, r3, #6
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001790:	085b      	lsrs	r3, r3, #1
 8001792:	3b01      	subs	r3, #1
 8001794:	041b      	lsls	r3, r3, #16
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179c:	061b      	lsls	r3, r3, #24
 800179e:	491b      	ldr	r1, [pc, #108]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017a4:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <HAL_RCC_OscConfig+0x478>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017aa:	f7ff fa9d 	bl	8000ce8 <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b2:	f7ff fa99 	bl	8000ce8 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e05c      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c4:	4b11      	ldr	r3, [pc, #68]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0f0      	beq.n	80017b2 <HAL_RCC_OscConfig+0x416>
 80017d0:	e054      	b.n	800187c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <HAL_RCC_OscConfig+0x478>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d8:	f7ff fa86 	bl	8000ce8 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e0:	f7ff fa82 	bl	8000ce8 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e045      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f0      	bne.n	80017e0 <HAL_RCC_OscConfig+0x444>
 80017fe:	e03d      	b.n	800187c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d107      	bne.n	8001818 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e038      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
 800180c:	40023800 	.word	0x40023800
 8001810:	40007000 	.word	0x40007000
 8001814:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001818:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <HAL_RCC_OscConfig+0x4ec>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d028      	beq.n	8001878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001830:	429a      	cmp	r2, r3
 8001832:	d121      	bne.n	8001878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183e:	429a      	cmp	r2, r3
 8001840:	d11a      	bne.n	8001878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001848:	4013      	ands	r3, r2
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800184e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001850:	4293      	cmp	r3, r2
 8001852:	d111      	bne.n	8001878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185e:	085b      	lsrs	r3, r3, #1
 8001860:	3b01      	subs	r3, #1
 8001862:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001864:	429a      	cmp	r2, r3
 8001866:	d107      	bne.n	8001878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001872:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001874:	429a      	cmp	r2, r3
 8001876:	d001      	beq.n	800187c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e000      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023800 	.word	0x40023800

0800188c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e0cc      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018a0:	4b68      	ldr	r3, [pc, #416]	; (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d90c      	bls.n	80018c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ae:	4b65      	ldr	r3, [pc, #404]	; (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b6:	4b63      	ldr	r3, [pc, #396]	; (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d001      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e0b8      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d020      	beq.n	8001916 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d005      	beq.n	80018ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018e0:	4b59      	ldr	r3, [pc, #356]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	4a58      	ldr	r2, [pc, #352]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0308 	and.w	r3, r3, #8
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d005      	beq.n	8001904 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018f8:	4b53      	ldr	r3, [pc, #332]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	4a52      	ldr	r2, [pc, #328]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001902:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001904:	4b50      	ldr	r3, [pc, #320]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	494d      	ldr	r1, [pc, #308]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	4313      	orrs	r3, r2
 8001914:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	d044      	beq.n	80019ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d107      	bne.n	800193a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192a:	4b47      	ldr	r3, [pc, #284]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d119      	bne.n	800196a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e07f      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b02      	cmp	r3, #2
 8001940:	d003      	beq.n	800194a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001946:	2b03      	cmp	r3, #3
 8001948:	d107      	bne.n	800195a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800194a:	4b3f      	ldr	r3, [pc, #252]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d109      	bne.n	800196a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e06f      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195a:	4b3b      	ldr	r3, [pc, #236]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e067      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800196a:	4b37      	ldr	r3, [pc, #220]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f023 0203 	bic.w	r2, r3, #3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	4934      	ldr	r1, [pc, #208]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001978:	4313      	orrs	r3, r2
 800197a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800197c:	f7ff f9b4 	bl	8000ce8 <HAL_GetTick>
 8001980:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001982:	e00a      	b.n	800199a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001984:	f7ff f9b0 	bl	8000ce8 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001992:	4293      	cmp	r3, r2
 8001994:	d901      	bls.n	800199a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e04f      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199a:	4b2b      	ldr	r3, [pc, #172]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 020c 	and.w	r2, r3, #12
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d1eb      	bne.n	8001984 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019ac:	4b25      	ldr	r3, [pc, #148]	; (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d20c      	bcs.n	80019d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ba:	4b22      	ldr	r3, [pc, #136]	; (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c2:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d001      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e032      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d008      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019e0:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	4916      	ldr	r1, [pc, #88]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d009      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	490e      	ldr	r1, [pc, #56]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a12:	f000 f821 	bl	8001a58 <HAL_RCC_GetSysClockFreq>
 8001a16:	4602      	mov	r2, r0
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	091b      	lsrs	r3, r3, #4
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	490a      	ldr	r1, [pc, #40]	; (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 8001a24:	5ccb      	ldrb	r3, [r1, r3]
 8001a26:	fa22 f303 	lsr.w	r3, r2, r3
 8001a2a:	4a09      	ldr	r2, [pc, #36]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <HAL_RCC_ClockConfig+0x1c8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe ffa6 	bl	8000984 <HAL_InitTick>

  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023c00 	.word	0x40023c00
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	08003e3c 	.word	0x08003e3c
 8001a50:	20000004 	.word	0x20000004
 8001a54:	20000008 	.word	0x20000008

08001a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a5c:	b094      	sub	sp, #80	; 0x50
 8001a5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	647b      	str	r3, [r7, #68]	; 0x44
 8001a64:	2300      	movs	r3, #0
 8001a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a68:	2300      	movs	r3, #0
 8001a6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a70:	4b79      	ldr	r3, [pc, #484]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 030c 	and.w	r3, r3, #12
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d00d      	beq.n	8001a98 <HAL_RCC_GetSysClockFreq+0x40>
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	f200 80e1 	bhi.w	8001c44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d002      	beq.n	8001a8c <HAL_RCC_GetSysClockFreq+0x34>
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d003      	beq.n	8001a92 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a8a:	e0db      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a8c:	4b73      	ldr	r3, [pc, #460]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x204>)
 8001a8e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a90:	e0db      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a92:	4b73      	ldr	r3, [pc, #460]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a96:	e0d8      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a98:	4b6f      	ldr	r3, [pc, #444]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001aa0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aa2:	4b6d      	ldr	r3, [pc, #436]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d063      	beq.n	8001b76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aae:	4b6a      	ldr	r3, [pc, #424]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	099b      	lsrs	r3, r3, #6
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ab8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ac0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ac6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001aca:	4622      	mov	r2, r4
 8001acc:	462b      	mov	r3, r5
 8001ace:	f04f 0000 	mov.w	r0, #0
 8001ad2:	f04f 0100 	mov.w	r1, #0
 8001ad6:	0159      	lsls	r1, r3, #5
 8001ad8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001adc:	0150      	lsls	r0, r2, #5
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4621      	mov	r1, r4
 8001ae4:	1a51      	subs	r1, r2, r1
 8001ae6:	6139      	str	r1, [r7, #16]
 8001ae8:	4629      	mov	r1, r5
 8001aea:	eb63 0301 	sbc.w	r3, r3, r1
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	f04f 0300 	mov.w	r3, #0
 8001af8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001afc:	4659      	mov	r1, fp
 8001afe:	018b      	lsls	r3, r1, #6
 8001b00:	4651      	mov	r1, sl
 8001b02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b06:	4651      	mov	r1, sl
 8001b08:	018a      	lsls	r2, r1, #6
 8001b0a:	4651      	mov	r1, sl
 8001b0c:	ebb2 0801 	subs.w	r8, r2, r1
 8001b10:	4659      	mov	r1, fp
 8001b12:	eb63 0901 	sbc.w	r9, r3, r1
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b2a:	4690      	mov	r8, r2
 8001b2c:	4699      	mov	r9, r3
 8001b2e:	4623      	mov	r3, r4
 8001b30:	eb18 0303 	adds.w	r3, r8, r3
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	462b      	mov	r3, r5
 8001b38:	eb49 0303 	adc.w	r3, r9, r3
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	f04f 0300 	mov.w	r3, #0
 8001b46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b4a:	4629      	mov	r1, r5
 8001b4c:	024b      	lsls	r3, r1, #9
 8001b4e:	4621      	mov	r1, r4
 8001b50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b54:	4621      	mov	r1, r4
 8001b56:	024a      	lsls	r2, r1, #9
 8001b58:	4610      	mov	r0, r2
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b5e:	2200      	movs	r2, #0
 8001b60:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b68:	f7fe fb34 	bl	80001d4 <__aeabi_uldivmod>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4613      	mov	r3, r2
 8001b72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b74:	e058      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b76:	4b38      	ldr	r3, [pc, #224]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	099b      	lsrs	r3, r3, #6
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	4618      	mov	r0, r3
 8001b80:	4611      	mov	r1, r2
 8001b82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b86:	623b      	str	r3, [r7, #32]
 8001b88:	2300      	movs	r3, #0
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b90:	4642      	mov	r2, r8
 8001b92:	464b      	mov	r3, r9
 8001b94:	f04f 0000 	mov.w	r0, #0
 8001b98:	f04f 0100 	mov.w	r1, #0
 8001b9c:	0159      	lsls	r1, r3, #5
 8001b9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ba2:	0150      	lsls	r0, r2, #5
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4641      	mov	r1, r8
 8001baa:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bae:	4649      	mov	r1, r9
 8001bb0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bc8:	ebb2 040a 	subs.w	r4, r2, sl
 8001bcc:	eb63 050b 	sbc.w	r5, r3, fp
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	f04f 0300 	mov.w	r3, #0
 8001bd8:	00eb      	lsls	r3, r5, #3
 8001bda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bde:	00e2      	lsls	r2, r4, #3
 8001be0:	4614      	mov	r4, r2
 8001be2:	461d      	mov	r5, r3
 8001be4:	4643      	mov	r3, r8
 8001be6:	18e3      	adds	r3, r4, r3
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	464b      	mov	r3, r9
 8001bec:	eb45 0303 	adc.w	r3, r5, r3
 8001bf0:	607b      	str	r3, [r7, #4]
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bfe:	4629      	mov	r1, r5
 8001c00:	028b      	lsls	r3, r1, #10
 8001c02:	4621      	mov	r1, r4
 8001c04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c08:	4621      	mov	r1, r4
 8001c0a:	028a      	lsls	r2, r1, #10
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c12:	2200      	movs	r2, #0
 8001c14:	61bb      	str	r3, [r7, #24]
 8001c16:	61fa      	str	r2, [r7, #28]
 8001c18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c1c:	f7fe fada 	bl	80001d4 <__aeabi_uldivmod>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4613      	mov	r3, r2
 8001c26:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	0c1b      	lsrs	r3, r3, #16
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	3301      	adds	r3, #1
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c42:	e002      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x204>)
 8001c46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3750      	adds	r7, #80	; 0x50
 8001c50:	46bd      	mov	sp, r7
 8001c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c56:	bf00      	nop
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	00f42400 	.word	0x00f42400
 8001c60:	007a1200 	.word	0x007a1200

08001c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c68:	4b03      	ldr	r3, [pc, #12]	; (8001c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	20000004 	.word	0x20000004

08001c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c80:	f7ff fff0 	bl	8001c64 <HAL_RCC_GetHCLKFreq>
 8001c84:	4602      	mov	r2, r0
 8001c86:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	0a9b      	lsrs	r3, r3, #10
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	4903      	ldr	r1, [pc, #12]	; (8001ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c92:	5ccb      	ldrb	r3, [r1, r3]
 8001c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	08003e4c 	.word	0x08003e4c

08001ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ca8:	f7ff ffdc 	bl	8001c64 <HAL_RCC_GetHCLKFreq>
 8001cac:	4602      	mov	r2, r0
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	0b5b      	lsrs	r3, r3, #13
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	4903      	ldr	r1, [pc, #12]	; (8001cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cba:	5ccb      	ldrb	r3, [r1, r3]
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	08003e4c 	.word	0x08003e4c

08001ccc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	220f      	movs	r2, #15
 8001cda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cdc:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <HAL_RCC_GetClockConfig+0x5c>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 0203 	and.w	r2, r3, #3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <HAL_RCC_GetClockConfig+0x5c>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <HAL_RCC_GetClockConfig+0x5c>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d00:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <HAL_RCC_GetClockConfig+0x5c>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	08db      	lsrs	r3, r3, #3
 8001d06:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d0e:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <HAL_RCC_GetClockConfig+0x60>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0207 	and.w	r2, r3, #7
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	601a      	str	r2, [r3, #0]
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40023c00 	.word	0x40023c00

08001d30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e07b      	b.n	8001e3a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d108      	bne.n	8001d5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d52:	d009      	beq.n	8001d68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	61da      	str	r2, [r3, #28]
 8001d5a:	e005      	b.n	8001d68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d106      	bne.n	8001d88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7fe fcea 	bl	800075c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001db0:	431a      	orrs	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dec:	ea42 0103 	orr.w	r1, r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	0c1b      	lsrs	r3, r3, #16
 8001e06:	f003 0104 	and.w	r1, r3, #4
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	f003 0210 	and.w	r2, r3, #16
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	69da      	ldr	r2, [r3, #28]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b088      	sub	sp, #32
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	60f8      	str	r0, [r7, #12]
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	603b      	str	r3, [r7, #0]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d101      	bne.n	8001e64 <HAL_SPI_Transmit+0x22>
 8001e60:	2302      	movs	r3, #2
 8001e62:	e126      	b.n	80020b2 <HAL_SPI_Transmit+0x270>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e6c:	f7fe ff3c 	bl	8000ce8 <HAL_GetTick>
 8001e70:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001e72:	88fb      	ldrh	r3, [r7, #6]
 8001e74:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d002      	beq.n	8001e88 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001e82:	2302      	movs	r3, #2
 8001e84:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e86:	e10b      	b.n	80020a0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d002      	beq.n	8001e94 <HAL_SPI_Transmit+0x52>
 8001e8e:	88fb      	ldrh	r3, [r7, #6]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d102      	bne.n	8001e9a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e98:	e102      	b.n	80020a0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	88fa      	ldrh	r2, [r7, #6]
 8001eb2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	88fa      	ldrh	r2, [r7, #6]
 8001eb8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ee0:	d10f      	bne.n	8001f02 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ef0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f00:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f0c:	2b40      	cmp	r3, #64	; 0x40
 8001f0e:	d007      	beq.n	8001f20 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f28:	d14b      	bne.n	8001fc2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d002      	beq.n	8001f38 <HAL_SPI_Transmit+0xf6>
 8001f32:	8afb      	ldrh	r3, [r7, #22]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d13e      	bne.n	8001fb6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3c:	881a      	ldrh	r2, [r3, #0]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f48:	1c9a      	adds	r2, r3, #2
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	3b01      	subs	r3, #1
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f5c:	e02b      	b.n	8001fb6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d112      	bne.n	8001f92 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	881a      	ldrh	r2, [r3, #0]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7c:	1c9a      	adds	r2, r3, #2
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f90:	e011      	b.n	8001fb6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f92:	f7fe fea9 	bl	8000ce8 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d803      	bhi.n	8001faa <HAL_SPI_Transmit+0x168>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa8:	d102      	bne.n	8001fb0 <HAL_SPI_Transmit+0x16e>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d102      	bne.n	8001fb6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001fb4:	e074      	b.n	80020a0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1ce      	bne.n	8001f5e <HAL_SPI_Transmit+0x11c>
 8001fc0:	e04c      	b.n	800205c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d002      	beq.n	8001fd0 <HAL_SPI_Transmit+0x18e>
 8001fca:	8afb      	ldrh	r3, [r7, #22]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d140      	bne.n	8002052 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	330c      	adds	r3, #12
 8001fda:	7812      	ldrb	r2, [r2, #0]
 8001fdc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	1c5a      	adds	r2, r3, #1
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001ff6:	e02c      	b.n	8002052 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b02      	cmp	r3, #2
 8002004:	d113      	bne.n	800202e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	330c      	adds	r3, #12
 8002010:	7812      	ldrb	r2, [r2, #0]
 8002012:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002018:	1c5a      	adds	r2, r3, #1
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002022:	b29b      	uxth	r3, r3
 8002024:	3b01      	subs	r3, #1
 8002026:	b29a      	uxth	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	86da      	strh	r2, [r3, #54]	; 0x36
 800202c:	e011      	b.n	8002052 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800202e:	f7fe fe5b 	bl	8000ce8 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	429a      	cmp	r2, r3
 800203c:	d803      	bhi.n	8002046 <HAL_SPI_Transmit+0x204>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002044:	d102      	bne.n	800204c <HAL_SPI_Transmit+0x20a>
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d102      	bne.n	8002052 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002050:	e026      	b.n	80020a0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002056:	b29b      	uxth	r3, r3
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1cd      	bne.n	8001ff8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	6839      	ldr	r1, [r7, #0]
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 fcdd 	bl	8002a20 <SPI_EndRxTxTransaction>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d002      	beq.n	8002072 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2220      	movs	r2, #32
 8002070:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10a      	bne.n	8002090 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800207a:	2300      	movs	r3, #0
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	613b      	str	r3, [r7, #16]
 800208e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002094:	2b00      	cmp	r3, #0
 8002096:	d002      	beq.n	800209e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	77fb      	strb	r3, [r7, #31]
 800209c:	e000      	b.n	80020a0 <HAL_SPI_Transmit+0x25e>
  }

error:
 800209e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80020b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3720      	adds	r7, #32
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b088      	sub	sp, #32
 80020be:	af02      	add	r7, sp, #8
 80020c0:	60f8      	str	r0, [r7, #12]
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	603b      	str	r3, [r7, #0]
 80020c6:	4613      	mov	r3, r2
 80020c8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80020ca:	2300      	movs	r3, #0
 80020cc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020d6:	d112      	bne.n	80020fe <HAL_SPI_Receive+0x44>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d10e      	bne.n	80020fe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2204      	movs	r2, #4
 80020e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80020e8:	88fa      	ldrh	r2, [r7, #6]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	4613      	mov	r3, r2
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	68b9      	ldr	r1, [r7, #8]
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f000 f8f1 	bl	80022dc <HAL_SPI_TransmitReceive>
 80020fa:	4603      	mov	r3, r0
 80020fc:	e0ea      	b.n	80022d4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002104:	2b01      	cmp	r3, #1
 8002106:	d101      	bne.n	800210c <HAL_SPI_Receive+0x52>
 8002108:	2302      	movs	r3, #2
 800210a:	e0e3      	b.n	80022d4 <HAL_SPI_Receive+0x21a>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002114:	f7fe fde8 	bl	8000ce8 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b01      	cmp	r3, #1
 8002124:	d002      	beq.n	800212c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002126:	2302      	movs	r3, #2
 8002128:	75fb      	strb	r3, [r7, #23]
    goto error;
 800212a:	e0ca      	b.n	80022c2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d002      	beq.n	8002138 <HAL_SPI_Receive+0x7e>
 8002132:	88fb      	ldrh	r3, [r7, #6]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d102      	bne.n	800213e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800213c:	e0c1      	b.n	80022c2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2204      	movs	r2, #4
 8002142:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	88fa      	ldrh	r2, [r7, #6]
 8002156:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	88fa      	ldrh	r2, [r7, #6]
 800215c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002184:	d10f      	bne.n	80021a6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002194:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80021a4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b0:	2b40      	cmp	r3, #64	; 0x40
 80021b2:	d007      	beq.n	80021c4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021c2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d162      	bne.n	8002292 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80021cc:	e02e      	b.n	800222c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d115      	bne.n	8002208 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f103 020c 	add.w	r2, r3, #12
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e8:	7812      	ldrb	r2, [r2, #0]
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f2:	1c5a      	adds	r2, r3, #1
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	3b01      	subs	r3, #1
 8002200:	b29a      	uxth	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002206:	e011      	b.n	800222c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002208:	f7fe fd6e 	bl	8000ce8 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d803      	bhi.n	8002220 <HAL_SPI_Receive+0x166>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800221e:	d102      	bne.n	8002226 <HAL_SPI_Receive+0x16c>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d102      	bne.n	800222c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	75fb      	strb	r3, [r7, #23]
          goto error;
 800222a:	e04a      	b.n	80022c2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002230:	b29b      	uxth	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1cb      	bne.n	80021ce <HAL_SPI_Receive+0x114>
 8002236:	e031      	b.n	800229c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b01      	cmp	r3, #1
 8002244:	d113      	bne.n	800226e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68da      	ldr	r2, [r3, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002250:	b292      	uxth	r2, r2
 8002252:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002258:	1c9a      	adds	r2, r3, #2
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002262:	b29b      	uxth	r3, r3
 8002264:	3b01      	subs	r3, #1
 8002266:	b29a      	uxth	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800226c:	e011      	b.n	8002292 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800226e:	f7fe fd3b 	bl	8000ce8 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d803      	bhi.n	8002286 <HAL_SPI_Receive+0x1cc>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002284:	d102      	bne.n	800228c <HAL_SPI_Receive+0x1d2>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d102      	bne.n	8002292 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002290:	e017      	b.n	80022c2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002296:	b29b      	uxth	r3, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1cd      	bne.n	8002238 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	6839      	ldr	r1, [r7, #0]
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 fb57 	bl	8002954 <SPI_EndRxTransaction>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d002      	beq.n	80022b2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2220      	movs	r2, #32
 80022b0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d002      	beq.n	80022c0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	75fb      	strb	r3, [r7, #23]
 80022be:	e000      	b.n	80022c2 <HAL_SPI_Receive+0x208>
  }

error :
 80022c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80022d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08c      	sub	sp, #48	; 0x30
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
 80022e8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80022ea:	2301      	movs	r3, #1
 80022ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d101      	bne.n	8002302 <HAL_SPI_TransmitReceive+0x26>
 80022fe:	2302      	movs	r3, #2
 8002300:	e18a      	b.n	8002618 <HAL_SPI_TransmitReceive+0x33c>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800230a:	f7fe fced 	bl	8000ce8 <HAL_GetTick>
 800230e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002320:	887b      	ldrh	r3, [r7, #2]
 8002322:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002324:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002328:	2b01      	cmp	r3, #1
 800232a:	d00f      	beq.n	800234c <HAL_SPI_TransmitReceive+0x70>
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002332:	d107      	bne.n	8002344 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d103      	bne.n	8002344 <HAL_SPI_TransmitReceive+0x68>
 800233c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002340:	2b04      	cmp	r3, #4
 8002342:	d003      	beq.n	800234c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002344:	2302      	movs	r3, #2
 8002346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800234a:	e15b      	b.n	8002604 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d005      	beq.n	800235e <HAL_SPI_TransmitReceive+0x82>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d002      	beq.n	800235e <HAL_SPI_TransmitReceive+0x82>
 8002358:	887b      	ldrh	r3, [r7, #2]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d103      	bne.n	8002366 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002364:	e14e      	b.n	8002604 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b04      	cmp	r3, #4
 8002370:	d003      	beq.n	800237a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2205      	movs	r2, #5
 8002376:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	887a      	ldrh	r2, [r7, #2]
 800238a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	887a      	ldrh	r2, [r7, #2]
 8002390:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	887a      	ldrh	r2, [r7, #2]
 800239c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	887a      	ldrh	r2, [r7, #2]
 80023a2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ba:	2b40      	cmp	r3, #64	; 0x40
 80023bc:	d007      	beq.n	80023ce <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023d6:	d178      	bne.n	80024ca <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d002      	beq.n	80023e6 <HAL_SPI_TransmitReceive+0x10a>
 80023e0:	8b7b      	ldrh	r3, [r7, #26]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d166      	bne.n	80024b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	881a      	ldrh	r2, [r3, #0]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	1c9a      	adds	r2, r3, #2
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002400:	b29b      	uxth	r3, r3
 8002402:	3b01      	subs	r3, #1
 8002404:	b29a      	uxth	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800240a:	e053      	b.n	80024b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b02      	cmp	r3, #2
 8002418:	d11b      	bne.n	8002452 <HAL_SPI_TransmitReceive+0x176>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800241e:	b29b      	uxth	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	d016      	beq.n	8002452 <HAL_SPI_TransmitReceive+0x176>
 8002424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002426:	2b01      	cmp	r3, #1
 8002428:	d113      	bne.n	8002452 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	881a      	ldrh	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	1c9a      	adds	r2, r3, #2
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002444:	b29b      	uxth	r3, r3
 8002446:	3b01      	subs	r3, #1
 8002448:	b29a      	uxth	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800244e:	2300      	movs	r3, #0
 8002450:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b01      	cmp	r3, #1
 800245e:	d119      	bne.n	8002494 <HAL_SPI_TransmitReceive+0x1b8>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002464:	b29b      	uxth	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d014      	beq.n	8002494 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002474:	b292      	uxth	r2, r2
 8002476:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247c:	1c9a      	adds	r2, r3, #2
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002486:	b29b      	uxth	r3, r3
 8002488:	3b01      	subs	r3, #1
 800248a:	b29a      	uxth	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002490:	2301      	movs	r3, #1
 8002492:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002494:	f7fe fc28 	bl	8000ce8 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d807      	bhi.n	80024b4 <HAL_SPI_TransmitReceive+0x1d8>
 80024a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024aa:	d003      	beq.n	80024b4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80024b2:	e0a7      	b.n	8002604 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1a6      	bne.n	800240c <HAL_SPI_TransmitReceive+0x130>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1a1      	bne.n	800240c <HAL_SPI_TransmitReceive+0x130>
 80024c8:	e07c      	b.n	80025c4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <HAL_SPI_TransmitReceive+0x1fc>
 80024d2:	8b7b      	ldrh	r3, [r7, #26]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d16b      	bne.n	80025b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	330c      	adds	r3, #12
 80024e2:	7812      	ldrb	r2, [r2, #0]
 80024e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	3b01      	subs	r3, #1
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024fe:	e057      	b.n	80025b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b02      	cmp	r3, #2
 800250c:	d11c      	bne.n	8002548 <HAL_SPI_TransmitReceive+0x26c>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002512:	b29b      	uxth	r3, r3
 8002514:	2b00      	cmp	r3, #0
 8002516:	d017      	beq.n	8002548 <HAL_SPI_TransmitReceive+0x26c>
 8002518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251a:	2b01      	cmp	r3, #1
 800251c:	d114      	bne.n	8002548 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	330c      	adds	r3, #12
 8002528:	7812      	ldrb	r2, [r2, #0]
 800252a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800253a:	b29b      	uxth	r3, r3
 800253c:	3b01      	subs	r3, #1
 800253e:	b29a      	uxth	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b01      	cmp	r3, #1
 8002554:	d119      	bne.n	800258a <HAL_SPI_TransmitReceive+0x2ae>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800255a:	b29b      	uxth	r3, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	d014      	beq.n	800258a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800257c:	b29b      	uxth	r3, r3
 800257e:	3b01      	subs	r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002586:	2301      	movs	r3, #1
 8002588:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800258a:	f7fe fbad 	bl	8000ce8 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002596:	429a      	cmp	r2, r3
 8002598:	d803      	bhi.n	80025a2 <HAL_SPI_TransmitReceive+0x2c6>
 800259a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800259c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a0:	d102      	bne.n	80025a8 <HAL_SPI_TransmitReceive+0x2cc>
 80025a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d103      	bne.n	80025b0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80025ae:	e029      	b.n	8002604 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1a2      	bne.n	8002500 <HAL_SPI_TransmitReceive+0x224>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025be:	b29b      	uxth	r3, r3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d19d      	bne.n	8002500 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 fa29 	bl	8002a20 <SPI_EndRxTxTransaction>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d006      	beq.n	80025e2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2220      	movs	r2, #32
 80025de:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80025e0:	e010      	b.n	8002604 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10b      	bne.n	8002602 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	e000      	b.n	8002604 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002602:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002614:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002618:	4618      	mov	r0, r3
 800261a:	3730      	adds	r7, #48	; 0x30
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10e      	bne.n	8002660 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002648:	2b00      	cmp	r3, #0
 800264a:	d009      	beq.n	8002660 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002652:	2b00      	cmp	r3, #0
 8002654:	d004      	beq.n	8002660 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	4798      	blx	r3
    return;
 800265e:	e0ce      	b.n	80027fe <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d009      	beq.n	800267e <HAL_SPI_IRQHandler+0x5e>
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002670:	2b00      	cmp	r3, #0
 8002672:	d004      	beq.n	800267e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	4798      	blx	r3
    return;
 800267c:	e0bf      	b.n	80027fe <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	f003 0320 	and.w	r3, r3, #32
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10a      	bne.n	800269e <HAL_SPI_IRQHandler+0x7e>
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800268e:	2b00      	cmp	r3, #0
 8002690:	d105      	bne.n	800269e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 80b0 	beq.w	80027fe <HAL_SPI_IRQHandler+0x1de>
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	f003 0320 	and.w	r3, r3, #32
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 80aa 	beq.w	80027fe <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d023      	beq.n	80026fc <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b03      	cmp	r3, #3
 80026be:	d011      	beq.n	80026e4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c4:	f043 0204 	orr.w	r2, r3, #4
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	617b      	str	r3, [r7, #20]
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	e00b      	b.n	80026fc <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026e4:	2300      	movs	r3, #0
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	613b      	str	r3, [r7, #16]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	613b      	str	r3, [r7, #16]
 80026f8:	693b      	ldr	r3, [r7, #16]
        return;
 80026fa:	e080      	b.n	80027fe <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	f003 0320 	and.w	r3, r3, #32
 8002702:	2b00      	cmp	r3, #0
 8002704:	d014      	beq.n	8002730 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270a:	f043 0201 	orr.w	r2, r3, #1
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00c      	beq.n	8002754 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273e:	f043 0208 	orr.w	r2, r3, #8
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002746:	2300      	movs	r3, #0
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	60bb      	str	r3, [r7, #8]
 8002752:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002758:	2b00      	cmp	r3, #0
 800275a:	d04f      	beq.n	80027fc <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800276a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d104      	bne.n	8002788 <HAL_SPI_IRQHandler+0x168>
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b00      	cmp	r3, #0
 8002786:	d034      	beq.n	80027f2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0203 	bic.w	r2, r2, #3
 8002796:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279c:	2b00      	cmp	r3, #0
 800279e:	d011      	beq.n	80027c4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a4:	4a17      	ldr	r2, [pc, #92]	; (8002804 <HAL_SPI_IRQHandler+0x1e4>)
 80027a6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7fe fc1d 	bl	8000fec <HAL_DMA_Abort_IT>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d005      	beq.n	80027c4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d016      	beq.n	80027fa <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027d0:	4a0c      	ldr	r2, [pc, #48]	; (8002804 <HAL_SPI_IRQHandler+0x1e4>)
 80027d2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fe fc07 	bl	8000fec <HAL_DMA_Abort_IT>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00a      	beq.n	80027fa <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80027f0:	e003      	b.n	80027fa <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f808 	bl	8002808 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80027f8:	e000      	b.n	80027fc <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80027fa:	bf00      	nop
    return;
 80027fc:	bf00      	nop
  }
}
 80027fe:	3720      	adds	r7, #32
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	0800281d 	.word	0x0800281d

08002808 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002828:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f7ff ffe6 	bl	8002808 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800283c:	bf00      	nop
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b088      	sub	sp, #32
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	603b      	str	r3, [r7, #0]
 8002850:	4613      	mov	r3, r2
 8002852:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002854:	f7fe fa48 	bl	8000ce8 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285c:	1a9b      	subs	r3, r3, r2
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	4413      	add	r3, r2
 8002862:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002864:	f7fe fa40 	bl	8000ce8 <HAL_GetTick>
 8002868:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800286a:	4b39      	ldr	r3, [pc, #228]	; (8002950 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	015b      	lsls	r3, r3, #5
 8002870:	0d1b      	lsrs	r3, r3, #20
 8002872:	69fa      	ldr	r2, [r7, #28]
 8002874:	fb02 f303 	mul.w	r3, r2, r3
 8002878:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800287a:	e054      	b.n	8002926 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002882:	d050      	beq.n	8002926 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002884:	f7fe fa30 	bl	8000ce8 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	69fa      	ldr	r2, [r7, #28]
 8002890:	429a      	cmp	r2, r3
 8002892:	d902      	bls.n	800289a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d13d      	bne.n	8002916 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028b2:	d111      	bne.n	80028d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028bc:	d004      	beq.n	80028c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c6:	d107      	bne.n	80028d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028e0:	d10f      	bne.n	8002902 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002900:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e017      	b.n	8002946 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800291c:	2300      	movs	r3, #0
 800291e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	3b01      	subs	r3, #1
 8002924:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	4013      	ands	r3, r2
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	429a      	cmp	r2, r3
 8002934:	bf0c      	ite	eq
 8002936:	2301      	moveq	r3, #1
 8002938:	2300      	movne	r3, #0
 800293a:	b2db      	uxtb	r3, r3
 800293c:	461a      	mov	r2, r3
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	429a      	cmp	r2, r3
 8002942:	d19b      	bne.n	800287c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3720      	adds	r7, #32
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	20000004 	.word	0x20000004

08002954 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af02      	add	r7, sp, #8
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002968:	d111      	bne.n	800298e <SPI_EndRxTransaction+0x3a>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002972:	d004      	beq.n	800297e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800297c:	d107      	bne.n	800298e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800298c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002996:	d12a      	bne.n	80029ee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029a0:	d012      	beq.n	80029c8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2200      	movs	r2, #0
 80029aa:	2180      	movs	r1, #128	; 0x80
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f7ff ff49 	bl	8002844 <SPI_WaitFlagStateUntilTimeout>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d02d      	beq.n	8002a14 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029bc:	f043 0220 	orr.w	r2, r3, #32
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e026      	b.n	8002a16 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2200      	movs	r2, #0
 80029d0:	2101      	movs	r1, #1
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f7ff ff36 	bl	8002844 <SPI_WaitFlagStateUntilTimeout>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d01a      	beq.n	8002a14 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e2:	f043 0220 	orr.w	r2, r3, #32
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e013      	b.n	8002a16 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2200      	movs	r2, #0
 80029f6:	2101      	movs	r1, #1
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f7ff ff23 	bl	8002844 <SPI_WaitFlagStateUntilTimeout>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d007      	beq.n	8002a14 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a08:	f043 0220 	orr.w	r2, r3, #32
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e000      	b.n	8002a16 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af02      	add	r7, sp, #8
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002a2c:	4b1b      	ldr	r3, [pc, #108]	; (8002a9c <SPI_EndRxTxTransaction+0x7c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a1b      	ldr	r2, [pc, #108]	; (8002aa0 <SPI_EndRxTxTransaction+0x80>)
 8002a32:	fba2 2303 	umull	r2, r3, r2, r3
 8002a36:	0d5b      	lsrs	r3, r3, #21
 8002a38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a3c:	fb02 f303 	mul.w	r3, r2, r3
 8002a40:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a4a:	d112      	bne.n	8002a72 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2200      	movs	r2, #0
 8002a54:	2180      	movs	r1, #128	; 0x80
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f7ff fef4 	bl	8002844 <SPI_WaitFlagStateUntilTimeout>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d016      	beq.n	8002a90 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a66:	f043 0220 	orr.w	r2, r3, #32
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e00f      	b.n	8002a92 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00a      	beq.n	8002a8e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a88:	2b80      	cmp	r3, #128	; 0x80
 8002a8a:	d0f2      	beq.n	8002a72 <SPI_EndRxTxTransaction+0x52>
 8002a8c:	e000      	b.n	8002a90 <SPI_EndRxTxTransaction+0x70>
        break;
 8002a8e:	bf00      	nop
  }

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20000004 	.word	0x20000004
 8002aa0:	165e9f81 	.word	0x165e9f81

08002aa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e041      	b.n	8002b3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d106      	bne.n	8002ad0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f839 	bl	8002b42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3304      	adds	r3, #4
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	f000 f9ca 	bl	8002e7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
	...

08002b58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d001      	beq.n	8002b70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e044      	b.n	8002bfa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2202      	movs	r2, #2
 8002b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68da      	ldr	r2, [r3, #12]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f042 0201 	orr.w	r2, r2, #1
 8002b86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a1e      	ldr	r2, [pc, #120]	; (8002c08 <HAL_TIM_Base_Start_IT+0xb0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d018      	beq.n	8002bc4 <HAL_TIM_Base_Start_IT+0x6c>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b9a:	d013      	beq.n	8002bc4 <HAL_TIM_Base_Start_IT+0x6c>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a1a      	ldr	r2, [pc, #104]	; (8002c0c <HAL_TIM_Base_Start_IT+0xb4>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d00e      	beq.n	8002bc4 <HAL_TIM_Base_Start_IT+0x6c>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a19      	ldr	r2, [pc, #100]	; (8002c10 <HAL_TIM_Base_Start_IT+0xb8>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d009      	beq.n	8002bc4 <HAL_TIM_Base_Start_IT+0x6c>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a17      	ldr	r2, [pc, #92]	; (8002c14 <HAL_TIM_Base_Start_IT+0xbc>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d004      	beq.n	8002bc4 <HAL_TIM_Base_Start_IT+0x6c>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a16      	ldr	r2, [pc, #88]	; (8002c18 <HAL_TIM_Base_Start_IT+0xc0>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d111      	bne.n	8002be8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2b06      	cmp	r3, #6
 8002bd4:	d010      	beq.n	8002bf8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f042 0201 	orr.w	r2, r2, #1
 8002be4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be6:	e007      	b.n	8002bf8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0201 	orr.w	r2, r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	40010000 	.word	0x40010000
 8002c0c:	40000400 	.word	0x40000400
 8002c10:	40000800 	.word	0x40000800
 8002c14:	40000c00 	.word	0x40000c00
 8002c18:	40014000 	.word	0x40014000

08002c1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d122      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d11b      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f06f 0202 	mvn.w	r2, #2
 8002c48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f8ee 	bl	8002e40 <HAL_TIM_IC_CaptureCallback>
 8002c64:	e005      	b.n	8002c72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f8e0 	bl	8002e2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f8f1 	bl	8002e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f003 0304 	and.w	r3, r3, #4
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d122      	bne.n	8002ccc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b04      	cmp	r3, #4
 8002c92:	d11b      	bne.n	8002ccc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f06f 0204 	mvn.w	r2, #4
 8002c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f8c4 	bl	8002e40 <HAL_TIM_IC_CaptureCallback>
 8002cb8:	e005      	b.n	8002cc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f8b6 	bl	8002e2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f8c7 	bl	8002e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d122      	bne.n	8002d20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f003 0308 	and.w	r3, r3, #8
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d11b      	bne.n	8002d20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f06f 0208 	mvn.w	r2, #8
 8002cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2204      	movs	r2, #4
 8002cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f89a 	bl	8002e40 <HAL_TIM_IC_CaptureCallback>
 8002d0c:	e005      	b.n	8002d1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f88c 	bl	8002e2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f89d 	bl	8002e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	f003 0310 	and.w	r3, r3, #16
 8002d2a:	2b10      	cmp	r3, #16
 8002d2c:	d122      	bne.n	8002d74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f003 0310 	and.w	r3, r3, #16
 8002d38:	2b10      	cmp	r3, #16
 8002d3a:	d11b      	bne.n	8002d74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f06f 0210 	mvn.w	r2, #16
 8002d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2208      	movs	r2, #8
 8002d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f870 	bl	8002e40 <HAL_TIM_IC_CaptureCallback>
 8002d60:	e005      	b.n	8002d6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f862 	bl	8002e2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 f873 	bl	8002e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d10e      	bne.n	8002da0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d107      	bne.n	8002da0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f06f 0201 	mvn.w	r2, #1
 8002d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7fd fc90 	bl	80006c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002daa:	2b80      	cmp	r3, #128	; 0x80
 8002dac:	d10e      	bne.n	8002dcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db8:	2b80      	cmp	r3, #128	; 0x80
 8002dba:	d107      	bne.n	8002dcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f8e2 	bl	8002f90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd6:	2b40      	cmp	r3, #64	; 0x40
 8002dd8:	d10e      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de4:	2b40      	cmp	r3, #64	; 0x40
 8002de6:	d107      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f838 	bl	8002e68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	f003 0320 	and.w	r3, r3, #32
 8002e02:	2b20      	cmp	r3, #32
 8002e04:	d10e      	bne.n	8002e24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f003 0320 	and.w	r3, r3, #32
 8002e10:	2b20      	cmp	r3, #32
 8002e12:	d107      	bne.n	8002e24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f06f 0220 	mvn.w	r2, #32
 8002e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f8ac 	bl	8002f7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e24:	bf00      	nop
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a34      	ldr	r2, [pc, #208]	; (8002f60 <TIM_Base_SetConfig+0xe4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d00f      	beq.n	8002eb4 <TIM_Base_SetConfig+0x38>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e9a:	d00b      	beq.n	8002eb4 <TIM_Base_SetConfig+0x38>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a31      	ldr	r2, [pc, #196]	; (8002f64 <TIM_Base_SetConfig+0xe8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d007      	beq.n	8002eb4 <TIM_Base_SetConfig+0x38>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a30      	ldr	r2, [pc, #192]	; (8002f68 <TIM_Base_SetConfig+0xec>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d003      	beq.n	8002eb4 <TIM_Base_SetConfig+0x38>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a2f      	ldr	r2, [pc, #188]	; (8002f6c <TIM_Base_SetConfig+0xf0>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d108      	bne.n	8002ec6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a25      	ldr	r2, [pc, #148]	; (8002f60 <TIM_Base_SetConfig+0xe4>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d01b      	beq.n	8002f06 <TIM_Base_SetConfig+0x8a>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed4:	d017      	beq.n	8002f06 <TIM_Base_SetConfig+0x8a>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a22      	ldr	r2, [pc, #136]	; (8002f64 <TIM_Base_SetConfig+0xe8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d013      	beq.n	8002f06 <TIM_Base_SetConfig+0x8a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a21      	ldr	r2, [pc, #132]	; (8002f68 <TIM_Base_SetConfig+0xec>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d00f      	beq.n	8002f06 <TIM_Base_SetConfig+0x8a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a20      	ldr	r2, [pc, #128]	; (8002f6c <TIM_Base_SetConfig+0xf0>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d00b      	beq.n	8002f06 <TIM_Base_SetConfig+0x8a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a1f      	ldr	r2, [pc, #124]	; (8002f70 <TIM_Base_SetConfig+0xf4>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d007      	beq.n	8002f06 <TIM_Base_SetConfig+0x8a>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a1e      	ldr	r2, [pc, #120]	; (8002f74 <TIM_Base_SetConfig+0xf8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d003      	beq.n	8002f06 <TIM_Base_SetConfig+0x8a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a1d      	ldr	r2, [pc, #116]	; (8002f78 <TIM_Base_SetConfig+0xfc>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d108      	bne.n	8002f18 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a08      	ldr	r2, [pc, #32]	; (8002f60 <TIM_Base_SetConfig+0xe4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d103      	bne.n	8002f4c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	691a      	ldr	r2, [r3, #16]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	615a      	str	r2, [r3, #20]
}
 8002f52:	bf00      	nop
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	40010000 	.word	0x40010000
 8002f64:	40000400 	.word	0x40000400
 8002f68:	40000800 	.word	0x40000800
 8002f6c:	40000c00 	.word	0x40000c00
 8002f70:	40014000 	.word	0x40014000
 8002f74:	40014400 	.word	0x40014400
 8002f78:	40014800 	.word	0x40014800

08002f7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e03f      	b.n	8003036 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d106      	bne.n	8002fd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7fd fddc 	bl	8000b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2224      	movs	r2, #36	; 0x24
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fe6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 fc7b 	bl	80038e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	691a      	ldr	r2, [r3, #16]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ffc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	695a      	ldr	r2, [r3, #20]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800300c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800301c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2220      	movs	r2, #32
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2220      	movs	r2, #32
 8003030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b0ba      	sub	sp, #232	; 0xe8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003066:	2300      	movs	r3, #0
 8003068:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800306c:	2300      	movs	r3, #0
 800306e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800307e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10f      	bne.n	80030a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800308a:	f003 0320 	and.w	r3, r3, #32
 800308e:	2b00      	cmp	r3, #0
 8003090:	d009      	beq.n	80030a6 <HAL_UART_IRQHandler+0x66>
 8003092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003096:	f003 0320 	and.w	r3, r3, #32
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fb65 	bl	800376e <UART_Receive_IT>
      return;
 80030a4:	e256      	b.n	8003554 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80030a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 80de 	beq.w	800326c <HAL_UART_IRQHandler+0x22c>
 80030b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d106      	bne.n	80030ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 80d1 	beq.w	800326c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00b      	beq.n	80030ee <HAL_UART_IRQHandler+0xae>
 80030d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d005      	beq.n	80030ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	f043 0201 	orr.w	r2, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030f2:	f003 0304 	and.w	r3, r3, #4
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00b      	beq.n	8003112 <HAL_UART_IRQHandler+0xd2>
 80030fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d005      	beq.n	8003112 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	f043 0202 	orr.w	r2, r3, #2
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00b      	beq.n	8003136 <HAL_UART_IRQHandler+0xf6>
 800311e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d005      	beq.n	8003136 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	f043 0204 	orr.w	r2, r3, #4
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800313a:	f003 0308 	and.w	r3, r3, #8
 800313e:	2b00      	cmp	r3, #0
 8003140:	d011      	beq.n	8003166 <HAL_UART_IRQHandler+0x126>
 8003142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003146:	f003 0320 	and.w	r3, r3, #32
 800314a:	2b00      	cmp	r3, #0
 800314c:	d105      	bne.n	800315a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800314e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d005      	beq.n	8003166 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f043 0208 	orr.w	r2, r3, #8
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 81ed 	beq.w	800354a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003174:	f003 0320 	and.w	r3, r3, #32
 8003178:	2b00      	cmp	r3, #0
 800317a:	d008      	beq.n	800318e <HAL_UART_IRQHandler+0x14e>
 800317c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003180:	f003 0320 	and.w	r3, r3, #32
 8003184:	2b00      	cmp	r3, #0
 8003186:	d002      	beq.n	800318e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 faf0 	bl	800376e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003198:	2b40      	cmp	r3, #64	; 0x40
 800319a:	bf0c      	ite	eq
 800319c:	2301      	moveq	r3, #1
 800319e:	2300      	movne	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d103      	bne.n	80031ba <HAL_UART_IRQHandler+0x17a>
 80031b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d04f      	beq.n	800325a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f9f8 	bl	80035b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ca:	2b40      	cmp	r3, #64	; 0x40
 80031cc:	d141      	bne.n	8003252 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	3314      	adds	r3, #20
 80031d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031dc:	e853 3f00 	ldrex	r3, [r3]
 80031e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80031e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3314      	adds	r3, #20
 80031f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80031fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80031fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003202:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003206:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800320a:	e841 2300 	strex	r3, r2, [r1]
 800320e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003212:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1d9      	bne.n	80031ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321e:	2b00      	cmp	r3, #0
 8003220:	d013      	beq.n	800324a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	4a7d      	ldr	r2, [pc, #500]	; (800341c <HAL_UART_IRQHandler+0x3dc>)
 8003228:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	4618      	mov	r0, r3
 8003230:	f7fd fedc 	bl	8000fec <HAL_DMA_Abort_IT>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d016      	beq.n	8003268 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003244:	4610      	mov	r0, r2
 8003246:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003248:	e00e      	b.n	8003268 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f99a 	bl	8003584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003250:	e00a      	b.n	8003268 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f996 	bl	8003584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003258:	e006      	b.n	8003268 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f992 	bl	8003584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003266:	e170      	b.n	800354a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003268:	bf00      	nop
    return;
 800326a:	e16e      	b.n	800354a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003270:	2b01      	cmp	r3, #1
 8003272:	f040 814a 	bne.w	800350a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800327a:	f003 0310 	and.w	r3, r3, #16
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 8143 	beq.w	800350a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003288:	f003 0310 	and.w	r3, r3, #16
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 813c 	beq.w	800350a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003292:	2300      	movs	r3, #0
 8003294:	60bb      	str	r3, [r7, #8]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	60bb      	str	r3, [r7, #8]
 80032a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b2:	2b40      	cmp	r3, #64	; 0x40
 80032b4:	f040 80b4 	bne.w	8003420 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 8140 	beq.w	800354e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032d6:	429a      	cmp	r2, r3
 80032d8:	f080 8139 	bcs.w	800354e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ee:	f000 8088 	beq.w	8003402 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	330c      	adds	r3, #12
 80032f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003300:	e853 3f00 	ldrex	r3, [r3]
 8003304:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003308:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800330c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003310:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	330c      	adds	r3, #12
 800331a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800331e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003322:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003326:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800332a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800332e:	e841 2300 	strex	r3, r2, [r1]
 8003332:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003336:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1d9      	bne.n	80032f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	3314      	adds	r3, #20
 8003344:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003346:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003348:	e853 3f00 	ldrex	r3, [r3]
 800334c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800334e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003350:	f023 0301 	bic.w	r3, r3, #1
 8003354:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	3314      	adds	r3, #20
 800335e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003362:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003366:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003368:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800336a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800336e:	e841 2300 	strex	r3, r2, [r1]
 8003372:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003374:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1e1      	bne.n	800333e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	3314      	adds	r3, #20
 8003380:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003382:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003384:	e853 3f00 	ldrex	r3, [r3]
 8003388:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800338a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800338c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003390:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	3314      	adds	r3, #20
 800339a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800339e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80033a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80033a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033a6:	e841 2300 	strex	r3, r2, [r1]
 80033aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80033ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1e3      	bne.n	800337a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2220      	movs	r2, #32
 80033b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	330c      	adds	r3, #12
 80033c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033ca:	e853 3f00 	ldrex	r3, [r3]
 80033ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80033d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033d2:	f023 0310 	bic.w	r3, r3, #16
 80033d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	330c      	adds	r3, #12
 80033e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80033e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80033e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033ec:	e841 2300 	strex	r3, r2, [r1]
 80033f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80033f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1e3      	bne.n	80033c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7fd fd85 	bl	8000f0c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800340a:	b29b      	uxth	r3, r3
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	b29b      	uxth	r3, r3
 8003410:	4619      	mov	r1, r3
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f8c0 	bl	8003598 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003418:	e099      	b.n	800354e <HAL_UART_IRQHandler+0x50e>
 800341a:	bf00      	nop
 800341c:	08003677 	.word	0x08003677
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003428:	b29b      	uxth	r3, r3
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003434:	b29b      	uxth	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 808b 	beq.w	8003552 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800343c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 8086 	beq.w	8003552 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	330c      	adds	r3, #12
 800344c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003450:	e853 3f00 	ldrex	r3, [r3]
 8003454:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003458:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800345c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	330c      	adds	r3, #12
 8003466:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800346a:	647a      	str	r2, [r7, #68]	; 0x44
 800346c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003470:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003472:	e841 2300 	strex	r3, r2, [r1]
 8003476:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1e3      	bne.n	8003446 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	3314      	adds	r3, #20
 8003484:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	e853 3f00 	ldrex	r3, [r3]
 800348c:	623b      	str	r3, [r7, #32]
   return(result);
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	f023 0301 	bic.w	r3, r3, #1
 8003494:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	3314      	adds	r3, #20
 800349e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80034a2:	633a      	str	r2, [r7, #48]	; 0x30
 80034a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034aa:	e841 2300 	strex	r3, r2, [r1]
 80034ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1e3      	bne.n	800347e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2220      	movs	r2, #32
 80034ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	330c      	adds	r3, #12
 80034ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	e853 3f00 	ldrex	r3, [r3]
 80034d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 0310 	bic.w	r3, r3, #16
 80034da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	330c      	adds	r3, #12
 80034e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80034e8:	61fa      	str	r2, [r7, #28]
 80034ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ec:	69b9      	ldr	r1, [r7, #24]
 80034ee:	69fa      	ldr	r2, [r7, #28]
 80034f0:	e841 2300 	strex	r3, r2, [r1]
 80034f4:	617b      	str	r3, [r7, #20]
   return(result);
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1e3      	bne.n	80034c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003500:	4619      	mov	r1, r3
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f848 	bl	8003598 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003508:	e023      	b.n	8003552 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800350a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800350e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003512:	2b00      	cmp	r3, #0
 8003514:	d009      	beq.n	800352a <HAL_UART_IRQHandler+0x4ea>
 8003516:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800351a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f8bb 	bl	800369e <UART_Transmit_IT>
    return;
 8003528:	e014      	b.n	8003554 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800352a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800352e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00e      	beq.n	8003554 <HAL_UART_IRQHandler+0x514>
 8003536:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800353a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353e:	2b00      	cmp	r3, #0
 8003540:	d008      	beq.n	8003554 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f8fb 	bl	800373e <UART_EndTransmit_IT>
    return;
 8003548:	e004      	b.n	8003554 <HAL_UART_IRQHandler+0x514>
    return;
 800354a:	bf00      	nop
 800354c:	e002      	b.n	8003554 <HAL_UART_IRQHandler+0x514>
      return;
 800354e:	bf00      	nop
 8003550:	e000      	b.n	8003554 <HAL_UART_IRQHandler+0x514>
      return;
 8003552:	bf00      	nop
  }
}
 8003554:	37e8      	adds	r7, #232	; 0xe8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop

0800355c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	460b      	mov	r3, r1
 80035a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b095      	sub	sp, #84	; 0x54
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	330c      	adds	r3, #12
 80035be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c2:	e853 3f00 	ldrex	r3, [r3]
 80035c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80035c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	330c      	adds	r3, #12
 80035d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035d8:	643a      	str	r2, [r7, #64]	; 0x40
 80035da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80035de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035e0:	e841 2300 	strex	r3, r2, [r1]
 80035e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1e5      	bne.n	80035b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	3314      	adds	r3, #20
 80035f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f4:	6a3b      	ldr	r3, [r7, #32]
 80035f6:	e853 3f00 	ldrex	r3, [r3]
 80035fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	f023 0301 	bic.w	r3, r3, #1
 8003602:	64bb      	str	r3, [r7, #72]	; 0x48
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	3314      	adds	r3, #20
 800360a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800360c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800360e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003610:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003612:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003614:	e841 2300 	strex	r3, r2, [r1]
 8003618:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1e5      	bne.n	80035ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003624:	2b01      	cmp	r3, #1
 8003626:	d119      	bne.n	800365c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	330c      	adds	r3, #12
 800362e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	e853 3f00 	ldrex	r3, [r3]
 8003636:	60bb      	str	r3, [r7, #8]
   return(result);
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f023 0310 	bic.w	r3, r3, #16
 800363e:	647b      	str	r3, [r7, #68]	; 0x44
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	330c      	adds	r3, #12
 8003646:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003648:	61ba      	str	r2, [r7, #24]
 800364a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364c:	6979      	ldr	r1, [r7, #20]
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	e841 2300 	strex	r3, r2, [r1]
 8003654:	613b      	str	r3, [r7, #16]
   return(result);
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1e5      	bne.n	8003628 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2220      	movs	r2, #32
 8003660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	631a      	str	r2, [r3, #48]	; 0x30
}
 800366a:	bf00      	nop
 800366c:	3754      	adds	r7, #84	; 0x54
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b084      	sub	sp, #16
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003682:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f7ff ff77 	bl	8003584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003696:	bf00      	nop
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800369e:	b480      	push	{r7}
 80036a0:	b085      	sub	sp, #20
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b21      	cmp	r3, #33	; 0x21
 80036b0:	d13e      	bne.n	8003730 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ba:	d114      	bne.n	80036e6 <UART_Transmit_IT+0x48>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d110      	bne.n	80036e6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	461a      	mov	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	1c9a      	adds	r2, r3, #2
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	621a      	str	r2, [r3, #32]
 80036e4:	e008      	b.n	80036f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	1c59      	adds	r1, r3, #1
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	6211      	str	r1, [r2, #32]
 80036f0:	781a      	ldrb	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	3b01      	subs	r3, #1
 8003700:	b29b      	uxth	r3, r3
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	4619      	mov	r1, r3
 8003706:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10f      	bne.n	800372c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68da      	ldr	r2, [r3, #12]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800371a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800372a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	e000      	b.n	8003732 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003730:	2302      	movs	r3, #2
  }
}
 8003732:	4618      	mov	r0, r3
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b082      	sub	sp, #8
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003754:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7ff fefc 	bl	800355c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b08c      	sub	sp, #48	; 0x30
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b22      	cmp	r3, #34	; 0x22
 8003780:	f040 80ab 	bne.w	80038da <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800378c:	d117      	bne.n	80037be <UART_Receive_IT+0x50>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d113      	bne.n	80037be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003796:	2300      	movs	r3, #0
 8003798:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b6:	1c9a      	adds	r2, r3, #2
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	629a      	str	r2, [r3, #40]	; 0x28
 80037bc:	e026      	b.n	800380c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80037c4:	2300      	movs	r3, #0
 80037c6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d0:	d007      	beq.n	80037e2 <UART_Receive_IT+0x74>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10a      	bne.n	80037f0 <UART_Receive_IT+0x82>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d106      	bne.n	80037f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ec:	701a      	strb	r2, [r3, #0]
 80037ee:	e008      	b.n	8003802 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003800:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003806:	1c5a      	adds	r2, r3, #1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003810:	b29b      	uxth	r3, r3
 8003812:	3b01      	subs	r3, #1
 8003814:	b29b      	uxth	r3, r3
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	4619      	mov	r1, r3
 800381a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800381c:	2b00      	cmp	r3, #0
 800381e:	d15a      	bne.n	80038d6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68da      	ldr	r2, [r3, #12]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0220 	bic.w	r2, r2, #32
 800382e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68da      	ldr	r2, [r3, #12]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800383e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695a      	ldr	r2, [r3, #20]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0201 	bic.w	r2, r2, #1
 800384e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2220      	movs	r2, #32
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385c:	2b01      	cmp	r3, #1
 800385e:	d135      	bne.n	80038cc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	330c      	adds	r3, #12
 800386c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	e853 3f00 	ldrex	r3, [r3]
 8003874:	613b      	str	r3, [r7, #16]
   return(result);
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f023 0310 	bic.w	r3, r3, #16
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	330c      	adds	r3, #12
 8003884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003886:	623a      	str	r2, [r7, #32]
 8003888:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388a:	69f9      	ldr	r1, [r7, #28]
 800388c:	6a3a      	ldr	r2, [r7, #32]
 800388e:	e841 2300 	strex	r3, r2, [r1]
 8003892:	61bb      	str	r3, [r7, #24]
   return(result);
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1e5      	bne.n	8003866 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0310 	and.w	r3, r3, #16
 80038a4:	2b10      	cmp	r3, #16
 80038a6:	d10a      	bne.n	80038be <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038a8:	2300      	movs	r3, #0
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038c2:	4619      	mov	r1, r3
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7ff fe67 	bl	8003598 <HAL_UARTEx_RxEventCallback>
 80038ca:	e002      	b.n	80038d2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f7ff fe4f 	bl	8003570 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	e002      	b.n	80038dc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80038d6:	2300      	movs	r3, #0
 80038d8:	e000      	b.n	80038dc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80038da:	2302      	movs	r3, #2
  }
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3730      	adds	r7, #48	; 0x30
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038e8:	b0c0      	sub	sp, #256	; 0x100
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003900:	68d9      	ldr	r1, [r3, #12]
 8003902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	ea40 0301 	orr.w	r3, r0, r1
 800390c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800390e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	431a      	orrs	r2, r3
 800391c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	431a      	orrs	r2, r3
 8003924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	4313      	orrs	r3, r2
 800392c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800393c:	f021 010c 	bic.w	r1, r1, #12
 8003940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800394a:	430b      	orrs	r3, r1
 800394c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800394e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800395a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800395e:	6999      	ldr	r1, [r3, #24]
 8003960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	ea40 0301 	orr.w	r3, r0, r1
 800396a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800396c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	4b8f      	ldr	r3, [pc, #572]	; (8003bb0 <UART_SetConfig+0x2cc>)
 8003974:	429a      	cmp	r2, r3
 8003976:	d005      	beq.n	8003984 <UART_SetConfig+0xa0>
 8003978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	4b8d      	ldr	r3, [pc, #564]	; (8003bb4 <UART_SetConfig+0x2d0>)
 8003980:	429a      	cmp	r2, r3
 8003982:	d104      	bne.n	800398e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003984:	f7fe f98e 	bl	8001ca4 <HAL_RCC_GetPCLK2Freq>
 8003988:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800398c:	e003      	b.n	8003996 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800398e:	f7fe f975 	bl	8001c7c <HAL_RCC_GetPCLK1Freq>
 8003992:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039a0:	f040 810c 	bne.w	8003bbc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039a8:	2200      	movs	r2, #0
 80039aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80039ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80039b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80039b6:	4622      	mov	r2, r4
 80039b8:	462b      	mov	r3, r5
 80039ba:	1891      	adds	r1, r2, r2
 80039bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80039be:	415b      	adcs	r3, r3
 80039c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80039c6:	4621      	mov	r1, r4
 80039c8:	eb12 0801 	adds.w	r8, r2, r1
 80039cc:	4629      	mov	r1, r5
 80039ce:	eb43 0901 	adc.w	r9, r3, r1
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	f04f 0300 	mov.w	r3, #0
 80039da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039e6:	4690      	mov	r8, r2
 80039e8:	4699      	mov	r9, r3
 80039ea:	4623      	mov	r3, r4
 80039ec:	eb18 0303 	adds.w	r3, r8, r3
 80039f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039f4:	462b      	mov	r3, r5
 80039f6:	eb49 0303 	adc.w	r3, r9, r3
 80039fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a0a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a12:	460b      	mov	r3, r1
 8003a14:	18db      	adds	r3, r3, r3
 8003a16:	653b      	str	r3, [r7, #80]	; 0x50
 8003a18:	4613      	mov	r3, r2
 8003a1a:	eb42 0303 	adc.w	r3, r2, r3
 8003a1e:	657b      	str	r3, [r7, #84]	; 0x54
 8003a20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a28:	f7fc fbd4 	bl	80001d4 <__aeabi_uldivmod>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4b61      	ldr	r3, [pc, #388]	; (8003bb8 <UART_SetConfig+0x2d4>)
 8003a32:	fba3 2302 	umull	r2, r3, r3, r2
 8003a36:	095b      	lsrs	r3, r3, #5
 8003a38:	011c      	lsls	r4, r3, #4
 8003a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a44:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a4c:	4642      	mov	r2, r8
 8003a4e:	464b      	mov	r3, r9
 8003a50:	1891      	adds	r1, r2, r2
 8003a52:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a54:	415b      	adcs	r3, r3
 8003a56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a5c:	4641      	mov	r1, r8
 8003a5e:	eb12 0a01 	adds.w	sl, r2, r1
 8003a62:	4649      	mov	r1, r9
 8003a64:	eb43 0b01 	adc.w	fp, r3, r1
 8003a68:	f04f 0200 	mov.w	r2, #0
 8003a6c:	f04f 0300 	mov.w	r3, #0
 8003a70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a7c:	4692      	mov	sl, r2
 8003a7e:	469b      	mov	fp, r3
 8003a80:	4643      	mov	r3, r8
 8003a82:	eb1a 0303 	adds.w	r3, sl, r3
 8003a86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a8a:	464b      	mov	r3, r9
 8003a8c:	eb4b 0303 	adc.w	r3, fp, r3
 8003a90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003aa0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003aa4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	18db      	adds	r3, r3, r3
 8003aac:	643b      	str	r3, [r7, #64]	; 0x40
 8003aae:	4613      	mov	r3, r2
 8003ab0:	eb42 0303 	adc.w	r3, r2, r3
 8003ab4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ab6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003aba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003abe:	f7fc fb89 	bl	80001d4 <__aeabi_uldivmod>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	4b3b      	ldr	r3, [pc, #236]	; (8003bb8 <UART_SetConfig+0x2d4>)
 8003aca:	fba3 2301 	umull	r2, r3, r3, r1
 8003ace:	095b      	lsrs	r3, r3, #5
 8003ad0:	2264      	movs	r2, #100	; 0x64
 8003ad2:	fb02 f303 	mul.w	r3, r2, r3
 8003ad6:	1acb      	subs	r3, r1, r3
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ade:	4b36      	ldr	r3, [pc, #216]	; (8003bb8 <UART_SetConfig+0x2d4>)
 8003ae0:	fba3 2302 	umull	r2, r3, r3, r2
 8003ae4:	095b      	lsrs	r3, r3, #5
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003aec:	441c      	add	r4, r3
 8003aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003af2:	2200      	movs	r2, #0
 8003af4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003af8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003afc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b00:	4642      	mov	r2, r8
 8003b02:	464b      	mov	r3, r9
 8003b04:	1891      	adds	r1, r2, r2
 8003b06:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b08:	415b      	adcs	r3, r3
 8003b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b10:	4641      	mov	r1, r8
 8003b12:	1851      	adds	r1, r2, r1
 8003b14:	6339      	str	r1, [r7, #48]	; 0x30
 8003b16:	4649      	mov	r1, r9
 8003b18:	414b      	adcs	r3, r1
 8003b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	f04f 0300 	mov.w	r3, #0
 8003b24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b28:	4659      	mov	r1, fp
 8003b2a:	00cb      	lsls	r3, r1, #3
 8003b2c:	4651      	mov	r1, sl
 8003b2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b32:	4651      	mov	r1, sl
 8003b34:	00ca      	lsls	r2, r1, #3
 8003b36:	4610      	mov	r0, r2
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	4642      	mov	r2, r8
 8003b3e:	189b      	adds	r3, r3, r2
 8003b40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b44:	464b      	mov	r3, r9
 8003b46:	460a      	mov	r2, r1
 8003b48:	eb42 0303 	adc.w	r3, r2, r3
 8003b4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b5c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b64:	460b      	mov	r3, r1
 8003b66:	18db      	adds	r3, r3, r3
 8003b68:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	eb42 0303 	adc.w	r3, r2, r3
 8003b70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b7a:	f7fc fb2b 	bl	80001d4 <__aeabi_uldivmod>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	460b      	mov	r3, r1
 8003b82:	4b0d      	ldr	r3, [pc, #52]	; (8003bb8 <UART_SetConfig+0x2d4>)
 8003b84:	fba3 1302 	umull	r1, r3, r3, r2
 8003b88:	095b      	lsrs	r3, r3, #5
 8003b8a:	2164      	movs	r1, #100	; 0x64
 8003b8c:	fb01 f303 	mul.w	r3, r1, r3
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	3332      	adds	r3, #50	; 0x32
 8003b96:	4a08      	ldr	r2, [pc, #32]	; (8003bb8 <UART_SetConfig+0x2d4>)
 8003b98:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9c:	095b      	lsrs	r3, r3, #5
 8003b9e:	f003 0207 	and.w	r2, r3, #7
 8003ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4422      	add	r2, r4
 8003baa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bac:	e106      	b.n	8003dbc <UART_SetConfig+0x4d8>
 8003bae:	bf00      	nop
 8003bb0:	40011000 	.word	0x40011000
 8003bb4:	40011400 	.word	0x40011400
 8003bb8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bc6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003bca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003bce:	4642      	mov	r2, r8
 8003bd0:	464b      	mov	r3, r9
 8003bd2:	1891      	adds	r1, r2, r2
 8003bd4:	6239      	str	r1, [r7, #32]
 8003bd6:	415b      	adcs	r3, r3
 8003bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bde:	4641      	mov	r1, r8
 8003be0:	1854      	adds	r4, r2, r1
 8003be2:	4649      	mov	r1, r9
 8003be4:	eb43 0501 	adc.w	r5, r3, r1
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	f04f 0300 	mov.w	r3, #0
 8003bf0:	00eb      	lsls	r3, r5, #3
 8003bf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bf6:	00e2      	lsls	r2, r4, #3
 8003bf8:	4614      	mov	r4, r2
 8003bfa:	461d      	mov	r5, r3
 8003bfc:	4643      	mov	r3, r8
 8003bfe:	18e3      	adds	r3, r4, r3
 8003c00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c04:	464b      	mov	r3, r9
 8003c06:	eb45 0303 	adc.w	r3, r5, r3
 8003c0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c1e:	f04f 0200 	mov.w	r2, #0
 8003c22:	f04f 0300 	mov.w	r3, #0
 8003c26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c2a:	4629      	mov	r1, r5
 8003c2c:	008b      	lsls	r3, r1, #2
 8003c2e:	4621      	mov	r1, r4
 8003c30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c34:	4621      	mov	r1, r4
 8003c36:	008a      	lsls	r2, r1, #2
 8003c38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c3c:	f7fc faca 	bl	80001d4 <__aeabi_uldivmod>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4b60      	ldr	r3, [pc, #384]	; (8003dc8 <UART_SetConfig+0x4e4>)
 8003c46:	fba3 2302 	umull	r2, r3, r3, r2
 8003c4a:	095b      	lsrs	r3, r3, #5
 8003c4c:	011c      	lsls	r4, r3, #4
 8003c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c52:	2200      	movs	r2, #0
 8003c54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c58:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c60:	4642      	mov	r2, r8
 8003c62:	464b      	mov	r3, r9
 8003c64:	1891      	adds	r1, r2, r2
 8003c66:	61b9      	str	r1, [r7, #24]
 8003c68:	415b      	adcs	r3, r3
 8003c6a:	61fb      	str	r3, [r7, #28]
 8003c6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c70:	4641      	mov	r1, r8
 8003c72:	1851      	adds	r1, r2, r1
 8003c74:	6139      	str	r1, [r7, #16]
 8003c76:	4649      	mov	r1, r9
 8003c78:	414b      	adcs	r3, r1
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c88:	4659      	mov	r1, fp
 8003c8a:	00cb      	lsls	r3, r1, #3
 8003c8c:	4651      	mov	r1, sl
 8003c8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c92:	4651      	mov	r1, sl
 8003c94:	00ca      	lsls	r2, r1, #3
 8003c96:	4610      	mov	r0, r2
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	4642      	mov	r2, r8
 8003c9e:	189b      	adds	r3, r3, r2
 8003ca0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ca4:	464b      	mov	r3, r9
 8003ca6:	460a      	mov	r2, r1
 8003ca8:	eb42 0303 	adc.w	r3, r2, r3
 8003cac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003cba:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	f04f 0300 	mov.w	r3, #0
 8003cc4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003cc8:	4649      	mov	r1, r9
 8003cca:	008b      	lsls	r3, r1, #2
 8003ccc:	4641      	mov	r1, r8
 8003cce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cd2:	4641      	mov	r1, r8
 8003cd4:	008a      	lsls	r2, r1, #2
 8003cd6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003cda:	f7fc fa7b 	bl	80001d4 <__aeabi_uldivmod>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	4611      	mov	r1, r2
 8003ce4:	4b38      	ldr	r3, [pc, #224]	; (8003dc8 <UART_SetConfig+0x4e4>)
 8003ce6:	fba3 2301 	umull	r2, r3, r3, r1
 8003cea:	095b      	lsrs	r3, r3, #5
 8003cec:	2264      	movs	r2, #100	; 0x64
 8003cee:	fb02 f303 	mul.w	r3, r2, r3
 8003cf2:	1acb      	subs	r3, r1, r3
 8003cf4:	011b      	lsls	r3, r3, #4
 8003cf6:	3332      	adds	r3, #50	; 0x32
 8003cf8:	4a33      	ldr	r2, [pc, #204]	; (8003dc8 <UART_SetConfig+0x4e4>)
 8003cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfe:	095b      	lsrs	r3, r3, #5
 8003d00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d04:	441c      	add	r4, r3
 8003d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	673b      	str	r3, [r7, #112]	; 0x70
 8003d0e:	677a      	str	r2, [r7, #116]	; 0x74
 8003d10:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d14:	4642      	mov	r2, r8
 8003d16:	464b      	mov	r3, r9
 8003d18:	1891      	adds	r1, r2, r2
 8003d1a:	60b9      	str	r1, [r7, #8]
 8003d1c:	415b      	adcs	r3, r3
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d24:	4641      	mov	r1, r8
 8003d26:	1851      	adds	r1, r2, r1
 8003d28:	6039      	str	r1, [r7, #0]
 8003d2a:	4649      	mov	r1, r9
 8003d2c:	414b      	adcs	r3, r1
 8003d2e:	607b      	str	r3, [r7, #4]
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	f04f 0300 	mov.w	r3, #0
 8003d38:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d3c:	4659      	mov	r1, fp
 8003d3e:	00cb      	lsls	r3, r1, #3
 8003d40:	4651      	mov	r1, sl
 8003d42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d46:	4651      	mov	r1, sl
 8003d48:	00ca      	lsls	r2, r1, #3
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4603      	mov	r3, r0
 8003d50:	4642      	mov	r2, r8
 8003d52:	189b      	adds	r3, r3, r2
 8003d54:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d56:	464b      	mov	r3, r9
 8003d58:	460a      	mov	r2, r1
 8003d5a:	eb42 0303 	adc.w	r3, r2, r3
 8003d5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	663b      	str	r3, [r7, #96]	; 0x60
 8003d6a:	667a      	str	r2, [r7, #100]	; 0x64
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	f04f 0300 	mov.w	r3, #0
 8003d74:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d78:	4649      	mov	r1, r9
 8003d7a:	008b      	lsls	r3, r1, #2
 8003d7c:	4641      	mov	r1, r8
 8003d7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d82:	4641      	mov	r1, r8
 8003d84:	008a      	lsls	r2, r1, #2
 8003d86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d8a:	f7fc fa23 	bl	80001d4 <__aeabi_uldivmod>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	460b      	mov	r3, r1
 8003d92:	4b0d      	ldr	r3, [pc, #52]	; (8003dc8 <UART_SetConfig+0x4e4>)
 8003d94:	fba3 1302 	umull	r1, r3, r3, r2
 8003d98:	095b      	lsrs	r3, r3, #5
 8003d9a:	2164      	movs	r1, #100	; 0x64
 8003d9c:	fb01 f303 	mul.w	r3, r1, r3
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	011b      	lsls	r3, r3, #4
 8003da4:	3332      	adds	r3, #50	; 0x32
 8003da6:	4a08      	ldr	r2, [pc, #32]	; (8003dc8 <UART_SetConfig+0x4e4>)
 8003da8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dac:	095b      	lsrs	r3, r3, #5
 8003dae:	f003 020f 	and.w	r2, r3, #15
 8003db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4422      	add	r2, r4
 8003dba:	609a      	str	r2, [r3, #8]
}
 8003dbc:	bf00      	nop
 8003dbe:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dc8:	51eb851f 	.word	0x51eb851f

08003dcc <memset>:
 8003dcc:	4402      	add	r2, r0
 8003dce:	4603      	mov	r3, r0
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d100      	bne.n	8003dd6 <memset+0xa>
 8003dd4:	4770      	bx	lr
 8003dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8003dda:	e7f9      	b.n	8003dd0 <memset+0x4>

08003ddc <__libc_init_array>:
 8003ddc:	b570      	push	{r4, r5, r6, lr}
 8003dde:	4d0d      	ldr	r5, [pc, #52]	; (8003e14 <__libc_init_array+0x38>)
 8003de0:	4c0d      	ldr	r4, [pc, #52]	; (8003e18 <__libc_init_array+0x3c>)
 8003de2:	1b64      	subs	r4, r4, r5
 8003de4:	10a4      	asrs	r4, r4, #2
 8003de6:	2600      	movs	r6, #0
 8003de8:	42a6      	cmp	r6, r4
 8003dea:	d109      	bne.n	8003e00 <__libc_init_array+0x24>
 8003dec:	4d0b      	ldr	r5, [pc, #44]	; (8003e1c <__libc_init_array+0x40>)
 8003dee:	4c0c      	ldr	r4, [pc, #48]	; (8003e20 <__libc_init_array+0x44>)
 8003df0:	f000 f818 	bl	8003e24 <_init>
 8003df4:	1b64      	subs	r4, r4, r5
 8003df6:	10a4      	asrs	r4, r4, #2
 8003df8:	2600      	movs	r6, #0
 8003dfa:	42a6      	cmp	r6, r4
 8003dfc:	d105      	bne.n	8003e0a <__libc_init_array+0x2e>
 8003dfe:	bd70      	pop	{r4, r5, r6, pc}
 8003e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e04:	4798      	blx	r3
 8003e06:	3601      	adds	r6, #1
 8003e08:	e7ee      	b.n	8003de8 <__libc_init_array+0xc>
 8003e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e0e:	4798      	blx	r3
 8003e10:	3601      	adds	r6, #1
 8003e12:	e7f2      	b.n	8003dfa <__libc_init_array+0x1e>
 8003e14:	08003e5c 	.word	0x08003e5c
 8003e18:	08003e5c 	.word	0x08003e5c
 8003e1c:	08003e5c 	.word	0x08003e5c
 8003e20:	08003e60 	.word	0x08003e60

08003e24 <_init>:
 8003e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e26:	bf00      	nop
 8003e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e2a:	bc08      	pop	{r3}
 8003e2c:	469e      	mov	lr, r3
 8003e2e:	4770      	bx	lr

08003e30 <_fini>:
 8003e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e32:	bf00      	nop
 8003e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e36:	bc08      	pop	{r3}
 8003e38:	469e      	mov	lr, r3
 8003e3a:	4770      	bx	lr
