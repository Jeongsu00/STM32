
F401RE_FreeRTOS2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f94  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08005134  08005134  00015134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005250  08005250  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005250  08005250  00015250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005258  08005258  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005258  08005258  00015258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800525c  0800525c  0001525c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005260  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004200  2000006c  080052cc  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000426c  080052cc  0002426c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014a17  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003357  00000000  00000000  00034af6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001258  00000000  00000000  00037e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e2d  00000000  00000000  000390a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001975c  00000000  00000000  00039ed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015ced  00000000  00000000  00053631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097eef  00000000  00000000  0006931e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000051ec  00000000  00000000  00101210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001063fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800511c 	.word	0x0800511c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	0800511c 	.word	0x0800511c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <vApplicationGetIdleTaskMemory+0x2c>)
 80004ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	4a06      	ldr	r2, [pc, #24]	; (800050c <vApplicationGetIdleTaskMemory+0x30>)
 80004f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	20000098 	.word	0x20000098
 800050c:	20000138 	.word	0x20000138

08000510 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000510:	b5b0      	push	{r4, r5, r7, lr}
 8000512:	b098      	sub	sp, #96	; 0x60
 8000514:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 8000516:	2300      	movs	r3, #0
 8000518:	65bb      	str	r3, [r7, #88]	; 0x58
 800051a:	2300      	movs	r3, #0
 800051c:	65fb      	str	r3, [r7, #92]	; 0x5c
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 800051e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000522:	2101      	movs	r1, #1
 8000524:	4618      	mov	r0, r3
 8000526:	f002 fa04 	bl	8002932 <osSemaphoreCreate>
 800052a:	4603      	mov	r3, r0
 800052c:	4a1e      	ldr	r2, [pc, #120]	; (80005a8 <MX_FREERTOS_Init+0x98>)
 800052e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of HightTask */
  osThreadDef(HightTask, StartHightTask, osPriorityHigh, 0, 128);
 8000530:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <MX_FREERTOS_Init+0x9c>)
 8000532:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000536:	461d      	mov	r5, r3
 8000538:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800053a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800053c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000540:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HightTaskHandle = osThreadCreate(osThread(HightTask), NULL);
 8000544:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f002 f991 	bl	8002872 <osThreadCreate>
 8000550:	4603      	mov	r3, r0
 8000552:	4a17      	ldr	r2, [pc, #92]	; (80005b0 <MX_FREERTOS_Init+0xa0>)
 8000554:	6013      	str	r3, [r2, #0]

  /* definition and creation of MediumTask02 */
  osThreadDef(MediumTask02, StartMediumTask02, osPriorityNormal, 0, 128);
 8000556:	4b17      	ldr	r3, [pc, #92]	; (80005b4 <MX_FREERTOS_Init+0xa4>)
 8000558:	f107 0420 	add.w	r4, r7, #32
 800055c:	461d      	mov	r5, r3
 800055e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000562:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000566:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MediumTask02Handle = osThreadCreate(osThread(MediumTask02), NULL);
 800056a:	f107 0320 	add.w	r3, r7, #32
 800056e:	2100      	movs	r1, #0
 8000570:	4618      	mov	r0, r3
 8000572:	f002 f97e 	bl	8002872 <osThreadCreate>
 8000576:	4603      	mov	r3, r0
 8000578:	4a0f      	ldr	r2, [pc, #60]	; (80005b8 <MX_FREERTOS_Init+0xa8>)
 800057a:	6013      	str	r3, [r2, #0]

  /* definition and creation of LowTask03 */
  osThreadDef(LowTask03, StartLowTask03, osPriorityLow, 0, 128);
 800057c:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <MX_FREERTOS_Init+0xac>)
 800057e:	1d3c      	adds	r4, r7, #4
 8000580:	461d      	mov	r5, r3
 8000582:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000584:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000586:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800058a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LowTask03Handle = osThreadCreate(osThread(LowTask03), NULL);
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f002 f96d 	bl	8002872 <osThreadCreate>
 8000598:	4603      	mov	r3, r0
 800059a:	4a09      	ldr	r2, [pc, #36]	; (80005c0 <MX_FREERTOS_Init+0xb0>)
 800059c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800059e:	bf00      	nop
 80005a0:	3760      	adds	r7, #96	; 0x60
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bdb0      	pop	{r4, r5, r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000094 	.word	0x20000094
 80005ac:	08005140 	.word	0x08005140
 80005b0:	20000088 	.word	0x20000088
 80005b4:	0800516c 	.word	0x0800516c
 80005b8:	2000008c 	.word	0x2000008c
 80005bc:	08005194 	.word	0x08005194
 80005c0:	20000090 	.word	0x20000090

080005c4 <StartHightTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartHightTask */
void StartHightTask(void const * argument)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHightTask */
  /* Infinite loop */
  for(;;)
  {
	  printf("Entered High Task\r\n");
 80005cc:	4805      	ldr	r0, [pc, #20]	; (80005e4 <StartHightTask+0x20>)
 80005ce:	f004 f9ab 	bl	8004928 <puts>
	  printf("Leaving High Task\r\n");
 80005d2:	4805      	ldr	r0, [pc, #20]	; (80005e8 <StartHightTask+0x24>)
 80005d4:	f004 f9a8 	bl	8004928 <puts>
	  osDelay(3000);
 80005d8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005dc:	f002 f995 	bl	800290a <osDelay>
	  printf("Entered High Task\r\n");
 80005e0:	e7f4      	b.n	80005cc <StartHightTask+0x8>
 80005e2:	bf00      	nop
 80005e4:	080051b0 	.word	0x080051b0
 80005e8:	080051c4 	.word	0x080051c4

080005ec <StartMediumTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMediumTask02 */
void StartMediumTask02(void const * argument)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMediumTask02 */
  /* Infinite loop */
  for(;;)
  {
	  printf("Entered Medium Task\r\n");
 80005f4:	4805      	ldr	r0, [pc, #20]	; (800060c <StartMediumTask02+0x20>)
 80005f6:	f004 f997 	bl	8004928 <puts>
	  printf("Leaving Medium Task\r\n");
 80005fa:	4805      	ldr	r0, [pc, #20]	; (8000610 <StartMediumTask02+0x24>)
 80005fc:	f004 f994 	bl	8004928 <puts>
	  osDelay(3000);
 8000600:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000604:	f002 f981 	bl	800290a <osDelay>
	  printf("Entered Medium Task\r\n");
 8000608:	e7f4      	b.n	80005f4 <StartMediumTask02+0x8>
 800060a:	bf00      	nop
 800060c:	080051d8 	.word	0x080051d8
 8000610:	080051f0 	.word	0x080051f0

08000614 <StartLowTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLowTask03 */
void StartLowTask03(void const * argument)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLowTask03 */
  /* Infinite loop */
  for(;;)
  {
	  printf("Entered Low Task\r\n");
 800061c:	4805      	ldr	r0, [pc, #20]	; (8000634 <StartLowTask03+0x20>)
 800061e:	f004 f983 	bl	8004928 <puts>
	  printf("Leaving Low Task\r\n");
 8000622:	4805      	ldr	r0, [pc, #20]	; (8000638 <StartLowTask03+0x24>)
 8000624:	f004 f980 	bl	8004928 <puts>
	  osDelay(3000);
 8000628:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800062c:	f002 f96d 	bl	800290a <osDelay>
	  printf("Entered Low Task\r\n");
 8000630:	e7f4      	b.n	800061c <StartLowTask03+0x8>
 8000632:	bf00      	nop
 8000634:	08005208 	.word	0x08005208
 8000638:	0800521c 	.word	0x0800521c

0800063c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08a      	sub	sp, #40	; 0x28
 8000640:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
 8000656:	4b2d      	ldr	r3, [pc, #180]	; (800070c <MX_GPIO_Init+0xd0>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a2c      	ldr	r2, [pc, #176]	; (800070c <MX_GPIO_Init+0xd0>)
 800065c:	f043 0304 	orr.w	r3, r3, #4
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
 8000662:	4b2a      	ldr	r3, [pc, #168]	; (800070c <MX_GPIO_Init+0xd0>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f003 0304 	and.w	r3, r3, #4
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	4b26      	ldr	r3, [pc, #152]	; (800070c <MX_GPIO_Init+0xd0>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a25      	ldr	r2, [pc, #148]	; (800070c <MX_GPIO_Init+0xd0>)
 8000678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b23      	ldr	r3, [pc, #140]	; (800070c <MX_GPIO_Init+0xd0>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	4b1f      	ldr	r3, [pc, #124]	; (800070c <MX_GPIO_Init+0xd0>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a1e      	ldr	r2, [pc, #120]	; (800070c <MX_GPIO_Init+0xd0>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b1c      	ldr	r3, [pc, #112]	; (800070c <MX_GPIO_Init+0xd0>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	4b18      	ldr	r3, [pc, #96]	; (800070c <MX_GPIO_Init+0xd0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a17      	ldr	r2, [pc, #92]	; (800070c <MX_GPIO_Init+0xd0>)
 80006b0:	f043 0302 	orr.w	r3, r3, #2
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b15      	ldr	r3, [pc, #84]	; (800070c <MX_GPIO_Init+0xd0>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0302 	and.w	r3, r3, #2
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2120      	movs	r1, #32
 80006c6:	4812      	ldr	r0, [pc, #72]	; (8000710 <MX_GPIO_Init+0xd4>)
 80006c8:	f000 fd8e 	bl	80011e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006d2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	4619      	mov	r1, r3
 80006e2:	480c      	ldr	r0, [pc, #48]	; (8000714 <MX_GPIO_Init+0xd8>)
 80006e4:	f000 fbfc 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006e8:	2320      	movs	r3, #32
 80006ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ec:	2301      	movs	r3, #1
 80006ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	2300      	movs	r3, #0
 80006f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4619      	mov	r1, r3
 80006fe:	4804      	ldr	r0, [pc, #16]	; (8000710 <MX_GPIO_Init+0xd4>)
 8000700:	f000 fbee 	bl	8000ee0 <HAL_GPIO_Init>

}
 8000704:	bf00      	nop
 8000706:	3728      	adds	r7, #40	; 0x28
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40023800 	.word	0x40023800
 8000710:	40020000 	.word	0x40020000
 8000714:	40020800 	.word	0x40020800

08000718 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000720:	1d39      	adds	r1, r7, #4
 8000722:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000726:	2201      	movs	r2, #1
 8000728:	4803      	ldr	r0, [pc, #12]	; (8000738 <__io_putchar+0x20>)
 800072a:	f001 fd0e 	bl	800214a <HAL_UART_Transmit>
	return ch;
 800072e:	687b      	ldr	r3, [r7, #4]
}
 8000730:	4618      	mov	r0, r3
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000384 	.word	0x20000384

0800073c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000740:	f000 faaa 	bl	8000c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000744:	f000 f80a 	bl	800075c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000748:	f7ff ff78 	bl	800063c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800074c:	f000 fa08 	bl	8000b60 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000750:	f7ff fede 	bl	8000510 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000754:	f002 f886 	bl	8002864 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000758:	e7fe      	b.n	8000758 <main+0x1c>
	...

0800075c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b094      	sub	sp, #80	; 0x50
 8000760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000762:	f107 0320 	add.w	r3, r7, #32
 8000766:	2230      	movs	r2, #48	; 0x30
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f004 f9bc 	bl	8004ae8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000780:	2300      	movs	r3, #0
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	4b29      	ldr	r3, [pc, #164]	; (800082c <SystemClock_Config+0xd0>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000788:	4a28      	ldr	r2, [pc, #160]	; (800082c <SystemClock_Config+0xd0>)
 800078a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078e:	6413      	str	r3, [r2, #64]	; 0x40
 8000790:	4b26      	ldr	r3, [pc, #152]	; (800082c <SystemClock_Config+0xd0>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800079c:	2300      	movs	r3, #0
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	4b23      	ldr	r3, [pc, #140]	; (8000830 <SystemClock_Config+0xd4>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007a8:	4a21      	ldr	r2, [pc, #132]	; (8000830 <SystemClock_Config+0xd4>)
 80007aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007ae:	6013      	str	r3, [r2, #0]
 80007b0:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <SystemClock_Config+0xd4>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007bc:	2302      	movs	r3, #2
 80007be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c0:	2301      	movs	r3, #1
 80007c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c4:	2310      	movs	r3, #16
 80007c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c8:	2302      	movs	r3, #2
 80007ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007cc:	2300      	movs	r3, #0
 80007ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007d0:	2310      	movs	r3, #16
 80007d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007d4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007da:	2304      	movs	r3, #4
 80007dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007de:	2307      	movs	r3, #7
 80007e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e2:	f107 0320 	add.w	r3, r7, #32
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 fd18 	bl	800121c <HAL_RCC_OscConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007f2:	f000 f831 	bl	8000858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f6:	230f      	movs	r3, #15
 80007f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fa:	2302      	movs	r3, #2
 80007fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000802:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000806:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	2102      	movs	r1, #2
 8000812:	4618      	mov	r0, r3
 8000814:	f000 ff7a 	bl	800170c <HAL_RCC_ClockConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800081e:	f000 f81b 	bl	8000858 <Error_Handler>
  }
}
 8000822:	bf00      	nop
 8000824:	3750      	adds	r7, #80	; 0x50
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800
 8000830:	40007000 	.word	0x40007000

08000834 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a04      	ldr	r2, [pc, #16]	; (8000854 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d101      	bne.n	800084a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000846:	f000 fa49 	bl	8000cdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40000800 	.word	0x40000800

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	e7fe      	b.n	8000860 <Error_Handler+0x8>
	...

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <HAL_MspInit+0x54>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	4a11      	ldr	r2, [pc, #68]	; (80008b8 <HAL_MspInit+0x54>)
 8000874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000878:	6453      	str	r3, [r2, #68]	; 0x44
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <HAL_MspInit+0x54>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <HAL_MspInit+0x54>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <HAL_MspInit+0x54>)
 8000890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000894:	6413      	str	r3, [r2, #64]	; 0x40
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <HAL_MspInit+0x54>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	210f      	movs	r1, #15
 80008a6:	f06f 0001 	mvn.w	r0, #1
 80008aa:	f000 faef 	bl	8000e8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800

080008bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08e      	sub	sp, #56	; 0x38
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	4b33      	ldr	r3, [pc, #204]	; (80009a0 <HAL_InitTick+0xe4>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d4:	4a32      	ldr	r2, [pc, #200]	; (80009a0 <HAL_InitTick+0xe4>)
 80008d6:	f043 0304 	orr.w	r3, r3, #4
 80008da:	6413      	str	r3, [r2, #64]	; 0x40
 80008dc:	4b30      	ldr	r3, [pc, #192]	; (80009a0 <HAL_InitTick+0xe4>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e0:	f003 0304 	and.w	r3, r3, #4
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008e8:	f107 0210 	add.w	r2, r7, #16
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4611      	mov	r1, r2
 80008f2:	4618      	mov	r0, r3
 80008f4:	f001 f92a 	bl	8001b4c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008f8:	6a3b      	ldr	r3, [r7, #32]
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d103      	bne.n	800090a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000902:	f001 f8fb 	bl	8001afc <HAL_RCC_GetPCLK1Freq>
 8000906:	6378      	str	r0, [r7, #52]	; 0x34
 8000908:	e004      	b.n	8000914 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800090a:	f001 f8f7 	bl	8001afc <HAL_RCC_GetPCLK1Freq>
 800090e:	4603      	mov	r3, r0
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000916:	4a23      	ldr	r2, [pc, #140]	; (80009a4 <HAL_InitTick+0xe8>)
 8000918:	fba2 2303 	umull	r2, r3, r2, r3
 800091c:	0c9b      	lsrs	r3, r3, #18
 800091e:	3b01      	subs	r3, #1
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000922:	4b21      	ldr	r3, [pc, #132]	; (80009a8 <HAL_InitTick+0xec>)
 8000924:	4a21      	ldr	r2, [pc, #132]	; (80009ac <HAL_InitTick+0xf0>)
 8000926:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000928:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <HAL_InitTick+0xec>)
 800092a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800092e:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000930:	4a1d      	ldr	r2, [pc, #116]	; (80009a8 <HAL_InitTick+0xec>)
 8000932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000934:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000936:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <HAL_InitTick+0xec>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093c:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <HAL_InitTick+0xec>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000942:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <HAL_InitTick+0xec>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000948:	4817      	ldr	r0, [pc, #92]	; (80009a8 <HAL_InitTick+0xec>)
 800094a:	f001 f931 	bl	8001bb0 <HAL_TIM_Base_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000954:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000958:	2b00      	cmp	r3, #0
 800095a:	d11b      	bne.n	8000994 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800095c:	4812      	ldr	r0, [pc, #72]	; (80009a8 <HAL_InitTick+0xec>)
 800095e:	f001 f981 	bl	8001c64 <HAL_TIM_Base_Start_IT>
 8000962:	4603      	mov	r3, r0
 8000964:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000968:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800096c:	2b00      	cmp	r3, #0
 800096e:	d111      	bne.n	8000994 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000970:	201e      	movs	r0, #30
 8000972:	f000 faa7 	bl	8000ec4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2b0f      	cmp	r3, #15
 800097a:	d808      	bhi.n	800098e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800097c:	2200      	movs	r2, #0
 800097e:	6879      	ldr	r1, [r7, #4]
 8000980:	201e      	movs	r0, #30
 8000982:	f000 fa83 	bl	8000e8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000986:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <HAL_InitTick+0xf4>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6013      	str	r3, [r2, #0]
 800098c:	e002      	b.n	8000994 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000994:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000998:	4618      	mov	r0, r3
 800099a:	3738      	adds	r7, #56	; 0x38
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40023800 	.word	0x40023800
 80009a4:	431bde83 	.word	0x431bde83
 80009a8:	20000338 	.word	0x20000338
 80009ac:	40000800 	.word	0x40000800
 80009b0:	20000004 	.word	0x20000004

080009b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <NMI_Handler+0x4>

080009ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009be:	e7fe      	b.n	80009be <HardFault_Handler+0x4>

080009c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <MemManage_Handler+0x4>

080009c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <BusFault_Handler+0x4>

080009cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <UsageFault_Handler+0x4>

080009d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80009e4:	4802      	ldr	r0, [pc, #8]	; (80009f0 <TIM4_IRQHandler+0x10>)
 80009e6:	f001 f99f 	bl	8001d28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000338 	.word	0x20000338

080009f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	e00a      	b.n	8000a1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a06:	f3af 8000 	nop.w
 8000a0a:	4601      	mov	r1, r0
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	1c5a      	adds	r2, r3, #1
 8000a10:	60ba      	str	r2, [r7, #8]
 8000a12:	b2ca      	uxtb	r2, r1
 8000a14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	697a      	ldr	r2, [r7, #20]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	dbf0      	blt.n	8000a06 <_read+0x12>
  }

  return len;
 8000a24:	687b      	ldr	r3, [r7, #4]
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b086      	sub	sp, #24
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	60f8      	str	r0, [r7, #12]
 8000a36:	60b9      	str	r1, [r7, #8]
 8000a38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
 8000a3e:	e009      	b.n	8000a54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	60ba      	str	r2, [r7, #8]
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fe65 	bl	8000718 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	3301      	adds	r3, #1
 8000a52:	617b      	str	r3, [r7, #20]
 8000a54:	697a      	ldr	r2, [r7, #20]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	dbf1      	blt.n	8000a40 <_write+0x12>
  }
  return len;
 8000a5c:	687b      	ldr	r3, [r7, #4]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <_close>:

int _close(int file)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	b083      	sub	sp, #12
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
 8000a86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a8e:	605a      	str	r2, [r3, #4]
  return 0;
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <_isatty>:

int _isatty(int file)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	b083      	sub	sp, #12
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000aa6:	2301      	movs	r3, #1
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3714      	adds	r7, #20
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
	...

08000ad0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ad8:	4a14      	ldr	r2, [pc, #80]	; (8000b2c <_sbrk+0x5c>)
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <_sbrk+0x60>)
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ae4:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <_sbrk+0x64>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d102      	bne.n	8000af2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <_sbrk+0x64>)
 8000aee:	4a12      	ldr	r2, [pc, #72]	; (8000b38 <_sbrk+0x68>)
 8000af0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <_sbrk+0x64>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4413      	add	r3, r2
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d207      	bcs.n	8000b10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b00:	f004 f896 	bl	8004c30 <__errno>
 8000b04:	4603      	mov	r3, r0
 8000b06:	220c      	movs	r2, #12
 8000b08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0e:	e009      	b.n	8000b24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <_sbrk+0x64>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b16:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <_sbrk+0x64>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	4a05      	ldr	r2, [pc, #20]	; (8000b34 <_sbrk+0x64>)
 8000b20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b22:	68fb      	ldr	r3, [r7, #12]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3718      	adds	r7, #24
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20018000 	.word	0x20018000
 8000b30:	00000400 	.word	0x00000400
 8000b34:	20000380 	.word	0x20000380
 8000b38:	20004270 	.word	0x20004270

08000b3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <SystemInit+0x20>)
 8000b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b46:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <SystemInit+0x20>)
 8000b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b66:	4a12      	ldr	r2, [pc, #72]	; (8000bb0 <MX_USART2_UART_Init+0x50>)
 8000b68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b86:	220c      	movs	r2, #12
 8000b88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b96:	4805      	ldr	r0, [pc, #20]	; (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b98:	f001 fa8a 	bl	80020b0 <HAL_UART_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ba2:	f7ff fe59 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000384 	.word	0x20000384
 8000bb0:	40004400 	.word	0x40004400

08000bb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08a      	sub	sp, #40	; 0x28
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a19      	ldr	r2, [pc, #100]	; (8000c38 <HAL_UART_MspInit+0x84>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d12b      	bne.n	8000c2e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
 8000bda:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <HAL_UART_MspInit+0x88>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	4a17      	ldr	r2, [pc, #92]	; (8000c3c <HAL_UART_MspInit+0x88>)
 8000be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be4:	6413      	str	r3, [r2, #64]	; 0x40
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <HAL_UART_MspInit+0x88>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <HAL_UART_MspInit+0x88>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a10      	ldr	r2, [pc, #64]	; (8000c3c <HAL_UART_MspInit+0x88>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <HAL_UART_MspInit+0x88>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c0e:	230c      	movs	r3, #12
 8000c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c1e:	2307      	movs	r3, #7
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <HAL_UART_MspInit+0x8c>)
 8000c2a:	f000 f959 	bl	8000ee0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c2e:	bf00      	nop
 8000c30:	3728      	adds	r7, #40	; 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40004400 	.word	0x40004400
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020000 	.word	0x40020000

08000c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c48:	480d      	ldr	r0, [pc, #52]	; (8000c80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c4a:	490e      	ldr	r1, [pc, #56]	; (8000c84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c4c:	4a0e      	ldr	r2, [pc, #56]	; (8000c88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c50:	e002      	b.n	8000c58 <LoopCopyDataInit>

08000c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c56:	3304      	adds	r3, #4

08000c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c5c:	d3f9      	bcc.n	8000c52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5e:	4a0b      	ldr	r2, [pc, #44]	; (8000c8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c60:	4c0b      	ldr	r4, [pc, #44]	; (8000c90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c64:	e001      	b.n	8000c6a <LoopFillZerobss>

08000c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c68:	3204      	adds	r2, #4

08000c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c6c:	d3fb      	bcc.n	8000c66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c6e:	f7ff ff65 	bl	8000b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c72:	f003 ffe3 	bl	8004c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c76:	f7ff fd61 	bl	800073c <main>
  bx  lr    
 8000c7a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c7c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c84:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c88:	08005260 	.word	0x08005260
  ldr r2, =_sbss
 8000c8c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c90:	2000426c 	.word	0x2000426c

08000c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c94:	e7fe      	b.n	8000c94 <ADC_IRQHandler>
	...

08000c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0d      	ldr	r2, [pc, #52]	; (8000cd8 <HAL_Init+0x40>)
 8000ca2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <HAL_Init+0x40>)
 8000cae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a07      	ldr	r2, [pc, #28]	; (8000cd8 <HAL_Init+0x40>)
 8000cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f000 f8d8 	bl	8000e76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc6:	200f      	movs	r0, #15
 8000cc8:	f7ff fdf8 	bl	80008bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ccc:	f7ff fdca 	bl	8000864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40023c00 	.word	0x40023c00

08000cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_IncTick+0x24>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <HAL_IncTick+0x24>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	200003c8 	.word	0x200003c8

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	200003c8 	.word	0x200003c8

08000d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4e:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	60d3      	str	r3, [r2, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <__NVIC_GetPriorityGrouping+0x18>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	0a1b      	lsrs	r3, r3, #8
 8000d6e:	f003 0307 	and.w	r3, r3, #7
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	db0b      	blt.n	8000daa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	f003 021f 	and.w	r2, r3, #31
 8000d98:	4907      	ldr	r1, [pc, #28]	; (8000db8 <__NVIC_EnableIRQ+0x38>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	095b      	lsrs	r3, r3, #5
 8000da0:	2001      	movs	r0, #1
 8000da2:	fa00 f202 	lsl.w	r2, r0, r2
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000e100 	.word	0xe000e100

08000dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	db0a      	blt.n	8000de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	490c      	ldr	r1, [pc, #48]	; (8000e08 <__NVIC_SetPriority+0x4c>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	0112      	lsls	r2, r2, #4
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	440b      	add	r3, r1
 8000de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de4:	e00a      	b.n	8000dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4908      	ldr	r1, [pc, #32]	; (8000e0c <__NVIC_SetPriority+0x50>)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	3b04      	subs	r3, #4
 8000df4:	0112      	lsls	r2, r2, #4
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	440b      	add	r3, r1
 8000dfa:	761a      	strb	r2, [r3, #24]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000e100 	.word	0xe000e100
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	; 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f1c3 0307 	rsb	r3, r3, #7
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	bf28      	it	cs
 8000e2e:	2304      	movcs	r3, #4
 8000e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3304      	adds	r3, #4
 8000e36:	2b06      	cmp	r3, #6
 8000e38:	d902      	bls.n	8000e40 <NVIC_EncodePriority+0x30>
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3b03      	subs	r3, #3
 8000e3e:	e000      	b.n	8000e42 <NVIC_EncodePriority+0x32>
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	401a      	ands	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e58:	f04f 31ff 	mov.w	r1, #4294967295
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e62:	43d9      	mvns	r1, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	4313      	orrs	r3, r2
         );
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3724      	adds	r7, #36	; 0x24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ff4c 	bl	8000d1c <__NVIC_SetPriorityGrouping>
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
 8000e98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e9e:	f7ff ff61 	bl	8000d64 <__NVIC_GetPriorityGrouping>
 8000ea2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	68b9      	ldr	r1, [r7, #8]
 8000ea8:	6978      	ldr	r0, [r7, #20]
 8000eaa:	f7ff ffb1 	bl	8000e10 <NVIC_EncodePriority>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff ff80 	bl	8000dbc <__NVIC_SetPriority>
}
 8000ebc:	bf00      	nop
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff ff54 	bl	8000d80 <__NVIC_EnableIRQ>
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b089      	sub	sp, #36	; 0x24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
 8000efa:	e159      	b.n	80011b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000efc:	2201      	movs	r2, #1
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	f040 8148 	bne.w	80011aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d005      	beq.n	8000f32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d130      	bne.n	8000f94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	68da      	ldr	r2, [r3, #12]
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f68:	2201      	movs	r2, #1
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	091b      	lsrs	r3, r3, #4
 8000f7e:	f003 0201 	and.w	r2, r3, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	2b03      	cmp	r3, #3
 8000f9e:	d017      	beq.n	8000fd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2203      	movs	r2, #3
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d123      	bne.n	8001024 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	08da      	lsrs	r2, r3, #3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3208      	adds	r2, #8
 8000fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	f003 0307 	and.w	r3, r3, #7
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	220f      	movs	r2, #15
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	691a      	ldr	r2, [r3, #16]
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	08da      	lsrs	r2, r3, #3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3208      	adds	r2, #8
 800101e:	69b9      	ldr	r1, [r7, #24]
 8001020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	2203      	movs	r2, #3
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0203 	and.w	r2, r3, #3
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001060:	2b00      	cmp	r3, #0
 8001062:	f000 80a2 	beq.w	80011aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b57      	ldr	r3, [pc, #348]	; (80011c8 <HAL_GPIO_Init+0x2e8>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	4a56      	ldr	r2, [pc, #344]	; (80011c8 <HAL_GPIO_Init+0x2e8>)
 8001070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001074:	6453      	str	r3, [r2, #68]	; 0x44
 8001076:	4b54      	ldr	r3, [pc, #336]	; (80011c8 <HAL_GPIO_Init+0x2e8>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001082:	4a52      	ldr	r2, [pc, #328]	; (80011cc <HAL_GPIO_Init+0x2ec>)
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	3302      	adds	r3, #2
 800108a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	220f      	movs	r2, #15
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a49      	ldr	r2, [pc, #292]	; (80011d0 <HAL_GPIO_Init+0x2f0>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d019      	beq.n	80010e2 <HAL_GPIO_Init+0x202>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a48      	ldr	r2, [pc, #288]	; (80011d4 <HAL_GPIO_Init+0x2f4>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d013      	beq.n	80010de <HAL_GPIO_Init+0x1fe>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a47      	ldr	r2, [pc, #284]	; (80011d8 <HAL_GPIO_Init+0x2f8>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d00d      	beq.n	80010da <HAL_GPIO_Init+0x1fa>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a46      	ldr	r2, [pc, #280]	; (80011dc <HAL_GPIO_Init+0x2fc>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d007      	beq.n	80010d6 <HAL_GPIO_Init+0x1f6>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a45      	ldr	r2, [pc, #276]	; (80011e0 <HAL_GPIO_Init+0x300>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d101      	bne.n	80010d2 <HAL_GPIO_Init+0x1f2>
 80010ce:	2304      	movs	r3, #4
 80010d0:	e008      	b.n	80010e4 <HAL_GPIO_Init+0x204>
 80010d2:	2307      	movs	r3, #7
 80010d4:	e006      	b.n	80010e4 <HAL_GPIO_Init+0x204>
 80010d6:	2303      	movs	r3, #3
 80010d8:	e004      	b.n	80010e4 <HAL_GPIO_Init+0x204>
 80010da:	2302      	movs	r3, #2
 80010dc:	e002      	b.n	80010e4 <HAL_GPIO_Init+0x204>
 80010de:	2301      	movs	r3, #1
 80010e0:	e000      	b.n	80010e4 <HAL_GPIO_Init+0x204>
 80010e2:	2300      	movs	r3, #0
 80010e4:	69fa      	ldr	r2, [r7, #28]
 80010e6:	f002 0203 	and.w	r2, r2, #3
 80010ea:	0092      	lsls	r2, r2, #2
 80010ec:	4093      	lsls	r3, r2
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010f4:	4935      	ldr	r1, [pc, #212]	; (80011cc <HAL_GPIO_Init+0x2ec>)
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	089b      	lsrs	r3, r3, #2
 80010fa:	3302      	adds	r3, #2
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001102:	4b38      	ldr	r3, [pc, #224]	; (80011e4 <HAL_GPIO_Init+0x304>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	43db      	mvns	r3, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001126:	4a2f      	ldr	r2, [pc, #188]	; (80011e4 <HAL_GPIO_Init+0x304>)
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800112c:	4b2d      	ldr	r3, [pc, #180]	; (80011e4 <HAL_GPIO_Init+0x304>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001150:	4a24      	ldr	r2, [pc, #144]	; (80011e4 <HAL_GPIO_Init+0x304>)
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001156:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <HAL_GPIO_Init+0x304>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	43db      	mvns	r3, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4013      	ands	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800117a:	4a1a      	ldr	r2, [pc, #104]	; (80011e4 <HAL_GPIO_Init+0x304>)
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001180:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <HAL_GPIO_Init+0x304>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d003      	beq.n	80011a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011a4:	4a0f      	ldr	r2, [pc, #60]	; (80011e4 <HAL_GPIO_Init+0x304>)
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3301      	adds	r3, #1
 80011ae:	61fb      	str	r3, [r7, #28]
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	2b0f      	cmp	r3, #15
 80011b4:	f67f aea2 	bls.w	8000efc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	3724      	adds	r7, #36	; 0x24
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40013800 	.word	0x40013800
 80011d0:	40020000 	.word	0x40020000
 80011d4:	40020400 	.word	0x40020400
 80011d8:	40020800 	.word	0x40020800
 80011dc:	40020c00 	.word	0x40020c00
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40013c00 	.word	0x40013c00

080011e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	807b      	strh	r3, [r7, #2]
 80011f4:	4613      	mov	r3, r2
 80011f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011f8:	787b      	ldrb	r3, [r7, #1]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011fe:	887a      	ldrh	r2, [r7, #2]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001204:	e003      	b.n	800120e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001206:	887b      	ldrh	r3, [r7, #2]
 8001208:	041a      	lsls	r2, r3, #16
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	619a      	str	r2, [r3, #24]
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e267      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	2b00      	cmp	r3, #0
 8001238:	d075      	beq.n	8001326 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800123a:	4b88      	ldr	r3, [pc, #544]	; (800145c <HAL_RCC_OscConfig+0x240>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 030c 	and.w	r3, r3, #12
 8001242:	2b04      	cmp	r3, #4
 8001244:	d00c      	beq.n	8001260 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001246:	4b85      	ldr	r3, [pc, #532]	; (800145c <HAL_RCC_OscConfig+0x240>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800124e:	2b08      	cmp	r3, #8
 8001250:	d112      	bne.n	8001278 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001252:	4b82      	ldr	r3, [pc, #520]	; (800145c <HAL_RCC_OscConfig+0x240>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800125a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800125e:	d10b      	bne.n	8001278 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001260:	4b7e      	ldr	r3, [pc, #504]	; (800145c <HAL_RCC_OscConfig+0x240>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d05b      	beq.n	8001324 <HAL_RCC_OscConfig+0x108>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d157      	bne.n	8001324 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e242      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001280:	d106      	bne.n	8001290 <HAL_RCC_OscConfig+0x74>
 8001282:	4b76      	ldr	r3, [pc, #472]	; (800145c <HAL_RCC_OscConfig+0x240>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a75      	ldr	r2, [pc, #468]	; (800145c <HAL_RCC_OscConfig+0x240>)
 8001288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	e01d      	b.n	80012cc <HAL_RCC_OscConfig+0xb0>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001298:	d10c      	bne.n	80012b4 <HAL_RCC_OscConfig+0x98>
 800129a:	4b70      	ldr	r3, [pc, #448]	; (800145c <HAL_RCC_OscConfig+0x240>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a6f      	ldr	r2, [pc, #444]	; (800145c <HAL_RCC_OscConfig+0x240>)
 80012a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	4b6d      	ldr	r3, [pc, #436]	; (800145c <HAL_RCC_OscConfig+0x240>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a6c      	ldr	r2, [pc, #432]	; (800145c <HAL_RCC_OscConfig+0x240>)
 80012ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	e00b      	b.n	80012cc <HAL_RCC_OscConfig+0xb0>
 80012b4:	4b69      	ldr	r3, [pc, #420]	; (800145c <HAL_RCC_OscConfig+0x240>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a68      	ldr	r2, [pc, #416]	; (800145c <HAL_RCC_OscConfig+0x240>)
 80012ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	4b66      	ldr	r3, [pc, #408]	; (800145c <HAL_RCC_OscConfig+0x240>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a65      	ldr	r2, [pc, #404]	; (800145c <HAL_RCC_OscConfig+0x240>)
 80012c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d013      	beq.n	80012fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d4:	f7ff fd16 	bl	8000d04 <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012dc:	f7ff fd12 	bl	8000d04 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b64      	cmp	r3, #100	; 0x64
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e207      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ee:	4b5b      	ldr	r3, [pc, #364]	; (800145c <HAL_RCC_OscConfig+0x240>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0f0      	beq.n	80012dc <HAL_RCC_OscConfig+0xc0>
 80012fa:	e014      	b.n	8001326 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fd02 	bl	8000d04 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001304:	f7ff fcfe 	bl	8000d04 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b64      	cmp	r3, #100	; 0x64
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e1f3      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001316:	4b51      	ldr	r3, [pc, #324]	; (800145c <HAL_RCC_OscConfig+0x240>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f0      	bne.n	8001304 <HAL_RCC_OscConfig+0xe8>
 8001322:	e000      	b.n	8001326 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d063      	beq.n	80013fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001332:	4b4a      	ldr	r3, [pc, #296]	; (800145c <HAL_RCC_OscConfig+0x240>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 030c 	and.w	r3, r3, #12
 800133a:	2b00      	cmp	r3, #0
 800133c:	d00b      	beq.n	8001356 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800133e:	4b47      	ldr	r3, [pc, #284]	; (800145c <HAL_RCC_OscConfig+0x240>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001346:	2b08      	cmp	r3, #8
 8001348:	d11c      	bne.n	8001384 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800134a:	4b44      	ldr	r3, [pc, #272]	; (800145c <HAL_RCC_OscConfig+0x240>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d116      	bne.n	8001384 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001356:	4b41      	ldr	r3, [pc, #260]	; (800145c <HAL_RCC_OscConfig+0x240>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d005      	beq.n	800136e <HAL_RCC_OscConfig+0x152>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d001      	beq.n	800136e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e1c7      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136e:	4b3b      	ldr	r3, [pc, #236]	; (800145c <HAL_RCC_OscConfig+0x240>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	4937      	ldr	r1, [pc, #220]	; (800145c <HAL_RCC_OscConfig+0x240>)
 800137e:	4313      	orrs	r3, r2
 8001380:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001382:	e03a      	b.n	80013fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d020      	beq.n	80013ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800138c:	4b34      	ldr	r3, [pc, #208]	; (8001460 <HAL_RCC_OscConfig+0x244>)
 800138e:	2201      	movs	r2, #1
 8001390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001392:	f7ff fcb7 	bl	8000d04 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800139a:	f7ff fcb3 	bl	8000d04 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e1a8      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ac:	4b2b      	ldr	r3, [pc, #172]	; (800145c <HAL_RCC_OscConfig+0x240>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0f0      	beq.n	800139a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b8:	4b28      	ldr	r3, [pc, #160]	; (800145c <HAL_RCC_OscConfig+0x240>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	4925      	ldr	r1, [pc, #148]	; (800145c <HAL_RCC_OscConfig+0x240>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	600b      	str	r3, [r1, #0]
 80013cc:	e015      	b.n	80013fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ce:	4b24      	ldr	r3, [pc, #144]	; (8001460 <HAL_RCC_OscConfig+0x244>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d4:	f7ff fc96 	bl	8000d04 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013dc:	f7ff fc92 	bl	8000d04 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e187      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ee:	4b1b      	ldr	r3, [pc, #108]	; (800145c <HAL_RCC_OscConfig+0x240>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f0      	bne.n	80013dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	2b00      	cmp	r3, #0
 8001404:	d036      	beq.n	8001474 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d016      	beq.n	800143c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800140e:	4b15      	ldr	r3, [pc, #84]	; (8001464 <HAL_RCC_OscConfig+0x248>)
 8001410:	2201      	movs	r2, #1
 8001412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001414:	f7ff fc76 	bl	8000d04 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800141c:	f7ff fc72 	bl	8000d04 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e167      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <HAL_RCC_OscConfig+0x240>)
 8001430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0x200>
 800143a:	e01b      	b.n	8001474 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800143c:	4b09      	ldr	r3, [pc, #36]	; (8001464 <HAL_RCC_OscConfig+0x248>)
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001442:	f7ff fc5f 	bl	8000d04 <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001448:	e00e      	b.n	8001468 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800144a:	f7ff fc5b 	bl	8000d04 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d907      	bls.n	8001468 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e150      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
 800145c:	40023800 	.word	0x40023800
 8001460:	42470000 	.word	0x42470000
 8001464:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001468:	4b88      	ldr	r3, [pc, #544]	; (800168c <HAL_RCC_OscConfig+0x470>)
 800146a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1ea      	bne.n	800144a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	2b00      	cmp	r3, #0
 800147e:	f000 8097 	beq.w	80015b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001482:	2300      	movs	r3, #0
 8001484:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001486:	4b81      	ldr	r3, [pc, #516]	; (800168c <HAL_RCC_OscConfig+0x470>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10f      	bne.n	80014b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	4b7d      	ldr	r3, [pc, #500]	; (800168c <HAL_RCC_OscConfig+0x470>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	4a7c      	ldr	r2, [pc, #496]	; (800168c <HAL_RCC_OscConfig+0x470>)
 800149c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a0:	6413      	str	r3, [r2, #64]	; 0x40
 80014a2:	4b7a      	ldr	r3, [pc, #488]	; (800168c <HAL_RCC_OscConfig+0x470>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ae:	2301      	movs	r3, #1
 80014b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b2:	4b77      	ldr	r3, [pc, #476]	; (8001690 <HAL_RCC_OscConfig+0x474>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d118      	bne.n	80014f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014be:	4b74      	ldr	r3, [pc, #464]	; (8001690 <HAL_RCC_OscConfig+0x474>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a73      	ldr	r2, [pc, #460]	; (8001690 <HAL_RCC_OscConfig+0x474>)
 80014c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ca:	f7ff fc1b 	bl	8000d04 <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014d2:	f7ff fc17 	bl	8000d04 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e10c      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e4:	4b6a      	ldr	r3, [pc, #424]	; (8001690 <HAL_RCC_OscConfig+0x474>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d0f0      	beq.n	80014d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d106      	bne.n	8001506 <HAL_RCC_OscConfig+0x2ea>
 80014f8:	4b64      	ldr	r3, [pc, #400]	; (800168c <HAL_RCC_OscConfig+0x470>)
 80014fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fc:	4a63      	ldr	r2, [pc, #396]	; (800168c <HAL_RCC_OscConfig+0x470>)
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	6713      	str	r3, [r2, #112]	; 0x70
 8001504:	e01c      	b.n	8001540 <HAL_RCC_OscConfig+0x324>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	2b05      	cmp	r3, #5
 800150c:	d10c      	bne.n	8001528 <HAL_RCC_OscConfig+0x30c>
 800150e:	4b5f      	ldr	r3, [pc, #380]	; (800168c <HAL_RCC_OscConfig+0x470>)
 8001510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001512:	4a5e      	ldr	r2, [pc, #376]	; (800168c <HAL_RCC_OscConfig+0x470>)
 8001514:	f043 0304 	orr.w	r3, r3, #4
 8001518:	6713      	str	r3, [r2, #112]	; 0x70
 800151a:	4b5c      	ldr	r3, [pc, #368]	; (800168c <HAL_RCC_OscConfig+0x470>)
 800151c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151e:	4a5b      	ldr	r2, [pc, #364]	; (800168c <HAL_RCC_OscConfig+0x470>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6713      	str	r3, [r2, #112]	; 0x70
 8001526:	e00b      	b.n	8001540 <HAL_RCC_OscConfig+0x324>
 8001528:	4b58      	ldr	r3, [pc, #352]	; (800168c <HAL_RCC_OscConfig+0x470>)
 800152a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152c:	4a57      	ldr	r2, [pc, #348]	; (800168c <HAL_RCC_OscConfig+0x470>)
 800152e:	f023 0301 	bic.w	r3, r3, #1
 8001532:	6713      	str	r3, [r2, #112]	; 0x70
 8001534:	4b55      	ldr	r3, [pc, #340]	; (800168c <HAL_RCC_OscConfig+0x470>)
 8001536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001538:	4a54      	ldr	r2, [pc, #336]	; (800168c <HAL_RCC_OscConfig+0x470>)
 800153a:	f023 0304 	bic.w	r3, r3, #4
 800153e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d015      	beq.n	8001574 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001548:	f7ff fbdc 	bl	8000d04 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800154e:	e00a      	b.n	8001566 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001550:	f7ff fbd8 	bl	8000d04 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	f241 3288 	movw	r2, #5000	; 0x1388
 800155e:	4293      	cmp	r3, r2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e0cb      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001566:	4b49      	ldr	r3, [pc, #292]	; (800168c <HAL_RCC_OscConfig+0x470>)
 8001568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0ee      	beq.n	8001550 <HAL_RCC_OscConfig+0x334>
 8001572:	e014      	b.n	800159e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001574:	f7ff fbc6 	bl	8000d04 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800157a:	e00a      	b.n	8001592 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800157c:	f7ff fbc2 	bl	8000d04 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	f241 3288 	movw	r2, #5000	; 0x1388
 800158a:	4293      	cmp	r3, r2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e0b5      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001592:	4b3e      	ldr	r3, [pc, #248]	; (800168c <HAL_RCC_OscConfig+0x470>)
 8001594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1ee      	bne.n	800157c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800159e:	7dfb      	ldrb	r3, [r7, #23]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d105      	bne.n	80015b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015a4:	4b39      	ldr	r3, [pc, #228]	; (800168c <HAL_RCC_OscConfig+0x470>)
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	4a38      	ldr	r2, [pc, #224]	; (800168c <HAL_RCC_OscConfig+0x470>)
 80015aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 80a1 	beq.w	80016fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015ba:	4b34      	ldr	r3, [pc, #208]	; (800168c <HAL_RCC_OscConfig+0x470>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 030c 	and.w	r3, r3, #12
 80015c2:	2b08      	cmp	r3, #8
 80015c4:	d05c      	beq.n	8001680 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d141      	bne.n	8001652 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ce:	4b31      	ldr	r3, [pc, #196]	; (8001694 <HAL_RCC_OscConfig+0x478>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d4:	f7ff fb96 	bl	8000d04 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015dc:	f7ff fb92 	bl	8000d04 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e087      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ee:	4b27      	ldr	r3, [pc, #156]	; (800168c <HAL_RCC_OscConfig+0x470>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1f0      	bne.n	80015dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69da      	ldr	r2, [r3, #28]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	431a      	orrs	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001608:	019b      	lsls	r3, r3, #6
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001610:	085b      	lsrs	r3, r3, #1
 8001612:	3b01      	subs	r3, #1
 8001614:	041b      	lsls	r3, r3, #16
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161c:	061b      	lsls	r3, r3, #24
 800161e:	491b      	ldr	r1, [pc, #108]	; (800168c <HAL_RCC_OscConfig+0x470>)
 8001620:	4313      	orrs	r3, r2
 8001622:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001624:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <HAL_RCC_OscConfig+0x478>)
 8001626:	2201      	movs	r2, #1
 8001628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162a:	f7ff fb6b 	bl	8000d04 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001632:	f7ff fb67 	bl	8000d04 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e05c      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001644:	4b11      	ldr	r3, [pc, #68]	; (800168c <HAL_RCC_OscConfig+0x470>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0f0      	beq.n	8001632 <HAL_RCC_OscConfig+0x416>
 8001650:	e054      	b.n	80016fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <HAL_RCC_OscConfig+0x478>)
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001658:	f7ff fb54 	bl	8000d04 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001660:	f7ff fb50 	bl	8000d04 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e045      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <HAL_RCC_OscConfig+0x470>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0x444>
 800167e:	e03d      	b.n	80016fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d107      	bne.n	8001698 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e038      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
 800168c:	40023800 	.word	0x40023800
 8001690:	40007000 	.word	0x40007000
 8001694:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001698:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <HAL_RCC_OscConfig+0x4ec>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d028      	beq.n	80016f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d121      	bne.n	80016f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016be:	429a      	cmp	r2, r3
 80016c0:	d11a      	bne.n	80016f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016c8:	4013      	ands	r3, r2
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d111      	bne.n	80016f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016de:	085b      	lsrs	r3, r3, #1
 80016e0:	3b01      	subs	r3, #1
 80016e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d107      	bne.n	80016f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e000      	b.n	80016fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40023800 	.word	0x40023800

0800170c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e0cc      	b.n	80018ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001720:	4b68      	ldr	r3, [pc, #416]	; (80018c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d90c      	bls.n	8001748 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172e:	4b65      	ldr	r3, [pc, #404]	; (80018c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001736:	4b63      	ldr	r3, [pc, #396]	; (80018c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	429a      	cmp	r2, r3
 8001742:	d001      	beq.n	8001748 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e0b8      	b.n	80018ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d020      	beq.n	8001796 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	2b00      	cmp	r3, #0
 800175e:	d005      	beq.n	800176c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001760:	4b59      	ldr	r3, [pc, #356]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	4a58      	ldr	r2, [pc, #352]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800176a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0308 	and.w	r3, r3, #8
 8001774:	2b00      	cmp	r3, #0
 8001776:	d005      	beq.n	8001784 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001778:	4b53      	ldr	r3, [pc, #332]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	4a52      	ldr	r2, [pc, #328]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001782:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001784:	4b50      	ldr	r3, [pc, #320]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	494d      	ldr	r1, [pc, #308]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	4313      	orrs	r3, r2
 8001794:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d044      	beq.n	800182c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d107      	bne.n	80017ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017aa:	4b47      	ldr	r3, [pc, #284]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d119      	bne.n	80017ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e07f      	b.n	80018ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d003      	beq.n	80017ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017c6:	2b03      	cmp	r3, #3
 80017c8:	d107      	bne.n	80017da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ca:	4b3f      	ldr	r3, [pc, #252]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d109      	bne.n	80017ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e06f      	b.n	80018ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017da:	4b3b      	ldr	r3, [pc, #236]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e067      	b.n	80018ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ea:	4b37      	ldr	r3, [pc, #220]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f023 0203 	bic.w	r2, r3, #3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	4934      	ldr	r1, [pc, #208]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017fc:	f7ff fa82 	bl	8000d04 <HAL_GetTick>
 8001800:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001802:	e00a      	b.n	800181a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001804:	f7ff fa7e 	bl	8000d04 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001812:	4293      	cmp	r3, r2
 8001814:	d901      	bls.n	800181a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e04f      	b.n	80018ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181a:	4b2b      	ldr	r3, [pc, #172]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 020c 	and.w	r2, r3, #12
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	429a      	cmp	r2, r3
 800182a:	d1eb      	bne.n	8001804 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800182c:	4b25      	ldr	r3, [pc, #148]	; (80018c4 <HAL_RCC_ClockConfig+0x1b8>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	d20c      	bcs.n	8001854 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183a:	4b22      	ldr	r3, [pc, #136]	; (80018c4 <HAL_RCC_ClockConfig+0x1b8>)
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001842:	4b20      	ldr	r3, [pc, #128]	; (80018c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	429a      	cmp	r2, r3
 800184e:	d001      	beq.n	8001854 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e032      	b.n	80018ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	2b00      	cmp	r3, #0
 800185e:	d008      	beq.n	8001872 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001860:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	4916      	ldr	r1, [pc, #88]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	4313      	orrs	r3, r2
 8001870:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0308 	and.w	r3, r3, #8
 800187a:	2b00      	cmp	r3, #0
 800187c:	d009      	beq.n	8001892 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800187e:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	490e      	ldr	r1, [pc, #56]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	4313      	orrs	r3, r2
 8001890:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001892:	f000 f821 	bl	80018d8 <HAL_RCC_GetSysClockFreq>
 8001896:	4602      	mov	r2, r0
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	091b      	lsrs	r3, r3, #4
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	490a      	ldr	r1, [pc, #40]	; (80018cc <HAL_RCC_ClockConfig+0x1c0>)
 80018a4:	5ccb      	ldrb	r3, [r1, r3]
 80018a6:	fa22 f303 	lsr.w	r3, r2, r3
 80018aa:	4a09      	ldr	r2, [pc, #36]	; (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 80018ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff f802 	bl	80008bc <HAL_InitTick>

  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40023c00 	.word	0x40023c00
 80018c8:	40023800 	.word	0x40023800
 80018cc:	08005238 	.word	0x08005238
 80018d0:	20000000 	.word	0x20000000
 80018d4:	20000004 	.word	0x20000004

080018d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018dc:	b094      	sub	sp, #80	; 0x50
 80018de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	647b      	str	r3, [r7, #68]	; 0x44
 80018e4:	2300      	movs	r3, #0
 80018e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018e8:	2300      	movs	r3, #0
 80018ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018f0:	4b79      	ldr	r3, [pc, #484]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 030c 	and.w	r3, r3, #12
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d00d      	beq.n	8001918 <HAL_RCC_GetSysClockFreq+0x40>
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	f200 80e1 	bhi.w	8001ac4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001902:	2b00      	cmp	r3, #0
 8001904:	d002      	beq.n	800190c <HAL_RCC_GetSysClockFreq+0x34>
 8001906:	2b04      	cmp	r3, #4
 8001908:	d003      	beq.n	8001912 <HAL_RCC_GetSysClockFreq+0x3a>
 800190a:	e0db      	b.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800190c:	4b73      	ldr	r3, [pc, #460]	; (8001adc <HAL_RCC_GetSysClockFreq+0x204>)
 800190e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001910:	e0db      	b.n	8001aca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001912:	4b73      	ldr	r3, [pc, #460]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001914:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001916:	e0d8      	b.n	8001aca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001918:	4b6f      	ldr	r3, [pc, #444]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001920:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001922:	4b6d      	ldr	r3, [pc, #436]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d063      	beq.n	80019f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800192e:	4b6a      	ldr	r3, [pc, #424]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	099b      	lsrs	r3, r3, #6
 8001934:	2200      	movs	r2, #0
 8001936:	63bb      	str	r3, [r7, #56]	; 0x38
 8001938:	63fa      	str	r2, [r7, #60]	; 0x3c
 800193a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800193c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001940:	633b      	str	r3, [r7, #48]	; 0x30
 8001942:	2300      	movs	r3, #0
 8001944:	637b      	str	r3, [r7, #52]	; 0x34
 8001946:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800194a:	4622      	mov	r2, r4
 800194c:	462b      	mov	r3, r5
 800194e:	f04f 0000 	mov.w	r0, #0
 8001952:	f04f 0100 	mov.w	r1, #0
 8001956:	0159      	lsls	r1, r3, #5
 8001958:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800195c:	0150      	lsls	r0, r2, #5
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4621      	mov	r1, r4
 8001964:	1a51      	subs	r1, r2, r1
 8001966:	6139      	str	r1, [r7, #16]
 8001968:	4629      	mov	r1, r5
 800196a:	eb63 0301 	sbc.w	r3, r3, r1
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	f04f 0300 	mov.w	r3, #0
 8001978:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800197c:	4659      	mov	r1, fp
 800197e:	018b      	lsls	r3, r1, #6
 8001980:	4651      	mov	r1, sl
 8001982:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001986:	4651      	mov	r1, sl
 8001988:	018a      	lsls	r2, r1, #6
 800198a:	4651      	mov	r1, sl
 800198c:	ebb2 0801 	subs.w	r8, r2, r1
 8001990:	4659      	mov	r1, fp
 8001992:	eb63 0901 	sbc.w	r9, r3, r1
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	f04f 0300 	mov.w	r3, #0
 800199e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019aa:	4690      	mov	r8, r2
 80019ac:	4699      	mov	r9, r3
 80019ae:	4623      	mov	r3, r4
 80019b0:	eb18 0303 	adds.w	r3, r8, r3
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	462b      	mov	r3, r5
 80019b8:	eb49 0303 	adc.w	r3, r9, r3
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019ca:	4629      	mov	r1, r5
 80019cc:	024b      	lsls	r3, r1, #9
 80019ce:	4621      	mov	r1, r4
 80019d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019d4:	4621      	mov	r1, r4
 80019d6:	024a      	lsls	r2, r1, #9
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019de:	2200      	movs	r2, #0
 80019e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80019e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019e8:	f7fe fbfa 	bl	80001e0 <__aeabi_uldivmod>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4613      	mov	r3, r2
 80019f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019f4:	e058      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f6:	4b38      	ldr	r3, [pc, #224]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	099b      	lsrs	r3, r3, #6
 80019fc:	2200      	movs	r2, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	4611      	mov	r1, r2
 8001a02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a06:	623b      	str	r3, [r7, #32]
 8001a08:	2300      	movs	r3, #0
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a10:	4642      	mov	r2, r8
 8001a12:	464b      	mov	r3, r9
 8001a14:	f04f 0000 	mov.w	r0, #0
 8001a18:	f04f 0100 	mov.w	r1, #0
 8001a1c:	0159      	lsls	r1, r3, #5
 8001a1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a22:	0150      	lsls	r0, r2, #5
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4641      	mov	r1, r8
 8001a2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a2e:	4649      	mov	r1, r9
 8001a30:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	f04f 0300 	mov.w	r3, #0
 8001a3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a48:	ebb2 040a 	subs.w	r4, r2, sl
 8001a4c:	eb63 050b 	sbc.w	r5, r3, fp
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	f04f 0300 	mov.w	r3, #0
 8001a58:	00eb      	lsls	r3, r5, #3
 8001a5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a5e:	00e2      	lsls	r2, r4, #3
 8001a60:	4614      	mov	r4, r2
 8001a62:	461d      	mov	r5, r3
 8001a64:	4643      	mov	r3, r8
 8001a66:	18e3      	adds	r3, r4, r3
 8001a68:	603b      	str	r3, [r7, #0]
 8001a6a:	464b      	mov	r3, r9
 8001a6c:	eb45 0303 	adc.w	r3, r5, r3
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a7e:	4629      	mov	r1, r5
 8001a80:	028b      	lsls	r3, r1, #10
 8001a82:	4621      	mov	r1, r4
 8001a84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a88:	4621      	mov	r1, r4
 8001a8a:	028a      	lsls	r2, r1, #10
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a92:	2200      	movs	r2, #0
 8001a94:	61bb      	str	r3, [r7, #24]
 8001a96:	61fa      	str	r2, [r7, #28]
 8001a98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a9c:	f7fe fba0 	bl	80001e0 <__aeabi_uldivmod>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	0c1b      	lsrs	r3, r3, #16
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ab8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001aba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ac2:	e002      	b.n	8001aca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <HAL_RCC_GetSysClockFreq+0x204>)
 8001ac6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ac8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3750      	adds	r7, #80	; 0x50
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	00f42400 	.word	0x00f42400
 8001ae0:	007a1200 	.word	0x007a1200

08001ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ae8:	4b03      	ldr	r3, [pc, #12]	; (8001af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001aea:	681b      	ldr	r3, [r3, #0]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	20000000 	.word	0x20000000

08001afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b00:	f7ff fff0 	bl	8001ae4 <HAL_RCC_GetHCLKFreq>
 8001b04:	4602      	mov	r2, r0
 8001b06:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	0a9b      	lsrs	r3, r3, #10
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	4903      	ldr	r1, [pc, #12]	; (8001b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b12:	5ccb      	ldrb	r3, [r1, r3]
 8001b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	08005248 	.word	0x08005248

08001b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b28:	f7ff ffdc 	bl	8001ae4 <HAL_RCC_GetHCLKFreq>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	0b5b      	lsrs	r3, r3, #13
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	4903      	ldr	r1, [pc, #12]	; (8001b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b3a:	5ccb      	ldrb	r3, [r1, r3]
 8001b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40023800 	.word	0x40023800
 8001b48:	08005248 	.word	0x08005248

08001b4c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	220f      	movs	r2, #15
 8001b5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b5c:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 0203 	and.w	r2, r3, #3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b68:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	08db      	lsrs	r3, r3, #3
 8001b86:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b8e:	4b07      	ldr	r3, [pc, #28]	; (8001bac <HAL_RCC_GetClockConfig+0x60>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0207 	and.w	r2, r3, #7
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	601a      	str	r2, [r3, #0]
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40023c00 	.word	0x40023c00

08001bb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e041      	b.n	8001c46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d106      	bne.n	8001bdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f839 	bl	8001c4e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2202      	movs	r2, #2
 8001be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3304      	adds	r3, #4
 8001bec:	4619      	mov	r1, r3
 8001bee:	4610      	mov	r0, r2
 8001bf0:	f000 f9ca 	bl	8001f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
	...

08001c64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d001      	beq.n	8001c7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e044      	b.n	8001d06 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2202      	movs	r2, #2
 8001c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f042 0201 	orr.w	r2, r2, #1
 8001c92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a1e      	ldr	r2, [pc, #120]	; (8001d14 <HAL_TIM_Base_Start_IT+0xb0>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d018      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x6c>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ca6:	d013      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x6c>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a1a      	ldr	r2, [pc, #104]	; (8001d18 <HAL_TIM_Base_Start_IT+0xb4>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d00e      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x6c>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a19      	ldr	r2, [pc, #100]	; (8001d1c <HAL_TIM_Base_Start_IT+0xb8>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d009      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x6c>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a17      	ldr	r2, [pc, #92]	; (8001d20 <HAL_TIM_Base_Start_IT+0xbc>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d004      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x6c>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a16      	ldr	r2, [pc, #88]	; (8001d24 <HAL_TIM_Base_Start_IT+0xc0>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d111      	bne.n	8001cf4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2b06      	cmp	r3, #6
 8001ce0:	d010      	beq.n	8001d04 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f042 0201 	orr.w	r2, r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cf2:	e007      	b.n	8001d04 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 0201 	orr.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	40010000 	.word	0x40010000
 8001d18:	40000400 	.word	0x40000400
 8001d1c:	40000800 	.word	0x40000800
 8001d20:	40000c00 	.word	0x40000c00
 8001d24:	40014000 	.word	0x40014000

08001d28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d122      	bne.n	8001d84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d11b      	bne.n	8001d84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f06f 0202 	mvn.w	r2, #2
 8001d54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f8ee 	bl	8001f4c <HAL_TIM_IC_CaptureCallback>
 8001d70:	e005      	b.n	8001d7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f8e0 	bl	8001f38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f8f1 	bl	8001f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d122      	bne.n	8001dd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d11b      	bne.n	8001dd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f06f 0204 	mvn.w	r2, #4
 8001da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2202      	movs	r2, #2
 8001dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f8c4 	bl	8001f4c <HAL_TIM_IC_CaptureCallback>
 8001dc4:	e005      	b.n	8001dd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f8b6 	bl	8001f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 f8c7 	bl	8001f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	2b08      	cmp	r3, #8
 8001de4:	d122      	bne.n	8001e2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f003 0308 	and.w	r3, r3, #8
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d11b      	bne.n	8001e2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f06f 0208 	mvn.w	r2, #8
 8001dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2204      	movs	r2, #4
 8001e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f89a 	bl	8001f4c <HAL_TIM_IC_CaptureCallback>
 8001e18:	e005      	b.n	8001e26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f88c 	bl	8001f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f89d 	bl	8001f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	f003 0310 	and.w	r3, r3, #16
 8001e36:	2b10      	cmp	r3, #16
 8001e38:	d122      	bne.n	8001e80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	f003 0310 	and.w	r3, r3, #16
 8001e44:	2b10      	cmp	r3, #16
 8001e46:	d11b      	bne.n	8001e80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f06f 0210 	mvn.w	r2, #16
 8001e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2208      	movs	r2, #8
 8001e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f870 	bl	8001f4c <HAL_TIM_IC_CaptureCallback>
 8001e6c:	e005      	b.n	8001e7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f862 	bl	8001f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f873 	bl	8001f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d10e      	bne.n	8001eac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d107      	bne.n	8001eac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f06f 0201 	mvn.w	r2, #1
 8001ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7fe fcc4 	bl	8000834 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb6:	2b80      	cmp	r3, #128	; 0x80
 8001eb8:	d10e      	bne.n	8001ed8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec4:	2b80      	cmp	r3, #128	; 0x80
 8001ec6:	d107      	bne.n	8001ed8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f8e2 	bl	800209c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee2:	2b40      	cmp	r3, #64	; 0x40
 8001ee4:	d10e      	bne.n	8001f04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef0:	2b40      	cmp	r3, #64	; 0x40
 8001ef2:	d107      	bne.n	8001f04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f838 	bl	8001f74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	f003 0320 	and.w	r3, r3, #32
 8001f0e:	2b20      	cmp	r3, #32
 8001f10:	d10e      	bne.n	8001f30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	f003 0320 	and.w	r3, r3, #32
 8001f1c:	2b20      	cmp	r3, #32
 8001f1e:	d107      	bne.n	8001f30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f06f 0220 	mvn.w	r2, #32
 8001f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f8ac 	bl	8002088 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f30:	bf00      	nop
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a34      	ldr	r2, [pc, #208]	; (800206c <TIM_Base_SetConfig+0xe4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d00f      	beq.n	8001fc0 <TIM_Base_SetConfig+0x38>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fa6:	d00b      	beq.n	8001fc0 <TIM_Base_SetConfig+0x38>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a31      	ldr	r2, [pc, #196]	; (8002070 <TIM_Base_SetConfig+0xe8>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d007      	beq.n	8001fc0 <TIM_Base_SetConfig+0x38>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a30      	ldr	r2, [pc, #192]	; (8002074 <TIM_Base_SetConfig+0xec>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d003      	beq.n	8001fc0 <TIM_Base_SetConfig+0x38>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a2f      	ldr	r2, [pc, #188]	; (8002078 <TIM_Base_SetConfig+0xf0>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d108      	bne.n	8001fd2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a25      	ldr	r2, [pc, #148]	; (800206c <TIM_Base_SetConfig+0xe4>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d01b      	beq.n	8002012 <TIM_Base_SetConfig+0x8a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe0:	d017      	beq.n	8002012 <TIM_Base_SetConfig+0x8a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a22      	ldr	r2, [pc, #136]	; (8002070 <TIM_Base_SetConfig+0xe8>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d013      	beq.n	8002012 <TIM_Base_SetConfig+0x8a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a21      	ldr	r2, [pc, #132]	; (8002074 <TIM_Base_SetConfig+0xec>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d00f      	beq.n	8002012 <TIM_Base_SetConfig+0x8a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a20      	ldr	r2, [pc, #128]	; (8002078 <TIM_Base_SetConfig+0xf0>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d00b      	beq.n	8002012 <TIM_Base_SetConfig+0x8a>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a1f      	ldr	r2, [pc, #124]	; (800207c <TIM_Base_SetConfig+0xf4>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d007      	beq.n	8002012 <TIM_Base_SetConfig+0x8a>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a1e      	ldr	r2, [pc, #120]	; (8002080 <TIM_Base_SetConfig+0xf8>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d003      	beq.n	8002012 <TIM_Base_SetConfig+0x8a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a1d      	ldr	r2, [pc, #116]	; (8002084 <TIM_Base_SetConfig+0xfc>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d108      	bne.n	8002024 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002018:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	4313      	orrs	r3, r2
 8002022:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	4313      	orrs	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a08      	ldr	r2, [pc, #32]	; (800206c <TIM_Base_SetConfig+0xe4>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d103      	bne.n	8002058 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	691a      	ldr	r2, [r3, #16]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	615a      	str	r2, [r3, #20]
}
 800205e:	bf00      	nop
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40010000 	.word	0x40010000
 8002070:	40000400 	.word	0x40000400
 8002074:	40000800 	.word	0x40000800
 8002078:	40000c00 	.word	0x40000c00
 800207c:	40014000 	.word	0x40014000
 8002080:	40014400 	.word	0x40014400
 8002084:	40014800 	.word	0x40014800

08002088 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e03f      	b.n	8002142 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d106      	bne.n	80020dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7fe fd6c 	bl	8000bb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2224      	movs	r2, #36	; 0x24
 80020e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68da      	ldr	r2, [r3, #12]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 f929 	bl	800234c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	691a      	ldr	r2, [r3, #16]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002108:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	695a      	ldr	r2, [r3, #20]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002118:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68da      	ldr	r2, [r3, #12]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002128:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2220      	movs	r2, #32
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2220      	movs	r2, #32
 800213c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b08a      	sub	sp, #40	; 0x28
 800214e:	af02      	add	r7, sp, #8
 8002150:	60f8      	str	r0, [r7, #12]
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	603b      	str	r3, [r7, #0]
 8002156:	4613      	mov	r3, r2
 8002158:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b20      	cmp	r3, #32
 8002168:	d17c      	bne.n	8002264 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d002      	beq.n	8002176 <HAL_UART_Transmit+0x2c>
 8002170:	88fb      	ldrh	r3, [r7, #6]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e075      	b.n	8002266 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002180:	2b01      	cmp	r3, #1
 8002182:	d101      	bne.n	8002188 <HAL_UART_Transmit+0x3e>
 8002184:	2302      	movs	r3, #2
 8002186:	e06e      	b.n	8002266 <HAL_UART_Transmit+0x11c>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2221      	movs	r2, #33	; 0x21
 800219a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800219e:	f7fe fdb1 	bl	8000d04 <HAL_GetTick>
 80021a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	88fa      	ldrh	r2, [r7, #6]
 80021a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	88fa      	ldrh	r2, [r7, #6]
 80021ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021b8:	d108      	bne.n	80021cc <HAL_UART_Transmit+0x82>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d104      	bne.n	80021cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	61bb      	str	r3, [r7, #24]
 80021ca:	e003      	b.n	80021d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80021dc:	e02a      	b.n	8002234 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	2200      	movs	r2, #0
 80021e6:	2180      	movs	r1, #128	; 0x80
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f000 f840 	bl	800226e <UART_WaitOnFlagUntilTimeout>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e036      	b.n	8002266 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10b      	bne.n	8002216 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800220c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	3302      	adds	r3, #2
 8002212:	61bb      	str	r3, [r7, #24]
 8002214:	e007      	b.n	8002226 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	781a      	ldrb	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	3301      	adds	r3, #1
 8002224:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800222a:	b29b      	uxth	r3, r3
 800222c:	3b01      	subs	r3, #1
 800222e:	b29a      	uxth	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002238:	b29b      	uxth	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1cf      	bne.n	80021de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2200      	movs	r2, #0
 8002246:	2140      	movs	r1, #64	; 0x40
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f000 f810 	bl	800226e <UART_WaitOnFlagUntilTimeout>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e006      	b.n	8002266 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2220      	movs	r2, #32
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002260:	2300      	movs	r3, #0
 8002262:	e000      	b.n	8002266 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002264:	2302      	movs	r3, #2
  }
}
 8002266:	4618      	mov	r0, r3
 8002268:	3720      	adds	r7, #32
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b090      	sub	sp, #64	; 0x40
 8002272:	af00      	add	r7, sp, #0
 8002274:	60f8      	str	r0, [r7, #12]
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	603b      	str	r3, [r7, #0]
 800227a:	4613      	mov	r3, r2
 800227c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800227e:	e050      	b.n	8002322 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002286:	d04c      	beq.n	8002322 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800228a:	2b00      	cmp	r3, #0
 800228c:	d007      	beq.n	800229e <UART_WaitOnFlagUntilTimeout+0x30>
 800228e:	f7fe fd39 	bl	8000d04 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800229a:	429a      	cmp	r2, r3
 800229c:	d241      	bcs.n	8002322 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	330c      	adds	r3, #12
 80022a4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a8:	e853 3f00 	ldrex	r3, [r3]
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80022b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	330c      	adds	r3, #12
 80022bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022be:	637a      	str	r2, [r7, #52]	; 0x34
 80022c0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022c6:	e841 2300 	strex	r3, r2, [r1]
 80022ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80022cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1e5      	bne.n	800229e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	3314      	adds	r3, #20
 80022d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	e853 3f00 	ldrex	r3, [r3]
 80022e0:	613b      	str	r3, [r7, #16]
   return(result);
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	f023 0301 	bic.w	r3, r3, #1
 80022e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	3314      	adds	r3, #20
 80022f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022f2:	623a      	str	r2, [r7, #32]
 80022f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022f6:	69f9      	ldr	r1, [r7, #28]
 80022f8:	6a3a      	ldr	r2, [r7, #32]
 80022fa:	e841 2300 	strex	r3, r2, [r1]
 80022fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1e5      	bne.n	80022d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2220      	movs	r2, #32
 800230a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2220      	movs	r2, #32
 8002312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e00f      	b.n	8002342 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	4013      	ands	r3, r2
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	429a      	cmp	r2, r3
 8002330:	bf0c      	ite	eq
 8002332:	2301      	moveq	r3, #1
 8002334:	2300      	movne	r3, #0
 8002336:	b2db      	uxtb	r3, r3
 8002338:	461a      	mov	r2, r3
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	429a      	cmp	r2, r3
 800233e:	d09f      	beq.n	8002280 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3740      	adds	r7, #64	; 0x40
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
	...

0800234c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800234c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002350:	b0c0      	sub	sp, #256	; 0x100
 8002352:	af00      	add	r7, sp, #0
 8002354:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002368:	68d9      	ldr	r1, [r3, #12]
 800236a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	ea40 0301 	orr.w	r3, r0, r1
 8002374:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	431a      	orrs	r2, r3
 8002384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	431a      	orrs	r2, r3
 800238c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	4313      	orrs	r3, r2
 8002394:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80023a4:	f021 010c 	bic.w	r1, r1, #12
 80023a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80023b2:	430b      	orrs	r3, r1
 80023b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80023c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c6:	6999      	ldr	r1, [r3, #24]
 80023c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	ea40 0301 	orr.w	r3, r0, r1
 80023d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	4b8f      	ldr	r3, [pc, #572]	; (8002618 <UART_SetConfig+0x2cc>)
 80023dc:	429a      	cmp	r2, r3
 80023de:	d005      	beq.n	80023ec <UART_SetConfig+0xa0>
 80023e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	4b8d      	ldr	r3, [pc, #564]	; (800261c <UART_SetConfig+0x2d0>)
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d104      	bne.n	80023f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023ec:	f7ff fb9a 	bl	8001b24 <HAL_RCC_GetPCLK2Freq>
 80023f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80023f4:	e003      	b.n	80023fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023f6:	f7ff fb81 	bl	8001afc <HAL_RCC_GetPCLK1Freq>
 80023fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002408:	f040 810c 	bne.w	8002624 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800240c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002410:	2200      	movs	r2, #0
 8002412:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002416:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800241a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800241e:	4622      	mov	r2, r4
 8002420:	462b      	mov	r3, r5
 8002422:	1891      	adds	r1, r2, r2
 8002424:	65b9      	str	r1, [r7, #88]	; 0x58
 8002426:	415b      	adcs	r3, r3
 8002428:	65fb      	str	r3, [r7, #92]	; 0x5c
 800242a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800242e:	4621      	mov	r1, r4
 8002430:	eb12 0801 	adds.w	r8, r2, r1
 8002434:	4629      	mov	r1, r5
 8002436:	eb43 0901 	adc.w	r9, r3, r1
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	f04f 0300 	mov.w	r3, #0
 8002442:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002446:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800244a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800244e:	4690      	mov	r8, r2
 8002450:	4699      	mov	r9, r3
 8002452:	4623      	mov	r3, r4
 8002454:	eb18 0303 	adds.w	r3, r8, r3
 8002458:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800245c:	462b      	mov	r3, r5
 800245e:	eb49 0303 	adc.w	r3, r9, r3
 8002462:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002472:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002476:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800247a:	460b      	mov	r3, r1
 800247c:	18db      	adds	r3, r3, r3
 800247e:	653b      	str	r3, [r7, #80]	; 0x50
 8002480:	4613      	mov	r3, r2
 8002482:	eb42 0303 	adc.w	r3, r2, r3
 8002486:	657b      	str	r3, [r7, #84]	; 0x54
 8002488:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800248c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002490:	f7fd fea6 	bl	80001e0 <__aeabi_uldivmod>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4b61      	ldr	r3, [pc, #388]	; (8002620 <UART_SetConfig+0x2d4>)
 800249a:	fba3 2302 	umull	r2, r3, r3, r2
 800249e:	095b      	lsrs	r3, r3, #5
 80024a0:	011c      	lsls	r4, r3, #4
 80024a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024a6:	2200      	movs	r2, #0
 80024a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80024ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80024b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80024b4:	4642      	mov	r2, r8
 80024b6:	464b      	mov	r3, r9
 80024b8:	1891      	adds	r1, r2, r2
 80024ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80024bc:	415b      	adcs	r3, r3
 80024be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80024c4:	4641      	mov	r1, r8
 80024c6:	eb12 0a01 	adds.w	sl, r2, r1
 80024ca:	4649      	mov	r1, r9
 80024cc:	eb43 0b01 	adc.w	fp, r3, r1
 80024d0:	f04f 0200 	mov.w	r2, #0
 80024d4:	f04f 0300 	mov.w	r3, #0
 80024d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024e4:	4692      	mov	sl, r2
 80024e6:	469b      	mov	fp, r3
 80024e8:	4643      	mov	r3, r8
 80024ea:	eb1a 0303 	adds.w	r3, sl, r3
 80024ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80024f2:	464b      	mov	r3, r9
 80024f4:	eb4b 0303 	adc.w	r3, fp, r3
 80024f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80024fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002508:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800250c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002510:	460b      	mov	r3, r1
 8002512:	18db      	adds	r3, r3, r3
 8002514:	643b      	str	r3, [r7, #64]	; 0x40
 8002516:	4613      	mov	r3, r2
 8002518:	eb42 0303 	adc.w	r3, r2, r3
 800251c:	647b      	str	r3, [r7, #68]	; 0x44
 800251e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002522:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002526:	f7fd fe5b 	bl	80001e0 <__aeabi_uldivmod>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	4611      	mov	r1, r2
 8002530:	4b3b      	ldr	r3, [pc, #236]	; (8002620 <UART_SetConfig+0x2d4>)
 8002532:	fba3 2301 	umull	r2, r3, r3, r1
 8002536:	095b      	lsrs	r3, r3, #5
 8002538:	2264      	movs	r2, #100	; 0x64
 800253a:	fb02 f303 	mul.w	r3, r2, r3
 800253e:	1acb      	subs	r3, r1, r3
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002546:	4b36      	ldr	r3, [pc, #216]	; (8002620 <UART_SetConfig+0x2d4>)
 8002548:	fba3 2302 	umull	r2, r3, r3, r2
 800254c:	095b      	lsrs	r3, r3, #5
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002554:	441c      	add	r4, r3
 8002556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800255a:	2200      	movs	r2, #0
 800255c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002560:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002564:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002568:	4642      	mov	r2, r8
 800256a:	464b      	mov	r3, r9
 800256c:	1891      	adds	r1, r2, r2
 800256e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002570:	415b      	adcs	r3, r3
 8002572:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002574:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002578:	4641      	mov	r1, r8
 800257a:	1851      	adds	r1, r2, r1
 800257c:	6339      	str	r1, [r7, #48]	; 0x30
 800257e:	4649      	mov	r1, r9
 8002580:	414b      	adcs	r3, r1
 8002582:	637b      	str	r3, [r7, #52]	; 0x34
 8002584:	f04f 0200 	mov.w	r2, #0
 8002588:	f04f 0300 	mov.w	r3, #0
 800258c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002590:	4659      	mov	r1, fp
 8002592:	00cb      	lsls	r3, r1, #3
 8002594:	4651      	mov	r1, sl
 8002596:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800259a:	4651      	mov	r1, sl
 800259c:	00ca      	lsls	r2, r1, #3
 800259e:	4610      	mov	r0, r2
 80025a0:	4619      	mov	r1, r3
 80025a2:	4603      	mov	r3, r0
 80025a4:	4642      	mov	r2, r8
 80025a6:	189b      	adds	r3, r3, r2
 80025a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80025ac:	464b      	mov	r3, r9
 80025ae:	460a      	mov	r2, r1
 80025b0:	eb42 0303 	adc.w	r3, r2, r3
 80025b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80025c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80025c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80025cc:	460b      	mov	r3, r1
 80025ce:	18db      	adds	r3, r3, r3
 80025d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80025d2:	4613      	mov	r3, r2
 80025d4:	eb42 0303 	adc.w	r3, r2, r3
 80025d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80025e2:	f7fd fdfd 	bl	80001e0 <__aeabi_uldivmod>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <UART_SetConfig+0x2d4>)
 80025ec:	fba3 1302 	umull	r1, r3, r3, r2
 80025f0:	095b      	lsrs	r3, r3, #5
 80025f2:	2164      	movs	r1, #100	; 0x64
 80025f4:	fb01 f303 	mul.w	r3, r1, r3
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	3332      	adds	r3, #50	; 0x32
 80025fe:	4a08      	ldr	r2, [pc, #32]	; (8002620 <UART_SetConfig+0x2d4>)
 8002600:	fba2 2303 	umull	r2, r3, r2, r3
 8002604:	095b      	lsrs	r3, r3, #5
 8002606:	f003 0207 	and.w	r2, r3, #7
 800260a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4422      	add	r2, r4
 8002612:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002614:	e106      	b.n	8002824 <UART_SetConfig+0x4d8>
 8002616:	bf00      	nop
 8002618:	40011000 	.word	0x40011000
 800261c:	40011400 	.word	0x40011400
 8002620:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002624:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002628:	2200      	movs	r2, #0
 800262a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800262e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002632:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002636:	4642      	mov	r2, r8
 8002638:	464b      	mov	r3, r9
 800263a:	1891      	adds	r1, r2, r2
 800263c:	6239      	str	r1, [r7, #32]
 800263e:	415b      	adcs	r3, r3
 8002640:	627b      	str	r3, [r7, #36]	; 0x24
 8002642:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002646:	4641      	mov	r1, r8
 8002648:	1854      	adds	r4, r2, r1
 800264a:	4649      	mov	r1, r9
 800264c:	eb43 0501 	adc.w	r5, r3, r1
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	00eb      	lsls	r3, r5, #3
 800265a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800265e:	00e2      	lsls	r2, r4, #3
 8002660:	4614      	mov	r4, r2
 8002662:	461d      	mov	r5, r3
 8002664:	4643      	mov	r3, r8
 8002666:	18e3      	adds	r3, r4, r3
 8002668:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800266c:	464b      	mov	r3, r9
 800266e:	eb45 0303 	adc.w	r3, r5, r3
 8002672:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002682:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	f04f 0300 	mov.w	r3, #0
 800268e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002692:	4629      	mov	r1, r5
 8002694:	008b      	lsls	r3, r1, #2
 8002696:	4621      	mov	r1, r4
 8002698:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800269c:	4621      	mov	r1, r4
 800269e:	008a      	lsls	r2, r1, #2
 80026a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80026a4:	f7fd fd9c 	bl	80001e0 <__aeabi_uldivmod>
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	4b60      	ldr	r3, [pc, #384]	; (8002830 <UART_SetConfig+0x4e4>)
 80026ae:	fba3 2302 	umull	r2, r3, r3, r2
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	011c      	lsls	r4, r3, #4
 80026b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026ba:	2200      	movs	r2, #0
 80026bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80026c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80026c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80026c8:	4642      	mov	r2, r8
 80026ca:	464b      	mov	r3, r9
 80026cc:	1891      	adds	r1, r2, r2
 80026ce:	61b9      	str	r1, [r7, #24]
 80026d0:	415b      	adcs	r3, r3
 80026d2:	61fb      	str	r3, [r7, #28]
 80026d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026d8:	4641      	mov	r1, r8
 80026da:	1851      	adds	r1, r2, r1
 80026dc:	6139      	str	r1, [r7, #16]
 80026de:	4649      	mov	r1, r9
 80026e0:	414b      	adcs	r3, r1
 80026e2:	617b      	str	r3, [r7, #20]
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	f04f 0300 	mov.w	r3, #0
 80026ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026f0:	4659      	mov	r1, fp
 80026f2:	00cb      	lsls	r3, r1, #3
 80026f4:	4651      	mov	r1, sl
 80026f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026fa:	4651      	mov	r1, sl
 80026fc:	00ca      	lsls	r2, r1, #3
 80026fe:	4610      	mov	r0, r2
 8002700:	4619      	mov	r1, r3
 8002702:	4603      	mov	r3, r0
 8002704:	4642      	mov	r2, r8
 8002706:	189b      	adds	r3, r3, r2
 8002708:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800270c:	464b      	mov	r3, r9
 800270e:	460a      	mov	r2, r1
 8002710:	eb42 0303 	adc.w	r3, r2, r3
 8002714:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	67bb      	str	r3, [r7, #120]	; 0x78
 8002722:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002730:	4649      	mov	r1, r9
 8002732:	008b      	lsls	r3, r1, #2
 8002734:	4641      	mov	r1, r8
 8002736:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800273a:	4641      	mov	r1, r8
 800273c:	008a      	lsls	r2, r1, #2
 800273e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002742:	f7fd fd4d 	bl	80001e0 <__aeabi_uldivmod>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	4611      	mov	r1, r2
 800274c:	4b38      	ldr	r3, [pc, #224]	; (8002830 <UART_SetConfig+0x4e4>)
 800274e:	fba3 2301 	umull	r2, r3, r3, r1
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	2264      	movs	r2, #100	; 0x64
 8002756:	fb02 f303 	mul.w	r3, r2, r3
 800275a:	1acb      	subs	r3, r1, r3
 800275c:	011b      	lsls	r3, r3, #4
 800275e:	3332      	adds	r3, #50	; 0x32
 8002760:	4a33      	ldr	r2, [pc, #204]	; (8002830 <UART_SetConfig+0x4e4>)
 8002762:	fba2 2303 	umull	r2, r3, r2, r3
 8002766:	095b      	lsrs	r3, r3, #5
 8002768:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800276c:	441c      	add	r4, r3
 800276e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002772:	2200      	movs	r2, #0
 8002774:	673b      	str	r3, [r7, #112]	; 0x70
 8002776:	677a      	str	r2, [r7, #116]	; 0x74
 8002778:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800277c:	4642      	mov	r2, r8
 800277e:	464b      	mov	r3, r9
 8002780:	1891      	adds	r1, r2, r2
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	415b      	adcs	r3, r3
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800278c:	4641      	mov	r1, r8
 800278e:	1851      	adds	r1, r2, r1
 8002790:	6039      	str	r1, [r7, #0]
 8002792:	4649      	mov	r1, r9
 8002794:	414b      	adcs	r3, r1
 8002796:	607b      	str	r3, [r7, #4]
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	f04f 0300 	mov.w	r3, #0
 80027a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80027a4:	4659      	mov	r1, fp
 80027a6:	00cb      	lsls	r3, r1, #3
 80027a8:	4651      	mov	r1, sl
 80027aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027ae:	4651      	mov	r1, sl
 80027b0:	00ca      	lsls	r2, r1, #3
 80027b2:	4610      	mov	r0, r2
 80027b4:	4619      	mov	r1, r3
 80027b6:	4603      	mov	r3, r0
 80027b8:	4642      	mov	r2, r8
 80027ba:	189b      	adds	r3, r3, r2
 80027bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80027be:	464b      	mov	r3, r9
 80027c0:	460a      	mov	r2, r1
 80027c2:	eb42 0303 	adc.w	r3, r2, r3
 80027c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	663b      	str	r3, [r7, #96]	; 0x60
 80027d2:	667a      	str	r2, [r7, #100]	; 0x64
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	f04f 0300 	mov.w	r3, #0
 80027dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80027e0:	4649      	mov	r1, r9
 80027e2:	008b      	lsls	r3, r1, #2
 80027e4:	4641      	mov	r1, r8
 80027e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027ea:	4641      	mov	r1, r8
 80027ec:	008a      	lsls	r2, r1, #2
 80027ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80027f2:	f7fd fcf5 	bl	80001e0 <__aeabi_uldivmod>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	4b0d      	ldr	r3, [pc, #52]	; (8002830 <UART_SetConfig+0x4e4>)
 80027fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002800:	095b      	lsrs	r3, r3, #5
 8002802:	2164      	movs	r1, #100	; 0x64
 8002804:	fb01 f303 	mul.w	r3, r1, r3
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	011b      	lsls	r3, r3, #4
 800280c:	3332      	adds	r3, #50	; 0x32
 800280e:	4a08      	ldr	r2, [pc, #32]	; (8002830 <UART_SetConfig+0x4e4>)
 8002810:	fba2 2303 	umull	r2, r3, r2, r3
 8002814:	095b      	lsrs	r3, r3, #5
 8002816:	f003 020f 	and.w	r2, r3, #15
 800281a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4422      	add	r2, r4
 8002822:	609a      	str	r2, [r3, #8]
}
 8002824:	bf00      	nop
 8002826:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800282a:	46bd      	mov	sp, r7
 800282c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002830:	51eb851f 	.word	0x51eb851f

08002834 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800283e:	2300      	movs	r3, #0
 8002840:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002846:	2b84      	cmp	r3, #132	; 0x84
 8002848:	d005      	beq.n	8002856 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800284a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4413      	add	r3, r2
 8002852:	3303      	adds	r3, #3
 8002854:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002856:	68fb      	ldr	r3, [r7, #12]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002868:	f000 fe34 	bl	80034d4 <vTaskStartScheduler>
  
  return osOK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	bd80      	pop	{r7, pc}

08002872 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002872:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002874:	b089      	sub	sp, #36	; 0x24
 8002876:	af04      	add	r7, sp, #16
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d020      	beq.n	80028c6 <osThreadCreate+0x54>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d01c      	beq.n	80028c6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685c      	ldr	r4, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691e      	ldr	r6, [r3, #16]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff ffc8 	bl	8002834 <makeFreeRtosPriority>
 80028a4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028ae:	9202      	str	r2, [sp, #8]
 80028b0:	9301      	str	r3, [sp, #4]
 80028b2:	9100      	str	r1, [sp, #0]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	4632      	mov	r2, r6
 80028b8:	4629      	mov	r1, r5
 80028ba:	4620      	mov	r0, r4
 80028bc:	f000 fc2c 	bl	8003118 <xTaskCreateStatic>
 80028c0:	4603      	mov	r3, r0
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	e01c      	b.n	8002900 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685c      	ldr	r4, [r3, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028d2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff ffaa 	bl	8002834 <makeFreeRtosPriority>
 80028e0:	4602      	mov	r2, r0
 80028e2:	f107 030c 	add.w	r3, r7, #12
 80028e6:	9301      	str	r3, [sp, #4]
 80028e8:	9200      	str	r2, [sp, #0]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	4632      	mov	r2, r6
 80028ee:	4629      	mov	r1, r5
 80028f0:	4620      	mov	r0, r4
 80028f2:	f000 fc6e 	bl	80031d2 <xTaskCreate>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d001      	beq.n	8002900 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	e000      	b.n	8002902 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002900:	68fb      	ldr	r3, [r7, #12]
}
 8002902:	4618      	mov	r0, r3
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800290a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b084      	sub	sp, #16
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <osDelay+0x16>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	e000      	b.n	8002922 <osDelay+0x18>
 8002920:	2301      	movs	r3, #1
 8002922:	4618      	mov	r0, r3
 8002924:	f000 fda2 	bl	800346c <vTaskDelay>
  
  return osOK;
 8002928:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800292a:	4618      	mov	r0, r3
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002932:	b580      	push	{r7, lr}
 8002934:	b086      	sub	sp, #24
 8002936:	af02      	add	r7, sp, #8
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00f      	beq.n	8002964 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d10a      	bne.n	8002960 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2203      	movs	r2, #3
 8002950:	9200      	str	r2, [sp, #0]
 8002952:	2200      	movs	r2, #0
 8002954:	2100      	movs	r1, #0
 8002956:	2001      	movs	r0, #1
 8002958:	f000 f93a 	bl	8002bd0 <xQueueGenericCreateStatic>
 800295c:	4603      	mov	r3, r0
 800295e:	e016      	b.n	800298e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002960:	2300      	movs	r3, #0
 8002962:	e014      	b.n	800298e <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d110      	bne.n	800298c <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800296a:	2203      	movs	r2, #3
 800296c:	2100      	movs	r1, #0
 800296e:	2001      	movs	r0, #1
 8002970:	f000 f9a6 	bl	8002cc0 <xQueueGenericCreate>
 8002974:	60f8      	str	r0, [r7, #12]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d005      	beq.n	8002988 <osSemaphoreCreate+0x56>
 800297c:	2300      	movs	r3, #0
 800297e:	2200      	movs	r2, #0
 8002980:	2100      	movs	r1, #0
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 f9f6 	bl	8002d74 <xQueueGenericSend>
      return sema;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	e000      	b.n	800298e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800298c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f103 0208 	add.w	r2, r3, #8
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f04f 32ff 	mov.w	r2, #4294967295
 80029ae:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f103 0208 	add.w	r2, r3, #8
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f103 0208 	add.w	r2, r3, #8
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	601a      	str	r2, [r3, #0]
}
 8002a2c:	bf00      	nop
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4e:	d103      	bne.n	8002a58 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	e00c      	b.n	8002a72 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3308      	adds	r3, #8
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	e002      	b.n	8002a66 <vListInsert+0x2e>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d2f6      	bcs.n	8002a60 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	1c5a      	adds	r2, r3, #1
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	601a      	str	r2, [r3, #0]
}
 8002a9e:	bf00      	nop
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b085      	sub	sp, #20
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6892      	ldr	r2, [r2, #8]
 8002ac0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6852      	ldr	r2, [r2, #4]
 8002aca:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d103      	bne.n	8002ade <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	1e5a      	subs	r2, r3, #1
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
	...

08002b00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10a      	bne.n	8002b2a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b18:	f383 8811 	msr	BASEPRI, r3
 8002b1c:	f3bf 8f6f 	isb	sy
 8002b20:	f3bf 8f4f 	dsb	sy
 8002b24:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002b26:	bf00      	nop
 8002b28:	e7fe      	b.n	8002b28 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002b2a:	f001 fb1b 	bl	8004164 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b36:	68f9      	ldr	r1, [r7, #12]
 8002b38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b3a:	fb01 f303 	mul.w	r3, r1, r3
 8002b3e:	441a      	add	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	68f9      	ldr	r1, [r7, #12]
 8002b5e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b60:	fb01 f303 	mul.w	r3, r1, r3
 8002b64:	441a      	add	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	22ff      	movs	r2, #255	; 0xff
 8002b6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	22ff      	movs	r2, #255	; 0xff
 8002b76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d114      	bne.n	8002baa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d01a      	beq.n	8002bbe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	3310      	adds	r3, #16
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f000 fef3 	bl	8003978 <xTaskRemoveFromEventList>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d012      	beq.n	8002bbe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002b98:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <xQueueGenericReset+0xcc>)
 8002b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	f3bf 8f4f 	dsb	sy
 8002ba4:	f3bf 8f6f 	isb	sy
 8002ba8:	e009      	b.n	8002bbe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	3310      	adds	r3, #16
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff fef1 	bl	8002996 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	3324      	adds	r3, #36	; 0x24
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff feec 	bl	8002996 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002bbe:	f001 fb01 	bl	80041c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002bc2:	2301      	movs	r3, #1
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	e000ed04 	.word	0xe000ed04

08002bd0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08e      	sub	sp, #56	; 0x38
 8002bd4:	af02      	add	r7, sp, #8
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
 8002bdc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10a      	bne.n	8002bfa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be8:	f383 8811 	msr	BASEPRI, r3
 8002bec:	f3bf 8f6f 	isb	sy
 8002bf0:	f3bf 8f4f 	dsb	sy
 8002bf4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002bf6:	bf00      	nop
 8002bf8:	e7fe      	b.n	8002bf8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10a      	bne.n	8002c16 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c04:	f383 8811 	msr	BASEPRI, r3
 8002c08:	f3bf 8f6f 	isb	sy
 8002c0c:	f3bf 8f4f 	dsb	sy
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c12:	bf00      	nop
 8002c14:	e7fe      	b.n	8002c14 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d002      	beq.n	8002c22 <xQueueGenericCreateStatic+0x52>
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <xQueueGenericCreateStatic+0x56>
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <xQueueGenericCreateStatic+0x58>
 8002c26:	2300      	movs	r3, #0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10a      	bne.n	8002c42 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c30:	f383 8811 	msr	BASEPRI, r3
 8002c34:	f3bf 8f6f 	isb	sy
 8002c38:	f3bf 8f4f 	dsb	sy
 8002c3c:	623b      	str	r3, [r7, #32]
}
 8002c3e:	bf00      	nop
 8002c40:	e7fe      	b.n	8002c40 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d102      	bne.n	8002c4e <xQueueGenericCreateStatic+0x7e>
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <xQueueGenericCreateStatic+0x82>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <xQueueGenericCreateStatic+0x84>
 8002c52:	2300      	movs	r3, #0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10a      	bne.n	8002c6e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5c:	f383 8811 	msr	BASEPRI, r3
 8002c60:	f3bf 8f6f 	isb	sy
 8002c64:	f3bf 8f4f 	dsb	sy
 8002c68:	61fb      	str	r3, [r7, #28]
}
 8002c6a:	bf00      	nop
 8002c6c:	e7fe      	b.n	8002c6c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c6e:	2348      	movs	r3, #72	; 0x48
 8002c70:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2b48      	cmp	r3, #72	; 0x48
 8002c76:	d00a      	beq.n	8002c8e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7c:	f383 8811 	msr	BASEPRI, r3
 8002c80:	f3bf 8f6f 	isb	sy
 8002c84:	f3bf 8f4f 	dsb	sy
 8002c88:	61bb      	str	r3, [r7, #24]
}
 8002c8a:	bf00      	nop
 8002c8c:	e7fe      	b.n	8002c8c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002c8e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00d      	beq.n	8002cb6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ca2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	4613      	mov	r3, r2
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	68b9      	ldr	r1, [r7, #8]
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f000 f83f 	bl	8002d34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3730      	adds	r7, #48	; 0x30
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08a      	sub	sp, #40	; 0x28
 8002cc4:	af02      	add	r7, sp, #8
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10a      	bne.n	8002cea <xQueueGenericCreate+0x2a>
	__asm volatile
 8002cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd8:	f383 8811 	msr	BASEPRI, r3
 8002cdc:	f3bf 8f6f 	isb	sy
 8002ce0:	f3bf 8f4f 	dsb	sy
 8002ce4:	613b      	str	r3, [r7, #16]
}
 8002ce6:	bf00      	nop
 8002ce8:	e7fe      	b.n	8002ce8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	fb02 f303 	mul.w	r3, r2, r3
 8002cf2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	3348      	adds	r3, #72	; 0x48
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f001 fb15 	bl	8004328 <pvPortMalloc>
 8002cfe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d011      	beq.n	8002d2a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	3348      	adds	r3, #72	; 0x48
 8002d0e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d18:	79fa      	ldrb	r2, [r7, #7]
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	68b9      	ldr	r1, [r7, #8]
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f000 f805 	bl	8002d34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002d2a:	69bb      	ldr	r3, [r7, #24]
	}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3720      	adds	r7, #32
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
 8002d40:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d103      	bne.n	8002d50 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	e002      	b.n	8002d56 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d62:	2101      	movs	r1, #1
 8002d64:	69b8      	ldr	r0, [r7, #24]
 8002d66:	f7ff fecb 	bl	8002b00 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d6a:	bf00      	nop
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b08e      	sub	sp, #56	; 0x38
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
 8002d80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d82:	2300      	movs	r3, #0
 8002d84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10a      	bne.n	8002da6 <xQueueGenericSend+0x32>
	__asm volatile
 8002d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d94:	f383 8811 	msr	BASEPRI, r3
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002da2:	bf00      	nop
 8002da4:	e7fe      	b.n	8002da4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d103      	bne.n	8002db4 <xQueueGenericSend+0x40>
 8002dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <xQueueGenericSend+0x44>
 8002db4:	2301      	movs	r3, #1
 8002db6:	e000      	b.n	8002dba <xQueueGenericSend+0x46>
 8002db8:	2300      	movs	r3, #0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10a      	bne.n	8002dd4 <xQueueGenericSend+0x60>
	__asm volatile
 8002dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc2:	f383 8811 	msr	BASEPRI, r3
 8002dc6:	f3bf 8f6f 	isb	sy
 8002dca:	f3bf 8f4f 	dsb	sy
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002dd0:	bf00      	nop
 8002dd2:	e7fe      	b.n	8002dd2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d103      	bne.n	8002de2 <xQueueGenericSend+0x6e>
 8002dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <xQueueGenericSend+0x72>
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <xQueueGenericSend+0x74>
 8002de6:	2300      	movs	r3, #0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10a      	bne.n	8002e02 <xQueueGenericSend+0x8e>
	__asm volatile
 8002dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df0:	f383 8811 	msr	BASEPRI, r3
 8002df4:	f3bf 8f6f 	isb	sy
 8002df8:	f3bf 8f4f 	dsb	sy
 8002dfc:	623b      	str	r3, [r7, #32]
}
 8002dfe:	bf00      	nop
 8002e00:	e7fe      	b.n	8002e00 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e02:	f000 ff79 	bl	8003cf8 <xTaskGetSchedulerState>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d102      	bne.n	8002e12 <xQueueGenericSend+0x9e>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <xQueueGenericSend+0xa2>
 8002e12:	2301      	movs	r3, #1
 8002e14:	e000      	b.n	8002e18 <xQueueGenericSend+0xa4>
 8002e16:	2300      	movs	r3, #0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10a      	bne.n	8002e32 <xQueueGenericSend+0xbe>
	__asm volatile
 8002e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e20:	f383 8811 	msr	BASEPRI, r3
 8002e24:	f3bf 8f6f 	isb	sy
 8002e28:	f3bf 8f4f 	dsb	sy
 8002e2c:	61fb      	str	r3, [r7, #28]
}
 8002e2e:	bf00      	nop
 8002e30:	e7fe      	b.n	8002e30 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e32:	f001 f997 	bl	8004164 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d302      	bcc.n	8002e48 <xQueueGenericSend+0xd4>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d129      	bne.n	8002e9c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	68b9      	ldr	r1, [r7, #8]
 8002e4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e4e:	f000 f88f 	bl	8002f70 <prvCopyDataToQueue>
 8002e52:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d010      	beq.n	8002e7e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5e:	3324      	adds	r3, #36	; 0x24
 8002e60:	4618      	mov	r0, r3
 8002e62:	f000 fd89 	bl	8003978 <xTaskRemoveFromEventList>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d013      	beq.n	8002e94 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e6c:	4b3f      	ldr	r3, [pc, #252]	; (8002f6c <xQueueGenericSend+0x1f8>)
 8002e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	f3bf 8f4f 	dsb	sy
 8002e78:	f3bf 8f6f 	isb	sy
 8002e7c:	e00a      	b.n	8002e94 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d007      	beq.n	8002e94 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e84:	4b39      	ldr	r3, [pc, #228]	; (8002f6c <xQueueGenericSend+0x1f8>)
 8002e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	f3bf 8f4f 	dsb	sy
 8002e90:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e94:	f001 f996 	bl	80041c4 <vPortExitCritical>
				return pdPASS;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e063      	b.n	8002f64 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d103      	bne.n	8002eaa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ea2:	f001 f98f 	bl	80041c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	e05c      	b.n	8002f64 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d106      	bne.n	8002ebe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002eb0:	f107 0314 	add.w	r3, r7, #20
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 fdc1 	bl	8003a3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ebe:	f001 f981 	bl	80041c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ec2:	f000 fb71 	bl	80035a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ec6:	f001 f94d 	bl	8004164 <vPortEnterCritical>
 8002eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ecc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ed0:	b25b      	sxtb	r3, r3
 8002ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed6:	d103      	bne.n	8002ee0 <xQueueGenericSend+0x16c>
 8002ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ee6:	b25b      	sxtb	r3, r3
 8002ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eec:	d103      	bne.n	8002ef6 <xQueueGenericSend+0x182>
 8002eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ef6:	f001 f965 	bl	80041c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002efa:	1d3a      	adds	r2, r7, #4
 8002efc:	f107 0314 	add.w	r3, r7, #20
 8002f00:	4611      	mov	r1, r2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 fdb0 	bl	8003a68 <xTaskCheckForTimeOut>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d124      	bne.n	8002f58 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f10:	f000 f8ea 	bl	80030e8 <prvIsQueueFull>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d018      	beq.n	8002f4c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1c:	3310      	adds	r3, #16
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	4611      	mov	r1, r2
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 fd04 	bl	8003930 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002f28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f2a:	f000 f88b 	bl	8003044 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002f2e:	f000 fb49 	bl	80035c4 <xTaskResumeAll>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f47f af7c 	bne.w	8002e32 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002f3a:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <xQueueGenericSend+0x1f8>)
 8002f3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	f3bf 8f4f 	dsb	sy
 8002f46:	f3bf 8f6f 	isb	sy
 8002f4a:	e772      	b.n	8002e32 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002f4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f4e:	f000 f879 	bl	8003044 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f52:	f000 fb37 	bl	80035c4 <xTaskResumeAll>
 8002f56:	e76c      	b.n	8002e32 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f5a:	f000 f873 	bl	8003044 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f5e:	f000 fb31 	bl	80035c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3738      	adds	r7, #56	; 0x38
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	e000ed04 	.word	0xe000ed04

08002f70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10d      	bne.n	8002faa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d14d      	bne.n	8003032 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 feca 	bl	8003d34 <xTaskPriorityDisinherit>
 8002fa0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	609a      	str	r2, [r3, #8]
 8002fa8:	e043      	b.n	8003032 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d119      	bne.n	8002fe4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6858      	ldr	r0, [r3, #4]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	461a      	mov	r2, r3
 8002fba:	68b9      	ldr	r1, [r7, #8]
 8002fbc:	f001 fe65 	bl	8004c8a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc8:	441a      	add	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d32b      	bcc.n	8003032 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	605a      	str	r2, [r3, #4]
 8002fe2:	e026      	b.n	8003032 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	68d8      	ldr	r0, [r3, #12]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	461a      	mov	r2, r3
 8002fee:	68b9      	ldr	r1, [r7, #8]
 8002ff0:	f001 fe4b 	bl	8004c8a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	425b      	negs	r3, r3
 8002ffe:	441a      	add	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	68da      	ldr	r2, [r3, #12]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	429a      	cmp	r2, r3
 800300e:	d207      	bcs.n	8003020 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	425b      	negs	r3, r3
 800301a:	441a      	add	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b02      	cmp	r3, #2
 8003024:	d105      	bne.n	8003032 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d002      	beq.n	8003032 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	3b01      	subs	r3, #1
 8003030:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800303a:	697b      	ldr	r3, [r7, #20]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800304c:	f001 f88a 	bl	8004164 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003056:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003058:	e011      	b.n	800307e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	2b00      	cmp	r3, #0
 8003060:	d012      	beq.n	8003088 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	3324      	adds	r3, #36	; 0x24
 8003066:	4618      	mov	r0, r3
 8003068:	f000 fc86 	bl	8003978 <xTaskRemoveFromEventList>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003072:	f000 fd5b 	bl	8003b2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	3b01      	subs	r3, #1
 800307a:	b2db      	uxtb	r3, r3
 800307c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800307e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003082:	2b00      	cmp	r3, #0
 8003084:	dce9      	bgt.n	800305a <prvUnlockQueue+0x16>
 8003086:	e000      	b.n	800308a <prvUnlockQueue+0x46>
					break;
 8003088:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	22ff      	movs	r2, #255	; 0xff
 800308e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003092:	f001 f897 	bl	80041c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003096:	f001 f865 	bl	8004164 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030a2:	e011      	b.n	80030c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d012      	beq.n	80030d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3310      	adds	r3, #16
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 fc61 	bl	8003978 <xTaskRemoveFromEventList>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80030bc:	f000 fd36 	bl	8003b2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80030c0:	7bbb      	ldrb	r3, [r7, #14]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	dce9      	bgt.n	80030a4 <prvUnlockQueue+0x60>
 80030d0:	e000      	b.n	80030d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80030d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	22ff      	movs	r2, #255	; 0xff
 80030d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80030dc:	f001 f872 	bl	80041c4 <vPortExitCritical>
}
 80030e0:	bf00      	nop
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030f0:	f001 f838 	bl	8004164 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d102      	bne.n	8003106 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003100:	2301      	movs	r3, #1
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	e001      	b.n	800310a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003106:	2300      	movs	r3, #0
 8003108:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800310a:	f001 f85b 	bl	80041c4 <vPortExitCritical>

	return xReturn;
 800310e:	68fb      	ldr	r3, [r7, #12]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08e      	sub	sp, #56	; 0x38
 800311c:	af04      	add	r7, sp, #16
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10a      	bne.n	8003142 <xTaskCreateStatic+0x2a>
	__asm volatile
 800312c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003130:	f383 8811 	msr	BASEPRI, r3
 8003134:	f3bf 8f6f 	isb	sy
 8003138:	f3bf 8f4f 	dsb	sy
 800313c:	623b      	str	r3, [r7, #32]
}
 800313e:	bf00      	nop
 8003140:	e7fe      	b.n	8003140 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10a      	bne.n	800315e <xTaskCreateStatic+0x46>
	__asm volatile
 8003148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314c:	f383 8811 	msr	BASEPRI, r3
 8003150:	f3bf 8f6f 	isb	sy
 8003154:	f3bf 8f4f 	dsb	sy
 8003158:	61fb      	str	r3, [r7, #28]
}
 800315a:	bf00      	nop
 800315c:	e7fe      	b.n	800315c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800315e:	23a0      	movs	r3, #160	; 0xa0
 8003160:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	2ba0      	cmp	r3, #160	; 0xa0
 8003166:	d00a      	beq.n	800317e <xTaskCreateStatic+0x66>
	__asm volatile
 8003168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316c:	f383 8811 	msr	BASEPRI, r3
 8003170:	f3bf 8f6f 	isb	sy
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	61bb      	str	r3, [r7, #24]
}
 800317a:	bf00      	nop
 800317c:	e7fe      	b.n	800317c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800317e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003182:	2b00      	cmp	r3, #0
 8003184:	d01e      	beq.n	80031c4 <xTaskCreateStatic+0xac>
 8003186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003188:	2b00      	cmp	r3, #0
 800318a:	d01b      	beq.n	80031c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800318c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003194:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	2202      	movs	r2, #2
 800319a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800319e:	2300      	movs	r3, #0
 80031a0:	9303      	str	r3, [sp, #12]
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	9302      	str	r3, [sp, #8]
 80031a6:	f107 0314 	add.w	r3, r7, #20
 80031aa:	9301      	str	r3, [sp, #4]
 80031ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	68b9      	ldr	r1, [r7, #8]
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 f850 	bl	800325c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031be:	f000 f8eb 	bl	8003398 <prvAddNewTaskToReadyList>
 80031c2:	e001      	b.n	80031c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80031c8:	697b      	ldr	r3, [r7, #20]
	}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3728      	adds	r7, #40	; 0x28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b08c      	sub	sp, #48	; 0x30
 80031d6:	af04      	add	r7, sp, #16
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	603b      	str	r3, [r7, #0]
 80031de:	4613      	mov	r3, r2
 80031e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80031e2:	88fb      	ldrh	r3, [r7, #6]
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4618      	mov	r0, r3
 80031e8:	f001 f89e 	bl	8004328 <pvPortMalloc>
 80031ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00e      	beq.n	8003212 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80031f4:	20a0      	movs	r0, #160	; 0xa0
 80031f6:	f001 f897 	bl	8004328 <pvPortMalloc>
 80031fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	631a      	str	r2, [r3, #48]	; 0x30
 8003208:	e005      	b.n	8003216 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800320a:	6978      	ldr	r0, [r7, #20]
 800320c:	f001 f958 	bl	80044c0 <vPortFree>
 8003210:	e001      	b.n	8003216 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003212:	2300      	movs	r3, #0
 8003214:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d017      	beq.n	800324c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003224:	88fa      	ldrh	r2, [r7, #6]
 8003226:	2300      	movs	r3, #0
 8003228:	9303      	str	r3, [sp, #12]
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	9302      	str	r3, [sp, #8]
 800322e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003230:	9301      	str	r3, [sp, #4]
 8003232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	68b9      	ldr	r1, [r7, #8]
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 f80e 	bl	800325c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003240:	69f8      	ldr	r0, [r7, #28]
 8003242:	f000 f8a9 	bl	8003398 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003246:	2301      	movs	r3, #1
 8003248:	61bb      	str	r3, [r7, #24]
 800324a:	e002      	b.n	8003252 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800324c:	f04f 33ff 	mov.w	r3, #4294967295
 8003250:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003252:	69bb      	ldr	r3, [r7, #24]
	}
 8003254:	4618      	mov	r0, r3
 8003256:	3720      	adds	r7, #32
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b088      	sub	sp, #32
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
 8003268:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800326a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003274:	3b01      	subs	r3, #1
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	f023 0307 	bic.w	r3, r3, #7
 8003282:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800328e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003292:	f383 8811 	msr	BASEPRI, r3
 8003296:	f3bf 8f6f 	isb	sy
 800329a:	f3bf 8f4f 	dsb	sy
 800329e:	617b      	str	r3, [r7, #20]
}
 80032a0:	bf00      	nop
 80032a2:	e7fe      	b.n	80032a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d01f      	beq.n	80032ea <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032aa:	2300      	movs	r3, #0
 80032ac:	61fb      	str	r3, [r7, #28]
 80032ae:	e012      	b.n	80032d6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	4413      	add	r3, r2
 80032b6:	7819      	ldrb	r1, [r3, #0]
 80032b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	4413      	add	r3, r2
 80032be:	3334      	adds	r3, #52	; 0x34
 80032c0:	460a      	mov	r2, r1
 80032c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80032c4:	68ba      	ldr	r2, [r7, #8]
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	4413      	add	r3, r2
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d006      	beq.n	80032de <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	3301      	adds	r3, #1
 80032d4:	61fb      	str	r3, [r7, #28]
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	2b0f      	cmp	r3, #15
 80032da:	d9e9      	bls.n	80032b0 <prvInitialiseNewTask+0x54>
 80032dc:	e000      	b.n	80032e0 <prvInitialiseNewTask+0x84>
			{
				break;
 80032de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80032e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032e8:	e003      	b.n	80032f2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80032ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80032f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f4:	2b06      	cmp	r3, #6
 80032f6:	d901      	bls.n	80032fc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80032f8:	2306      	movs	r3, #6
 80032fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80032fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003300:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003304:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003306:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330a:	2200      	movs	r2, #0
 800330c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800330e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003310:	3304      	adds	r3, #4
 8003312:	4618      	mov	r0, r3
 8003314:	f7ff fb5f 	bl	80029d6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331a:	3318      	adds	r3, #24
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff fb5a 	bl	80029d6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003326:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332a:	f1c3 0207 	rsb	r2, r3, #7
 800332e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003330:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003336:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333a:	2200      	movs	r2, #0
 800333c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003342:	2200      	movs	r2, #0
 8003344:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334a:	334c      	adds	r3, #76	; 0x4c
 800334c:	224c      	movs	r2, #76	; 0x4c
 800334e:	2100      	movs	r1, #0
 8003350:	4618      	mov	r0, r3
 8003352:	f001 fbc9 	bl	8004ae8 <memset>
 8003356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003358:	4a0c      	ldr	r2, [pc, #48]	; (800338c <prvInitialiseNewTask+0x130>)
 800335a:	651a      	str	r2, [r3, #80]	; 0x50
 800335c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335e:	4a0c      	ldr	r2, [pc, #48]	; (8003390 <prvInitialiseNewTask+0x134>)
 8003360:	655a      	str	r2, [r3, #84]	; 0x54
 8003362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003364:	4a0b      	ldr	r2, [pc, #44]	; (8003394 <prvInitialiseNewTask+0x138>)
 8003366:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	68f9      	ldr	r1, [r7, #12]
 800336c:	69b8      	ldr	r0, [r7, #24]
 800336e:	f000 fdcd 	bl	8003f0c <pxPortInitialiseStack>
 8003372:	4602      	mov	r2, r0
 8003374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003376:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337a:	2b00      	cmp	r3, #0
 800337c:	d002      	beq.n	8003384 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800337e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003382:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003384:	bf00      	nop
 8003386:	3720      	adds	r7, #32
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	20004120 	.word	0x20004120
 8003390:	20004188 	.word	0x20004188
 8003394:	200041f0 	.word	0x200041f0

08003398 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80033a0:	f000 fee0 	bl	8004164 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80033a4:	4b2a      	ldr	r3, [pc, #168]	; (8003450 <prvAddNewTaskToReadyList+0xb8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	3301      	adds	r3, #1
 80033aa:	4a29      	ldr	r2, [pc, #164]	; (8003450 <prvAddNewTaskToReadyList+0xb8>)
 80033ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80033ae:	4b29      	ldr	r3, [pc, #164]	; (8003454 <prvAddNewTaskToReadyList+0xbc>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d109      	bne.n	80033ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80033b6:	4a27      	ldr	r2, [pc, #156]	; (8003454 <prvAddNewTaskToReadyList+0xbc>)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80033bc:	4b24      	ldr	r3, [pc, #144]	; (8003450 <prvAddNewTaskToReadyList+0xb8>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d110      	bne.n	80033e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80033c4:	f000 fbd6 	bl	8003b74 <prvInitialiseTaskLists>
 80033c8:	e00d      	b.n	80033e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80033ca:	4b23      	ldr	r3, [pc, #140]	; (8003458 <prvAddNewTaskToReadyList+0xc0>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d109      	bne.n	80033e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80033d2:	4b20      	ldr	r3, [pc, #128]	; (8003454 <prvAddNewTaskToReadyList+0xbc>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	429a      	cmp	r2, r3
 80033de:	d802      	bhi.n	80033e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80033e0:	4a1c      	ldr	r2, [pc, #112]	; (8003454 <prvAddNewTaskToReadyList+0xbc>)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80033e6:	4b1d      	ldr	r3, [pc, #116]	; (800345c <prvAddNewTaskToReadyList+0xc4>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	3301      	adds	r3, #1
 80033ec:	4a1b      	ldr	r2, [pc, #108]	; (800345c <prvAddNewTaskToReadyList+0xc4>)
 80033ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f4:	2201      	movs	r2, #1
 80033f6:	409a      	lsls	r2, r3
 80033f8:	4b19      	ldr	r3, [pc, #100]	; (8003460 <prvAddNewTaskToReadyList+0xc8>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	4a18      	ldr	r2, [pc, #96]	; (8003460 <prvAddNewTaskToReadyList+0xc8>)
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4a15      	ldr	r2, [pc, #84]	; (8003464 <prvAddNewTaskToReadyList+0xcc>)
 8003410:	441a      	add	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3304      	adds	r3, #4
 8003416:	4619      	mov	r1, r3
 8003418:	4610      	mov	r0, r2
 800341a:	f7ff fae9 	bl	80029f0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800341e:	f000 fed1 	bl	80041c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003422:	4b0d      	ldr	r3, [pc, #52]	; (8003458 <prvAddNewTaskToReadyList+0xc0>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00e      	beq.n	8003448 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800342a:	4b0a      	ldr	r3, [pc, #40]	; (8003454 <prvAddNewTaskToReadyList+0xbc>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003434:	429a      	cmp	r2, r3
 8003436:	d207      	bcs.n	8003448 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003438:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <prvAddNewTaskToReadyList+0xd0>)
 800343a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	f3bf 8f4f 	dsb	sy
 8003444:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003448:	bf00      	nop
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	200004cc 	.word	0x200004cc
 8003454:	200003cc 	.word	0x200003cc
 8003458:	200004d8 	.word	0x200004d8
 800345c:	200004e8 	.word	0x200004e8
 8003460:	200004d4 	.word	0x200004d4
 8003464:	200003d0 	.word	0x200003d0
 8003468:	e000ed04 	.word	0xe000ed04

0800346c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003474:	2300      	movs	r3, #0
 8003476:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d017      	beq.n	80034ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800347e:	4b13      	ldr	r3, [pc, #76]	; (80034cc <vTaskDelay+0x60>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <vTaskDelay+0x30>
	__asm volatile
 8003486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348a:	f383 8811 	msr	BASEPRI, r3
 800348e:	f3bf 8f6f 	isb	sy
 8003492:	f3bf 8f4f 	dsb	sy
 8003496:	60bb      	str	r3, [r7, #8]
}
 8003498:	bf00      	nop
 800349a:	e7fe      	b.n	800349a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800349c:	f000 f884 	bl	80035a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80034a0:	2100      	movs	r1, #0
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fccc 	bl	8003e40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80034a8:	f000 f88c 	bl	80035c4 <xTaskResumeAll>
 80034ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d107      	bne.n	80034c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80034b4:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <vTaskDelay+0x64>)
 80034b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	f3bf 8f4f 	dsb	sy
 80034c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80034c4:	bf00      	nop
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	200004f4 	.word	0x200004f4
 80034d0:	e000ed04 	.word	0xe000ed04

080034d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08a      	sub	sp, #40	; 0x28
 80034d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80034da:	2300      	movs	r3, #0
 80034dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80034de:	2300      	movs	r3, #0
 80034e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80034e2:	463a      	mov	r2, r7
 80034e4:	1d39      	adds	r1, r7, #4
 80034e6:	f107 0308 	add.w	r3, r7, #8
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fc fff6 	bl	80004dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80034f0:	6839      	ldr	r1, [r7, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	9202      	str	r2, [sp, #8]
 80034f8:	9301      	str	r3, [sp, #4]
 80034fa:	2300      	movs	r3, #0
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	2300      	movs	r3, #0
 8003500:	460a      	mov	r2, r1
 8003502:	4921      	ldr	r1, [pc, #132]	; (8003588 <vTaskStartScheduler+0xb4>)
 8003504:	4821      	ldr	r0, [pc, #132]	; (800358c <vTaskStartScheduler+0xb8>)
 8003506:	f7ff fe07 	bl	8003118 <xTaskCreateStatic>
 800350a:	4603      	mov	r3, r0
 800350c:	4a20      	ldr	r2, [pc, #128]	; (8003590 <vTaskStartScheduler+0xbc>)
 800350e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003510:	4b1f      	ldr	r3, [pc, #124]	; (8003590 <vTaskStartScheduler+0xbc>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003518:	2301      	movs	r3, #1
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	e001      	b.n	8003522 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800351e:	2300      	movs	r3, #0
 8003520:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d11b      	bne.n	8003560 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352c:	f383 8811 	msr	BASEPRI, r3
 8003530:	f3bf 8f6f 	isb	sy
 8003534:	f3bf 8f4f 	dsb	sy
 8003538:	613b      	str	r3, [r7, #16]
}
 800353a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800353c:	4b15      	ldr	r3, [pc, #84]	; (8003594 <vTaskStartScheduler+0xc0>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	334c      	adds	r3, #76	; 0x4c
 8003542:	4a15      	ldr	r2, [pc, #84]	; (8003598 <vTaskStartScheduler+0xc4>)
 8003544:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003546:	4b15      	ldr	r3, [pc, #84]	; (800359c <vTaskStartScheduler+0xc8>)
 8003548:	f04f 32ff 	mov.w	r2, #4294967295
 800354c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800354e:	4b14      	ldr	r3, [pc, #80]	; (80035a0 <vTaskStartScheduler+0xcc>)
 8003550:	2201      	movs	r2, #1
 8003552:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003554:	4b13      	ldr	r3, [pc, #76]	; (80035a4 <vTaskStartScheduler+0xd0>)
 8003556:	2200      	movs	r2, #0
 8003558:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800355a:	f000 fd61 	bl	8004020 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800355e:	e00e      	b.n	800357e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003566:	d10a      	bne.n	800357e <vTaskStartScheduler+0xaa>
	__asm volatile
 8003568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356c:	f383 8811 	msr	BASEPRI, r3
 8003570:	f3bf 8f6f 	isb	sy
 8003574:	f3bf 8f4f 	dsb	sy
 8003578:	60fb      	str	r3, [r7, #12]
}
 800357a:	bf00      	nop
 800357c:	e7fe      	b.n	800357c <vTaskStartScheduler+0xa8>
}
 800357e:	bf00      	nop
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	08005230 	.word	0x08005230
 800358c:	08003b45 	.word	0x08003b45
 8003590:	200004f0 	.word	0x200004f0
 8003594:	200003cc 	.word	0x200003cc
 8003598:	20000068 	.word	0x20000068
 800359c:	200004ec 	.word	0x200004ec
 80035a0:	200004d8 	.word	0x200004d8
 80035a4:	200004d0 	.word	0x200004d0

080035a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80035ac:	4b04      	ldr	r3, [pc, #16]	; (80035c0 <vTaskSuspendAll+0x18>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	3301      	adds	r3, #1
 80035b2:	4a03      	ldr	r2, [pc, #12]	; (80035c0 <vTaskSuspendAll+0x18>)
 80035b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80035b6:	bf00      	nop
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	200004f4 	.word	0x200004f4

080035c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80035ce:	2300      	movs	r3, #0
 80035d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80035d2:	4b41      	ldr	r3, [pc, #260]	; (80036d8 <xTaskResumeAll+0x114>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10a      	bne.n	80035f0 <xTaskResumeAll+0x2c>
	__asm volatile
 80035da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035de:	f383 8811 	msr	BASEPRI, r3
 80035e2:	f3bf 8f6f 	isb	sy
 80035e6:	f3bf 8f4f 	dsb	sy
 80035ea:	603b      	str	r3, [r7, #0]
}
 80035ec:	bf00      	nop
 80035ee:	e7fe      	b.n	80035ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80035f0:	f000 fdb8 	bl	8004164 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80035f4:	4b38      	ldr	r3, [pc, #224]	; (80036d8 <xTaskResumeAll+0x114>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	3b01      	subs	r3, #1
 80035fa:	4a37      	ldr	r2, [pc, #220]	; (80036d8 <xTaskResumeAll+0x114>)
 80035fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035fe:	4b36      	ldr	r3, [pc, #216]	; (80036d8 <xTaskResumeAll+0x114>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d161      	bne.n	80036ca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003606:	4b35      	ldr	r3, [pc, #212]	; (80036dc <xTaskResumeAll+0x118>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d05d      	beq.n	80036ca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800360e:	e02e      	b.n	800366e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003610:	4b33      	ldr	r3, [pc, #204]	; (80036e0 <xTaskResumeAll+0x11c>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	3318      	adds	r3, #24
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff fa44 	bl	8002aaa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	3304      	adds	r3, #4
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff fa3f 	bl	8002aaa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	2201      	movs	r2, #1
 8003632:	409a      	lsls	r2, r3
 8003634:	4b2b      	ldr	r3, [pc, #172]	; (80036e4 <xTaskResumeAll+0x120>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4313      	orrs	r3, r2
 800363a:	4a2a      	ldr	r2, [pc, #168]	; (80036e4 <xTaskResumeAll+0x120>)
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003642:	4613      	mov	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4413      	add	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4a27      	ldr	r2, [pc, #156]	; (80036e8 <xTaskResumeAll+0x124>)
 800364c:	441a      	add	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	3304      	adds	r3, #4
 8003652:	4619      	mov	r1, r3
 8003654:	4610      	mov	r0, r2
 8003656:	f7ff f9cb 	bl	80029f0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800365e:	4b23      	ldr	r3, [pc, #140]	; (80036ec <xTaskResumeAll+0x128>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003664:	429a      	cmp	r2, r3
 8003666:	d302      	bcc.n	800366e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003668:	4b21      	ldr	r3, [pc, #132]	; (80036f0 <xTaskResumeAll+0x12c>)
 800366a:	2201      	movs	r2, #1
 800366c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800366e:	4b1c      	ldr	r3, [pc, #112]	; (80036e0 <xTaskResumeAll+0x11c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1cc      	bne.n	8003610 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800367c:	f000 fb1c 	bl	8003cb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003680:	4b1c      	ldr	r3, [pc, #112]	; (80036f4 <xTaskResumeAll+0x130>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d010      	beq.n	80036ae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800368c:	f000 f836 	bl	80036fc <xTaskIncrementTick>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003696:	4b16      	ldr	r3, [pc, #88]	; (80036f0 <xTaskResumeAll+0x12c>)
 8003698:	2201      	movs	r2, #1
 800369a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3b01      	subs	r3, #1
 80036a0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1f1      	bne.n	800368c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80036a8:	4b12      	ldr	r3, [pc, #72]	; (80036f4 <xTaskResumeAll+0x130>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80036ae:	4b10      	ldr	r3, [pc, #64]	; (80036f0 <xTaskResumeAll+0x12c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d009      	beq.n	80036ca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80036b6:	2301      	movs	r3, #1
 80036b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80036ba:	4b0f      	ldr	r3, [pc, #60]	; (80036f8 <xTaskResumeAll+0x134>)
 80036bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	f3bf 8f4f 	dsb	sy
 80036c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80036ca:	f000 fd7b 	bl	80041c4 <vPortExitCritical>

	return xAlreadyYielded;
 80036ce:	68bb      	ldr	r3, [r7, #8]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	200004f4 	.word	0x200004f4
 80036dc:	200004cc 	.word	0x200004cc
 80036e0:	2000048c 	.word	0x2000048c
 80036e4:	200004d4 	.word	0x200004d4
 80036e8:	200003d0 	.word	0x200003d0
 80036ec:	200003cc 	.word	0x200003cc
 80036f0:	200004e0 	.word	0x200004e0
 80036f4:	200004dc 	.word	0x200004dc
 80036f8:	e000ed04 	.word	0xe000ed04

080036fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003702:	2300      	movs	r3, #0
 8003704:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003706:	4b4e      	ldr	r3, [pc, #312]	; (8003840 <xTaskIncrementTick+0x144>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	f040 808e 	bne.w	800382c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003710:	4b4c      	ldr	r3, [pc, #304]	; (8003844 <xTaskIncrementTick+0x148>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	3301      	adds	r3, #1
 8003716:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003718:	4a4a      	ldr	r2, [pc, #296]	; (8003844 <xTaskIncrementTick+0x148>)
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d120      	bne.n	8003766 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003724:	4b48      	ldr	r3, [pc, #288]	; (8003848 <xTaskIncrementTick+0x14c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00a      	beq.n	8003744 <xTaskIncrementTick+0x48>
	__asm volatile
 800372e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003732:	f383 8811 	msr	BASEPRI, r3
 8003736:	f3bf 8f6f 	isb	sy
 800373a:	f3bf 8f4f 	dsb	sy
 800373e:	603b      	str	r3, [r7, #0]
}
 8003740:	bf00      	nop
 8003742:	e7fe      	b.n	8003742 <xTaskIncrementTick+0x46>
 8003744:	4b40      	ldr	r3, [pc, #256]	; (8003848 <xTaskIncrementTick+0x14c>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	4b40      	ldr	r3, [pc, #256]	; (800384c <xTaskIncrementTick+0x150>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a3e      	ldr	r2, [pc, #248]	; (8003848 <xTaskIncrementTick+0x14c>)
 8003750:	6013      	str	r3, [r2, #0]
 8003752:	4a3e      	ldr	r2, [pc, #248]	; (800384c <xTaskIncrementTick+0x150>)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6013      	str	r3, [r2, #0]
 8003758:	4b3d      	ldr	r3, [pc, #244]	; (8003850 <xTaskIncrementTick+0x154>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	3301      	adds	r3, #1
 800375e:	4a3c      	ldr	r2, [pc, #240]	; (8003850 <xTaskIncrementTick+0x154>)
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	f000 faa9 	bl	8003cb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003766:	4b3b      	ldr	r3, [pc, #236]	; (8003854 <xTaskIncrementTick+0x158>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	429a      	cmp	r2, r3
 800376e:	d348      	bcc.n	8003802 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003770:	4b35      	ldr	r3, [pc, #212]	; (8003848 <xTaskIncrementTick+0x14c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d104      	bne.n	8003784 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800377a:	4b36      	ldr	r3, [pc, #216]	; (8003854 <xTaskIncrementTick+0x158>)
 800377c:	f04f 32ff 	mov.w	r2, #4294967295
 8003780:	601a      	str	r2, [r3, #0]
					break;
 8003782:	e03e      	b.n	8003802 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003784:	4b30      	ldr	r3, [pc, #192]	; (8003848 <xTaskIncrementTick+0x14c>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	429a      	cmp	r2, r3
 800379a:	d203      	bcs.n	80037a4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800379c:	4a2d      	ldr	r2, [pc, #180]	; (8003854 <xTaskIncrementTick+0x158>)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80037a2:	e02e      	b.n	8003802 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	3304      	adds	r3, #4
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff f97e 	bl	8002aaa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d004      	beq.n	80037c0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	3318      	adds	r3, #24
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7ff f975 	bl	8002aaa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	2201      	movs	r2, #1
 80037c6:	409a      	lsls	r2, r3
 80037c8:	4b23      	ldr	r3, [pc, #140]	; (8003858 <xTaskIncrementTick+0x15c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	4a22      	ldr	r2, [pc, #136]	; (8003858 <xTaskIncrementTick+0x15c>)
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d6:	4613      	mov	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4a1f      	ldr	r2, [pc, #124]	; (800385c <xTaskIncrementTick+0x160>)
 80037e0:	441a      	add	r2, r3
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	3304      	adds	r3, #4
 80037e6:	4619      	mov	r1, r3
 80037e8:	4610      	mov	r0, r2
 80037ea:	f7ff f901 	bl	80029f0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f2:	4b1b      	ldr	r3, [pc, #108]	; (8003860 <xTaskIncrementTick+0x164>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d3b9      	bcc.n	8003770 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80037fc:	2301      	movs	r3, #1
 80037fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003800:	e7b6      	b.n	8003770 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003802:	4b17      	ldr	r3, [pc, #92]	; (8003860 <xTaskIncrementTick+0x164>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003808:	4914      	ldr	r1, [pc, #80]	; (800385c <xTaskIncrementTick+0x160>)
 800380a:	4613      	mov	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	440b      	add	r3, r1
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d901      	bls.n	800381e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800381a:	2301      	movs	r3, #1
 800381c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800381e:	4b11      	ldr	r3, [pc, #68]	; (8003864 <xTaskIncrementTick+0x168>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d007      	beq.n	8003836 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003826:	2301      	movs	r3, #1
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	e004      	b.n	8003836 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800382c:	4b0e      	ldr	r3, [pc, #56]	; (8003868 <xTaskIncrementTick+0x16c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	3301      	adds	r3, #1
 8003832:	4a0d      	ldr	r2, [pc, #52]	; (8003868 <xTaskIncrementTick+0x16c>)
 8003834:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003836:	697b      	ldr	r3, [r7, #20]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	200004f4 	.word	0x200004f4
 8003844:	200004d0 	.word	0x200004d0
 8003848:	20000484 	.word	0x20000484
 800384c:	20000488 	.word	0x20000488
 8003850:	200004e4 	.word	0x200004e4
 8003854:	200004ec 	.word	0x200004ec
 8003858:	200004d4 	.word	0x200004d4
 800385c:	200003d0 	.word	0x200003d0
 8003860:	200003cc 	.word	0x200003cc
 8003864:	200004e0 	.word	0x200004e0
 8003868:	200004dc 	.word	0x200004dc

0800386c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003872:	4b29      	ldr	r3, [pc, #164]	; (8003918 <vTaskSwitchContext+0xac>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800387a:	4b28      	ldr	r3, [pc, #160]	; (800391c <vTaskSwitchContext+0xb0>)
 800387c:	2201      	movs	r2, #1
 800387e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003880:	e044      	b.n	800390c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003882:	4b26      	ldr	r3, [pc, #152]	; (800391c <vTaskSwitchContext+0xb0>)
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003888:	4b25      	ldr	r3, [pc, #148]	; (8003920 <vTaskSwitchContext+0xb4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	fab3 f383 	clz	r3, r3
 8003894:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003896:	7afb      	ldrb	r3, [r7, #11]
 8003898:	f1c3 031f 	rsb	r3, r3, #31
 800389c:	617b      	str	r3, [r7, #20]
 800389e:	4921      	ldr	r1, [pc, #132]	; (8003924 <vTaskSwitchContext+0xb8>)
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	4613      	mov	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	440b      	add	r3, r1
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10a      	bne.n	80038c8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80038b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b6:	f383 8811 	msr	BASEPRI, r3
 80038ba:	f3bf 8f6f 	isb	sy
 80038be:	f3bf 8f4f 	dsb	sy
 80038c2:	607b      	str	r3, [r7, #4]
}
 80038c4:	bf00      	nop
 80038c6:	e7fe      	b.n	80038c6 <vTaskSwitchContext+0x5a>
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	4613      	mov	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4413      	add	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4a14      	ldr	r2, [pc, #80]	; (8003924 <vTaskSwitchContext+0xb8>)
 80038d4:	4413      	add	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	605a      	str	r2, [r3, #4]
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	3308      	adds	r3, #8
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d104      	bne.n	80038f8 <vTaskSwitchContext+0x8c>
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	605a      	str	r2, [r3, #4]
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	4a0a      	ldr	r2, [pc, #40]	; (8003928 <vTaskSwitchContext+0xbc>)
 8003900:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003902:	4b09      	ldr	r3, [pc, #36]	; (8003928 <vTaskSwitchContext+0xbc>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	334c      	adds	r3, #76	; 0x4c
 8003908:	4a08      	ldr	r2, [pc, #32]	; (800392c <vTaskSwitchContext+0xc0>)
 800390a:	6013      	str	r3, [r2, #0]
}
 800390c:	bf00      	nop
 800390e:	371c      	adds	r7, #28
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	200004f4 	.word	0x200004f4
 800391c:	200004e0 	.word	0x200004e0
 8003920:	200004d4 	.word	0x200004d4
 8003924:	200003d0 	.word	0x200003d0
 8003928:	200003cc 	.word	0x200003cc
 800392c:	20000068 	.word	0x20000068

08003930 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10a      	bne.n	8003956 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003944:	f383 8811 	msr	BASEPRI, r3
 8003948:	f3bf 8f6f 	isb	sy
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	60fb      	str	r3, [r7, #12]
}
 8003952:	bf00      	nop
 8003954:	e7fe      	b.n	8003954 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003956:	4b07      	ldr	r3, [pc, #28]	; (8003974 <vTaskPlaceOnEventList+0x44>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	3318      	adds	r3, #24
 800395c:	4619      	mov	r1, r3
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff f86a 	bl	8002a38 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003964:	2101      	movs	r1, #1
 8003966:	6838      	ldr	r0, [r7, #0]
 8003968:	f000 fa6a 	bl	8003e40 <prvAddCurrentTaskToDelayedList>
}
 800396c:	bf00      	nop
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	200003cc 	.word	0x200003cc

08003978 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10a      	bne.n	80039a4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800398e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	60fb      	str	r3, [r7, #12]
}
 80039a0:	bf00      	nop
 80039a2:	e7fe      	b.n	80039a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	3318      	adds	r3, #24
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff f87e 	bl	8002aaa <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039ae:	4b1d      	ldr	r3, [pc, #116]	; (8003a24 <xTaskRemoveFromEventList+0xac>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d11c      	bne.n	80039f0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	3304      	adds	r3, #4
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff f875 	bl	8002aaa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c4:	2201      	movs	r2, #1
 80039c6:	409a      	lsls	r2, r3
 80039c8:	4b17      	ldr	r3, [pc, #92]	; (8003a28 <xTaskRemoveFromEventList+0xb0>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	4a16      	ldr	r2, [pc, #88]	; (8003a28 <xTaskRemoveFromEventList+0xb0>)
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d6:	4613      	mov	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4a13      	ldr	r2, [pc, #76]	; (8003a2c <xTaskRemoveFromEventList+0xb4>)
 80039e0:	441a      	add	r2, r3
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	3304      	adds	r3, #4
 80039e6:	4619      	mov	r1, r3
 80039e8:	4610      	mov	r0, r2
 80039ea:	f7ff f801 	bl	80029f0 <vListInsertEnd>
 80039ee:	e005      	b.n	80039fc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	3318      	adds	r3, #24
 80039f4:	4619      	mov	r1, r3
 80039f6:	480e      	ldr	r0, [pc, #56]	; (8003a30 <xTaskRemoveFromEventList+0xb8>)
 80039f8:	f7fe fffa 	bl	80029f0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a00:	4b0c      	ldr	r3, [pc, #48]	; (8003a34 <xTaskRemoveFromEventList+0xbc>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d905      	bls.n	8003a16 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003a0e:	4b0a      	ldr	r3, [pc, #40]	; (8003a38 <xTaskRemoveFromEventList+0xc0>)
 8003a10:	2201      	movs	r2, #1
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	e001      	b.n	8003a1a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003a16:	2300      	movs	r3, #0
 8003a18:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003a1a:	697b      	ldr	r3, [r7, #20]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3718      	adds	r7, #24
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	200004f4 	.word	0x200004f4
 8003a28:	200004d4 	.word	0x200004d4
 8003a2c:	200003d0 	.word	0x200003d0
 8003a30:	2000048c 	.word	0x2000048c
 8003a34:	200003cc 	.word	0x200003cc
 8003a38:	200004e0 	.word	0x200004e0

08003a3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a44:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <vTaskInternalSetTimeOutState+0x24>)
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003a4c:	4b05      	ldr	r3, [pc, #20]	; (8003a64 <vTaskInternalSetTimeOutState+0x28>)
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	605a      	str	r2, [r3, #4]
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	200004e4 	.word	0x200004e4
 8003a64:	200004d0 	.word	0x200004d0

08003a68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b088      	sub	sp, #32
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10a      	bne.n	8003a8e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7c:	f383 8811 	msr	BASEPRI, r3
 8003a80:	f3bf 8f6f 	isb	sy
 8003a84:	f3bf 8f4f 	dsb	sy
 8003a88:	613b      	str	r3, [r7, #16]
}
 8003a8a:	bf00      	nop
 8003a8c:	e7fe      	b.n	8003a8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10a      	bne.n	8003aaa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a98:	f383 8811 	msr	BASEPRI, r3
 8003a9c:	f3bf 8f6f 	isb	sy
 8003aa0:	f3bf 8f4f 	dsb	sy
 8003aa4:	60fb      	str	r3, [r7, #12]
}
 8003aa6:	bf00      	nop
 8003aa8:	e7fe      	b.n	8003aa8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003aaa:	f000 fb5b 	bl	8004164 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003aae:	4b1d      	ldr	r3, [pc, #116]	; (8003b24 <xTaskCheckForTimeOut+0xbc>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac6:	d102      	bne.n	8003ace <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	61fb      	str	r3, [r7, #28]
 8003acc:	e023      	b.n	8003b16 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	4b15      	ldr	r3, [pc, #84]	; (8003b28 <xTaskCheckForTimeOut+0xc0>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d007      	beq.n	8003aea <xTaskCheckForTimeOut+0x82>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d302      	bcc.n	8003aea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	61fb      	str	r3, [r7, #28]
 8003ae8:	e015      	b.n	8003b16 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d20b      	bcs.n	8003b0c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	1ad2      	subs	r2, r2, r3
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff ff9b 	bl	8003a3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003b06:	2300      	movs	r3, #0
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	e004      	b.n	8003b16 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003b12:	2301      	movs	r3, #1
 8003b14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003b16:	f000 fb55 	bl	80041c4 <vPortExitCritical>

	return xReturn;
 8003b1a:	69fb      	ldr	r3, [r7, #28]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3720      	adds	r7, #32
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	200004d0 	.word	0x200004d0
 8003b28:	200004e4 	.word	0x200004e4

08003b2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003b30:	4b03      	ldr	r3, [pc, #12]	; (8003b40 <vTaskMissedYield+0x14>)
 8003b32:	2201      	movs	r2, #1
 8003b34:	601a      	str	r2, [r3, #0]
}
 8003b36:	bf00      	nop
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	200004e0 	.word	0x200004e0

08003b44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b4c:	f000 f852 	bl	8003bf4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b50:	4b06      	ldr	r3, [pc, #24]	; (8003b6c <prvIdleTask+0x28>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d9f9      	bls.n	8003b4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b58:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <prvIdleTask+0x2c>)
 8003b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003b68:	e7f0      	b.n	8003b4c <prvIdleTask+0x8>
 8003b6a:	bf00      	nop
 8003b6c:	200003d0 	.word	0x200003d0
 8003b70:	e000ed04 	.word	0xe000ed04

08003b74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	607b      	str	r3, [r7, #4]
 8003b7e:	e00c      	b.n	8003b9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	4613      	mov	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4413      	add	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4a12      	ldr	r2, [pc, #72]	; (8003bd4 <prvInitialiseTaskLists+0x60>)
 8003b8c:	4413      	add	r3, r2
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fe ff01 	bl	8002996 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3301      	adds	r3, #1
 8003b98:	607b      	str	r3, [r7, #4]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b06      	cmp	r3, #6
 8003b9e:	d9ef      	bls.n	8003b80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ba0:	480d      	ldr	r0, [pc, #52]	; (8003bd8 <prvInitialiseTaskLists+0x64>)
 8003ba2:	f7fe fef8 	bl	8002996 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ba6:	480d      	ldr	r0, [pc, #52]	; (8003bdc <prvInitialiseTaskLists+0x68>)
 8003ba8:	f7fe fef5 	bl	8002996 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003bac:	480c      	ldr	r0, [pc, #48]	; (8003be0 <prvInitialiseTaskLists+0x6c>)
 8003bae:	f7fe fef2 	bl	8002996 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003bb2:	480c      	ldr	r0, [pc, #48]	; (8003be4 <prvInitialiseTaskLists+0x70>)
 8003bb4:	f7fe feef 	bl	8002996 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003bb8:	480b      	ldr	r0, [pc, #44]	; (8003be8 <prvInitialiseTaskLists+0x74>)
 8003bba:	f7fe feec 	bl	8002996 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003bbe:	4b0b      	ldr	r3, [pc, #44]	; (8003bec <prvInitialiseTaskLists+0x78>)
 8003bc0:	4a05      	ldr	r2, [pc, #20]	; (8003bd8 <prvInitialiseTaskLists+0x64>)
 8003bc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003bc4:	4b0a      	ldr	r3, [pc, #40]	; (8003bf0 <prvInitialiseTaskLists+0x7c>)
 8003bc6:	4a05      	ldr	r2, [pc, #20]	; (8003bdc <prvInitialiseTaskLists+0x68>)
 8003bc8:	601a      	str	r2, [r3, #0]
}
 8003bca:	bf00      	nop
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	200003d0 	.word	0x200003d0
 8003bd8:	2000045c 	.word	0x2000045c
 8003bdc:	20000470 	.word	0x20000470
 8003be0:	2000048c 	.word	0x2000048c
 8003be4:	200004a0 	.word	0x200004a0
 8003be8:	200004b8 	.word	0x200004b8
 8003bec:	20000484 	.word	0x20000484
 8003bf0:	20000488 	.word	0x20000488

08003bf4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bfa:	e019      	b.n	8003c30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003bfc:	f000 fab2 	bl	8004164 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c00:	4b10      	ldr	r3, [pc, #64]	; (8003c44 <prvCheckTasksWaitingTermination+0x50>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7fe ff4c 	bl	8002aaa <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c12:	4b0d      	ldr	r3, [pc, #52]	; (8003c48 <prvCheckTasksWaitingTermination+0x54>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	4a0b      	ldr	r2, [pc, #44]	; (8003c48 <prvCheckTasksWaitingTermination+0x54>)
 8003c1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c1c:	4b0b      	ldr	r3, [pc, #44]	; (8003c4c <prvCheckTasksWaitingTermination+0x58>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	3b01      	subs	r3, #1
 8003c22:	4a0a      	ldr	r2, [pc, #40]	; (8003c4c <prvCheckTasksWaitingTermination+0x58>)
 8003c24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c26:	f000 facd 	bl	80041c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f810 	bl	8003c50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c30:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <prvCheckTasksWaitingTermination+0x58>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1e1      	bne.n	8003bfc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c38:	bf00      	nop
 8003c3a:	bf00      	nop
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	200004a0 	.word	0x200004a0
 8003c48:	200004cc 	.word	0x200004cc
 8003c4c:	200004b4 	.word	0x200004b4

08003c50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	334c      	adds	r3, #76	; 0x4c
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 ff5b 	bl	8004b18 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d108      	bne.n	8003c7e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 fc25 	bl	80044c0 <vPortFree>
				vPortFree( pxTCB );
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 fc22 	bl	80044c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003c7c:	e018      	b.n	8003cb0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d103      	bne.n	8003c90 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 fc19 	bl	80044c0 <vPortFree>
	}
 8003c8e:	e00f      	b.n	8003cb0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d00a      	beq.n	8003cb0 <prvDeleteTCB+0x60>
	__asm volatile
 8003c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9e:	f383 8811 	msr	BASEPRI, r3
 8003ca2:	f3bf 8f6f 	isb	sy
 8003ca6:	f3bf 8f4f 	dsb	sy
 8003caa:	60fb      	str	r3, [r7, #12]
}
 8003cac:	bf00      	nop
 8003cae:	e7fe      	b.n	8003cae <prvDeleteTCB+0x5e>
	}
 8003cb0:	bf00      	nop
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cbe:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <prvResetNextTaskUnblockTime+0x38>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d104      	bne.n	8003cd2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003cc8:	4b0a      	ldr	r3, [pc, #40]	; (8003cf4 <prvResetNextTaskUnblockTime+0x3c>)
 8003cca:	f04f 32ff 	mov.w	r2, #4294967295
 8003cce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003cd0:	e008      	b.n	8003ce4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cd2:	4b07      	ldr	r3, [pc, #28]	; (8003cf0 <prvResetNextTaskUnblockTime+0x38>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	4a04      	ldr	r2, [pc, #16]	; (8003cf4 <prvResetNextTaskUnblockTime+0x3c>)
 8003ce2:	6013      	str	r3, [r2, #0]
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	20000484 	.word	0x20000484
 8003cf4:	200004ec 	.word	0x200004ec

08003cf8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003cfe:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <xTaskGetSchedulerState+0x34>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d102      	bne.n	8003d0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003d06:	2301      	movs	r3, #1
 8003d08:	607b      	str	r3, [r7, #4]
 8003d0a:	e008      	b.n	8003d1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d0c:	4b08      	ldr	r3, [pc, #32]	; (8003d30 <xTaskGetSchedulerState+0x38>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d102      	bne.n	8003d1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003d14:	2302      	movs	r3, #2
 8003d16:	607b      	str	r3, [r7, #4]
 8003d18:	e001      	b.n	8003d1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003d1e:	687b      	ldr	r3, [r7, #4]
	}
 8003d20:	4618      	mov	r0, r3
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	200004d8 	.word	0x200004d8
 8003d30:	200004f4 	.word	0x200004f4

08003d34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003d40:	2300      	movs	r3, #0
 8003d42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d06e      	beq.n	8003e28 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003d4a:	4b3a      	ldr	r3, [pc, #232]	; (8003e34 <xTaskPriorityDisinherit+0x100>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d00a      	beq.n	8003d6a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d58:	f383 8811 	msr	BASEPRI, r3
 8003d5c:	f3bf 8f6f 	isb	sy
 8003d60:	f3bf 8f4f 	dsb	sy
 8003d64:	60fb      	str	r3, [r7, #12]
}
 8003d66:	bf00      	nop
 8003d68:	e7fe      	b.n	8003d68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10a      	bne.n	8003d88 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d76:	f383 8811 	msr	BASEPRI, r3
 8003d7a:	f3bf 8f6f 	isb	sy
 8003d7e:	f3bf 8f4f 	dsb	sy
 8003d82:	60bb      	str	r3, [r7, #8]
}
 8003d84:	bf00      	nop
 8003d86:	e7fe      	b.n	8003d86 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d8c:	1e5a      	subs	r2, r3, #1
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d044      	beq.n	8003e28 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d140      	bne.n	8003e28 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	3304      	adds	r3, #4
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fe fe7d 	bl	8002aaa <uxListRemove>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d115      	bne.n	8003de2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dba:	491f      	ldr	r1, [pc, #124]	; (8003e38 <xTaskPriorityDisinherit+0x104>)
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4413      	add	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10a      	bne.n	8003de2 <xTaskPriorityDisinherit+0xae>
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd6:	43da      	mvns	r2, r3
 8003dd8:	4b18      	ldr	r3, [pc, #96]	; (8003e3c <xTaskPriorityDisinherit+0x108>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	4a17      	ldr	r2, [pc, #92]	; (8003e3c <xTaskPriorityDisinherit+0x108>)
 8003de0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dee:	f1c3 0207 	rsb	r2, r3, #7
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	409a      	lsls	r2, r3
 8003dfe:	4b0f      	ldr	r3, [pc, #60]	; (8003e3c <xTaskPriorityDisinherit+0x108>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	4a0d      	ldr	r2, [pc, #52]	; (8003e3c <xTaskPriorityDisinherit+0x108>)
 8003e06:	6013      	str	r3, [r2, #0]
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4a08      	ldr	r2, [pc, #32]	; (8003e38 <xTaskPriorityDisinherit+0x104>)
 8003e16:	441a      	add	r2, r3
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4610      	mov	r0, r2
 8003e20:	f7fe fde6 	bl	80029f0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003e24:	2301      	movs	r3, #1
 8003e26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003e28:	697b      	ldr	r3, [r7, #20]
	}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	200003cc 	.word	0x200003cc
 8003e38:	200003d0 	.word	0x200003d0
 8003e3c:	200004d4 	.word	0x200004d4

08003e40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e4a:	4b29      	ldr	r3, [pc, #164]	; (8003ef0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e50:	4b28      	ldr	r3, [pc, #160]	; (8003ef4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3304      	adds	r3, #4
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fe fe27 	bl	8002aaa <uxListRemove>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10b      	bne.n	8003e7a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003e62:	4b24      	ldr	r3, [pc, #144]	; (8003ef4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e68:	2201      	movs	r2, #1
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	43da      	mvns	r2, r3
 8003e70:	4b21      	ldr	r3, [pc, #132]	; (8003ef8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4013      	ands	r3, r2
 8003e76:	4a20      	ldr	r2, [pc, #128]	; (8003ef8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003e78:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e80:	d10a      	bne.n	8003e98 <prvAddCurrentTaskToDelayedList+0x58>
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d007      	beq.n	8003e98 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e88:	4b1a      	ldr	r3, [pc, #104]	; (8003ef4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	4619      	mov	r1, r3
 8003e90:	481a      	ldr	r0, [pc, #104]	; (8003efc <prvAddCurrentTaskToDelayedList+0xbc>)
 8003e92:	f7fe fdad 	bl	80029f0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e96:	e026      	b.n	8003ee6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ea0:	4b14      	ldr	r3, [pc, #80]	; (8003ef4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d209      	bcs.n	8003ec4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003eb0:	4b13      	ldr	r3, [pc, #76]	; (8003f00 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	4b0f      	ldr	r3, [pc, #60]	; (8003ef4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	3304      	adds	r3, #4
 8003eba:	4619      	mov	r1, r3
 8003ebc:	4610      	mov	r0, r2
 8003ebe:	f7fe fdbb 	bl	8002a38 <vListInsert>
}
 8003ec2:	e010      	b.n	8003ee6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ec4:	4b0f      	ldr	r3, [pc, #60]	; (8003f04 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	3304      	adds	r3, #4
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4610      	mov	r0, r2
 8003ed2:	f7fe fdb1 	bl	8002a38 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003ed6:	4b0c      	ldr	r3, [pc, #48]	; (8003f08 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d202      	bcs.n	8003ee6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003ee0:	4a09      	ldr	r2, [pc, #36]	; (8003f08 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	6013      	str	r3, [r2, #0]
}
 8003ee6:	bf00      	nop
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	200004d0 	.word	0x200004d0
 8003ef4:	200003cc 	.word	0x200003cc
 8003ef8:	200004d4 	.word	0x200004d4
 8003efc:	200004b8 	.word	0x200004b8
 8003f00:	20000488 	.word	0x20000488
 8003f04:	20000484 	.word	0x20000484
 8003f08:	200004ec 	.word	0x200004ec

08003f0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	3b04      	subs	r3, #4
 8003f1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	3b04      	subs	r3, #4
 8003f2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f023 0201 	bic.w	r2, r3, #1
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	3b04      	subs	r3, #4
 8003f3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003f3c:	4a0c      	ldr	r2, [pc, #48]	; (8003f70 <pxPortInitialiseStack+0x64>)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	3b14      	subs	r3, #20
 8003f46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	3b04      	subs	r3, #4
 8003f52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f06f 0202 	mvn.w	r2, #2
 8003f5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	3b20      	subs	r3, #32
 8003f60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003f62:	68fb      	ldr	r3, [r7, #12]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	08003f75 	.word	0x08003f75

08003f74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003f7e:	4b12      	ldr	r3, [pc, #72]	; (8003fc8 <prvTaskExitError+0x54>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f86:	d00a      	beq.n	8003f9e <prvTaskExitError+0x2a>
	__asm volatile
 8003f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8c:	f383 8811 	msr	BASEPRI, r3
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	60fb      	str	r3, [r7, #12]
}
 8003f9a:	bf00      	nop
 8003f9c:	e7fe      	b.n	8003f9c <prvTaskExitError+0x28>
	__asm volatile
 8003f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa2:	f383 8811 	msr	BASEPRI, r3
 8003fa6:	f3bf 8f6f 	isb	sy
 8003faa:	f3bf 8f4f 	dsb	sy
 8003fae:	60bb      	str	r3, [r7, #8]
}
 8003fb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003fb2:	bf00      	nop
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0fc      	beq.n	8003fb4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003fba:	bf00      	nop
 8003fbc:	bf00      	nop
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	2000000c 	.word	0x2000000c
 8003fcc:	00000000 	.word	0x00000000

08003fd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003fd0:	4b07      	ldr	r3, [pc, #28]	; (8003ff0 <pxCurrentTCBConst2>)
 8003fd2:	6819      	ldr	r1, [r3, #0]
 8003fd4:	6808      	ldr	r0, [r1, #0]
 8003fd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fda:	f380 8809 	msr	PSP, r0
 8003fde:	f3bf 8f6f 	isb	sy
 8003fe2:	f04f 0000 	mov.w	r0, #0
 8003fe6:	f380 8811 	msr	BASEPRI, r0
 8003fea:	4770      	bx	lr
 8003fec:	f3af 8000 	nop.w

08003ff0 <pxCurrentTCBConst2>:
 8003ff0:	200003cc 	.word	0x200003cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003ff4:	bf00      	nop
 8003ff6:	bf00      	nop

08003ff8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003ff8:	4808      	ldr	r0, [pc, #32]	; (800401c <prvPortStartFirstTask+0x24>)
 8003ffa:	6800      	ldr	r0, [r0, #0]
 8003ffc:	6800      	ldr	r0, [r0, #0]
 8003ffe:	f380 8808 	msr	MSP, r0
 8004002:	f04f 0000 	mov.w	r0, #0
 8004006:	f380 8814 	msr	CONTROL, r0
 800400a:	b662      	cpsie	i
 800400c:	b661      	cpsie	f
 800400e:	f3bf 8f4f 	dsb	sy
 8004012:	f3bf 8f6f 	isb	sy
 8004016:	df00      	svc	0
 8004018:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800401a:	bf00      	nop
 800401c:	e000ed08 	.word	0xe000ed08

08004020 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004026:	4b46      	ldr	r3, [pc, #280]	; (8004140 <xPortStartScheduler+0x120>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a46      	ldr	r2, [pc, #280]	; (8004144 <xPortStartScheduler+0x124>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d10a      	bne.n	8004046 <xPortStartScheduler+0x26>
	__asm volatile
 8004030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004034:	f383 8811 	msr	BASEPRI, r3
 8004038:	f3bf 8f6f 	isb	sy
 800403c:	f3bf 8f4f 	dsb	sy
 8004040:	613b      	str	r3, [r7, #16]
}
 8004042:	bf00      	nop
 8004044:	e7fe      	b.n	8004044 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004046:	4b3e      	ldr	r3, [pc, #248]	; (8004140 <xPortStartScheduler+0x120>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a3f      	ldr	r2, [pc, #252]	; (8004148 <xPortStartScheduler+0x128>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d10a      	bne.n	8004066 <xPortStartScheduler+0x46>
	__asm volatile
 8004050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004054:	f383 8811 	msr	BASEPRI, r3
 8004058:	f3bf 8f6f 	isb	sy
 800405c:	f3bf 8f4f 	dsb	sy
 8004060:	60fb      	str	r3, [r7, #12]
}
 8004062:	bf00      	nop
 8004064:	e7fe      	b.n	8004064 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004066:	4b39      	ldr	r3, [pc, #228]	; (800414c <xPortStartScheduler+0x12c>)
 8004068:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	b2db      	uxtb	r3, r3
 8004070:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	22ff      	movs	r2, #255	; 0xff
 8004076:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	b2db      	uxtb	r3, r3
 800407e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004080:	78fb      	ldrb	r3, [r7, #3]
 8004082:	b2db      	uxtb	r3, r3
 8004084:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004088:	b2da      	uxtb	r2, r3
 800408a:	4b31      	ldr	r3, [pc, #196]	; (8004150 <xPortStartScheduler+0x130>)
 800408c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800408e:	4b31      	ldr	r3, [pc, #196]	; (8004154 <xPortStartScheduler+0x134>)
 8004090:	2207      	movs	r2, #7
 8004092:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004094:	e009      	b.n	80040aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004096:	4b2f      	ldr	r3, [pc, #188]	; (8004154 <xPortStartScheduler+0x134>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3b01      	subs	r3, #1
 800409c:	4a2d      	ldr	r2, [pc, #180]	; (8004154 <xPortStartScheduler+0x134>)
 800409e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80040a0:	78fb      	ldrb	r3, [r7, #3]
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040aa:	78fb      	ldrb	r3, [r7, #3]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b2:	2b80      	cmp	r3, #128	; 0x80
 80040b4:	d0ef      	beq.n	8004096 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80040b6:	4b27      	ldr	r3, [pc, #156]	; (8004154 <xPortStartScheduler+0x134>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f1c3 0307 	rsb	r3, r3, #7
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d00a      	beq.n	80040d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80040c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c6:	f383 8811 	msr	BASEPRI, r3
 80040ca:	f3bf 8f6f 	isb	sy
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	60bb      	str	r3, [r7, #8]
}
 80040d4:	bf00      	nop
 80040d6:	e7fe      	b.n	80040d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80040d8:	4b1e      	ldr	r3, [pc, #120]	; (8004154 <xPortStartScheduler+0x134>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	021b      	lsls	r3, r3, #8
 80040de:	4a1d      	ldr	r2, [pc, #116]	; (8004154 <xPortStartScheduler+0x134>)
 80040e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80040e2:	4b1c      	ldr	r3, [pc, #112]	; (8004154 <xPortStartScheduler+0x134>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80040ea:	4a1a      	ldr	r2, [pc, #104]	; (8004154 <xPortStartScheduler+0x134>)
 80040ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80040f6:	4b18      	ldr	r3, [pc, #96]	; (8004158 <xPortStartScheduler+0x138>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a17      	ldr	r2, [pc, #92]	; (8004158 <xPortStartScheduler+0x138>)
 80040fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004100:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004102:	4b15      	ldr	r3, [pc, #84]	; (8004158 <xPortStartScheduler+0x138>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a14      	ldr	r2, [pc, #80]	; (8004158 <xPortStartScheduler+0x138>)
 8004108:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800410c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800410e:	f000 f8dd 	bl	80042cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004112:	4b12      	ldr	r3, [pc, #72]	; (800415c <xPortStartScheduler+0x13c>)
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004118:	f000 f8fc 	bl	8004314 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800411c:	4b10      	ldr	r3, [pc, #64]	; (8004160 <xPortStartScheduler+0x140>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a0f      	ldr	r2, [pc, #60]	; (8004160 <xPortStartScheduler+0x140>)
 8004122:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004126:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004128:	f7ff ff66 	bl	8003ff8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800412c:	f7ff fb9e 	bl	800386c <vTaskSwitchContext>
	prvTaskExitError();
 8004130:	f7ff ff20 	bl	8003f74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3718      	adds	r7, #24
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	e000ed00 	.word	0xe000ed00
 8004144:	410fc271 	.word	0x410fc271
 8004148:	410fc270 	.word	0x410fc270
 800414c:	e000e400 	.word	0xe000e400
 8004150:	200004f8 	.word	0x200004f8
 8004154:	200004fc 	.word	0x200004fc
 8004158:	e000ed20 	.word	0xe000ed20
 800415c:	2000000c 	.word	0x2000000c
 8004160:	e000ef34 	.word	0xe000ef34

08004164 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
	__asm volatile
 800416a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416e:	f383 8811 	msr	BASEPRI, r3
 8004172:	f3bf 8f6f 	isb	sy
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	607b      	str	r3, [r7, #4]
}
 800417c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800417e:	4b0f      	ldr	r3, [pc, #60]	; (80041bc <vPortEnterCritical+0x58>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	3301      	adds	r3, #1
 8004184:	4a0d      	ldr	r2, [pc, #52]	; (80041bc <vPortEnterCritical+0x58>)
 8004186:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004188:	4b0c      	ldr	r3, [pc, #48]	; (80041bc <vPortEnterCritical+0x58>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d10f      	bne.n	80041b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004190:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <vPortEnterCritical+0x5c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00a      	beq.n	80041b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800419a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419e:	f383 8811 	msr	BASEPRI, r3
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	603b      	str	r3, [r7, #0]
}
 80041ac:	bf00      	nop
 80041ae:	e7fe      	b.n	80041ae <vPortEnterCritical+0x4a>
	}
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	2000000c 	.word	0x2000000c
 80041c0:	e000ed04 	.word	0xe000ed04

080041c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80041ca:	4b12      	ldr	r3, [pc, #72]	; (8004214 <vPortExitCritical+0x50>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10a      	bne.n	80041e8 <vPortExitCritical+0x24>
	__asm volatile
 80041d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d6:	f383 8811 	msr	BASEPRI, r3
 80041da:	f3bf 8f6f 	isb	sy
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	607b      	str	r3, [r7, #4]
}
 80041e4:	bf00      	nop
 80041e6:	e7fe      	b.n	80041e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80041e8:	4b0a      	ldr	r3, [pc, #40]	; (8004214 <vPortExitCritical+0x50>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3b01      	subs	r3, #1
 80041ee:	4a09      	ldr	r2, [pc, #36]	; (8004214 <vPortExitCritical+0x50>)
 80041f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80041f2:	4b08      	ldr	r3, [pc, #32]	; (8004214 <vPortExitCritical+0x50>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d105      	bne.n	8004206 <vPortExitCritical+0x42>
 80041fa:	2300      	movs	r3, #0
 80041fc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004204:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	2000000c 	.word	0x2000000c
	...

08004220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004220:	f3ef 8009 	mrs	r0, PSP
 8004224:	f3bf 8f6f 	isb	sy
 8004228:	4b15      	ldr	r3, [pc, #84]	; (8004280 <pxCurrentTCBConst>)
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	f01e 0f10 	tst.w	lr, #16
 8004230:	bf08      	it	eq
 8004232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800423a:	6010      	str	r0, [r2, #0]
 800423c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004240:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004244:	f380 8811 	msr	BASEPRI, r0
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f7ff fb0c 	bl	800386c <vTaskSwitchContext>
 8004254:	f04f 0000 	mov.w	r0, #0
 8004258:	f380 8811 	msr	BASEPRI, r0
 800425c:	bc09      	pop	{r0, r3}
 800425e:	6819      	ldr	r1, [r3, #0]
 8004260:	6808      	ldr	r0, [r1, #0]
 8004262:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004266:	f01e 0f10 	tst.w	lr, #16
 800426a:	bf08      	it	eq
 800426c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004270:	f380 8809 	msr	PSP, r0
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	f3af 8000 	nop.w

08004280 <pxCurrentTCBConst>:
 8004280:	200003cc 	.word	0x200003cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004284:	bf00      	nop
 8004286:	bf00      	nop

08004288 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
	__asm volatile
 800428e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004292:	f383 8811 	msr	BASEPRI, r3
 8004296:	f3bf 8f6f 	isb	sy
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	607b      	str	r3, [r7, #4]
}
 80042a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80042a2:	f7ff fa2b 	bl	80036fc <xTaskIncrementTick>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80042ac:	4b06      	ldr	r3, [pc, #24]	; (80042c8 <SysTick_Handler+0x40>)
 80042ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	2300      	movs	r3, #0
 80042b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	f383 8811 	msr	BASEPRI, r3
}
 80042be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80042c0:	bf00      	nop
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	e000ed04 	.word	0xe000ed04

080042cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80042d0:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <vPortSetupTimerInterrupt+0x34>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80042d6:	4b0b      	ldr	r3, [pc, #44]	; (8004304 <vPortSetupTimerInterrupt+0x38>)
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80042dc:	4b0a      	ldr	r3, [pc, #40]	; (8004308 <vPortSetupTimerInterrupt+0x3c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a0a      	ldr	r2, [pc, #40]	; (800430c <vPortSetupTimerInterrupt+0x40>)
 80042e2:	fba2 2303 	umull	r2, r3, r2, r3
 80042e6:	099b      	lsrs	r3, r3, #6
 80042e8:	4a09      	ldr	r2, [pc, #36]	; (8004310 <vPortSetupTimerInterrupt+0x44>)
 80042ea:	3b01      	subs	r3, #1
 80042ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80042ee:	4b04      	ldr	r3, [pc, #16]	; (8004300 <vPortSetupTimerInterrupt+0x34>)
 80042f0:	2207      	movs	r2, #7
 80042f2:	601a      	str	r2, [r3, #0]
}
 80042f4:	bf00      	nop
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	e000e010 	.word	0xe000e010
 8004304:	e000e018 	.word	0xe000e018
 8004308:	20000000 	.word	0x20000000
 800430c:	10624dd3 	.word	0x10624dd3
 8004310:	e000e014 	.word	0xe000e014

08004314 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004314:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004324 <vPortEnableVFP+0x10>
 8004318:	6801      	ldr	r1, [r0, #0]
 800431a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800431e:	6001      	str	r1, [r0, #0]
 8004320:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004322:	bf00      	nop
 8004324:	e000ed88 	.word	0xe000ed88

08004328 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b08a      	sub	sp, #40	; 0x28
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004330:	2300      	movs	r3, #0
 8004332:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004334:	f7ff f938 	bl	80035a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004338:	4b5b      	ldr	r3, [pc, #364]	; (80044a8 <pvPortMalloc+0x180>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004340:	f000 f920 	bl	8004584 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004344:	4b59      	ldr	r3, [pc, #356]	; (80044ac <pvPortMalloc+0x184>)
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4013      	ands	r3, r2
 800434c:	2b00      	cmp	r3, #0
 800434e:	f040 8093 	bne.w	8004478 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d01d      	beq.n	8004394 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004358:	2208      	movs	r2, #8
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4413      	add	r3, r2
 800435e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f003 0307 	and.w	r3, r3, #7
 8004366:	2b00      	cmp	r3, #0
 8004368:	d014      	beq.n	8004394 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f023 0307 	bic.w	r3, r3, #7
 8004370:	3308      	adds	r3, #8
 8004372:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00a      	beq.n	8004394 <pvPortMalloc+0x6c>
	__asm volatile
 800437e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	617b      	str	r3, [r7, #20]
}
 8004390:	bf00      	nop
 8004392:	e7fe      	b.n	8004392 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d06e      	beq.n	8004478 <pvPortMalloc+0x150>
 800439a:	4b45      	ldr	r3, [pc, #276]	; (80044b0 <pvPortMalloc+0x188>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d869      	bhi.n	8004478 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80043a4:	4b43      	ldr	r3, [pc, #268]	; (80044b4 <pvPortMalloc+0x18c>)
 80043a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80043a8:	4b42      	ldr	r3, [pc, #264]	; (80044b4 <pvPortMalloc+0x18c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043ae:	e004      	b.n	80043ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d903      	bls.n	80043cc <pvPortMalloc+0xa4>
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1f1      	bne.n	80043b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80043cc:	4b36      	ldr	r3, [pc, #216]	; (80044a8 <pvPortMalloc+0x180>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d050      	beq.n	8004478 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80043d6:	6a3b      	ldr	r3, [r7, #32]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2208      	movs	r2, #8
 80043dc:	4413      	add	r3, r2
 80043de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	1ad2      	subs	r2, r2, r3
 80043f0:	2308      	movs	r3, #8
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d91f      	bls.n	8004438 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80043f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4413      	add	r3, r2
 80043fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <pvPortMalloc+0xf8>
	__asm volatile
 800440a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440e:	f383 8811 	msr	BASEPRI, r3
 8004412:	f3bf 8f6f 	isb	sy
 8004416:	f3bf 8f4f 	dsb	sy
 800441a:	613b      	str	r3, [r7, #16]
}
 800441c:	bf00      	nop
 800441e:	e7fe      	b.n	800441e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	1ad2      	subs	r2, r2, r3
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004432:	69b8      	ldr	r0, [r7, #24]
 8004434:	f000 f908 	bl	8004648 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004438:	4b1d      	ldr	r3, [pc, #116]	; (80044b0 <pvPortMalloc+0x188>)
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	4a1b      	ldr	r2, [pc, #108]	; (80044b0 <pvPortMalloc+0x188>)
 8004444:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004446:	4b1a      	ldr	r3, [pc, #104]	; (80044b0 <pvPortMalloc+0x188>)
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	4b1b      	ldr	r3, [pc, #108]	; (80044b8 <pvPortMalloc+0x190>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	429a      	cmp	r2, r3
 8004450:	d203      	bcs.n	800445a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004452:	4b17      	ldr	r3, [pc, #92]	; (80044b0 <pvPortMalloc+0x188>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a18      	ldr	r2, [pc, #96]	; (80044b8 <pvPortMalloc+0x190>)
 8004458:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	4b13      	ldr	r3, [pc, #76]	; (80044ac <pvPortMalloc+0x184>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	431a      	orrs	r2, r3
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	2200      	movs	r2, #0
 800446c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800446e:	4b13      	ldr	r3, [pc, #76]	; (80044bc <pvPortMalloc+0x194>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	3301      	adds	r3, #1
 8004474:	4a11      	ldr	r2, [pc, #68]	; (80044bc <pvPortMalloc+0x194>)
 8004476:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004478:	f7ff f8a4 	bl	80035c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <pvPortMalloc+0x174>
	__asm volatile
 8004486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448a:	f383 8811 	msr	BASEPRI, r3
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	60fb      	str	r3, [r7, #12]
}
 8004498:	bf00      	nop
 800449a:	e7fe      	b.n	800449a <pvPortMalloc+0x172>
	return pvReturn;
 800449c:	69fb      	ldr	r3, [r7, #28]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3728      	adds	r7, #40	; 0x28
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	20004108 	.word	0x20004108
 80044ac:	2000411c 	.word	0x2000411c
 80044b0:	2000410c 	.word	0x2000410c
 80044b4:	20004100 	.word	0x20004100
 80044b8:	20004110 	.word	0x20004110
 80044bc:	20004114 	.word	0x20004114

080044c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d04d      	beq.n	800456e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80044d2:	2308      	movs	r3, #8
 80044d4:	425b      	negs	r3, r3
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	4413      	add	r3, r2
 80044da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	4b24      	ldr	r3, [pc, #144]	; (8004578 <vPortFree+0xb8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4013      	ands	r3, r2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10a      	bne.n	8004504 <vPortFree+0x44>
	__asm volatile
 80044ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f2:	f383 8811 	msr	BASEPRI, r3
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	60fb      	str	r3, [r7, #12]
}
 8004500:	bf00      	nop
 8004502:	e7fe      	b.n	8004502 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00a      	beq.n	8004522 <vPortFree+0x62>
	__asm volatile
 800450c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004510:	f383 8811 	msr	BASEPRI, r3
 8004514:	f3bf 8f6f 	isb	sy
 8004518:	f3bf 8f4f 	dsb	sy
 800451c:	60bb      	str	r3, [r7, #8]
}
 800451e:	bf00      	nop
 8004520:	e7fe      	b.n	8004520 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	4b14      	ldr	r3, [pc, #80]	; (8004578 <vPortFree+0xb8>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4013      	ands	r3, r2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d01e      	beq.n	800456e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d11a      	bne.n	800456e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	4b0e      	ldr	r3, [pc, #56]	; (8004578 <vPortFree+0xb8>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	43db      	mvns	r3, r3
 8004542:	401a      	ands	r2, r3
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004548:	f7ff f82e 	bl	80035a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	4b0a      	ldr	r3, [pc, #40]	; (800457c <vPortFree+0xbc>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4413      	add	r3, r2
 8004556:	4a09      	ldr	r2, [pc, #36]	; (800457c <vPortFree+0xbc>)
 8004558:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800455a:	6938      	ldr	r0, [r7, #16]
 800455c:	f000 f874 	bl	8004648 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004560:	4b07      	ldr	r3, [pc, #28]	; (8004580 <vPortFree+0xc0>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	3301      	adds	r3, #1
 8004566:	4a06      	ldr	r2, [pc, #24]	; (8004580 <vPortFree+0xc0>)
 8004568:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800456a:	f7ff f82b 	bl	80035c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800456e:	bf00      	nop
 8004570:	3718      	adds	r7, #24
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	2000411c 	.word	0x2000411c
 800457c:	2000410c 	.word	0x2000410c
 8004580:	20004118 	.word	0x20004118

08004584 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800458a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800458e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004590:	4b27      	ldr	r3, [pc, #156]	; (8004630 <prvHeapInit+0xac>)
 8004592:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00c      	beq.n	80045b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	3307      	adds	r3, #7
 80045a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f023 0307 	bic.w	r3, r3, #7
 80045aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	4a1f      	ldr	r2, [pc, #124]	; (8004630 <prvHeapInit+0xac>)
 80045b4:	4413      	add	r3, r2
 80045b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80045bc:	4a1d      	ldr	r2, [pc, #116]	; (8004634 <prvHeapInit+0xb0>)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80045c2:	4b1c      	ldr	r3, [pc, #112]	; (8004634 <prvHeapInit+0xb0>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	4413      	add	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80045d0:	2208      	movs	r2, #8
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	1a9b      	subs	r3, r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f023 0307 	bic.w	r3, r3, #7
 80045de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4a15      	ldr	r2, [pc, #84]	; (8004638 <prvHeapInit+0xb4>)
 80045e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80045e6:	4b14      	ldr	r3, [pc, #80]	; (8004638 <prvHeapInit+0xb4>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2200      	movs	r2, #0
 80045ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80045ee:	4b12      	ldr	r3, [pc, #72]	; (8004638 <prvHeapInit+0xb4>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2200      	movs	r2, #0
 80045f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	1ad2      	subs	r2, r2, r3
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004604:	4b0c      	ldr	r3, [pc, #48]	; (8004638 <prvHeapInit+0xb4>)
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	4a0a      	ldr	r2, [pc, #40]	; (800463c <prvHeapInit+0xb8>)
 8004612:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	4a09      	ldr	r2, [pc, #36]	; (8004640 <prvHeapInit+0xbc>)
 800461a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800461c:	4b09      	ldr	r3, [pc, #36]	; (8004644 <prvHeapInit+0xc0>)
 800461e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004622:	601a      	str	r2, [r3, #0]
}
 8004624:	bf00      	nop
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	20000500 	.word	0x20000500
 8004634:	20004100 	.word	0x20004100
 8004638:	20004108 	.word	0x20004108
 800463c:	20004110 	.word	0x20004110
 8004640:	2000410c 	.word	0x2000410c
 8004644:	2000411c 	.word	0x2000411c

08004648 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004650:	4b28      	ldr	r3, [pc, #160]	; (80046f4 <prvInsertBlockIntoFreeList+0xac>)
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	e002      	b.n	800465c <prvInsertBlockIntoFreeList+0x14>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	429a      	cmp	r2, r3
 8004664:	d8f7      	bhi.n	8004656 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	4413      	add	r3, r2
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	429a      	cmp	r2, r3
 8004676:	d108      	bne.n	800468a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	441a      	add	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	441a      	add	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	429a      	cmp	r2, r3
 800469c:	d118      	bne.n	80046d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	4b15      	ldr	r3, [pc, #84]	; (80046f8 <prvInsertBlockIntoFreeList+0xb0>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d00d      	beq.n	80046c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	441a      	add	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	e008      	b.n	80046d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80046c6:	4b0c      	ldr	r3, [pc, #48]	; (80046f8 <prvInsertBlockIntoFreeList+0xb0>)
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	e003      	b.n	80046d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d002      	beq.n	80046e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046e6:	bf00      	nop
 80046e8:	3714      	adds	r7, #20
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	20004100 	.word	0x20004100
 80046f8:	20004108 	.word	0x20004108

080046fc <std>:
 80046fc:	2300      	movs	r3, #0
 80046fe:	b510      	push	{r4, lr}
 8004700:	4604      	mov	r4, r0
 8004702:	e9c0 3300 	strd	r3, r3, [r0]
 8004706:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800470a:	6083      	str	r3, [r0, #8]
 800470c:	8181      	strh	r1, [r0, #12]
 800470e:	6643      	str	r3, [r0, #100]	; 0x64
 8004710:	81c2      	strh	r2, [r0, #14]
 8004712:	6183      	str	r3, [r0, #24]
 8004714:	4619      	mov	r1, r3
 8004716:	2208      	movs	r2, #8
 8004718:	305c      	adds	r0, #92	; 0x5c
 800471a:	f000 f9e5 	bl	8004ae8 <memset>
 800471e:	4b0d      	ldr	r3, [pc, #52]	; (8004754 <std+0x58>)
 8004720:	6263      	str	r3, [r4, #36]	; 0x24
 8004722:	4b0d      	ldr	r3, [pc, #52]	; (8004758 <std+0x5c>)
 8004724:	62a3      	str	r3, [r4, #40]	; 0x28
 8004726:	4b0d      	ldr	r3, [pc, #52]	; (800475c <std+0x60>)
 8004728:	62e3      	str	r3, [r4, #44]	; 0x2c
 800472a:	4b0d      	ldr	r3, [pc, #52]	; (8004760 <std+0x64>)
 800472c:	6323      	str	r3, [r4, #48]	; 0x30
 800472e:	4b0d      	ldr	r3, [pc, #52]	; (8004764 <std+0x68>)
 8004730:	6224      	str	r4, [r4, #32]
 8004732:	429c      	cmp	r4, r3
 8004734:	d006      	beq.n	8004744 <std+0x48>
 8004736:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800473a:	4294      	cmp	r4, r2
 800473c:	d002      	beq.n	8004744 <std+0x48>
 800473e:	33d0      	adds	r3, #208	; 0xd0
 8004740:	429c      	cmp	r4, r3
 8004742:	d105      	bne.n	8004750 <std+0x54>
 8004744:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800474c:	f000 ba9a 	b.w	8004c84 <__retarget_lock_init_recursive>
 8004750:	bd10      	pop	{r4, pc}
 8004752:	bf00      	nop
 8004754:	08004939 	.word	0x08004939
 8004758:	0800495b 	.word	0x0800495b
 800475c:	08004993 	.word	0x08004993
 8004760:	080049b7 	.word	0x080049b7
 8004764:	20004120 	.word	0x20004120

08004768 <stdio_exit_handler>:
 8004768:	4a02      	ldr	r2, [pc, #8]	; (8004774 <stdio_exit_handler+0xc>)
 800476a:	4903      	ldr	r1, [pc, #12]	; (8004778 <stdio_exit_handler+0x10>)
 800476c:	4803      	ldr	r0, [pc, #12]	; (800477c <stdio_exit_handler+0x14>)
 800476e:	f000 b869 	b.w	8004844 <_fwalk_sglue>
 8004772:	bf00      	nop
 8004774:	20000010 	.word	0x20000010
 8004778:	08004fa5 	.word	0x08004fa5
 800477c:	2000001c 	.word	0x2000001c

08004780 <cleanup_stdio>:
 8004780:	6841      	ldr	r1, [r0, #4]
 8004782:	4b0c      	ldr	r3, [pc, #48]	; (80047b4 <cleanup_stdio+0x34>)
 8004784:	4299      	cmp	r1, r3
 8004786:	b510      	push	{r4, lr}
 8004788:	4604      	mov	r4, r0
 800478a:	d001      	beq.n	8004790 <cleanup_stdio+0x10>
 800478c:	f000 fc0a 	bl	8004fa4 <_fflush_r>
 8004790:	68a1      	ldr	r1, [r4, #8]
 8004792:	4b09      	ldr	r3, [pc, #36]	; (80047b8 <cleanup_stdio+0x38>)
 8004794:	4299      	cmp	r1, r3
 8004796:	d002      	beq.n	800479e <cleanup_stdio+0x1e>
 8004798:	4620      	mov	r0, r4
 800479a:	f000 fc03 	bl	8004fa4 <_fflush_r>
 800479e:	68e1      	ldr	r1, [r4, #12]
 80047a0:	4b06      	ldr	r3, [pc, #24]	; (80047bc <cleanup_stdio+0x3c>)
 80047a2:	4299      	cmp	r1, r3
 80047a4:	d004      	beq.n	80047b0 <cleanup_stdio+0x30>
 80047a6:	4620      	mov	r0, r4
 80047a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047ac:	f000 bbfa 	b.w	8004fa4 <_fflush_r>
 80047b0:	bd10      	pop	{r4, pc}
 80047b2:	bf00      	nop
 80047b4:	20004120 	.word	0x20004120
 80047b8:	20004188 	.word	0x20004188
 80047bc:	200041f0 	.word	0x200041f0

080047c0 <global_stdio_init.part.0>:
 80047c0:	b510      	push	{r4, lr}
 80047c2:	4b0b      	ldr	r3, [pc, #44]	; (80047f0 <global_stdio_init.part.0+0x30>)
 80047c4:	4c0b      	ldr	r4, [pc, #44]	; (80047f4 <global_stdio_init.part.0+0x34>)
 80047c6:	4a0c      	ldr	r2, [pc, #48]	; (80047f8 <global_stdio_init.part.0+0x38>)
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	4620      	mov	r0, r4
 80047cc:	2200      	movs	r2, #0
 80047ce:	2104      	movs	r1, #4
 80047d0:	f7ff ff94 	bl	80046fc <std>
 80047d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80047d8:	2201      	movs	r2, #1
 80047da:	2109      	movs	r1, #9
 80047dc:	f7ff ff8e 	bl	80046fc <std>
 80047e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80047e4:	2202      	movs	r2, #2
 80047e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047ea:	2112      	movs	r1, #18
 80047ec:	f7ff bf86 	b.w	80046fc <std>
 80047f0:	20004258 	.word	0x20004258
 80047f4:	20004120 	.word	0x20004120
 80047f8:	08004769 	.word	0x08004769

080047fc <__sfp_lock_acquire>:
 80047fc:	4801      	ldr	r0, [pc, #4]	; (8004804 <__sfp_lock_acquire+0x8>)
 80047fe:	f000 ba42 	b.w	8004c86 <__retarget_lock_acquire_recursive>
 8004802:	bf00      	nop
 8004804:	20004261 	.word	0x20004261

08004808 <__sfp_lock_release>:
 8004808:	4801      	ldr	r0, [pc, #4]	; (8004810 <__sfp_lock_release+0x8>)
 800480a:	f000 ba3d 	b.w	8004c88 <__retarget_lock_release_recursive>
 800480e:	bf00      	nop
 8004810:	20004261 	.word	0x20004261

08004814 <__sinit>:
 8004814:	b510      	push	{r4, lr}
 8004816:	4604      	mov	r4, r0
 8004818:	f7ff fff0 	bl	80047fc <__sfp_lock_acquire>
 800481c:	6a23      	ldr	r3, [r4, #32]
 800481e:	b11b      	cbz	r3, 8004828 <__sinit+0x14>
 8004820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004824:	f7ff bff0 	b.w	8004808 <__sfp_lock_release>
 8004828:	4b04      	ldr	r3, [pc, #16]	; (800483c <__sinit+0x28>)
 800482a:	6223      	str	r3, [r4, #32]
 800482c:	4b04      	ldr	r3, [pc, #16]	; (8004840 <__sinit+0x2c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1f5      	bne.n	8004820 <__sinit+0xc>
 8004834:	f7ff ffc4 	bl	80047c0 <global_stdio_init.part.0>
 8004838:	e7f2      	b.n	8004820 <__sinit+0xc>
 800483a:	bf00      	nop
 800483c:	08004781 	.word	0x08004781
 8004840:	20004258 	.word	0x20004258

08004844 <_fwalk_sglue>:
 8004844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004848:	4607      	mov	r7, r0
 800484a:	4688      	mov	r8, r1
 800484c:	4614      	mov	r4, r2
 800484e:	2600      	movs	r6, #0
 8004850:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004854:	f1b9 0901 	subs.w	r9, r9, #1
 8004858:	d505      	bpl.n	8004866 <_fwalk_sglue+0x22>
 800485a:	6824      	ldr	r4, [r4, #0]
 800485c:	2c00      	cmp	r4, #0
 800485e:	d1f7      	bne.n	8004850 <_fwalk_sglue+0xc>
 8004860:	4630      	mov	r0, r6
 8004862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004866:	89ab      	ldrh	r3, [r5, #12]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d907      	bls.n	800487c <_fwalk_sglue+0x38>
 800486c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004870:	3301      	adds	r3, #1
 8004872:	d003      	beq.n	800487c <_fwalk_sglue+0x38>
 8004874:	4629      	mov	r1, r5
 8004876:	4638      	mov	r0, r7
 8004878:	47c0      	blx	r8
 800487a:	4306      	orrs	r6, r0
 800487c:	3568      	adds	r5, #104	; 0x68
 800487e:	e7e9      	b.n	8004854 <_fwalk_sglue+0x10>

08004880 <_puts_r>:
 8004880:	6a03      	ldr	r3, [r0, #32]
 8004882:	b570      	push	{r4, r5, r6, lr}
 8004884:	6884      	ldr	r4, [r0, #8]
 8004886:	4605      	mov	r5, r0
 8004888:	460e      	mov	r6, r1
 800488a:	b90b      	cbnz	r3, 8004890 <_puts_r+0x10>
 800488c:	f7ff ffc2 	bl	8004814 <__sinit>
 8004890:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004892:	07db      	lsls	r3, r3, #31
 8004894:	d405      	bmi.n	80048a2 <_puts_r+0x22>
 8004896:	89a3      	ldrh	r3, [r4, #12]
 8004898:	0598      	lsls	r0, r3, #22
 800489a:	d402      	bmi.n	80048a2 <_puts_r+0x22>
 800489c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800489e:	f000 f9f2 	bl	8004c86 <__retarget_lock_acquire_recursive>
 80048a2:	89a3      	ldrh	r3, [r4, #12]
 80048a4:	0719      	lsls	r1, r3, #28
 80048a6:	d513      	bpl.n	80048d0 <_puts_r+0x50>
 80048a8:	6923      	ldr	r3, [r4, #16]
 80048aa:	b18b      	cbz	r3, 80048d0 <_puts_r+0x50>
 80048ac:	3e01      	subs	r6, #1
 80048ae:	68a3      	ldr	r3, [r4, #8]
 80048b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80048b4:	3b01      	subs	r3, #1
 80048b6:	60a3      	str	r3, [r4, #8]
 80048b8:	b9e9      	cbnz	r1, 80048f6 <_puts_r+0x76>
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	da2e      	bge.n	800491c <_puts_r+0x9c>
 80048be:	4622      	mov	r2, r4
 80048c0:	210a      	movs	r1, #10
 80048c2:	4628      	mov	r0, r5
 80048c4:	f000 f87b 	bl	80049be <__swbuf_r>
 80048c8:	3001      	adds	r0, #1
 80048ca:	d007      	beq.n	80048dc <_puts_r+0x5c>
 80048cc:	250a      	movs	r5, #10
 80048ce:	e007      	b.n	80048e0 <_puts_r+0x60>
 80048d0:	4621      	mov	r1, r4
 80048d2:	4628      	mov	r0, r5
 80048d4:	f000 f8b0 	bl	8004a38 <__swsetup_r>
 80048d8:	2800      	cmp	r0, #0
 80048da:	d0e7      	beq.n	80048ac <_puts_r+0x2c>
 80048dc:	f04f 35ff 	mov.w	r5, #4294967295
 80048e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048e2:	07da      	lsls	r2, r3, #31
 80048e4:	d405      	bmi.n	80048f2 <_puts_r+0x72>
 80048e6:	89a3      	ldrh	r3, [r4, #12]
 80048e8:	059b      	lsls	r3, r3, #22
 80048ea:	d402      	bmi.n	80048f2 <_puts_r+0x72>
 80048ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048ee:	f000 f9cb 	bl	8004c88 <__retarget_lock_release_recursive>
 80048f2:	4628      	mov	r0, r5
 80048f4:	bd70      	pop	{r4, r5, r6, pc}
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	da04      	bge.n	8004904 <_puts_r+0x84>
 80048fa:	69a2      	ldr	r2, [r4, #24]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	dc06      	bgt.n	800490e <_puts_r+0x8e>
 8004900:	290a      	cmp	r1, #10
 8004902:	d004      	beq.n	800490e <_puts_r+0x8e>
 8004904:	6823      	ldr	r3, [r4, #0]
 8004906:	1c5a      	adds	r2, r3, #1
 8004908:	6022      	str	r2, [r4, #0]
 800490a:	7019      	strb	r1, [r3, #0]
 800490c:	e7cf      	b.n	80048ae <_puts_r+0x2e>
 800490e:	4622      	mov	r2, r4
 8004910:	4628      	mov	r0, r5
 8004912:	f000 f854 	bl	80049be <__swbuf_r>
 8004916:	3001      	adds	r0, #1
 8004918:	d1c9      	bne.n	80048ae <_puts_r+0x2e>
 800491a:	e7df      	b.n	80048dc <_puts_r+0x5c>
 800491c:	6823      	ldr	r3, [r4, #0]
 800491e:	250a      	movs	r5, #10
 8004920:	1c5a      	adds	r2, r3, #1
 8004922:	6022      	str	r2, [r4, #0]
 8004924:	701d      	strb	r5, [r3, #0]
 8004926:	e7db      	b.n	80048e0 <_puts_r+0x60>

08004928 <puts>:
 8004928:	4b02      	ldr	r3, [pc, #8]	; (8004934 <puts+0xc>)
 800492a:	4601      	mov	r1, r0
 800492c:	6818      	ldr	r0, [r3, #0]
 800492e:	f7ff bfa7 	b.w	8004880 <_puts_r>
 8004932:	bf00      	nop
 8004934:	20000068 	.word	0x20000068

08004938 <__sread>:
 8004938:	b510      	push	{r4, lr}
 800493a:	460c      	mov	r4, r1
 800493c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004940:	f000 f952 	bl	8004be8 <_read_r>
 8004944:	2800      	cmp	r0, #0
 8004946:	bfab      	itete	ge
 8004948:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800494a:	89a3      	ldrhlt	r3, [r4, #12]
 800494c:	181b      	addge	r3, r3, r0
 800494e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004952:	bfac      	ite	ge
 8004954:	6563      	strge	r3, [r4, #84]	; 0x54
 8004956:	81a3      	strhlt	r3, [r4, #12]
 8004958:	bd10      	pop	{r4, pc}

0800495a <__swrite>:
 800495a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800495e:	461f      	mov	r7, r3
 8004960:	898b      	ldrh	r3, [r1, #12]
 8004962:	05db      	lsls	r3, r3, #23
 8004964:	4605      	mov	r5, r0
 8004966:	460c      	mov	r4, r1
 8004968:	4616      	mov	r6, r2
 800496a:	d505      	bpl.n	8004978 <__swrite+0x1e>
 800496c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004970:	2302      	movs	r3, #2
 8004972:	2200      	movs	r2, #0
 8004974:	f000 f926 	bl	8004bc4 <_lseek_r>
 8004978:	89a3      	ldrh	r3, [r4, #12]
 800497a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800497e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004982:	81a3      	strh	r3, [r4, #12]
 8004984:	4632      	mov	r2, r6
 8004986:	463b      	mov	r3, r7
 8004988:	4628      	mov	r0, r5
 800498a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800498e:	f000 b93d 	b.w	8004c0c <_write_r>

08004992 <__sseek>:
 8004992:	b510      	push	{r4, lr}
 8004994:	460c      	mov	r4, r1
 8004996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800499a:	f000 f913 	bl	8004bc4 <_lseek_r>
 800499e:	1c43      	adds	r3, r0, #1
 80049a0:	89a3      	ldrh	r3, [r4, #12]
 80049a2:	bf15      	itete	ne
 80049a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80049a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80049aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80049ae:	81a3      	strheq	r3, [r4, #12]
 80049b0:	bf18      	it	ne
 80049b2:	81a3      	strhne	r3, [r4, #12]
 80049b4:	bd10      	pop	{r4, pc}

080049b6 <__sclose>:
 80049b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049ba:	f000 b89d 	b.w	8004af8 <_close_r>

080049be <__swbuf_r>:
 80049be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049c0:	460e      	mov	r6, r1
 80049c2:	4614      	mov	r4, r2
 80049c4:	4605      	mov	r5, r0
 80049c6:	b118      	cbz	r0, 80049d0 <__swbuf_r+0x12>
 80049c8:	6a03      	ldr	r3, [r0, #32]
 80049ca:	b90b      	cbnz	r3, 80049d0 <__swbuf_r+0x12>
 80049cc:	f7ff ff22 	bl	8004814 <__sinit>
 80049d0:	69a3      	ldr	r3, [r4, #24]
 80049d2:	60a3      	str	r3, [r4, #8]
 80049d4:	89a3      	ldrh	r3, [r4, #12]
 80049d6:	071a      	lsls	r2, r3, #28
 80049d8:	d525      	bpl.n	8004a26 <__swbuf_r+0x68>
 80049da:	6923      	ldr	r3, [r4, #16]
 80049dc:	b31b      	cbz	r3, 8004a26 <__swbuf_r+0x68>
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	6922      	ldr	r2, [r4, #16]
 80049e2:	1a98      	subs	r0, r3, r2
 80049e4:	6963      	ldr	r3, [r4, #20]
 80049e6:	b2f6      	uxtb	r6, r6
 80049e8:	4283      	cmp	r3, r0
 80049ea:	4637      	mov	r7, r6
 80049ec:	dc04      	bgt.n	80049f8 <__swbuf_r+0x3a>
 80049ee:	4621      	mov	r1, r4
 80049f0:	4628      	mov	r0, r5
 80049f2:	f000 fad7 	bl	8004fa4 <_fflush_r>
 80049f6:	b9e0      	cbnz	r0, 8004a32 <__swbuf_r+0x74>
 80049f8:	68a3      	ldr	r3, [r4, #8]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	60a3      	str	r3, [r4, #8]
 80049fe:	6823      	ldr	r3, [r4, #0]
 8004a00:	1c5a      	adds	r2, r3, #1
 8004a02:	6022      	str	r2, [r4, #0]
 8004a04:	701e      	strb	r6, [r3, #0]
 8004a06:	6962      	ldr	r2, [r4, #20]
 8004a08:	1c43      	adds	r3, r0, #1
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d004      	beq.n	8004a18 <__swbuf_r+0x5a>
 8004a0e:	89a3      	ldrh	r3, [r4, #12]
 8004a10:	07db      	lsls	r3, r3, #31
 8004a12:	d506      	bpl.n	8004a22 <__swbuf_r+0x64>
 8004a14:	2e0a      	cmp	r6, #10
 8004a16:	d104      	bne.n	8004a22 <__swbuf_r+0x64>
 8004a18:	4621      	mov	r1, r4
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	f000 fac2 	bl	8004fa4 <_fflush_r>
 8004a20:	b938      	cbnz	r0, 8004a32 <__swbuf_r+0x74>
 8004a22:	4638      	mov	r0, r7
 8004a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a26:	4621      	mov	r1, r4
 8004a28:	4628      	mov	r0, r5
 8004a2a:	f000 f805 	bl	8004a38 <__swsetup_r>
 8004a2e:	2800      	cmp	r0, #0
 8004a30:	d0d5      	beq.n	80049de <__swbuf_r+0x20>
 8004a32:	f04f 37ff 	mov.w	r7, #4294967295
 8004a36:	e7f4      	b.n	8004a22 <__swbuf_r+0x64>

08004a38 <__swsetup_r>:
 8004a38:	b538      	push	{r3, r4, r5, lr}
 8004a3a:	4b2a      	ldr	r3, [pc, #168]	; (8004ae4 <__swsetup_r+0xac>)
 8004a3c:	4605      	mov	r5, r0
 8004a3e:	6818      	ldr	r0, [r3, #0]
 8004a40:	460c      	mov	r4, r1
 8004a42:	b118      	cbz	r0, 8004a4c <__swsetup_r+0x14>
 8004a44:	6a03      	ldr	r3, [r0, #32]
 8004a46:	b90b      	cbnz	r3, 8004a4c <__swsetup_r+0x14>
 8004a48:	f7ff fee4 	bl	8004814 <__sinit>
 8004a4c:	89a3      	ldrh	r3, [r4, #12]
 8004a4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a52:	0718      	lsls	r0, r3, #28
 8004a54:	d422      	bmi.n	8004a9c <__swsetup_r+0x64>
 8004a56:	06d9      	lsls	r1, r3, #27
 8004a58:	d407      	bmi.n	8004a6a <__swsetup_r+0x32>
 8004a5a:	2309      	movs	r3, #9
 8004a5c:	602b      	str	r3, [r5, #0]
 8004a5e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004a62:	81a3      	strh	r3, [r4, #12]
 8004a64:	f04f 30ff 	mov.w	r0, #4294967295
 8004a68:	e034      	b.n	8004ad4 <__swsetup_r+0x9c>
 8004a6a:	0758      	lsls	r0, r3, #29
 8004a6c:	d512      	bpl.n	8004a94 <__swsetup_r+0x5c>
 8004a6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a70:	b141      	cbz	r1, 8004a84 <__swsetup_r+0x4c>
 8004a72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a76:	4299      	cmp	r1, r3
 8004a78:	d002      	beq.n	8004a80 <__swsetup_r+0x48>
 8004a7a:	4628      	mov	r0, r5
 8004a7c:	f000 f914 	bl	8004ca8 <_free_r>
 8004a80:	2300      	movs	r3, #0
 8004a82:	6363      	str	r3, [r4, #52]	; 0x34
 8004a84:	89a3      	ldrh	r3, [r4, #12]
 8004a86:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004a8a:	81a3      	strh	r3, [r4, #12]
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	6063      	str	r3, [r4, #4]
 8004a90:	6923      	ldr	r3, [r4, #16]
 8004a92:	6023      	str	r3, [r4, #0]
 8004a94:	89a3      	ldrh	r3, [r4, #12]
 8004a96:	f043 0308 	orr.w	r3, r3, #8
 8004a9a:	81a3      	strh	r3, [r4, #12]
 8004a9c:	6923      	ldr	r3, [r4, #16]
 8004a9e:	b94b      	cbnz	r3, 8004ab4 <__swsetup_r+0x7c>
 8004aa0:	89a3      	ldrh	r3, [r4, #12]
 8004aa2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004aa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aaa:	d003      	beq.n	8004ab4 <__swsetup_r+0x7c>
 8004aac:	4621      	mov	r1, r4
 8004aae:	4628      	mov	r0, r5
 8004ab0:	f000 fac6 	bl	8005040 <__smakebuf_r>
 8004ab4:	89a0      	ldrh	r0, [r4, #12]
 8004ab6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004aba:	f010 0301 	ands.w	r3, r0, #1
 8004abe:	d00a      	beq.n	8004ad6 <__swsetup_r+0x9e>
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	60a3      	str	r3, [r4, #8]
 8004ac4:	6963      	ldr	r3, [r4, #20]
 8004ac6:	425b      	negs	r3, r3
 8004ac8:	61a3      	str	r3, [r4, #24]
 8004aca:	6923      	ldr	r3, [r4, #16]
 8004acc:	b943      	cbnz	r3, 8004ae0 <__swsetup_r+0xa8>
 8004ace:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ad2:	d1c4      	bne.n	8004a5e <__swsetup_r+0x26>
 8004ad4:	bd38      	pop	{r3, r4, r5, pc}
 8004ad6:	0781      	lsls	r1, r0, #30
 8004ad8:	bf58      	it	pl
 8004ada:	6963      	ldrpl	r3, [r4, #20]
 8004adc:	60a3      	str	r3, [r4, #8]
 8004ade:	e7f4      	b.n	8004aca <__swsetup_r+0x92>
 8004ae0:	2000      	movs	r0, #0
 8004ae2:	e7f7      	b.n	8004ad4 <__swsetup_r+0x9c>
 8004ae4:	20000068 	.word	0x20000068

08004ae8 <memset>:
 8004ae8:	4402      	add	r2, r0
 8004aea:	4603      	mov	r3, r0
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d100      	bne.n	8004af2 <memset+0xa>
 8004af0:	4770      	bx	lr
 8004af2:	f803 1b01 	strb.w	r1, [r3], #1
 8004af6:	e7f9      	b.n	8004aec <memset+0x4>

08004af8 <_close_r>:
 8004af8:	b538      	push	{r3, r4, r5, lr}
 8004afa:	4d06      	ldr	r5, [pc, #24]	; (8004b14 <_close_r+0x1c>)
 8004afc:	2300      	movs	r3, #0
 8004afe:	4604      	mov	r4, r0
 8004b00:	4608      	mov	r0, r1
 8004b02:	602b      	str	r3, [r5, #0]
 8004b04:	f7fb ffaf 	bl	8000a66 <_close>
 8004b08:	1c43      	adds	r3, r0, #1
 8004b0a:	d102      	bne.n	8004b12 <_close_r+0x1a>
 8004b0c:	682b      	ldr	r3, [r5, #0]
 8004b0e:	b103      	cbz	r3, 8004b12 <_close_r+0x1a>
 8004b10:	6023      	str	r3, [r4, #0]
 8004b12:	bd38      	pop	{r3, r4, r5, pc}
 8004b14:	2000425c 	.word	0x2000425c

08004b18 <_reclaim_reent>:
 8004b18:	4b29      	ldr	r3, [pc, #164]	; (8004bc0 <_reclaim_reent+0xa8>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4283      	cmp	r3, r0
 8004b1e:	b570      	push	{r4, r5, r6, lr}
 8004b20:	4604      	mov	r4, r0
 8004b22:	d04b      	beq.n	8004bbc <_reclaim_reent+0xa4>
 8004b24:	69c3      	ldr	r3, [r0, #28]
 8004b26:	b143      	cbz	r3, 8004b3a <_reclaim_reent+0x22>
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d144      	bne.n	8004bb8 <_reclaim_reent+0xa0>
 8004b2e:	69e3      	ldr	r3, [r4, #28]
 8004b30:	6819      	ldr	r1, [r3, #0]
 8004b32:	b111      	cbz	r1, 8004b3a <_reclaim_reent+0x22>
 8004b34:	4620      	mov	r0, r4
 8004b36:	f000 f8b7 	bl	8004ca8 <_free_r>
 8004b3a:	6961      	ldr	r1, [r4, #20]
 8004b3c:	b111      	cbz	r1, 8004b44 <_reclaim_reent+0x2c>
 8004b3e:	4620      	mov	r0, r4
 8004b40:	f000 f8b2 	bl	8004ca8 <_free_r>
 8004b44:	69e1      	ldr	r1, [r4, #28]
 8004b46:	b111      	cbz	r1, 8004b4e <_reclaim_reent+0x36>
 8004b48:	4620      	mov	r0, r4
 8004b4a:	f000 f8ad 	bl	8004ca8 <_free_r>
 8004b4e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004b50:	b111      	cbz	r1, 8004b58 <_reclaim_reent+0x40>
 8004b52:	4620      	mov	r0, r4
 8004b54:	f000 f8a8 	bl	8004ca8 <_free_r>
 8004b58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b5a:	b111      	cbz	r1, 8004b62 <_reclaim_reent+0x4a>
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	f000 f8a3 	bl	8004ca8 <_free_r>
 8004b62:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004b64:	b111      	cbz	r1, 8004b6c <_reclaim_reent+0x54>
 8004b66:	4620      	mov	r0, r4
 8004b68:	f000 f89e 	bl	8004ca8 <_free_r>
 8004b6c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004b6e:	b111      	cbz	r1, 8004b76 <_reclaim_reent+0x5e>
 8004b70:	4620      	mov	r0, r4
 8004b72:	f000 f899 	bl	8004ca8 <_free_r>
 8004b76:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004b78:	b111      	cbz	r1, 8004b80 <_reclaim_reent+0x68>
 8004b7a:	4620      	mov	r0, r4
 8004b7c:	f000 f894 	bl	8004ca8 <_free_r>
 8004b80:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004b82:	b111      	cbz	r1, 8004b8a <_reclaim_reent+0x72>
 8004b84:	4620      	mov	r0, r4
 8004b86:	f000 f88f 	bl	8004ca8 <_free_r>
 8004b8a:	6a23      	ldr	r3, [r4, #32]
 8004b8c:	b1b3      	cbz	r3, 8004bbc <_reclaim_reent+0xa4>
 8004b8e:	4620      	mov	r0, r4
 8004b90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004b94:	4718      	bx	r3
 8004b96:	5949      	ldr	r1, [r1, r5]
 8004b98:	b941      	cbnz	r1, 8004bac <_reclaim_reent+0x94>
 8004b9a:	3504      	adds	r5, #4
 8004b9c:	69e3      	ldr	r3, [r4, #28]
 8004b9e:	2d80      	cmp	r5, #128	; 0x80
 8004ba0:	68d9      	ldr	r1, [r3, #12]
 8004ba2:	d1f8      	bne.n	8004b96 <_reclaim_reent+0x7e>
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	f000 f87f 	bl	8004ca8 <_free_r>
 8004baa:	e7c0      	b.n	8004b2e <_reclaim_reent+0x16>
 8004bac:	680e      	ldr	r6, [r1, #0]
 8004bae:	4620      	mov	r0, r4
 8004bb0:	f000 f87a 	bl	8004ca8 <_free_r>
 8004bb4:	4631      	mov	r1, r6
 8004bb6:	e7ef      	b.n	8004b98 <_reclaim_reent+0x80>
 8004bb8:	2500      	movs	r5, #0
 8004bba:	e7ef      	b.n	8004b9c <_reclaim_reent+0x84>
 8004bbc:	bd70      	pop	{r4, r5, r6, pc}
 8004bbe:	bf00      	nop
 8004bc0:	20000068 	.word	0x20000068

08004bc4 <_lseek_r>:
 8004bc4:	b538      	push	{r3, r4, r5, lr}
 8004bc6:	4d07      	ldr	r5, [pc, #28]	; (8004be4 <_lseek_r+0x20>)
 8004bc8:	4604      	mov	r4, r0
 8004bca:	4608      	mov	r0, r1
 8004bcc:	4611      	mov	r1, r2
 8004bce:	2200      	movs	r2, #0
 8004bd0:	602a      	str	r2, [r5, #0]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	f7fb ff6e 	bl	8000ab4 <_lseek>
 8004bd8:	1c43      	adds	r3, r0, #1
 8004bda:	d102      	bne.n	8004be2 <_lseek_r+0x1e>
 8004bdc:	682b      	ldr	r3, [r5, #0]
 8004bde:	b103      	cbz	r3, 8004be2 <_lseek_r+0x1e>
 8004be0:	6023      	str	r3, [r4, #0]
 8004be2:	bd38      	pop	{r3, r4, r5, pc}
 8004be4:	2000425c 	.word	0x2000425c

08004be8 <_read_r>:
 8004be8:	b538      	push	{r3, r4, r5, lr}
 8004bea:	4d07      	ldr	r5, [pc, #28]	; (8004c08 <_read_r+0x20>)
 8004bec:	4604      	mov	r4, r0
 8004bee:	4608      	mov	r0, r1
 8004bf0:	4611      	mov	r1, r2
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	602a      	str	r2, [r5, #0]
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	f7fb fefc 	bl	80009f4 <_read>
 8004bfc:	1c43      	adds	r3, r0, #1
 8004bfe:	d102      	bne.n	8004c06 <_read_r+0x1e>
 8004c00:	682b      	ldr	r3, [r5, #0]
 8004c02:	b103      	cbz	r3, 8004c06 <_read_r+0x1e>
 8004c04:	6023      	str	r3, [r4, #0]
 8004c06:	bd38      	pop	{r3, r4, r5, pc}
 8004c08:	2000425c 	.word	0x2000425c

08004c0c <_write_r>:
 8004c0c:	b538      	push	{r3, r4, r5, lr}
 8004c0e:	4d07      	ldr	r5, [pc, #28]	; (8004c2c <_write_r+0x20>)
 8004c10:	4604      	mov	r4, r0
 8004c12:	4608      	mov	r0, r1
 8004c14:	4611      	mov	r1, r2
 8004c16:	2200      	movs	r2, #0
 8004c18:	602a      	str	r2, [r5, #0]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	f7fb ff07 	bl	8000a2e <_write>
 8004c20:	1c43      	adds	r3, r0, #1
 8004c22:	d102      	bne.n	8004c2a <_write_r+0x1e>
 8004c24:	682b      	ldr	r3, [r5, #0]
 8004c26:	b103      	cbz	r3, 8004c2a <_write_r+0x1e>
 8004c28:	6023      	str	r3, [r4, #0]
 8004c2a:	bd38      	pop	{r3, r4, r5, pc}
 8004c2c:	2000425c 	.word	0x2000425c

08004c30 <__errno>:
 8004c30:	4b01      	ldr	r3, [pc, #4]	; (8004c38 <__errno+0x8>)
 8004c32:	6818      	ldr	r0, [r3, #0]
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	20000068 	.word	0x20000068

08004c3c <__libc_init_array>:
 8004c3c:	b570      	push	{r4, r5, r6, lr}
 8004c3e:	4d0d      	ldr	r5, [pc, #52]	; (8004c74 <__libc_init_array+0x38>)
 8004c40:	4c0d      	ldr	r4, [pc, #52]	; (8004c78 <__libc_init_array+0x3c>)
 8004c42:	1b64      	subs	r4, r4, r5
 8004c44:	10a4      	asrs	r4, r4, #2
 8004c46:	2600      	movs	r6, #0
 8004c48:	42a6      	cmp	r6, r4
 8004c4a:	d109      	bne.n	8004c60 <__libc_init_array+0x24>
 8004c4c:	4d0b      	ldr	r5, [pc, #44]	; (8004c7c <__libc_init_array+0x40>)
 8004c4e:	4c0c      	ldr	r4, [pc, #48]	; (8004c80 <__libc_init_array+0x44>)
 8004c50:	f000 fa64 	bl	800511c <_init>
 8004c54:	1b64      	subs	r4, r4, r5
 8004c56:	10a4      	asrs	r4, r4, #2
 8004c58:	2600      	movs	r6, #0
 8004c5a:	42a6      	cmp	r6, r4
 8004c5c:	d105      	bne.n	8004c6a <__libc_init_array+0x2e>
 8004c5e:	bd70      	pop	{r4, r5, r6, pc}
 8004c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c64:	4798      	blx	r3
 8004c66:	3601      	adds	r6, #1
 8004c68:	e7ee      	b.n	8004c48 <__libc_init_array+0xc>
 8004c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c6e:	4798      	blx	r3
 8004c70:	3601      	adds	r6, #1
 8004c72:	e7f2      	b.n	8004c5a <__libc_init_array+0x1e>
 8004c74:	08005258 	.word	0x08005258
 8004c78:	08005258 	.word	0x08005258
 8004c7c:	08005258 	.word	0x08005258
 8004c80:	0800525c 	.word	0x0800525c

08004c84 <__retarget_lock_init_recursive>:
 8004c84:	4770      	bx	lr

08004c86 <__retarget_lock_acquire_recursive>:
 8004c86:	4770      	bx	lr

08004c88 <__retarget_lock_release_recursive>:
 8004c88:	4770      	bx	lr

08004c8a <memcpy>:
 8004c8a:	440a      	add	r2, r1
 8004c8c:	4291      	cmp	r1, r2
 8004c8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c92:	d100      	bne.n	8004c96 <memcpy+0xc>
 8004c94:	4770      	bx	lr
 8004c96:	b510      	push	{r4, lr}
 8004c98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ca0:	4291      	cmp	r1, r2
 8004ca2:	d1f9      	bne.n	8004c98 <memcpy+0xe>
 8004ca4:	bd10      	pop	{r4, pc}
	...

08004ca8 <_free_r>:
 8004ca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004caa:	2900      	cmp	r1, #0
 8004cac:	d044      	beq.n	8004d38 <_free_r+0x90>
 8004cae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cb2:	9001      	str	r0, [sp, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f1a1 0404 	sub.w	r4, r1, #4
 8004cba:	bfb8      	it	lt
 8004cbc:	18e4      	addlt	r4, r4, r3
 8004cbe:	f000 f8df 	bl	8004e80 <__malloc_lock>
 8004cc2:	4a1e      	ldr	r2, [pc, #120]	; (8004d3c <_free_r+0x94>)
 8004cc4:	9801      	ldr	r0, [sp, #4]
 8004cc6:	6813      	ldr	r3, [r2, #0]
 8004cc8:	b933      	cbnz	r3, 8004cd8 <_free_r+0x30>
 8004cca:	6063      	str	r3, [r4, #4]
 8004ccc:	6014      	str	r4, [r2, #0]
 8004cce:	b003      	add	sp, #12
 8004cd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004cd4:	f000 b8da 	b.w	8004e8c <__malloc_unlock>
 8004cd8:	42a3      	cmp	r3, r4
 8004cda:	d908      	bls.n	8004cee <_free_r+0x46>
 8004cdc:	6825      	ldr	r5, [r4, #0]
 8004cde:	1961      	adds	r1, r4, r5
 8004ce0:	428b      	cmp	r3, r1
 8004ce2:	bf01      	itttt	eq
 8004ce4:	6819      	ldreq	r1, [r3, #0]
 8004ce6:	685b      	ldreq	r3, [r3, #4]
 8004ce8:	1949      	addeq	r1, r1, r5
 8004cea:	6021      	streq	r1, [r4, #0]
 8004cec:	e7ed      	b.n	8004cca <_free_r+0x22>
 8004cee:	461a      	mov	r2, r3
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	b10b      	cbz	r3, 8004cf8 <_free_r+0x50>
 8004cf4:	42a3      	cmp	r3, r4
 8004cf6:	d9fa      	bls.n	8004cee <_free_r+0x46>
 8004cf8:	6811      	ldr	r1, [r2, #0]
 8004cfa:	1855      	adds	r5, r2, r1
 8004cfc:	42a5      	cmp	r5, r4
 8004cfe:	d10b      	bne.n	8004d18 <_free_r+0x70>
 8004d00:	6824      	ldr	r4, [r4, #0]
 8004d02:	4421      	add	r1, r4
 8004d04:	1854      	adds	r4, r2, r1
 8004d06:	42a3      	cmp	r3, r4
 8004d08:	6011      	str	r1, [r2, #0]
 8004d0a:	d1e0      	bne.n	8004cce <_free_r+0x26>
 8004d0c:	681c      	ldr	r4, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	6053      	str	r3, [r2, #4]
 8004d12:	440c      	add	r4, r1
 8004d14:	6014      	str	r4, [r2, #0]
 8004d16:	e7da      	b.n	8004cce <_free_r+0x26>
 8004d18:	d902      	bls.n	8004d20 <_free_r+0x78>
 8004d1a:	230c      	movs	r3, #12
 8004d1c:	6003      	str	r3, [r0, #0]
 8004d1e:	e7d6      	b.n	8004cce <_free_r+0x26>
 8004d20:	6825      	ldr	r5, [r4, #0]
 8004d22:	1961      	adds	r1, r4, r5
 8004d24:	428b      	cmp	r3, r1
 8004d26:	bf04      	itt	eq
 8004d28:	6819      	ldreq	r1, [r3, #0]
 8004d2a:	685b      	ldreq	r3, [r3, #4]
 8004d2c:	6063      	str	r3, [r4, #4]
 8004d2e:	bf04      	itt	eq
 8004d30:	1949      	addeq	r1, r1, r5
 8004d32:	6021      	streq	r1, [r4, #0]
 8004d34:	6054      	str	r4, [r2, #4]
 8004d36:	e7ca      	b.n	8004cce <_free_r+0x26>
 8004d38:	b003      	add	sp, #12
 8004d3a:	bd30      	pop	{r4, r5, pc}
 8004d3c:	20004264 	.word	0x20004264

08004d40 <sbrk_aligned>:
 8004d40:	b570      	push	{r4, r5, r6, lr}
 8004d42:	4e0e      	ldr	r6, [pc, #56]	; (8004d7c <sbrk_aligned+0x3c>)
 8004d44:	460c      	mov	r4, r1
 8004d46:	6831      	ldr	r1, [r6, #0]
 8004d48:	4605      	mov	r5, r0
 8004d4a:	b911      	cbnz	r1, 8004d52 <sbrk_aligned+0x12>
 8004d4c:	f000 f9d6 	bl	80050fc <_sbrk_r>
 8004d50:	6030      	str	r0, [r6, #0]
 8004d52:	4621      	mov	r1, r4
 8004d54:	4628      	mov	r0, r5
 8004d56:	f000 f9d1 	bl	80050fc <_sbrk_r>
 8004d5a:	1c43      	adds	r3, r0, #1
 8004d5c:	d00a      	beq.n	8004d74 <sbrk_aligned+0x34>
 8004d5e:	1cc4      	adds	r4, r0, #3
 8004d60:	f024 0403 	bic.w	r4, r4, #3
 8004d64:	42a0      	cmp	r0, r4
 8004d66:	d007      	beq.n	8004d78 <sbrk_aligned+0x38>
 8004d68:	1a21      	subs	r1, r4, r0
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	f000 f9c6 	bl	80050fc <_sbrk_r>
 8004d70:	3001      	adds	r0, #1
 8004d72:	d101      	bne.n	8004d78 <sbrk_aligned+0x38>
 8004d74:	f04f 34ff 	mov.w	r4, #4294967295
 8004d78:	4620      	mov	r0, r4
 8004d7a:	bd70      	pop	{r4, r5, r6, pc}
 8004d7c:	20004268 	.word	0x20004268

08004d80 <_malloc_r>:
 8004d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d84:	1ccd      	adds	r5, r1, #3
 8004d86:	f025 0503 	bic.w	r5, r5, #3
 8004d8a:	3508      	adds	r5, #8
 8004d8c:	2d0c      	cmp	r5, #12
 8004d8e:	bf38      	it	cc
 8004d90:	250c      	movcc	r5, #12
 8004d92:	2d00      	cmp	r5, #0
 8004d94:	4607      	mov	r7, r0
 8004d96:	db01      	blt.n	8004d9c <_malloc_r+0x1c>
 8004d98:	42a9      	cmp	r1, r5
 8004d9a:	d905      	bls.n	8004da8 <_malloc_r+0x28>
 8004d9c:	230c      	movs	r3, #12
 8004d9e:	603b      	str	r3, [r7, #0]
 8004da0:	2600      	movs	r6, #0
 8004da2:	4630      	mov	r0, r6
 8004da4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004da8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004e7c <_malloc_r+0xfc>
 8004dac:	f000 f868 	bl	8004e80 <__malloc_lock>
 8004db0:	f8d8 3000 	ldr.w	r3, [r8]
 8004db4:	461c      	mov	r4, r3
 8004db6:	bb5c      	cbnz	r4, 8004e10 <_malloc_r+0x90>
 8004db8:	4629      	mov	r1, r5
 8004dba:	4638      	mov	r0, r7
 8004dbc:	f7ff ffc0 	bl	8004d40 <sbrk_aligned>
 8004dc0:	1c43      	adds	r3, r0, #1
 8004dc2:	4604      	mov	r4, r0
 8004dc4:	d155      	bne.n	8004e72 <_malloc_r+0xf2>
 8004dc6:	f8d8 4000 	ldr.w	r4, [r8]
 8004dca:	4626      	mov	r6, r4
 8004dcc:	2e00      	cmp	r6, #0
 8004dce:	d145      	bne.n	8004e5c <_malloc_r+0xdc>
 8004dd0:	2c00      	cmp	r4, #0
 8004dd2:	d048      	beq.n	8004e66 <_malloc_r+0xe6>
 8004dd4:	6823      	ldr	r3, [r4, #0]
 8004dd6:	4631      	mov	r1, r6
 8004dd8:	4638      	mov	r0, r7
 8004dda:	eb04 0903 	add.w	r9, r4, r3
 8004dde:	f000 f98d 	bl	80050fc <_sbrk_r>
 8004de2:	4581      	cmp	r9, r0
 8004de4:	d13f      	bne.n	8004e66 <_malloc_r+0xe6>
 8004de6:	6821      	ldr	r1, [r4, #0]
 8004de8:	1a6d      	subs	r5, r5, r1
 8004dea:	4629      	mov	r1, r5
 8004dec:	4638      	mov	r0, r7
 8004dee:	f7ff ffa7 	bl	8004d40 <sbrk_aligned>
 8004df2:	3001      	adds	r0, #1
 8004df4:	d037      	beq.n	8004e66 <_malloc_r+0xe6>
 8004df6:	6823      	ldr	r3, [r4, #0]
 8004df8:	442b      	add	r3, r5
 8004dfa:	6023      	str	r3, [r4, #0]
 8004dfc:	f8d8 3000 	ldr.w	r3, [r8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d038      	beq.n	8004e76 <_malloc_r+0xf6>
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	42a2      	cmp	r2, r4
 8004e08:	d12b      	bne.n	8004e62 <_malloc_r+0xe2>
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	605a      	str	r2, [r3, #4]
 8004e0e:	e00f      	b.n	8004e30 <_malloc_r+0xb0>
 8004e10:	6822      	ldr	r2, [r4, #0]
 8004e12:	1b52      	subs	r2, r2, r5
 8004e14:	d41f      	bmi.n	8004e56 <_malloc_r+0xd6>
 8004e16:	2a0b      	cmp	r2, #11
 8004e18:	d917      	bls.n	8004e4a <_malloc_r+0xca>
 8004e1a:	1961      	adds	r1, r4, r5
 8004e1c:	42a3      	cmp	r3, r4
 8004e1e:	6025      	str	r5, [r4, #0]
 8004e20:	bf18      	it	ne
 8004e22:	6059      	strne	r1, [r3, #4]
 8004e24:	6863      	ldr	r3, [r4, #4]
 8004e26:	bf08      	it	eq
 8004e28:	f8c8 1000 	streq.w	r1, [r8]
 8004e2c:	5162      	str	r2, [r4, r5]
 8004e2e:	604b      	str	r3, [r1, #4]
 8004e30:	4638      	mov	r0, r7
 8004e32:	f104 060b 	add.w	r6, r4, #11
 8004e36:	f000 f829 	bl	8004e8c <__malloc_unlock>
 8004e3a:	f026 0607 	bic.w	r6, r6, #7
 8004e3e:	1d23      	adds	r3, r4, #4
 8004e40:	1af2      	subs	r2, r6, r3
 8004e42:	d0ae      	beq.n	8004da2 <_malloc_r+0x22>
 8004e44:	1b9b      	subs	r3, r3, r6
 8004e46:	50a3      	str	r3, [r4, r2]
 8004e48:	e7ab      	b.n	8004da2 <_malloc_r+0x22>
 8004e4a:	42a3      	cmp	r3, r4
 8004e4c:	6862      	ldr	r2, [r4, #4]
 8004e4e:	d1dd      	bne.n	8004e0c <_malloc_r+0x8c>
 8004e50:	f8c8 2000 	str.w	r2, [r8]
 8004e54:	e7ec      	b.n	8004e30 <_malloc_r+0xb0>
 8004e56:	4623      	mov	r3, r4
 8004e58:	6864      	ldr	r4, [r4, #4]
 8004e5a:	e7ac      	b.n	8004db6 <_malloc_r+0x36>
 8004e5c:	4634      	mov	r4, r6
 8004e5e:	6876      	ldr	r6, [r6, #4]
 8004e60:	e7b4      	b.n	8004dcc <_malloc_r+0x4c>
 8004e62:	4613      	mov	r3, r2
 8004e64:	e7cc      	b.n	8004e00 <_malloc_r+0x80>
 8004e66:	230c      	movs	r3, #12
 8004e68:	603b      	str	r3, [r7, #0]
 8004e6a:	4638      	mov	r0, r7
 8004e6c:	f000 f80e 	bl	8004e8c <__malloc_unlock>
 8004e70:	e797      	b.n	8004da2 <_malloc_r+0x22>
 8004e72:	6025      	str	r5, [r4, #0]
 8004e74:	e7dc      	b.n	8004e30 <_malloc_r+0xb0>
 8004e76:	605b      	str	r3, [r3, #4]
 8004e78:	deff      	udf	#255	; 0xff
 8004e7a:	bf00      	nop
 8004e7c:	20004264 	.word	0x20004264

08004e80 <__malloc_lock>:
 8004e80:	4801      	ldr	r0, [pc, #4]	; (8004e88 <__malloc_lock+0x8>)
 8004e82:	f7ff bf00 	b.w	8004c86 <__retarget_lock_acquire_recursive>
 8004e86:	bf00      	nop
 8004e88:	20004260 	.word	0x20004260

08004e8c <__malloc_unlock>:
 8004e8c:	4801      	ldr	r0, [pc, #4]	; (8004e94 <__malloc_unlock+0x8>)
 8004e8e:	f7ff befb 	b.w	8004c88 <__retarget_lock_release_recursive>
 8004e92:	bf00      	nop
 8004e94:	20004260 	.word	0x20004260

08004e98 <__sflush_r>:
 8004e98:	898a      	ldrh	r2, [r1, #12]
 8004e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e9e:	4605      	mov	r5, r0
 8004ea0:	0710      	lsls	r0, r2, #28
 8004ea2:	460c      	mov	r4, r1
 8004ea4:	d458      	bmi.n	8004f58 <__sflush_r+0xc0>
 8004ea6:	684b      	ldr	r3, [r1, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	dc05      	bgt.n	8004eb8 <__sflush_r+0x20>
 8004eac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	dc02      	bgt.n	8004eb8 <__sflush_r+0x20>
 8004eb2:	2000      	movs	r0, #0
 8004eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004eba:	2e00      	cmp	r6, #0
 8004ebc:	d0f9      	beq.n	8004eb2 <__sflush_r+0x1a>
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ec4:	682f      	ldr	r7, [r5, #0]
 8004ec6:	6a21      	ldr	r1, [r4, #32]
 8004ec8:	602b      	str	r3, [r5, #0]
 8004eca:	d032      	beq.n	8004f32 <__sflush_r+0x9a>
 8004ecc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ece:	89a3      	ldrh	r3, [r4, #12]
 8004ed0:	075a      	lsls	r2, r3, #29
 8004ed2:	d505      	bpl.n	8004ee0 <__sflush_r+0x48>
 8004ed4:	6863      	ldr	r3, [r4, #4]
 8004ed6:	1ac0      	subs	r0, r0, r3
 8004ed8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004eda:	b10b      	cbz	r3, 8004ee0 <__sflush_r+0x48>
 8004edc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ede:	1ac0      	subs	r0, r0, r3
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ee6:	6a21      	ldr	r1, [r4, #32]
 8004ee8:	4628      	mov	r0, r5
 8004eea:	47b0      	blx	r6
 8004eec:	1c43      	adds	r3, r0, #1
 8004eee:	89a3      	ldrh	r3, [r4, #12]
 8004ef0:	d106      	bne.n	8004f00 <__sflush_r+0x68>
 8004ef2:	6829      	ldr	r1, [r5, #0]
 8004ef4:	291d      	cmp	r1, #29
 8004ef6:	d82b      	bhi.n	8004f50 <__sflush_r+0xb8>
 8004ef8:	4a29      	ldr	r2, [pc, #164]	; (8004fa0 <__sflush_r+0x108>)
 8004efa:	410a      	asrs	r2, r1
 8004efc:	07d6      	lsls	r6, r2, #31
 8004efe:	d427      	bmi.n	8004f50 <__sflush_r+0xb8>
 8004f00:	2200      	movs	r2, #0
 8004f02:	6062      	str	r2, [r4, #4]
 8004f04:	04d9      	lsls	r1, r3, #19
 8004f06:	6922      	ldr	r2, [r4, #16]
 8004f08:	6022      	str	r2, [r4, #0]
 8004f0a:	d504      	bpl.n	8004f16 <__sflush_r+0x7e>
 8004f0c:	1c42      	adds	r2, r0, #1
 8004f0e:	d101      	bne.n	8004f14 <__sflush_r+0x7c>
 8004f10:	682b      	ldr	r3, [r5, #0]
 8004f12:	b903      	cbnz	r3, 8004f16 <__sflush_r+0x7e>
 8004f14:	6560      	str	r0, [r4, #84]	; 0x54
 8004f16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f18:	602f      	str	r7, [r5, #0]
 8004f1a:	2900      	cmp	r1, #0
 8004f1c:	d0c9      	beq.n	8004eb2 <__sflush_r+0x1a>
 8004f1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f22:	4299      	cmp	r1, r3
 8004f24:	d002      	beq.n	8004f2c <__sflush_r+0x94>
 8004f26:	4628      	mov	r0, r5
 8004f28:	f7ff febe 	bl	8004ca8 <_free_r>
 8004f2c:	2000      	movs	r0, #0
 8004f2e:	6360      	str	r0, [r4, #52]	; 0x34
 8004f30:	e7c0      	b.n	8004eb4 <__sflush_r+0x1c>
 8004f32:	2301      	movs	r3, #1
 8004f34:	4628      	mov	r0, r5
 8004f36:	47b0      	blx	r6
 8004f38:	1c41      	adds	r1, r0, #1
 8004f3a:	d1c8      	bne.n	8004ece <__sflush_r+0x36>
 8004f3c:	682b      	ldr	r3, [r5, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0c5      	beq.n	8004ece <__sflush_r+0x36>
 8004f42:	2b1d      	cmp	r3, #29
 8004f44:	d001      	beq.n	8004f4a <__sflush_r+0xb2>
 8004f46:	2b16      	cmp	r3, #22
 8004f48:	d101      	bne.n	8004f4e <__sflush_r+0xb6>
 8004f4a:	602f      	str	r7, [r5, #0]
 8004f4c:	e7b1      	b.n	8004eb2 <__sflush_r+0x1a>
 8004f4e:	89a3      	ldrh	r3, [r4, #12]
 8004f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f54:	81a3      	strh	r3, [r4, #12]
 8004f56:	e7ad      	b.n	8004eb4 <__sflush_r+0x1c>
 8004f58:	690f      	ldr	r7, [r1, #16]
 8004f5a:	2f00      	cmp	r7, #0
 8004f5c:	d0a9      	beq.n	8004eb2 <__sflush_r+0x1a>
 8004f5e:	0793      	lsls	r3, r2, #30
 8004f60:	680e      	ldr	r6, [r1, #0]
 8004f62:	bf08      	it	eq
 8004f64:	694b      	ldreq	r3, [r1, #20]
 8004f66:	600f      	str	r7, [r1, #0]
 8004f68:	bf18      	it	ne
 8004f6a:	2300      	movne	r3, #0
 8004f6c:	eba6 0807 	sub.w	r8, r6, r7
 8004f70:	608b      	str	r3, [r1, #8]
 8004f72:	f1b8 0f00 	cmp.w	r8, #0
 8004f76:	dd9c      	ble.n	8004eb2 <__sflush_r+0x1a>
 8004f78:	6a21      	ldr	r1, [r4, #32]
 8004f7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004f7c:	4643      	mov	r3, r8
 8004f7e:	463a      	mov	r2, r7
 8004f80:	4628      	mov	r0, r5
 8004f82:	47b0      	blx	r6
 8004f84:	2800      	cmp	r0, #0
 8004f86:	dc06      	bgt.n	8004f96 <__sflush_r+0xfe>
 8004f88:	89a3      	ldrh	r3, [r4, #12]
 8004f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f8e:	81a3      	strh	r3, [r4, #12]
 8004f90:	f04f 30ff 	mov.w	r0, #4294967295
 8004f94:	e78e      	b.n	8004eb4 <__sflush_r+0x1c>
 8004f96:	4407      	add	r7, r0
 8004f98:	eba8 0800 	sub.w	r8, r8, r0
 8004f9c:	e7e9      	b.n	8004f72 <__sflush_r+0xda>
 8004f9e:	bf00      	nop
 8004fa0:	dfbffffe 	.word	0xdfbffffe

08004fa4 <_fflush_r>:
 8004fa4:	b538      	push	{r3, r4, r5, lr}
 8004fa6:	690b      	ldr	r3, [r1, #16]
 8004fa8:	4605      	mov	r5, r0
 8004faa:	460c      	mov	r4, r1
 8004fac:	b913      	cbnz	r3, 8004fb4 <_fflush_r+0x10>
 8004fae:	2500      	movs	r5, #0
 8004fb0:	4628      	mov	r0, r5
 8004fb2:	bd38      	pop	{r3, r4, r5, pc}
 8004fb4:	b118      	cbz	r0, 8004fbe <_fflush_r+0x1a>
 8004fb6:	6a03      	ldr	r3, [r0, #32]
 8004fb8:	b90b      	cbnz	r3, 8004fbe <_fflush_r+0x1a>
 8004fba:	f7ff fc2b 	bl	8004814 <__sinit>
 8004fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d0f3      	beq.n	8004fae <_fflush_r+0xa>
 8004fc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004fc8:	07d0      	lsls	r0, r2, #31
 8004fca:	d404      	bmi.n	8004fd6 <_fflush_r+0x32>
 8004fcc:	0599      	lsls	r1, r3, #22
 8004fce:	d402      	bmi.n	8004fd6 <_fflush_r+0x32>
 8004fd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fd2:	f7ff fe58 	bl	8004c86 <__retarget_lock_acquire_recursive>
 8004fd6:	4628      	mov	r0, r5
 8004fd8:	4621      	mov	r1, r4
 8004fda:	f7ff ff5d 	bl	8004e98 <__sflush_r>
 8004fde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fe0:	07da      	lsls	r2, r3, #31
 8004fe2:	4605      	mov	r5, r0
 8004fe4:	d4e4      	bmi.n	8004fb0 <_fflush_r+0xc>
 8004fe6:	89a3      	ldrh	r3, [r4, #12]
 8004fe8:	059b      	lsls	r3, r3, #22
 8004fea:	d4e1      	bmi.n	8004fb0 <_fflush_r+0xc>
 8004fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fee:	f7ff fe4b 	bl	8004c88 <__retarget_lock_release_recursive>
 8004ff2:	e7dd      	b.n	8004fb0 <_fflush_r+0xc>

08004ff4 <__swhatbuf_r>:
 8004ff4:	b570      	push	{r4, r5, r6, lr}
 8004ff6:	460c      	mov	r4, r1
 8004ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ffc:	2900      	cmp	r1, #0
 8004ffe:	b096      	sub	sp, #88	; 0x58
 8005000:	4615      	mov	r5, r2
 8005002:	461e      	mov	r6, r3
 8005004:	da0d      	bge.n	8005022 <__swhatbuf_r+0x2e>
 8005006:	89a3      	ldrh	r3, [r4, #12]
 8005008:	f013 0f80 	tst.w	r3, #128	; 0x80
 800500c:	f04f 0100 	mov.w	r1, #0
 8005010:	bf0c      	ite	eq
 8005012:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005016:	2340      	movne	r3, #64	; 0x40
 8005018:	2000      	movs	r0, #0
 800501a:	6031      	str	r1, [r6, #0]
 800501c:	602b      	str	r3, [r5, #0]
 800501e:	b016      	add	sp, #88	; 0x58
 8005020:	bd70      	pop	{r4, r5, r6, pc}
 8005022:	466a      	mov	r2, sp
 8005024:	f000 f848 	bl	80050b8 <_fstat_r>
 8005028:	2800      	cmp	r0, #0
 800502a:	dbec      	blt.n	8005006 <__swhatbuf_r+0x12>
 800502c:	9901      	ldr	r1, [sp, #4]
 800502e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005032:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005036:	4259      	negs	r1, r3
 8005038:	4159      	adcs	r1, r3
 800503a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800503e:	e7eb      	b.n	8005018 <__swhatbuf_r+0x24>

08005040 <__smakebuf_r>:
 8005040:	898b      	ldrh	r3, [r1, #12]
 8005042:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005044:	079d      	lsls	r5, r3, #30
 8005046:	4606      	mov	r6, r0
 8005048:	460c      	mov	r4, r1
 800504a:	d507      	bpl.n	800505c <__smakebuf_r+0x1c>
 800504c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005050:	6023      	str	r3, [r4, #0]
 8005052:	6123      	str	r3, [r4, #16]
 8005054:	2301      	movs	r3, #1
 8005056:	6163      	str	r3, [r4, #20]
 8005058:	b002      	add	sp, #8
 800505a:	bd70      	pop	{r4, r5, r6, pc}
 800505c:	ab01      	add	r3, sp, #4
 800505e:	466a      	mov	r2, sp
 8005060:	f7ff ffc8 	bl	8004ff4 <__swhatbuf_r>
 8005064:	9900      	ldr	r1, [sp, #0]
 8005066:	4605      	mov	r5, r0
 8005068:	4630      	mov	r0, r6
 800506a:	f7ff fe89 	bl	8004d80 <_malloc_r>
 800506e:	b948      	cbnz	r0, 8005084 <__smakebuf_r+0x44>
 8005070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005074:	059a      	lsls	r2, r3, #22
 8005076:	d4ef      	bmi.n	8005058 <__smakebuf_r+0x18>
 8005078:	f023 0303 	bic.w	r3, r3, #3
 800507c:	f043 0302 	orr.w	r3, r3, #2
 8005080:	81a3      	strh	r3, [r4, #12]
 8005082:	e7e3      	b.n	800504c <__smakebuf_r+0xc>
 8005084:	89a3      	ldrh	r3, [r4, #12]
 8005086:	6020      	str	r0, [r4, #0]
 8005088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800508c:	81a3      	strh	r3, [r4, #12]
 800508e:	9b00      	ldr	r3, [sp, #0]
 8005090:	6163      	str	r3, [r4, #20]
 8005092:	9b01      	ldr	r3, [sp, #4]
 8005094:	6120      	str	r0, [r4, #16]
 8005096:	b15b      	cbz	r3, 80050b0 <__smakebuf_r+0x70>
 8005098:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800509c:	4630      	mov	r0, r6
 800509e:	f000 f81d 	bl	80050dc <_isatty_r>
 80050a2:	b128      	cbz	r0, 80050b0 <__smakebuf_r+0x70>
 80050a4:	89a3      	ldrh	r3, [r4, #12]
 80050a6:	f023 0303 	bic.w	r3, r3, #3
 80050aa:	f043 0301 	orr.w	r3, r3, #1
 80050ae:	81a3      	strh	r3, [r4, #12]
 80050b0:	89a3      	ldrh	r3, [r4, #12]
 80050b2:	431d      	orrs	r5, r3
 80050b4:	81a5      	strh	r5, [r4, #12]
 80050b6:	e7cf      	b.n	8005058 <__smakebuf_r+0x18>

080050b8 <_fstat_r>:
 80050b8:	b538      	push	{r3, r4, r5, lr}
 80050ba:	4d07      	ldr	r5, [pc, #28]	; (80050d8 <_fstat_r+0x20>)
 80050bc:	2300      	movs	r3, #0
 80050be:	4604      	mov	r4, r0
 80050c0:	4608      	mov	r0, r1
 80050c2:	4611      	mov	r1, r2
 80050c4:	602b      	str	r3, [r5, #0]
 80050c6:	f7fb fcda 	bl	8000a7e <_fstat>
 80050ca:	1c43      	adds	r3, r0, #1
 80050cc:	d102      	bne.n	80050d4 <_fstat_r+0x1c>
 80050ce:	682b      	ldr	r3, [r5, #0]
 80050d0:	b103      	cbz	r3, 80050d4 <_fstat_r+0x1c>
 80050d2:	6023      	str	r3, [r4, #0]
 80050d4:	bd38      	pop	{r3, r4, r5, pc}
 80050d6:	bf00      	nop
 80050d8:	2000425c 	.word	0x2000425c

080050dc <_isatty_r>:
 80050dc:	b538      	push	{r3, r4, r5, lr}
 80050de:	4d06      	ldr	r5, [pc, #24]	; (80050f8 <_isatty_r+0x1c>)
 80050e0:	2300      	movs	r3, #0
 80050e2:	4604      	mov	r4, r0
 80050e4:	4608      	mov	r0, r1
 80050e6:	602b      	str	r3, [r5, #0]
 80050e8:	f7fb fcd9 	bl	8000a9e <_isatty>
 80050ec:	1c43      	adds	r3, r0, #1
 80050ee:	d102      	bne.n	80050f6 <_isatty_r+0x1a>
 80050f0:	682b      	ldr	r3, [r5, #0]
 80050f2:	b103      	cbz	r3, 80050f6 <_isatty_r+0x1a>
 80050f4:	6023      	str	r3, [r4, #0]
 80050f6:	bd38      	pop	{r3, r4, r5, pc}
 80050f8:	2000425c 	.word	0x2000425c

080050fc <_sbrk_r>:
 80050fc:	b538      	push	{r3, r4, r5, lr}
 80050fe:	4d06      	ldr	r5, [pc, #24]	; (8005118 <_sbrk_r+0x1c>)
 8005100:	2300      	movs	r3, #0
 8005102:	4604      	mov	r4, r0
 8005104:	4608      	mov	r0, r1
 8005106:	602b      	str	r3, [r5, #0]
 8005108:	f7fb fce2 	bl	8000ad0 <_sbrk>
 800510c:	1c43      	adds	r3, r0, #1
 800510e:	d102      	bne.n	8005116 <_sbrk_r+0x1a>
 8005110:	682b      	ldr	r3, [r5, #0]
 8005112:	b103      	cbz	r3, 8005116 <_sbrk_r+0x1a>
 8005114:	6023      	str	r3, [r4, #0]
 8005116:	bd38      	pop	{r3, r4, r5, pc}
 8005118:	2000425c 	.word	0x2000425c

0800511c <_init>:
 800511c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511e:	bf00      	nop
 8005120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005122:	bc08      	pop	{r3}
 8005124:	469e      	mov	lr, r3
 8005126:	4770      	bx	lr

08005128 <_fini>:
 8005128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512a:	bf00      	nop
 800512c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800512e:	bc08      	pop	{r3}
 8005130:	469e      	mov	lr, r3
 8005132:	4770      	bx	lr
