
F401RE_FreeRTOS2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08005a74  08005a74  00015a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c1c  08005c1c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005c1c  08005c1c  00015c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c24  08005c24  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c24  08005c24  00015c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c28  08005c28  00015c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005c2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004200  2000006c  08005c98  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000426c  08005c98  0002426c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014b43  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003382  00000000  00000000  00034c22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001258  00000000  00000000  00037fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e2d  00000000  00000000  00039200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001975c  00000000  00000000  0003a02d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015cff  00000000  00000000  00053789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097eef  00000000  00000000  00069488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000051ec  00000000  00000000  00101378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00106564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005a5c 	.word	0x08005a5c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08005a5c 	.word	0x08005a5c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <vApplicationGetIdleTaskMemory+0x2c>)
 80004ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	4a06      	ldr	r2, [pc, #24]	; (800050c <vApplicationGetIdleTaskMemory+0x30>)
 80004f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	20000098 	.word	0x20000098
 800050c:	20000138 	.word	0x20000138

08000510 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000510:	b5b0      	push	{r4, r5, r7, lr}
 8000512:	b098      	sub	sp, #96	; 0x60
 8000514:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 8000516:	2300      	movs	r3, #0
 8000518:	65bb      	str	r3, [r7, #88]	; 0x58
 800051a:	2300      	movs	r3, #0
 800051c:	65fb      	str	r3, [r7, #92]	; 0x5c
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 800051e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000522:	2101      	movs	r1, #1
 8000524:	4618      	mov	r0, r3
 8000526:	f002 fa5c 	bl	80029e2 <osSemaphoreCreate>
 800052a:	4603      	mov	r3, r0
 800052c:	4a1e      	ldr	r2, [pc, #120]	; (80005a8 <MX_FREERTOS_Init+0x98>)
 800052e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of HightTask */
  osThreadDef(HightTask, StartHightTask, osPriorityHigh, 0, 128);
 8000530:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <MX_FREERTOS_Init+0x9c>)
 8000532:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000536:	461d      	mov	r5, r3
 8000538:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800053a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800053c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000540:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HightTaskHandle = osThreadCreate(osThread(HightTask), NULL);
 8000544:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f002 f9e9 	bl	8002922 <osThreadCreate>
 8000550:	4603      	mov	r3, r0
 8000552:	4a17      	ldr	r2, [pc, #92]	; (80005b0 <MX_FREERTOS_Init+0xa0>)
 8000554:	6013      	str	r3, [r2, #0]

  /* definition and creation of MediumTask02 */
  osThreadDef(MediumTask02, StartMediumTask02, osPriorityNormal, 0, 128);
 8000556:	4b17      	ldr	r3, [pc, #92]	; (80005b4 <MX_FREERTOS_Init+0xa4>)
 8000558:	f107 0420 	add.w	r4, r7, #32
 800055c:	461d      	mov	r5, r3
 800055e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000562:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000566:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MediumTask02Handle = osThreadCreate(osThread(MediumTask02), NULL);
 800056a:	f107 0320 	add.w	r3, r7, #32
 800056e:	2100      	movs	r1, #0
 8000570:	4618      	mov	r0, r3
 8000572:	f002 f9d6 	bl	8002922 <osThreadCreate>
 8000576:	4603      	mov	r3, r0
 8000578:	4a0f      	ldr	r2, [pc, #60]	; (80005b8 <MX_FREERTOS_Init+0xa8>)
 800057a:	6013      	str	r3, [r2, #0]

  /* definition and creation of LowTask03 */
  osThreadDef(LowTask03, StartLowTask03, osPriorityLow, 0, 128);
 800057c:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <MX_FREERTOS_Init+0xac>)
 800057e:	1d3c      	adds	r4, r7, #4
 8000580:	461d      	mov	r5, r3
 8000582:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000584:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000586:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800058a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LowTask03Handle = osThreadCreate(osThread(LowTask03), NULL);
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f002 f9c5 	bl	8002922 <osThreadCreate>
 8000598:	4603      	mov	r3, r0
 800059a:	4a09      	ldr	r2, [pc, #36]	; (80005c0 <MX_FREERTOS_Init+0xb0>)
 800059c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800059e:	bf00      	nop
 80005a0:	3760      	adds	r7, #96	; 0x60
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bdb0      	pop	{r4, r5, r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000094 	.word	0x20000094
 80005ac:	08005a80 	.word	0x08005a80
 80005b0:	20000088 	.word	0x20000088
 80005b4:	08005aac 	.word	0x08005aac
 80005b8:	2000008c 	.word	0x2000008c
 80005bc:	08005ad4 	.word	0x08005ad4
 80005c0:	20000090 	.word	0x20000090

080005c4 <StartHightTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartHightTask */
void StartHightTask(void const * argument)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
/*	  printf("Entered High Task\r\n");
	  printf("Leaving High Task\r\n");                                             */ //FreeRTOS2
	  printf("Entered HighTask and waiting for Semaphore\r\n");
 80005cc:	480c      	ldr	r0, [pc, #48]	; (8000600 <StartHightTask+0x3c>)
 80005ce:	f004 fe4b 	bl	8005268 <puts>
	  osSemaphoreWait(myBinarySem01Handle, osWaitForever);
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <StartHightTask+0x40>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f04f 31ff 	mov.w	r1, #4294967295
 80005da:	4618      	mov	r0, r3
 80005dc:	f002 fa34 	bl	8002a48 <osSemaphoreWait>
	  printf("Semaphore acquired by HighTask\r\n");
 80005e0:	4809      	ldr	r0, [pc, #36]	; (8000608 <StartHightTask+0x44>)
 80005e2:	f004 fe41 	bl	8005268 <puts>
	  printf("Leaving HighTask and Semaphore\r\n");
 80005e6:	4809      	ldr	r0, [pc, #36]	; (800060c <StartHightTask+0x48>)
 80005e8:	f004 fe3e 	bl	8005268 <puts>
	  osSemaphoreRelease(myBinarySem01Handle);                          //FreeRTOS2-1
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <StartHightTask+0x40>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4618      	mov	r0, r3
 80005f2:	f002 fa77 	bl	8002ae4 <osSemaphoreRelease>
	  osDelay(2000);
 80005f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005fa:	f002 f9de 	bl	80029ba <osDelay>
	  printf("Entered HighTask and waiting for Semaphore\r\n");
 80005fe:	e7e5      	b.n	80005cc <StartHightTask+0x8>
 8000600:	08005af0 	.word	0x08005af0
 8000604:	20000094 	.word	0x20000094
 8000608:	08005b1c 	.word	0x08005b1c
 800060c:	08005b3c 	.word	0x08005b3c

08000610 <StartMediumTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMediumTask02 */
void StartMediumTask02(void const * argument)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
/*	  printf("Entered Medium Task\r\n");
	  printf("Leaving Medium Task\r\n");                                       */  //FreeRTOS2
	  printf("Entered MediumTask and waiting for Semaphore\r\n");
 8000618:	4810      	ldr	r0, [pc, #64]	; (800065c <StartMediumTask02+0x4c>)
 800061a:	f004 fe25 	bl	8005268 <puts>
	  osSemaphoreWait(myBinarySem01Handle, osWaitForever);
 800061e:	4b10      	ldr	r3, [pc, #64]	; (8000660 <StartMediumTask02+0x50>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f04f 31ff 	mov.w	r1, #4294967295
 8000626:	4618      	mov	r0, r3
 8000628:	f002 fa0e 	bl	8002a48 <osSemaphoreWait>
	  printf("Semaphore acquired by MediumTask\r\n");
 800062c:	480d      	ldr	r0, [pc, #52]	; (8000664 <StartMediumTask02+0x54>)
 800062e:	f004 fe1b 	bl	8005268 <puts>
	  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6));
 8000632:	bf00      	nop
 8000634:	2140      	movs	r1, #64	; 0x40
 8000636:	480c      	ldr	r0, [pc, #48]	; (8000668 <StartMediumTask02+0x58>)
 8000638:	f000 fe04 	bl	8001244 <HAL_GPIO_ReadPin>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d1f8      	bne.n	8000634 <StartMediumTask02+0x24>
	  printf("Leaving MediumTask and Semaphore\r\n");
 8000642:	480a      	ldr	r0, [pc, #40]	; (800066c <StartMediumTask02+0x5c>)
 8000644:	f004 fe10 	bl	8005268 <puts>
	  osSemaphoreRelease(myBinarySem01Handle);                          //FreeRTOS2-1
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <StartMediumTask02+0x50>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4618      	mov	r0, r3
 800064e:	f002 fa49 	bl	8002ae4 <osSemaphoreRelease>
	  osDelay(2000);
 8000652:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000656:	f002 f9b0 	bl	80029ba <osDelay>
	  printf("Entered MediumTask and waiting for Semaphore\r\n");
 800065a:	e7dd      	b.n	8000618 <StartMediumTask02+0x8>
 800065c:	08005b5c 	.word	0x08005b5c
 8000660:	20000094 	.word	0x20000094
 8000664:	08005b8c 	.word	0x08005b8c
 8000668:	40020000 	.word	0x40020000
 800066c:	08005bb0 	.word	0x08005bb0

08000670 <StartLowTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLowTask03 */
void StartLowTask03(void const * argument)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
		  HAL_Delay(500);
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
		  HAL_Delay(1000);
	  }
	  printf("Leaving Low Task\r\n");                                            */ //FreeRTOS2
	  printf("Entered LowTask\r\n");
 8000678:	4805      	ldr	r0, [pc, #20]	; (8000690 <StartLowTask03+0x20>)
 800067a:	f004 fdf5 	bl	8005268 <puts>
	  printf("Leaving LowTask\r\n");                                               //FreeRTOS2-1
 800067e:	4805      	ldr	r0, [pc, #20]	; (8000694 <StartLowTask03+0x24>)
 8000680:	f004 fdf2 	bl	8005268 <puts>
	  osDelay(2000);
 8000684:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000688:	f002 f997 	bl	80029ba <osDelay>
	  printf("Entered LowTask\r\n");
 800068c:	e7f4      	b.n	8000678 <StartLowTask03+0x8>
 800068e:	bf00      	nop
 8000690:	08005bd4 	.word	0x08005bd4
 8000694:	08005be8 	.word	0x08005be8

08000698 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	; 0x28
 800069c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
 80006b2:	4b2d      	ldr	r3, [pc, #180]	; (8000768 <MX_GPIO_Init+0xd0>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a2c      	ldr	r2, [pc, #176]	; (8000768 <MX_GPIO_Init+0xd0>)
 80006b8:	f043 0304 	orr.w	r3, r3, #4
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b2a      	ldr	r3, [pc, #168]	; (8000768 <MX_GPIO_Init+0xd0>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0304 	and.w	r3, r3, #4
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	4b26      	ldr	r3, [pc, #152]	; (8000768 <MX_GPIO_Init+0xd0>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a25      	ldr	r2, [pc, #148]	; (8000768 <MX_GPIO_Init+0xd0>)
 80006d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b23      	ldr	r3, [pc, #140]	; (8000768 <MX_GPIO_Init+0xd0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <MX_GPIO_Init+0xd0>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a1e      	ldr	r2, [pc, #120]	; (8000768 <MX_GPIO_Init+0xd0>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <MX_GPIO_Init+0xd0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	4b18      	ldr	r3, [pc, #96]	; (8000768 <MX_GPIO_Init+0xd0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a17      	ldr	r2, [pc, #92]	; (8000768 <MX_GPIO_Init+0xd0>)
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b15      	ldr	r3, [pc, #84]	; (8000768 <MX_GPIO_Init+0xd0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0302 	and.w	r3, r3, #2
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	2160      	movs	r1, #96	; 0x60
 8000722:	4812      	ldr	r0, [pc, #72]	; (800076c <MX_GPIO_Init+0xd4>)
 8000724:	f000 fda6 	bl	8001274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000728:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800072c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800072e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	4619      	mov	r1, r3
 800073e:	480c      	ldr	r0, [pc, #48]	; (8000770 <MX_GPIO_Init+0xd8>)
 8000740:	f000 fbfc 	bl	8000f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 8000744:	2360      	movs	r3, #96	; 0x60
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000748:	2301      	movs	r3, #1
 800074a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000750:	2300      	movs	r3, #0
 8000752:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	4619      	mov	r1, r3
 800075a:	4804      	ldr	r0, [pc, #16]	; (800076c <MX_GPIO_Init+0xd4>)
 800075c:	f000 fbee 	bl	8000f3c <HAL_GPIO_Init>

}
 8000760:	bf00      	nop
 8000762:	3728      	adds	r7, #40	; 0x28
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40023800 	.word	0x40023800
 800076c:	40020000 	.word	0x40020000
 8000770:	40020800 	.word	0x40020800

08000774 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800077c:	1d39      	adds	r1, r7, #4
 800077e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000782:	2201      	movs	r2, #1
 8000784:	4803      	ldr	r0, [pc, #12]	; (8000794 <__io_putchar+0x20>)
 8000786:	f001 fd26 	bl	80021d6 <HAL_UART_Transmit>
	return ch;
 800078a:	687b      	ldr	r3, [r7, #4]
}
 800078c:	4618      	mov	r0, r3
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000384 	.word	0x20000384

08000798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079c:	f000 faaa 	bl	8000cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a0:	f000 f80a 	bl	80007b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a4:	f7ff ff78 	bl	8000698 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007a8:	f000 fa08 	bl	8000bbc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80007ac:	f7ff feb0 	bl	8000510 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80007b0:	f002 f8b0 	bl	8002914 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <main+0x1c>
	...

080007b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b094      	sub	sp, #80	; 0x50
 80007bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007be:	f107 0320 	add.w	r3, r7, #32
 80007c2:	2230      	movs	r2, #48	; 0x30
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f004 fe2e 	bl	8005428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007dc:	2300      	movs	r3, #0
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	4b29      	ldr	r3, [pc, #164]	; (8000888 <SystemClock_Config+0xd0>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e4:	4a28      	ldr	r2, [pc, #160]	; (8000888 <SystemClock_Config+0xd0>)
 80007e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ea:	6413      	str	r3, [r2, #64]	; 0x40
 80007ec:	4b26      	ldr	r3, [pc, #152]	; (8000888 <SystemClock_Config+0xd0>)
 80007ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007f8:	2300      	movs	r3, #0
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	4b23      	ldr	r3, [pc, #140]	; (800088c <SystemClock_Config+0xd4>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000804:	4a21      	ldr	r2, [pc, #132]	; (800088c <SystemClock_Config+0xd4>)
 8000806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800080a:	6013      	str	r3, [r2, #0]
 800080c:	4b1f      	ldr	r3, [pc, #124]	; (800088c <SystemClock_Config+0xd4>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000818:	2302      	movs	r3, #2
 800081a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800081c:	2301      	movs	r3, #1
 800081e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000820:	2310      	movs	r3, #16
 8000822:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000824:	2302      	movs	r3, #2
 8000826:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000828:	2300      	movs	r3, #0
 800082a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800082c:	2310      	movs	r3, #16
 800082e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000830:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000834:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000836:	2304      	movs	r3, #4
 8000838:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800083a:	2307      	movs	r3, #7
 800083c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083e:	f107 0320 	add.w	r3, r7, #32
 8000842:	4618      	mov	r0, r3
 8000844:	f000 fd30 	bl	80012a8 <HAL_RCC_OscConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800084e:	f000 f831 	bl	80008b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000852:	230f      	movs	r3, #15
 8000854:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000856:	2302      	movs	r3, #2
 8000858:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800085e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000862:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	2102      	movs	r1, #2
 800086e:	4618      	mov	r0, r3
 8000870:	f000 ff92 	bl	8001798 <HAL_RCC_ClockConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800087a:	f000 f81b 	bl	80008b4 <Error_Handler>
  }
}
 800087e:	bf00      	nop
 8000880:	3750      	adds	r7, #80	; 0x50
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800
 800088c:	40007000 	.word	0x40007000

08000890 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d101      	bne.n	80008a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008a2:	f000 fa49 	bl	8000d38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40000800 	.word	0x40000800

080008b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b8:	b672      	cpsid	i
}
 80008ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008bc:	e7fe      	b.n	80008bc <Error_Handler+0x8>
	...

080008c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b12      	ldr	r3, [pc, #72]	; (8000914 <HAL_MspInit+0x54>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ce:	4a11      	ldr	r2, [pc, #68]	; (8000914 <HAL_MspInit+0x54>)
 80008d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d4:	6453      	str	r3, [r2, #68]	; 0x44
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <HAL_MspInit+0x54>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <HAL_MspInit+0x54>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <HAL_MspInit+0x54>)
 80008ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f0:	6413      	str	r3, [r2, #64]	; 0x40
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <HAL_MspInit+0x54>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	210f      	movs	r1, #15
 8000902:	f06f 0001 	mvn.w	r0, #1
 8000906:	f000 faef 	bl	8000ee8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800

08000918 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08e      	sub	sp, #56	; 0x38
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000920:	2300      	movs	r3, #0
 8000922:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000924:	2300      	movs	r3, #0
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	4b33      	ldr	r3, [pc, #204]	; (80009fc <HAL_InitTick+0xe4>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000930:	4a32      	ldr	r2, [pc, #200]	; (80009fc <HAL_InitTick+0xe4>)
 8000932:	f043 0304 	orr.w	r3, r3, #4
 8000936:	6413      	str	r3, [r2, #64]	; 0x40
 8000938:	4b30      	ldr	r3, [pc, #192]	; (80009fc <HAL_InitTick+0xe4>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093c:	f003 0304 	and.w	r3, r3, #4
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000944:	f107 0210 	add.w	r2, r7, #16
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	4611      	mov	r1, r2
 800094e:	4618      	mov	r0, r3
 8000950:	f001 f942 	bl	8001bd8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000954:	6a3b      	ldr	r3, [r7, #32]
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800095a:	2b00      	cmp	r3, #0
 800095c:	d103      	bne.n	8000966 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800095e:	f001 f913 	bl	8001b88 <HAL_RCC_GetPCLK1Freq>
 8000962:	6378      	str	r0, [r7, #52]	; 0x34
 8000964:	e004      	b.n	8000970 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000966:	f001 f90f 	bl	8001b88 <HAL_RCC_GetPCLK1Freq>
 800096a:	4603      	mov	r3, r0
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000972:	4a23      	ldr	r2, [pc, #140]	; (8000a00 <HAL_InitTick+0xe8>)
 8000974:	fba2 2303 	umull	r2, r3, r2, r3
 8000978:	0c9b      	lsrs	r3, r3, #18
 800097a:	3b01      	subs	r3, #1
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800097e:	4b21      	ldr	r3, [pc, #132]	; (8000a04 <HAL_InitTick+0xec>)
 8000980:	4a21      	ldr	r2, [pc, #132]	; (8000a08 <HAL_InitTick+0xf0>)
 8000982:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000984:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <HAL_InitTick+0xec>)
 8000986:	f240 32e7 	movw	r2, #999	; 0x3e7
 800098a:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800098c:	4a1d      	ldr	r2, [pc, #116]	; (8000a04 <HAL_InitTick+0xec>)
 800098e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000990:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000992:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <HAL_InitTick+0xec>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000998:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <HAL_InitTick+0xec>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099e:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <HAL_InitTick+0xec>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80009a4:	4817      	ldr	r0, [pc, #92]	; (8000a04 <HAL_InitTick+0xec>)
 80009a6:	f001 f949 	bl	8001c3c <HAL_TIM_Base_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80009b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d11b      	bne.n	80009f0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80009b8:	4812      	ldr	r0, [pc, #72]	; (8000a04 <HAL_InitTick+0xec>)
 80009ba:	f001 f999 	bl	8001cf0 <HAL_TIM_Base_Start_IT>
 80009be:	4603      	mov	r3, r0
 80009c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80009c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d111      	bne.n	80009f0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80009cc:	201e      	movs	r0, #30
 80009ce:	f000 faa7 	bl	8000f20 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b0f      	cmp	r3, #15
 80009d6:	d808      	bhi.n	80009ea <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80009d8:	2200      	movs	r2, #0
 80009da:	6879      	ldr	r1, [r7, #4]
 80009dc:	201e      	movs	r0, #30
 80009de:	f000 fa83 	bl	8000ee8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009e2:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <HAL_InitTick+0xf4>)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6013      	str	r3, [r2, #0]
 80009e8:	e002      	b.n	80009f0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3738      	adds	r7, #56	; 0x38
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40023800 	.word	0x40023800
 8000a00:	431bde83 	.word	0x431bde83
 8000a04:	20000338 	.word	0x20000338
 8000a08:	40000800 	.word	0x40000800
 8000a0c:	20000004 	.word	0x20000004

08000a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <NMI_Handler+0x4>

08000a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <HardFault_Handler+0x4>

08000a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <MemManage_Handler+0x4>

08000a22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <BusFault_Handler+0x4>

08000a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <UsageFault_Handler+0x4>

08000a2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <TIM4_IRQHandler+0x10>)
 8000a42:	f001 f9b7 	bl	8001db4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000338 	.word	0x20000338

08000a50 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	e00a      	b.n	8000a78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a62:	f3af 8000 	nop.w
 8000a66:	4601      	mov	r1, r0
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	1c5a      	adds	r2, r3, #1
 8000a6c:	60ba      	str	r2, [r7, #8]
 8000a6e:	b2ca      	uxtb	r2, r1
 8000a70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	3301      	adds	r3, #1
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	697a      	ldr	r2, [r7, #20]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	dbf0      	blt.n	8000a62 <_read+0x12>
  }

  return len;
 8000a80:	687b      	ldr	r3, [r7, #4]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b086      	sub	sp, #24
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	60f8      	str	r0, [r7, #12]
 8000a92:	60b9      	str	r1, [r7, #8]
 8000a94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
 8000a9a:	e009      	b.n	8000ab0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	1c5a      	adds	r2, r3, #1
 8000aa0:	60ba      	str	r2, [r7, #8]
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fe65 	bl	8000774 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	3301      	adds	r3, #1
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	697a      	ldr	r2, [r7, #20]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	dbf1      	blt.n	8000a9c <_write+0x12>
  }
  return len;
 8000ab8:	687b      	ldr	r3, [r7, #4]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <_close>:

int _close(int file)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	b083      	sub	sp, #12
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b083      	sub	sp, #12
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
 8000ae2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aea:	605a      	str	r2, [r3, #4]
  return 0;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <_isatty>:

int _isatty(int file)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
	...

08000b2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b34:	4a14      	ldr	r2, [pc, #80]	; (8000b88 <_sbrk+0x5c>)
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <_sbrk+0x60>)
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b40:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <_sbrk+0x64>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d102      	bne.n	8000b4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <_sbrk+0x64>)
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <_sbrk+0x68>)
 8000b4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <_sbrk+0x64>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d207      	bcs.n	8000b6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b5c:	f004 fd08 	bl	8005570 <__errno>
 8000b60:	4603      	mov	r3, r0
 8000b62:	220c      	movs	r2, #12
 8000b64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b66:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6a:	e009      	b.n	8000b80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <_sbrk+0x64>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b72:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <_sbrk+0x64>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	4a05      	ldr	r2, [pc, #20]	; (8000b90 <_sbrk+0x64>)
 8000b7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20018000 	.word	0x20018000
 8000b8c:	00000400 	.word	0x00000400
 8000b90:	20000380 	.word	0x20000380
 8000b94:	20004270 	.word	0x20004270

08000b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <SystemInit+0x20>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba2:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <SystemInit+0x20>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000bc2:	4a12      	ldr	r2, [pc, #72]	; (8000c0c <MX_USART2_UART_Init+0x50>)
 8000bc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000bc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000be0:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000be2:	220c      	movs	r2, #12
 8000be4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be6:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bf2:	4805      	ldr	r0, [pc, #20]	; (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000bf4:	f001 faa2 	bl	800213c <HAL_UART_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bfe:	f7ff fe59 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000384 	.word	0x20000384
 8000c0c:	40004400 	.word	0x40004400

08000c10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a19      	ldr	r2, [pc, #100]	; (8000c94 <HAL_UART_MspInit+0x84>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d12b      	bne.n	8000c8a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <HAL_UART_MspInit+0x88>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	4a17      	ldr	r2, [pc, #92]	; (8000c98 <HAL_UART_MspInit+0x88>)
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c40:	6413      	str	r3, [r2, #64]	; 0x40
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <HAL_UART_MspInit+0x88>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <HAL_UART_MspInit+0x88>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a10      	ldr	r2, [pc, #64]	; (8000c98 <HAL_UART_MspInit+0x88>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <HAL_UART_MspInit+0x88>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c6a:	230c      	movs	r3, #12
 8000c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c76:	2303      	movs	r3, #3
 8000c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c7a:	2307      	movs	r3, #7
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	4805      	ldr	r0, [pc, #20]	; (8000c9c <HAL_UART_MspInit+0x8c>)
 8000c86:	f000 f959 	bl	8000f3c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c8a:	bf00      	nop
 8000c8c:	3728      	adds	r7, #40	; 0x28
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40004400 	.word	0x40004400
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020000 	.word	0x40020000

08000ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ca0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca4:	480d      	ldr	r0, [pc, #52]	; (8000cdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ca6:	490e      	ldr	r1, [pc, #56]	; (8000ce0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ca8:	4a0e      	ldr	r2, [pc, #56]	; (8000ce4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cac:	e002      	b.n	8000cb4 <LoopCopyDataInit>

08000cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb2:	3304      	adds	r3, #4

08000cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb8:	d3f9      	bcc.n	8000cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cba:	4a0b      	ldr	r2, [pc, #44]	; (8000ce8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cbc:	4c0b      	ldr	r4, [pc, #44]	; (8000cec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc0:	e001      	b.n	8000cc6 <LoopFillZerobss>

08000cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc4:	3204      	adds	r2, #4

08000cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc8:	d3fb      	bcc.n	8000cc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cca:	f7ff ff65 	bl	8000b98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cce:	f004 fc55 	bl	800557c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd2:	f7ff fd61 	bl	8000798 <main>
  bx  lr    
 8000cd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cd8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000ce4:	08005c2c 	.word	0x08005c2c
  ldr r2, =_sbss
 8000ce8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000cec:	2000426c 	.word	0x2000426c

08000cf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf0:	e7fe      	b.n	8000cf0 <ADC_IRQHandler>
	...

08000cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <HAL_Init+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0d      	ldr	r2, [pc, #52]	; (8000d34 <HAL_Init+0x40>)
 8000cfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_Init+0x40>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <HAL_Init+0x40>)
 8000d0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <HAL_Init+0x40>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <HAL_Init+0x40>)
 8000d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	f000 f8d8 	bl	8000ed2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d22:	200f      	movs	r0, #15
 8000d24:	f7ff fdf8 	bl	8000918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d28:	f7ff fdca 	bl	80008c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40023c00 	.word	0x40023c00

08000d38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_IncTick+0x20>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	461a      	mov	r2, r3
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_IncTick+0x24>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4413      	add	r3, r2
 8000d48:	4a04      	ldr	r2, [pc, #16]	; (8000d5c <HAL_IncTick+0x24>)
 8000d4a:	6013      	str	r3, [r2, #0]
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20000008 	.word	0x20000008
 8000d5c:	200003c8 	.word	0x200003c8

08000d60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return uwTick;
 8000d64:	4b03      	ldr	r3, [pc, #12]	; (8000d74 <HAL_GetTick+0x14>)
 8000d66:	681b      	ldr	r3, [r3, #0]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	200003c8 	.word	0x200003c8

08000d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d94:	4013      	ands	r3, r2
 8000d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000daa:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	60d3      	str	r3, [r2, #12]
}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc4:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	0a1b      	lsrs	r3, r3, #8
 8000dca:	f003 0307 	and.w	r3, r3, #7
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	db0b      	blt.n	8000e06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	f003 021f 	and.w	r2, r3, #31
 8000df4:	4907      	ldr	r1, [pc, #28]	; (8000e14 <__NVIC_EnableIRQ+0x38>)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	095b      	lsrs	r3, r3, #5
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000e100 	.word	0xe000e100

08000e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	6039      	str	r1, [r7, #0]
 8000e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	db0a      	blt.n	8000e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	490c      	ldr	r1, [pc, #48]	; (8000e64 <__NVIC_SetPriority+0x4c>)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	0112      	lsls	r2, r2, #4
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e40:	e00a      	b.n	8000e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4908      	ldr	r1, [pc, #32]	; (8000e68 <__NVIC_SetPriority+0x50>)
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	f003 030f 	and.w	r3, r3, #15
 8000e4e:	3b04      	subs	r3, #4
 8000e50:	0112      	lsls	r2, r2, #4
 8000e52:	b2d2      	uxtb	r2, r2
 8000e54:	440b      	add	r3, r1
 8000e56:	761a      	strb	r2, [r3, #24]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000e100 	.word	0xe000e100
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b089      	sub	sp, #36	; 0x24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	f1c3 0307 	rsb	r3, r3, #7
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	bf28      	it	cs
 8000e8a:	2304      	movcs	r3, #4
 8000e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3304      	adds	r3, #4
 8000e92:	2b06      	cmp	r3, #6
 8000e94:	d902      	bls.n	8000e9c <NVIC_EncodePriority+0x30>
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3b03      	subs	r3, #3
 8000e9a:	e000      	b.n	8000e9e <NVIC_EncodePriority+0x32>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	401a      	ands	r2, r3
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebe:	43d9      	mvns	r1, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	4313      	orrs	r3, r2
         );
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3724      	adds	r7, #36	; 0x24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff ff4c 	bl	8000d78 <__NVIC_SetPriorityGrouping>
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
 8000ef4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000efa:	f7ff ff61 	bl	8000dc0 <__NVIC_GetPriorityGrouping>
 8000efe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	68b9      	ldr	r1, [r7, #8]
 8000f04:	6978      	ldr	r0, [r7, #20]
 8000f06:	f7ff ffb1 	bl	8000e6c <NVIC_EncodePriority>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f10:	4611      	mov	r1, r2
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff ff80 	bl	8000e18 <__NVIC_SetPriority>
}
 8000f18:	bf00      	nop
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff ff54 	bl	8000ddc <__NVIC_EnableIRQ>
}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b089      	sub	sp, #36	; 0x24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
 8000f56:	e159      	b.n	800120c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f58:	2201      	movs	r2, #1
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	f040 8148 	bne.w	8001206 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 0303 	and.w	r3, r3, #3
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d005      	beq.n	8000f8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d130      	bne.n	8000ff0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	2203      	movs	r2, #3
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	68da      	ldr	r2, [r3, #12]
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	091b      	lsrs	r3, r3, #4
 8000fda:	f003 0201 	and.w	r2, r3, #1
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	2b03      	cmp	r3, #3
 8000ffa:	d017      	beq.n	800102c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	2203      	movs	r2, #3
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d123      	bne.n	8001080 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	08da      	lsrs	r2, r3, #3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3208      	adds	r2, #8
 8001040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	f003 0307 	and.w	r3, r3, #7
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	220f      	movs	r2, #15
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	691a      	ldr	r2, [r3, #16]
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	08da      	lsrs	r2, r3, #3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3208      	adds	r2, #8
 800107a:	69b9      	ldr	r1, [r7, #24]
 800107c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	2203      	movs	r2, #3
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0203 	and.w	r2, r3, #3
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f000 80a2 	beq.w	8001206 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	4b57      	ldr	r3, [pc, #348]	; (8001224 <HAL_GPIO_Init+0x2e8>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	4a56      	ldr	r2, [pc, #344]	; (8001224 <HAL_GPIO_Init+0x2e8>)
 80010cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d0:	6453      	str	r3, [r2, #68]	; 0x44
 80010d2:	4b54      	ldr	r3, [pc, #336]	; (8001224 <HAL_GPIO_Init+0x2e8>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010de:	4a52      	ldr	r2, [pc, #328]	; (8001228 <HAL_GPIO_Init+0x2ec>)
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	089b      	lsrs	r3, r3, #2
 80010e4:	3302      	adds	r3, #2
 80010e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f003 0303 	and.w	r3, r3, #3
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	220f      	movs	r2, #15
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4013      	ands	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a49      	ldr	r2, [pc, #292]	; (800122c <HAL_GPIO_Init+0x2f0>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d019      	beq.n	800113e <HAL_GPIO_Init+0x202>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a48      	ldr	r2, [pc, #288]	; (8001230 <HAL_GPIO_Init+0x2f4>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d013      	beq.n	800113a <HAL_GPIO_Init+0x1fe>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a47      	ldr	r2, [pc, #284]	; (8001234 <HAL_GPIO_Init+0x2f8>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d00d      	beq.n	8001136 <HAL_GPIO_Init+0x1fa>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a46      	ldr	r2, [pc, #280]	; (8001238 <HAL_GPIO_Init+0x2fc>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d007      	beq.n	8001132 <HAL_GPIO_Init+0x1f6>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a45      	ldr	r2, [pc, #276]	; (800123c <HAL_GPIO_Init+0x300>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d101      	bne.n	800112e <HAL_GPIO_Init+0x1f2>
 800112a:	2304      	movs	r3, #4
 800112c:	e008      	b.n	8001140 <HAL_GPIO_Init+0x204>
 800112e:	2307      	movs	r3, #7
 8001130:	e006      	b.n	8001140 <HAL_GPIO_Init+0x204>
 8001132:	2303      	movs	r3, #3
 8001134:	e004      	b.n	8001140 <HAL_GPIO_Init+0x204>
 8001136:	2302      	movs	r3, #2
 8001138:	e002      	b.n	8001140 <HAL_GPIO_Init+0x204>
 800113a:	2301      	movs	r3, #1
 800113c:	e000      	b.n	8001140 <HAL_GPIO_Init+0x204>
 800113e:	2300      	movs	r3, #0
 8001140:	69fa      	ldr	r2, [r7, #28]
 8001142:	f002 0203 	and.w	r2, r2, #3
 8001146:	0092      	lsls	r2, r2, #2
 8001148:	4093      	lsls	r3, r2
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4313      	orrs	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001150:	4935      	ldr	r1, [pc, #212]	; (8001228 <HAL_GPIO_Init+0x2ec>)
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	089b      	lsrs	r3, r3, #2
 8001156:	3302      	adds	r3, #2
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800115e:	4b38      	ldr	r3, [pc, #224]	; (8001240 <HAL_GPIO_Init+0x304>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	43db      	mvns	r3, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001182:	4a2f      	ldr	r2, [pc, #188]	; (8001240 <HAL_GPIO_Init+0x304>)
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001188:	4b2d      	ldr	r3, [pc, #180]	; (8001240 <HAL_GPIO_Init+0x304>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011ac:	4a24      	ldr	r2, [pc, #144]	; (8001240 <HAL_GPIO_Init+0x304>)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011b2:	4b23      	ldr	r3, [pc, #140]	; (8001240 <HAL_GPIO_Init+0x304>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011d6:	4a1a      	ldr	r2, [pc, #104]	; (8001240 <HAL_GPIO_Init+0x304>)
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011dc:	4b18      	ldr	r3, [pc, #96]	; (8001240 <HAL_GPIO_Init+0x304>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001200:	4a0f      	ldr	r2, [pc, #60]	; (8001240 <HAL_GPIO_Init+0x304>)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3301      	adds	r3, #1
 800120a:	61fb      	str	r3, [r7, #28]
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	2b0f      	cmp	r3, #15
 8001210:	f67f aea2 	bls.w	8000f58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	3724      	adds	r7, #36	; 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800
 8001228:	40013800 	.word	0x40013800
 800122c:	40020000 	.word	0x40020000
 8001230:	40020400 	.word	0x40020400
 8001234:	40020800 	.word	0x40020800
 8001238:	40020c00 	.word	0x40020c00
 800123c:	40021000 	.word	0x40021000
 8001240:	40013c00 	.word	0x40013c00

08001244 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	691a      	ldr	r2, [r3, #16]
 8001254:	887b      	ldrh	r3, [r7, #2]
 8001256:	4013      	ands	r3, r2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d002      	beq.n	8001262 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800125c:	2301      	movs	r3, #1
 800125e:	73fb      	strb	r3, [r7, #15]
 8001260:	e001      	b.n	8001266 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001262:	2300      	movs	r3, #0
 8001264:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001266:	7bfb      	ldrb	r3, [r7, #15]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	807b      	strh	r3, [r7, #2]
 8001280:	4613      	mov	r3, r2
 8001282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001284:	787b      	ldrb	r3, [r7, #1]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800128a:	887a      	ldrh	r2, [r7, #2]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001290:	e003      	b.n	800129a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001292:	887b      	ldrh	r3, [r7, #2]
 8001294:	041a      	lsls	r2, r3, #16
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	619a      	str	r2, [r3, #24]
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e267      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d075      	beq.n	80013b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012c6:	4b88      	ldr	r3, [pc, #544]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f003 030c 	and.w	r3, r3, #12
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	d00c      	beq.n	80012ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012d2:	4b85      	ldr	r3, [pc, #532]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012da:	2b08      	cmp	r3, #8
 80012dc:	d112      	bne.n	8001304 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012de:	4b82      	ldr	r3, [pc, #520]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012ea:	d10b      	bne.n	8001304 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ec:	4b7e      	ldr	r3, [pc, #504]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d05b      	beq.n	80013b0 <HAL_RCC_OscConfig+0x108>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d157      	bne.n	80013b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e242      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800130c:	d106      	bne.n	800131c <HAL_RCC_OscConfig+0x74>
 800130e:	4b76      	ldr	r3, [pc, #472]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a75      	ldr	r2, [pc, #468]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	e01d      	b.n	8001358 <HAL_RCC_OscConfig+0xb0>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001324:	d10c      	bne.n	8001340 <HAL_RCC_OscConfig+0x98>
 8001326:	4b70      	ldr	r3, [pc, #448]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a6f      	ldr	r2, [pc, #444]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 800132c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	4b6d      	ldr	r3, [pc, #436]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a6c      	ldr	r2, [pc, #432]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	e00b      	b.n	8001358 <HAL_RCC_OscConfig+0xb0>
 8001340:	4b69      	ldr	r3, [pc, #420]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a68      	ldr	r2, [pc, #416]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	4b66      	ldr	r3, [pc, #408]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a65      	ldr	r2, [pc, #404]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d013      	beq.n	8001388 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001360:	f7ff fcfe 	bl	8000d60 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001368:	f7ff fcfa 	bl	8000d60 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b64      	cmp	r3, #100	; 0x64
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e207      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137a:	4b5b      	ldr	r3, [pc, #364]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0f0      	beq.n	8001368 <HAL_RCC_OscConfig+0xc0>
 8001386:	e014      	b.n	80013b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7ff fcea 	bl	8000d60 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001390:	f7ff fce6 	bl	8000d60 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b64      	cmp	r3, #100	; 0x64
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e1f3      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a2:	4b51      	ldr	r3, [pc, #324]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f0      	bne.n	8001390 <HAL_RCC_OscConfig+0xe8>
 80013ae:	e000      	b.n	80013b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d063      	beq.n	8001486 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013be:	4b4a      	ldr	r3, [pc, #296]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 030c 	and.w	r3, r3, #12
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d00b      	beq.n	80013e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ca:	4b47      	ldr	r3, [pc, #284]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013d2:	2b08      	cmp	r3, #8
 80013d4:	d11c      	bne.n	8001410 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013d6:	4b44      	ldr	r3, [pc, #272]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d116      	bne.n	8001410 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e2:	4b41      	ldr	r3, [pc, #260]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d005      	beq.n	80013fa <HAL_RCC_OscConfig+0x152>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d001      	beq.n	80013fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e1c7      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fa:	4b3b      	ldr	r3, [pc, #236]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	4937      	ldr	r1, [pc, #220]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 800140a:	4313      	orrs	r3, r2
 800140c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140e:	e03a      	b.n	8001486 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d020      	beq.n	800145a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001418:	4b34      	ldr	r3, [pc, #208]	; (80014ec <HAL_RCC_OscConfig+0x244>)
 800141a:	2201      	movs	r2, #1
 800141c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141e:	f7ff fc9f 	bl	8000d60 <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001426:	f7ff fc9b 	bl	8000d60 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e1a8      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001438:	4b2b      	ldr	r3, [pc, #172]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0f0      	beq.n	8001426 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001444:	4b28      	ldr	r3, [pc, #160]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	4925      	ldr	r1, [pc, #148]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001454:	4313      	orrs	r3, r2
 8001456:	600b      	str	r3, [r1, #0]
 8001458:	e015      	b.n	8001486 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800145a:	4b24      	ldr	r3, [pc, #144]	; (80014ec <HAL_RCC_OscConfig+0x244>)
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001460:	f7ff fc7e 	bl	8000d60 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001468:	f7ff fc7a 	bl	8000d60 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e187      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147a:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b00      	cmp	r3, #0
 8001490:	d036      	beq.n	8001500 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d016      	beq.n	80014c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800149a:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <HAL_RCC_OscConfig+0x248>)
 800149c:	2201      	movs	r2, #1
 800149e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a0:	f7ff fc5e 	bl	8000d60 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a8:	f7ff fc5a 	bl	8000d60 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e167      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 80014bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f0      	beq.n	80014a8 <HAL_RCC_OscConfig+0x200>
 80014c6:	e01b      	b.n	8001500 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014c8:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <HAL_RCC_OscConfig+0x248>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ce:	f7ff fc47 	bl	8000d60 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d4:	e00e      	b.n	80014f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d6:	f7ff fc43 	bl	8000d60 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d907      	bls.n	80014f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e150      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
 80014e8:	40023800 	.word	0x40023800
 80014ec:	42470000 	.word	0x42470000
 80014f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f4:	4b88      	ldr	r3, [pc, #544]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 80014f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1ea      	bne.n	80014d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 8097 	beq.w	800163c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800150e:	2300      	movs	r3, #0
 8001510:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001512:	4b81      	ldr	r3, [pc, #516]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10f      	bne.n	800153e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	4b7d      	ldr	r3, [pc, #500]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	4a7c      	ldr	r2, [pc, #496]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800152c:	6413      	str	r3, [r2, #64]	; 0x40
 800152e:	4b7a      	ldr	r3, [pc, #488]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800153a:	2301      	movs	r3, #1
 800153c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153e:	4b77      	ldr	r3, [pc, #476]	; (800171c <HAL_RCC_OscConfig+0x474>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001546:	2b00      	cmp	r3, #0
 8001548:	d118      	bne.n	800157c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800154a:	4b74      	ldr	r3, [pc, #464]	; (800171c <HAL_RCC_OscConfig+0x474>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a73      	ldr	r2, [pc, #460]	; (800171c <HAL_RCC_OscConfig+0x474>)
 8001550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001556:	f7ff fc03 	bl	8000d60 <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800155e:	f7ff fbff 	bl	8000d60 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e10c      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001570:	4b6a      	ldr	r3, [pc, #424]	; (800171c <HAL_RCC_OscConfig+0x474>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0f0      	beq.n	800155e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d106      	bne.n	8001592 <HAL_RCC_OscConfig+0x2ea>
 8001584:	4b64      	ldr	r3, [pc, #400]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 8001586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001588:	4a63      	ldr	r2, [pc, #396]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6713      	str	r3, [r2, #112]	; 0x70
 8001590:	e01c      	b.n	80015cc <HAL_RCC_OscConfig+0x324>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2b05      	cmp	r3, #5
 8001598:	d10c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x30c>
 800159a:	4b5f      	ldr	r3, [pc, #380]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 800159c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159e:	4a5e      	ldr	r2, [pc, #376]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	6713      	str	r3, [r2, #112]	; 0x70
 80015a6:	4b5c      	ldr	r3, [pc, #368]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 80015a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015aa:	4a5b      	ldr	r2, [pc, #364]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6713      	str	r3, [r2, #112]	; 0x70
 80015b2:	e00b      	b.n	80015cc <HAL_RCC_OscConfig+0x324>
 80015b4:	4b58      	ldr	r3, [pc, #352]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 80015b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b8:	4a57      	ldr	r2, [pc, #348]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 80015ba:	f023 0301 	bic.w	r3, r3, #1
 80015be:	6713      	str	r3, [r2, #112]	; 0x70
 80015c0:	4b55      	ldr	r3, [pc, #340]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 80015c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c4:	4a54      	ldr	r2, [pc, #336]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 80015c6:	f023 0304 	bic.w	r3, r3, #4
 80015ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d015      	beq.n	8001600 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d4:	f7ff fbc4 	bl	8000d60 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015da:	e00a      	b.n	80015f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015dc:	f7ff fbc0 	bl	8000d60 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e0cb      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f2:	4b49      	ldr	r3, [pc, #292]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 80015f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0ee      	beq.n	80015dc <HAL_RCC_OscConfig+0x334>
 80015fe:	e014      	b.n	800162a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001600:	f7ff fbae 	bl	8000d60 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001606:	e00a      	b.n	800161e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001608:	f7ff fbaa 	bl	8000d60 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	f241 3288 	movw	r2, #5000	; 0x1388
 8001616:	4293      	cmp	r3, r2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e0b5      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161e:	4b3e      	ldr	r3, [pc, #248]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 8001620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1ee      	bne.n	8001608 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800162a:	7dfb      	ldrb	r3, [r7, #23]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d105      	bne.n	800163c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001630:	4b39      	ldr	r3, [pc, #228]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 8001632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001634:	4a38      	ldr	r2, [pc, #224]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 8001636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800163a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	2b00      	cmp	r3, #0
 8001642:	f000 80a1 	beq.w	8001788 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001646:	4b34      	ldr	r3, [pc, #208]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 030c 	and.w	r3, r3, #12
 800164e:	2b08      	cmp	r3, #8
 8001650:	d05c      	beq.n	800170c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	2b02      	cmp	r3, #2
 8001658:	d141      	bne.n	80016de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165a:	4b31      	ldr	r3, [pc, #196]	; (8001720 <HAL_RCC_OscConfig+0x478>)
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001660:	f7ff fb7e 	bl	8000d60 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001668:	f7ff fb7a 	bl	8000d60 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e087      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167a:	4b27      	ldr	r3, [pc, #156]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1f0      	bne.n	8001668 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69da      	ldr	r2, [r3, #28]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	019b      	lsls	r3, r3, #6
 8001696:	431a      	orrs	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169c:	085b      	lsrs	r3, r3, #1
 800169e:	3b01      	subs	r3, #1
 80016a0:	041b      	lsls	r3, r3, #16
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a8:	061b      	lsls	r3, r3, #24
 80016aa:	491b      	ldr	r1, [pc, #108]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016b0:	4b1b      	ldr	r3, [pc, #108]	; (8001720 <HAL_RCC_OscConfig+0x478>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b6:	f7ff fb53 	bl	8000d60 <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016be:	f7ff fb4f 	bl	8000d60 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e05c      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d0:	4b11      	ldr	r3, [pc, #68]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0f0      	beq.n	80016be <HAL_RCC_OscConfig+0x416>
 80016dc:	e054      	b.n	8001788 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <HAL_RCC_OscConfig+0x478>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e4:	f7ff fb3c 	bl	8000d60 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ec:	f7ff fb38 	bl	8000d60 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e045      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x444>
 800170a:	e03d      	b.n	8001788 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d107      	bne.n	8001724 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e038      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
 8001718:	40023800 	.word	0x40023800
 800171c:	40007000 	.word	0x40007000
 8001720:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001724:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <HAL_RCC_OscConfig+0x4ec>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d028      	beq.n	8001784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800173c:	429a      	cmp	r2, r3
 800173e:	d121      	bne.n	8001784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174a:	429a      	cmp	r2, r3
 800174c:	d11a      	bne.n	8001784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001754:	4013      	ands	r3, r2
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800175a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800175c:	4293      	cmp	r3, r2
 800175e:	d111      	bne.n	8001784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176a:	085b      	lsrs	r3, r3, #1
 800176c:	3b01      	subs	r3, #1
 800176e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001770:	429a      	cmp	r2, r3
 8001772:	d107      	bne.n	8001784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e000      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800

08001798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e0cc      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017ac:	4b68      	ldr	r3, [pc, #416]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d90c      	bls.n	80017d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ba:	4b65      	ldr	r3, [pc, #404]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c2:	4b63      	ldr	r3, [pc, #396]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d001      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e0b8      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d020      	beq.n	8001822 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017ec:	4b59      	ldr	r3, [pc, #356]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	4a58      	ldr	r2, [pc, #352]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001804:	4b53      	ldr	r3, [pc, #332]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	4a52      	ldr	r2, [pc, #328]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800180e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001810:	4b50      	ldr	r3, [pc, #320]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	494d      	ldr	r1, [pc, #308]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	4313      	orrs	r3, r2
 8001820:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d044      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d107      	bne.n	8001846 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001836:	4b47      	ldr	r3, [pc, #284]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d119      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e07f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b02      	cmp	r3, #2
 800184c:	d003      	beq.n	8001856 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001852:	2b03      	cmp	r3, #3
 8001854:	d107      	bne.n	8001866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001856:	4b3f      	ldr	r3, [pc, #252]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d109      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e06f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001866:	4b3b      	ldr	r3, [pc, #236]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e067      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001876:	4b37      	ldr	r3, [pc, #220]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f023 0203 	bic.w	r2, r3, #3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4934      	ldr	r1, [pc, #208]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	4313      	orrs	r3, r2
 8001886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001888:	f7ff fa6a 	bl	8000d60 <HAL_GetTick>
 800188c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188e:	e00a      	b.n	80018a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001890:	f7ff fa66 	bl	8000d60 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	f241 3288 	movw	r2, #5000	; 0x1388
 800189e:	4293      	cmp	r3, r2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e04f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a6:	4b2b      	ldr	r3, [pc, #172]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 020c 	and.w	r2, r3, #12
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d1eb      	bne.n	8001890 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018b8:	4b25      	ldr	r3, [pc, #148]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d20c      	bcs.n	80018e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c6:	4b22      	ldr	r3, [pc, #136]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ce:	4b20      	ldr	r3, [pc, #128]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e032      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d008      	beq.n	80018fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018ec:	4b19      	ldr	r3, [pc, #100]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	4916      	ldr	r1, [pc, #88]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d009      	beq.n	800191e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	490e      	ldr	r1, [pc, #56]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	4313      	orrs	r3, r2
 800191c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800191e:	f000 f821 	bl	8001964 <HAL_RCC_GetSysClockFreq>
 8001922:	4602      	mov	r2, r0
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	490a      	ldr	r1, [pc, #40]	; (8001958 <HAL_RCC_ClockConfig+0x1c0>)
 8001930:	5ccb      	ldrb	r3, [r1, r3]
 8001932:	fa22 f303 	lsr.w	r3, r2, r3
 8001936:	4a09      	ldr	r2, [pc, #36]	; (800195c <HAL_RCC_ClockConfig+0x1c4>)
 8001938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_RCC_ClockConfig+0x1c8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe ffea 	bl	8000918 <HAL_InitTick>

  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40023c00 	.word	0x40023c00
 8001954:	40023800 	.word	0x40023800
 8001958:	08005c04 	.word	0x08005c04
 800195c:	20000000 	.word	0x20000000
 8001960:	20000004 	.word	0x20000004

08001964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001968:	b094      	sub	sp, #80	; 0x50
 800196a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800196c:	2300      	movs	r3, #0
 800196e:	647b      	str	r3, [r7, #68]	; 0x44
 8001970:	2300      	movs	r3, #0
 8001972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001974:	2300      	movs	r3, #0
 8001976:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800197c:	4b79      	ldr	r3, [pc, #484]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x200>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 030c 	and.w	r3, r3, #12
 8001984:	2b08      	cmp	r3, #8
 8001986:	d00d      	beq.n	80019a4 <HAL_RCC_GetSysClockFreq+0x40>
 8001988:	2b08      	cmp	r3, #8
 800198a:	f200 80e1 	bhi.w	8001b50 <HAL_RCC_GetSysClockFreq+0x1ec>
 800198e:	2b00      	cmp	r3, #0
 8001990:	d002      	beq.n	8001998 <HAL_RCC_GetSysClockFreq+0x34>
 8001992:	2b04      	cmp	r3, #4
 8001994:	d003      	beq.n	800199e <HAL_RCC_GetSysClockFreq+0x3a>
 8001996:	e0db      	b.n	8001b50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001998:	4b73      	ldr	r3, [pc, #460]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x204>)
 800199a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800199c:	e0db      	b.n	8001b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800199e:	4b73      	ldr	r3, [pc, #460]	; (8001b6c <HAL_RCC_GetSysClockFreq+0x208>)
 80019a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019a2:	e0d8      	b.n	8001b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019a4:	4b6f      	ldr	r3, [pc, #444]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ae:	4b6d      	ldr	r3, [pc, #436]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d063      	beq.n	8001a82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ba:	4b6a      	ldr	r3, [pc, #424]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	099b      	lsrs	r3, r3, #6
 80019c0:	2200      	movs	r2, #0
 80019c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80019c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019cc:	633b      	str	r3, [r7, #48]	; 0x30
 80019ce:	2300      	movs	r3, #0
 80019d0:	637b      	str	r3, [r7, #52]	; 0x34
 80019d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019d6:	4622      	mov	r2, r4
 80019d8:	462b      	mov	r3, r5
 80019da:	f04f 0000 	mov.w	r0, #0
 80019de:	f04f 0100 	mov.w	r1, #0
 80019e2:	0159      	lsls	r1, r3, #5
 80019e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019e8:	0150      	lsls	r0, r2, #5
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4621      	mov	r1, r4
 80019f0:	1a51      	subs	r1, r2, r1
 80019f2:	6139      	str	r1, [r7, #16]
 80019f4:	4629      	mov	r1, r5
 80019f6:	eb63 0301 	sbc.w	r3, r3, r1
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	f04f 0300 	mov.w	r3, #0
 8001a04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a08:	4659      	mov	r1, fp
 8001a0a:	018b      	lsls	r3, r1, #6
 8001a0c:	4651      	mov	r1, sl
 8001a0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a12:	4651      	mov	r1, sl
 8001a14:	018a      	lsls	r2, r1, #6
 8001a16:	4651      	mov	r1, sl
 8001a18:	ebb2 0801 	subs.w	r8, r2, r1
 8001a1c:	4659      	mov	r1, fp
 8001a1e:	eb63 0901 	sbc.w	r9, r3, r1
 8001a22:	f04f 0200 	mov.w	r2, #0
 8001a26:	f04f 0300 	mov.w	r3, #0
 8001a2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a36:	4690      	mov	r8, r2
 8001a38:	4699      	mov	r9, r3
 8001a3a:	4623      	mov	r3, r4
 8001a3c:	eb18 0303 	adds.w	r3, r8, r3
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	462b      	mov	r3, r5
 8001a44:	eb49 0303 	adc.w	r3, r9, r3
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a56:	4629      	mov	r1, r5
 8001a58:	024b      	lsls	r3, r1, #9
 8001a5a:	4621      	mov	r1, r4
 8001a5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a60:	4621      	mov	r1, r4
 8001a62:	024a      	lsls	r2, r1, #9
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a74:	f7fe fbb4 	bl	80001e0 <__aeabi_uldivmod>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a80:	e058      	b.n	8001b34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a82:	4b38      	ldr	r3, [pc, #224]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	099b      	lsrs	r3, r3, #6
 8001a88:	2200      	movs	r2, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a92:	623b      	str	r3, [r7, #32]
 8001a94:	2300      	movs	r3, #0
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
 8001a98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a9c:	4642      	mov	r2, r8
 8001a9e:	464b      	mov	r3, r9
 8001aa0:	f04f 0000 	mov.w	r0, #0
 8001aa4:	f04f 0100 	mov.w	r1, #0
 8001aa8:	0159      	lsls	r1, r3, #5
 8001aaa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aae:	0150      	lsls	r0, r2, #5
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4641      	mov	r1, r8
 8001ab6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001aba:	4649      	mov	r1, r9
 8001abc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	f04f 0300 	mov.w	r3, #0
 8001ac8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001acc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ad0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ad4:	ebb2 040a 	subs.w	r4, r2, sl
 8001ad8:	eb63 050b 	sbc.w	r5, r3, fp
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	00eb      	lsls	r3, r5, #3
 8001ae6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001aea:	00e2      	lsls	r2, r4, #3
 8001aec:	4614      	mov	r4, r2
 8001aee:	461d      	mov	r5, r3
 8001af0:	4643      	mov	r3, r8
 8001af2:	18e3      	adds	r3, r4, r3
 8001af4:	603b      	str	r3, [r7, #0]
 8001af6:	464b      	mov	r3, r9
 8001af8:	eb45 0303 	adc.w	r3, r5, r3
 8001afc:	607b      	str	r3, [r7, #4]
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	f04f 0300 	mov.w	r3, #0
 8001b06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b0a:	4629      	mov	r1, r5
 8001b0c:	028b      	lsls	r3, r1, #10
 8001b0e:	4621      	mov	r1, r4
 8001b10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b14:	4621      	mov	r1, r4
 8001b16:	028a      	lsls	r2, r1, #10
 8001b18:	4610      	mov	r0, r2
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b1e:	2200      	movs	r2, #0
 8001b20:	61bb      	str	r3, [r7, #24]
 8001b22:	61fa      	str	r2, [r7, #28]
 8001b24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b28:	f7fe fb5a 	bl	80001e0 <__aeabi_uldivmod>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4613      	mov	r3, r2
 8001b32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	0c1b      	lsrs	r3, r3, #16
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	3301      	adds	r3, #1
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b4e:	e002      	b.n	8001b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3750      	adds	r7, #80	; 0x50
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800
 8001b68:	00f42400 	.word	0x00f42400
 8001b6c:	007a1200 	.word	0x007a1200

08001b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b74:	4b03      	ldr	r3, [pc, #12]	; (8001b84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b76:	681b      	ldr	r3, [r3, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	20000000 	.word	0x20000000

08001b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b8c:	f7ff fff0 	bl	8001b70 <HAL_RCC_GetHCLKFreq>
 8001b90:	4602      	mov	r2, r0
 8001b92:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	0a9b      	lsrs	r3, r3, #10
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	4903      	ldr	r1, [pc, #12]	; (8001bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	08005c14 	.word	0x08005c14

08001bb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bb4:	f7ff ffdc 	bl	8001b70 <HAL_RCC_GetHCLKFreq>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	0b5b      	lsrs	r3, r3, #13
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	4903      	ldr	r1, [pc, #12]	; (8001bd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bc6:	5ccb      	ldrb	r3, [r1, r3]
 8001bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	08005c14 	.word	0x08005c14

08001bd8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	220f      	movs	r2, #15
 8001be6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_RCC_GetClockConfig+0x5c>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 0203 	and.w	r2, r3, #3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <HAL_RCC_GetClockConfig+0x5c>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <HAL_RCC_GetClockConfig+0x5c>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c0c:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <HAL_RCC_GetClockConfig+0x5c>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	08db      	lsrs	r3, r3, #3
 8001c12:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c1a:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <HAL_RCC_GetClockConfig+0x60>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0207 	and.w	r2, r3, #7
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	601a      	str	r2, [r3, #0]
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40023c00 	.word	0x40023c00

08001c3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e041      	b.n	8001cd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d106      	bne.n	8001c68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f839 	bl	8001cda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3304      	adds	r3, #4
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	f000 f9ca 	bl	8002014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d001      	beq.n	8001d08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e044      	b.n	8001d92 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a1e      	ldr	r2, [pc, #120]	; (8001da0 <HAL_TIM_Base_Start_IT+0xb0>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d018      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x6c>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d32:	d013      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x6c>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a1a      	ldr	r2, [pc, #104]	; (8001da4 <HAL_TIM_Base_Start_IT+0xb4>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d00e      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x6c>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a19      	ldr	r2, [pc, #100]	; (8001da8 <HAL_TIM_Base_Start_IT+0xb8>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d009      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x6c>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a17      	ldr	r2, [pc, #92]	; (8001dac <HAL_TIM_Base_Start_IT+0xbc>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d004      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x6c>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a16      	ldr	r2, [pc, #88]	; (8001db0 <HAL_TIM_Base_Start_IT+0xc0>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d111      	bne.n	8001d80 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2b06      	cmp	r3, #6
 8001d6c:	d010      	beq.n	8001d90 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f042 0201 	orr.w	r2, r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d7e:	e007      	b.n	8001d90 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 0201 	orr.w	r2, r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40010000 	.word	0x40010000
 8001da4:	40000400 	.word	0x40000400
 8001da8:	40000800 	.word	0x40000800
 8001dac:	40000c00 	.word	0x40000c00
 8001db0:	40014000 	.word	0x40014000

08001db4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d122      	bne.n	8001e10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d11b      	bne.n	8001e10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f06f 0202 	mvn.w	r2, #2
 8001de0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f8ee 	bl	8001fd8 <HAL_TIM_IC_CaptureCallback>
 8001dfc:	e005      	b.n	8001e0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f8e0 	bl	8001fc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f8f1 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d122      	bne.n	8001e64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d11b      	bne.n	8001e64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f06f 0204 	mvn.w	r2, #4
 8001e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2202      	movs	r2, #2
 8001e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f8c4 	bl	8001fd8 <HAL_TIM_IC_CaptureCallback>
 8001e50:	e005      	b.n	8001e5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f8b6 	bl	8001fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f8c7 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d122      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d11b      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0208 	mvn.w	r2, #8
 8001e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2204      	movs	r2, #4
 8001e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f89a 	bl	8001fd8 <HAL_TIM_IC_CaptureCallback>
 8001ea4:	e005      	b.n	8001eb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f88c 	bl	8001fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f89d 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	f003 0310 	and.w	r3, r3, #16
 8001ec2:	2b10      	cmp	r3, #16
 8001ec4:	d122      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f003 0310 	and.w	r3, r3, #16
 8001ed0:	2b10      	cmp	r3, #16
 8001ed2:	d11b      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0210 	mvn.w	r2, #16
 8001edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2208      	movs	r2, #8
 8001ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f870 	bl	8001fd8 <HAL_TIM_IC_CaptureCallback>
 8001ef8:	e005      	b.n	8001f06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f862 	bl	8001fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f873 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d10e      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d107      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f06f 0201 	mvn.w	r2, #1
 8001f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7fe fcac 	bl	8000890 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f42:	2b80      	cmp	r3, #128	; 0x80
 8001f44:	d10e      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f50:	2b80      	cmp	r3, #128	; 0x80
 8001f52:	d107      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f8e2 	bl	8002128 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f6e:	2b40      	cmp	r3, #64	; 0x40
 8001f70:	d10e      	bne.n	8001f90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f7c:	2b40      	cmp	r3, #64	; 0x40
 8001f7e:	d107      	bne.n	8001f90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f838 	bl	8002000 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	f003 0320 	and.w	r3, r3, #32
 8001f9a:	2b20      	cmp	r3, #32
 8001f9c:	d10e      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f003 0320 	and.w	r3, r3, #32
 8001fa8:	2b20      	cmp	r3, #32
 8001faa:	d107      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f06f 0220 	mvn.w	r2, #32
 8001fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f8ac 	bl	8002114 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fbc:	bf00      	nop
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a34      	ldr	r2, [pc, #208]	; (80020f8 <TIM_Base_SetConfig+0xe4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d00f      	beq.n	800204c <TIM_Base_SetConfig+0x38>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002032:	d00b      	beq.n	800204c <TIM_Base_SetConfig+0x38>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a31      	ldr	r2, [pc, #196]	; (80020fc <TIM_Base_SetConfig+0xe8>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d007      	beq.n	800204c <TIM_Base_SetConfig+0x38>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a30      	ldr	r2, [pc, #192]	; (8002100 <TIM_Base_SetConfig+0xec>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d003      	beq.n	800204c <TIM_Base_SetConfig+0x38>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a2f      	ldr	r2, [pc, #188]	; (8002104 <TIM_Base_SetConfig+0xf0>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d108      	bne.n	800205e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	4313      	orrs	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a25      	ldr	r2, [pc, #148]	; (80020f8 <TIM_Base_SetConfig+0xe4>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d01b      	beq.n	800209e <TIM_Base_SetConfig+0x8a>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800206c:	d017      	beq.n	800209e <TIM_Base_SetConfig+0x8a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a22      	ldr	r2, [pc, #136]	; (80020fc <TIM_Base_SetConfig+0xe8>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d013      	beq.n	800209e <TIM_Base_SetConfig+0x8a>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a21      	ldr	r2, [pc, #132]	; (8002100 <TIM_Base_SetConfig+0xec>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d00f      	beq.n	800209e <TIM_Base_SetConfig+0x8a>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a20      	ldr	r2, [pc, #128]	; (8002104 <TIM_Base_SetConfig+0xf0>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d00b      	beq.n	800209e <TIM_Base_SetConfig+0x8a>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a1f      	ldr	r2, [pc, #124]	; (8002108 <TIM_Base_SetConfig+0xf4>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d007      	beq.n	800209e <TIM_Base_SetConfig+0x8a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a1e      	ldr	r2, [pc, #120]	; (800210c <TIM_Base_SetConfig+0xf8>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d003      	beq.n	800209e <TIM_Base_SetConfig+0x8a>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a1d      	ldr	r2, [pc, #116]	; (8002110 <TIM_Base_SetConfig+0xfc>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d108      	bne.n	80020b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a08      	ldr	r2, [pc, #32]	; (80020f8 <TIM_Base_SetConfig+0xe4>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d103      	bne.n	80020e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	615a      	str	r2, [r3, #20]
}
 80020ea:	bf00      	nop
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40010000 	.word	0x40010000
 80020fc:	40000400 	.word	0x40000400
 8002100:	40000800 	.word	0x40000800
 8002104:	40000c00 	.word	0x40000c00
 8002108:	40014000 	.word	0x40014000
 800210c:	40014400 	.word	0x40014400
 8002110:	40014800 	.word	0x40014800

08002114 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e03f      	b.n	80021ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d106      	bne.n	8002168 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7fe fd54 	bl	8000c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2224      	movs	r2, #36	; 0x24
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68da      	ldr	r2, [r3, #12]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800217e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f929 	bl	80023d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	691a      	ldr	r2, [r3, #16]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002194:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	695a      	ldr	r2, [r3, #20]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2220      	movs	r2, #32
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2220      	movs	r2, #32
 80021c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b08a      	sub	sp, #40	; 0x28
 80021da:	af02      	add	r7, sp, #8
 80021dc:	60f8      	str	r0, [r7, #12]
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	603b      	str	r3, [r7, #0]
 80021e2:	4613      	mov	r3, r2
 80021e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b20      	cmp	r3, #32
 80021f4:	d17c      	bne.n	80022f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d002      	beq.n	8002202 <HAL_UART_Transmit+0x2c>
 80021fc:	88fb      	ldrh	r3, [r7, #6]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e075      	b.n	80022f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <HAL_UART_Transmit+0x3e>
 8002210:	2302      	movs	r3, #2
 8002212:	e06e      	b.n	80022f2 <HAL_UART_Transmit+0x11c>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2221      	movs	r2, #33	; 0x21
 8002226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800222a:	f7fe fd99 	bl	8000d60 <HAL_GetTick>
 800222e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	88fa      	ldrh	r2, [r7, #6]
 8002234:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	88fa      	ldrh	r2, [r7, #6]
 800223a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002244:	d108      	bne.n	8002258 <HAL_UART_Transmit+0x82>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d104      	bne.n	8002258 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800224e:	2300      	movs	r3, #0
 8002250:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	61bb      	str	r3, [r7, #24]
 8002256:	e003      	b.n	8002260 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800225c:	2300      	movs	r3, #0
 800225e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002268:	e02a      	b.n	80022c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	2200      	movs	r2, #0
 8002272:	2180      	movs	r1, #128	; 0x80
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f000 f840 	bl	80022fa <UART_WaitOnFlagUntilTimeout>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e036      	b.n	80022f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10b      	bne.n	80022a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	461a      	mov	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002298:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	3302      	adds	r3, #2
 800229e:	61bb      	str	r3, [r7, #24]
 80022a0:	e007      	b.n	80022b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	781a      	ldrb	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	3301      	adds	r3, #1
 80022b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	3b01      	subs	r3, #1
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1cf      	bne.n	800226a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	2200      	movs	r2, #0
 80022d2:	2140      	movs	r1, #64	; 0x40
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f000 f810 	bl	80022fa <UART_WaitOnFlagUntilTimeout>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e006      	b.n	80022f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80022ec:	2300      	movs	r3, #0
 80022ee:	e000      	b.n	80022f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80022f0:	2302      	movs	r3, #2
  }
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3720      	adds	r7, #32
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b090      	sub	sp, #64	; 0x40
 80022fe:	af00      	add	r7, sp, #0
 8002300:	60f8      	str	r0, [r7, #12]
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	603b      	str	r3, [r7, #0]
 8002306:	4613      	mov	r3, r2
 8002308:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800230a:	e050      	b.n	80023ae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800230c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800230e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002312:	d04c      	beq.n	80023ae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002316:	2b00      	cmp	r3, #0
 8002318:	d007      	beq.n	800232a <UART_WaitOnFlagUntilTimeout+0x30>
 800231a:	f7fe fd21 	bl	8000d60 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002326:	429a      	cmp	r2, r3
 8002328:	d241      	bcs.n	80023ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	330c      	adds	r3, #12
 8002330:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002334:	e853 3f00 	ldrex	r3, [r3]
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002340:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	330c      	adds	r3, #12
 8002348:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800234a:	637a      	str	r2, [r7, #52]	; 0x34
 800234c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800234e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002350:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002352:	e841 2300 	strex	r3, r2, [r1]
 8002356:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1e5      	bne.n	800232a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	3314      	adds	r3, #20
 8002364:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	e853 3f00 	ldrex	r3, [r3]
 800236c:	613b      	str	r3, [r7, #16]
   return(result);
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	f023 0301 	bic.w	r3, r3, #1
 8002374:	63bb      	str	r3, [r7, #56]	; 0x38
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	3314      	adds	r3, #20
 800237c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800237e:	623a      	str	r2, [r7, #32]
 8002380:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002382:	69f9      	ldr	r1, [r7, #28]
 8002384:	6a3a      	ldr	r2, [r7, #32]
 8002386:	e841 2300 	strex	r3, r2, [r1]
 800238a:	61bb      	str	r3, [r7, #24]
   return(result);
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1e5      	bne.n	800235e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2220      	movs	r2, #32
 8002396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2220      	movs	r2, #32
 800239e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e00f      	b.n	80023ce <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	4013      	ands	r3, r2
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	bf0c      	ite	eq
 80023be:	2301      	moveq	r3, #1
 80023c0:	2300      	movne	r3, #0
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	461a      	mov	r2, r3
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d09f      	beq.n	800230c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3740      	adds	r7, #64	; 0x40
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023dc:	b0c0      	sub	sp, #256	; 0x100
 80023de:	af00      	add	r7, sp, #0
 80023e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80023f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f4:	68d9      	ldr	r1, [r3, #12]
 80023f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	ea40 0301 	orr.w	r3, r0, r1
 8002400:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	431a      	orrs	r2, r3
 8002410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	431a      	orrs	r2, r3
 8002418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	4313      	orrs	r3, r2
 8002420:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002430:	f021 010c 	bic.w	r1, r1, #12
 8002434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800243e:	430b      	orrs	r3, r1
 8002440:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800244e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002452:	6999      	ldr	r1, [r3, #24]
 8002454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	ea40 0301 	orr.w	r3, r0, r1
 800245e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	4b8f      	ldr	r3, [pc, #572]	; (80026a4 <UART_SetConfig+0x2cc>)
 8002468:	429a      	cmp	r2, r3
 800246a:	d005      	beq.n	8002478 <UART_SetConfig+0xa0>
 800246c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	4b8d      	ldr	r3, [pc, #564]	; (80026a8 <UART_SetConfig+0x2d0>)
 8002474:	429a      	cmp	r2, r3
 8002476:	d104      	bne.n	8002482 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002478:	f7ff fb9a 	bl	8001bb0 <HAL_RCC_GetPCLK2Freq>
 800247c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002480:	e003      	b.n	800248a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002482:	f7ff fb81 	bl	8001b88 <HAL_RCC_GetPCLK1Freq>
 8002486:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800248a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002494:	f040 810c 	bne.w	80026b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002498:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800249c:	2200      	movs	r2, #0
 800249e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80024a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80024a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80024aa:	4622      	mov	r2, r4
 80024ac:	462b      	mov	r3, r5
 80024ae:	1891      	adds	r1, r2, r2
 80024b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80024b2:	415b      	adcs	r3, r3
 80024b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80024ba:	4621      	mov	r1, r4
 80024bc:	eb12 0801 	adds.w	r8, r2, r1
 80024c0:	4629      	mov	r1, r5
 80024c2:	eb43 0901 	adc.w	r9, r3, r1
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	f04f 0300 	mov.w	r3, #0
 80024ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024da:	4690      	mov	r8, r2
 80024dc:	4699      	mov	r9, r3
 80024de:	4623      	mov	r3, r4
 80024e0:	eb18 0303 	adds.w	r3, r8, r3
 80024e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80024e8:	462b      	mov	r3, r5
 80024ea:	eb49 0303 	adc.w	r3, r9, r3
 80024ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80024f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80024fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002502:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002506:	460b      	mov	r3, r1
 8002508:	18db      	adds	r3, r3, r3
 800250a:	653b      	str	r3, [r7, #80]	; 0x50
 800250c:	4613      	mov	r3, r2
 800250e:	eb42 0303 	adc.w	r3, r2, r3
 8002512:	657b      	str	r3, [r7, #84]	; 0x54
 8002514:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002518:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800251c:	f7fd fe60 	bl	80001e0 <__aeabi_uldivmod>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	4b61      	ldr	r3, [pc, #388]	; (80026ac <UART_SetConfig+0x2d4>)
 8002526:	fba3 2302 	umull	r2, r3, r3, r2
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	011c      	lsls	r4, r3, #4
 800252e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002532:	2200      	movs	r2, #0
 8002534:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002538:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800253c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002540:	4642      	mov	r2, r8
 8002542:	464b      	mov	r3, r9
 8002544:	1891      	adds	r1, r2, r2
 8002546:	64b9      	str	r1, [r7, #72]	; 0x48
 8002548:	415b      	adcs	r3, r3
 800254a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800254c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002550:	4641      	mov	r1, r8
 8002552:	eb12 0a01 	adds.w	sl, r2, r1
 8002556:	4649      	mov	r1, r9
 8002558:	eb43 0b01 	adc.w	fp, r3, r1
 800255c:	f04f 0200 	mov.w	r2, #0
 8002560:	f04f 0300 	mov.w	r3, #0
 8002564:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002568:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800256c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002570:	4692      	mov	sl, r2
 8002572:	469b      	mov	fp, r3
 8002574:	4643      	mov	r3, r8
 8002576:	eb1a 0303 	adds.w	r3, sl, r3
 800257a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800257e:	464b      	mov	r3, r9
 8002580:	eb4b 0303 	adc.w	r3, fp, r3
 8002584:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002594:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002598:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800259c:	460b      	mov	r3, r1
 800259e:	18db      	adds	r3, r3, r3
 80025a0:	643b      	str	r3, [r7, #64]	; 0x40
 80025a2:	4613      	mov	r3, r2
 80025a4:	eb42 0303 	adc.w	r3, r2, r3
 80025a8:	647b      	str	r3, [r7, #68]	; 0x44
 80025aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80025ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80025b2:	f7fd fe15 	bl	80001e0 <__aeabi_uldivmod>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	4611      	mov	r1, r2
 80025bc:	4b3b      	ldr	r3, [pc, #236]	; (80026ac <UART_SetConfig+0x2d4>)
 80025be:	fba3 2301 	umull	r2, r3, r3, r1
 80025c2:	095b      	lsrs	r3, r3, #5
 80025c4:	2264      	movs	r2, #100	; 0x64
 80025c6:	fb02 f303 	mul.w	r3, r2, r3
 80025ca:	1acb      	subs	r3, r1, r3
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80025d2:	4b36      	ldr	r3, [pc, #216]	; (80026ac <UART_SetConfig+0x2d4>)
 80025d4:	fba3 2302 	umull	r2, r3, r3, r2
 80025d8:	095b      	lsrs	r3, r3, #5
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025e0:	441c      	add	r4, r3
 80025e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025e6:	2200      	movs	r2, #0
 80025e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80025ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80025f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80025f4:	4642      	mov	r2, r8
 80025f6:	464b      	mov	r3, r9
 80025f8:	1891      	adds	r1, r2, r2
 80025fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80025fc:	415b      	adcs	r3, r3
 80025fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002600:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002604:	4641      	mov	r1, r8
 8002606:	1851      	adds	r1, r2, r1
 8002608:	6339      	str	r1, [r7, #48]	; 0x30
 800260a:	4649      	mov	r1, r9
 800260c:	414b      	adcs	r3, r1
 800260e:	637b      	str	r3, [r7, #52]	; 0x34
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	f04f 0300 	mov.w	r3, #0
 8002618:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800261c:	4659      	mov	r1, fp
 800261e:	00cb      	lsls	r3, r1, #3
 8002620:	4651      	mov	r1, sl
 8002622:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002626:	4651      	mov	r1, sl
 8002628:	00ca      	lsls	r2, r1, #3
 800262a:	4610      	mov	r0, r2
 800262c:	4619      	mov	r1, r3
 800262e:	4603      	mov	r3, r0
 8002630:	4642      	mov	r2, r8
 8002632:	189b      	adds	r3, r3, r2
 8002634:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002638:	464b      	mov	r3, r9
 800263a:	460a      	mov	r2, r1
 800263c:	eb42 0303 	adc.w	r3, r2, r3
 8002640:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002650:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002654:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002658:	460b      	mov	r3, r1
 800265a:	18db      	adds	r3, r3, r3
 800265c:	62bb      	str	r3, [r7, #40]	; 0x28
 800265e:	4613      	mov	r3, r2
 8002660:	eb42 0303 	adc.w	r3, r2, r3
 8002664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002666:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800266a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800266e:	f7fd fdb7 	bl	80001e0 <__aeabi_uldivmod>
 8002672:	4602      	mov	r2, r0
 8002674:	460b      	mov	r3, r1
 8002676:	4b0d      	ldr	r3, [pc, #52]	; (80026ac <UART_SetConfig+0x2d4>)
 8002678:	fba3 1302 	umull	r1, r3, r3, r2
 800267c:	095b      	lsrs	r3, r3, #5
 800267e:	2164      	movs	r1, #100	; 0x64
 8002680:	fb01 f303 	mul.w	r3, r1, r3
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	3332      	adds	r3, #50	; 0x32
 800268a:	4a08      	ldr	r2, [pc, #32]	; (80026ac <UART_SetConfig+0x2d4>)
 800268c:	fba2 2303 	umull	r2, r3, r2, r3
 8002690:	095b      	lsrs	r3, r3, #5
 8002692:	f003 0207 	and.w	r2, r3, #7
 8002696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4422      	add	r2, r4
 800269e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80026a0:	e106      	b.n	80028b0 <UART_SetConfig+0x4d8>
 80026a2:	bf00      	nop
 80026a4:	40011000 	.word	0x40011000
 80026a8:	40011400 	.word	0x40011400
 80026ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026b4:	2200      	movs	r2, #0
 80026b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80026ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80026be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80026c2:	4642      	mov	r2, r8
 80026c4:	464b      	mov	r3, r9
 80026c6:	1891      	adds	r1, r2, r2
 80026c8:	6239      	str	r1, [r7, #32]
 80026ca:	415b      	adcs	r3, r3
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
 80026ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026d2:	4641      	mov	r1, r8
 80026d4:	1854      	adds	r4, r2, r1
 80026d6:	4649      	mov	r1, r9
 80026d8:	eb43 0501 	adc.w	r5, r3, r1
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	00eb      	lsls	r3, r5, #3
 80026e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026ea:	00e2      	lsls	r2, r4, #3
 80026ec:	4614      	mov	r4, r2
 80026ee:	461d      	mov	r5, r3
 80026f0:	4643      	mov	r3, r8
 80026f2:	18e3      	adds	r3, r4, r3
 80026f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80026f8:	464b      	mov	r3, r9
 80026fa:	eb45 0303 	adc.w	r3, r5, r3
 80026fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800270e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	f04f 0300 	mov.w	r3, #0
 800271a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800271e:	4629      	mov	r1, r5
 8002720:	008b      	lsls	r3, r1, #2
 8002722:	4621      	mov	r1, r4
 8002724:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002728:	4621      	mov	r1, r4
 800272a:	008a      	lsls	r2, r1, #2
 800272c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002730:	f7fd fd56 	bl	80001e0 <__aeabi_uldivmod>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4b60      	ldr	r3, [pc, #384]	; (80028bc <UART_SetConfig+0x4e4>)
 800273a:	fba3 2302 	umull	r2, r3, r3, r2
 800273e:	095b      	lsrs	r3, r3, #5
 8002740:	011c      	lsls	r4, r3, #4
 8002742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002746:	2200      	movs	r2, #0
 8002748:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800274c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002750:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002754:	4642      	mov	r2, r8
 8002756:	464b      	mov	r3, r9
 8002758:	1891      	adds	r1, r2, r2
 800275a:	61b9      	str	r1, [r7, #24]
 800275c:	415b      	adcs	r3, r3
 800275e:	61fb      	str	r3, [r7, #28]
 8002760:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002764:	4641      	mov	r1, r8
 8002766:	1851      	adds	r1, r2, r1
 8002768:	6139      	str	r1, [r7, #16]
 800276a:	4649      	mov	r1, r9
 800276c:	414b      	adcs	r3, r1
 800276e:	617b      	str	r3, [r7, #20]
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800277c:	4659      	mov	r1, fp
 800277e:	00cb      	lsls	r3, r1, #3
 8002780:	4651      	mov	r1, sl
 8002782:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002786:	4651      	mov	r1, sl
 8002788:	00ca      	lsls	r2, r1, #3
 800278a:	4610      	mov	r0, r2
 800278c:	4619      	mov	r1, r3
 800278e:	4603      	mov	r3, r0
 8002790:	4642      	mov	r2, r8
 8002792:	189b      	adds	r3, r3, r2
 8002794:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002798:	464b      	mov	r3, r9
 800279a:	460a      	mov	r2, r1
 800279c:	eb42 0303 	adc.w	r3, r2, r3
 80027a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80027a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80027ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	f04f 0300 	mov.w	r3, #0
 80027b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80027bc:	4649      	mov	r1, r9
 80027be:	008b      	lsls	r3, r1, #2
 80027c0:	4641      	mov	r1, r8
 80027c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027c6:	4641      	mov	r1, r8
 80027c8:	008a      	lsls	r2, r1, #2
 80027ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80027ce:	f7fd fd07 	bl	80001e0 <__aeabi_uldivmod>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4611      	mov	r1, r2
 80027d8:	4b38      	ldr	r3, [pc, #224]	; (80028bc <UART_SetConfig+0x4e4>)
 80027da:	fba3 2301 	umull	r2, r3, r3, r1
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	2264      	movs	r2, #100	; 0x64
 80027e2:	fb02 f303 	mul.w	r3, r2, r3
 80027e6:	1acb      	subs	r3, r1, r3
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	3332      	adds	r3, #50	; 0x32
 80027ec:	4a33      	ldr	r2, [pc, #204]	; (80028bc <UART_SetConfig+0x4e4>)
 80027ee:	fba2 2303 	umull	r2, r3, r2, r3
 80027f2:	095b      	lsrs	r3, r3, #5
 80027f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027f8:	441c      	add	r4, r3
 80027fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027fe:	2200      	movs	r2, #0
 8002800:	673b      	str	r3, [r7, #112]	; 0x70
 8002802:	677a      	str	r2, [r7, #116]	; 0x74
 8002804:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002808:	4642      	mov	r2, r8
 800280a:	464b      	mov	r3, r9
 800280c:	1891      	adds	r1, r2, r2
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	415b      	adcs	r3, r3
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002818:	4641      	mov	r1, r8
 800281a:	1851      	adds	r1, r2, r1
 800281c:	6039      	str	r1, [r7, #0]
 800281e:	4649      	mov	r1, r9
 8002820:	414b      	adcs	r3, r1
 8002822:	607b      	str	r3, [r7, #4]
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002830:	4659      	mov	r1, fp
 8002832:	00cb      	lsls	r3, r1, #3
 8002834:	4651      	mov	r1, sl
 8002836:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800283a:	4651      	mov	r1, sl
 800283c:	00ca      	lsls	r2, r1, #3
 800283e:	4610      	mov	r0, r2
 8002840:	4619      	mov	r1, r3
 8002842:	4603      	mov	r3, r0
 8002844:	4642      	mov	r2, r8
 8002846:	189b      	adds	r3, r3, r2
 8002848:	66bb      	str	r3, [r7, #104]	; 0x68
 800284a:	464b      	mov	r3, r9
 800284c:	460a      	mov	r2, r1
 800284e:	eb42 0303 	adc.w	r3, r2, r3
 8002852:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	663b      	str	r3, [r7, #96]	; 0x60
 800285e:	667a      	str	r2, [r7, #100]	; 0x64
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	f04f 0300 	mov.w	r3, #0
 8002868:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800286c:	4649      	mov	r1, r9
 800286e:	008b      	lsls	r3, r1, #2
 8002870:	4641      	mov	r1, r8
 8002872:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002876:	4641      	mov	r1, r8
 8002878:	008a      	lsls	r2, r1, #2
 800287a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800287e:	f7fd fcaf 	bl	80001e0 <__aeabi_uldivmod>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	4b0d      	ldr	r3, [pc, #52]	; (80028bc <UART_SetConfig+0x4e4>)
 8002888:	fba3 1302 	umull	r1, r3, r3, r2
 800288c:	095b      	lsrs	r3, r3, #5
 800288e:	2164      	movs	r1, #100	; 0x64
 8002890:	fb01 f303 	mul.w	r3, r1, r3
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	3332      	adds	r3, #50	; 0x32
 800289a:	4a08      	ldr	r2, [pc, #32]	; (80028bc <UART_SetConfig+0x4e4>)
 800289c:	fba2 2303 	umull	r2, r3, r2, r3
 80028a0:	095b      	lsrs	r3, r3, #5
 80028a2:	f003 020f 	and.w	r2, r3, #15
 80028a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4422      	add	r2, r4
 80028ae:	609a      	str	r2, [r3, #8]
}
 80028b0:	bf00      	nop
 80028b2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80028b6:	46bd      	mov	sp, r7
 80028b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028bc:	51eb851f 	.word	0x51eb851f

080028c0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80028ca:	2300      	movs	r3, #0
 80028cc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80028ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028d2:	2b84      	cmp	r3, #132	; 0x84
 80028d4:	d005      	beq.n	80028e2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80028d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	4413      	add	r3, r2
 80028de:	3303      	adds	r3, #3
 80028e0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80028e2:	68fb      	ldr	r3, [r7, #12]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028f6:	f3ef 8305 	mrs	r3, IPSR
 80028fa:	607b      	str	r3, [r7, #4]
  return(result);
 80028fc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80028fe:	2b00      	cmp	r3, #0
 8002900:	bf14      	ite	ne
 8002902:	2301      	movne	r3, #1
 8002904:	2300      	moveq	r3, #0
 8002906:	b2db      	uxtb	r3, r3
}
 8002908:	4618      	mov	r0, r3
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002918:	f001 f926 	bl	8003b68 <vTaskStartScheduler>
  
  return osOK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	bd80      	pop	{r7, pc}

08002922 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002922:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002924:	b089      	sub	sp, #36	; 0x24
 8002926:	af04      	add	r7, sp, #16
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d020      	beq.n	8002976 <osThreadCreate+0x54>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d01c      	beq.n	8002976 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685c      	ldr	r4, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691e      	ldr	r6, [r3, #16]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff ffb6 	bl	80028c0 <makeFreeRtosPriority>
 8002954:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800295e:	9202      	str	r2, [sp, #8]
 8002960:	9301      	str	r3, [sp, #4]
 8002962:	9100      	str	r1, [sp, #0]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	4632      	mov	r2, r6
 8002968:	4629      	mov	r1, r5
 800296a:	4620      	mov	r0, r4
 800296c:	f000 ff1e 	bl	80037ac <xTaskCreateStatic>
 8002970:	4603      	mov	r3, r0
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	e01c      	b.n	80029b0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685c      	ldr	r4, [r3, #4]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002982:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff ff98 	bl	80028c0 <makeFreeRtosPriority>
 8002990:	4602      	mov	r2, r0
 8002992:	f107 030c 	add.w	r3, r7, #12
 8002996:	9301      	str	r3, [sp, #4]
 8002998:	9200      	str	r2, [sp, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	4632      	mov	r2, r6
 800299e:	4629      	mov	r1, r5
 80029a0:	4620      	mov	r0, r4
 80029a2:	f000 ff60 	bl	8003866 <xTaskCreate>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d001      	beq.n	80029b0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	e000      	b.n	80029b2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80029b0:	68fb      	ldr	r3, [r7, #12]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029ba <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b084      	sub	sp, #16
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <osDelay+0x16>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	e000      	b.n	80029d2 <osDelay+0x18>
 80029d0:	2301      	movs	r3, #1
 80029d2:	4618      	mov	r0, r3
 80029d4:	f001 f894 	bl	8003b00 <vTaskDelay>
  
  return osOK;
 80029d8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b086      	sub	sp, #24
 80029e6:	af02      	add	r7, sp, #8
 80029e8:	6078      	str	r0, [r7, #4]
 80029ea:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00f      	beq.n	8002a14 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d10a      	bne.n	8002a10 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2203      	movs	r2, #3
 8002a00:	9200      	str	r2, [sp, #0]
 8002a02:	2200      	movs	r2, #0
 8002a04:	2100      	movs	r1, #0
 8002a06:	2001      	movs	r0, #1
 8002a08:	f000 f9be 	bl	8002d88 <xQueueGenericCreateStatic>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	e016      	b.n	8002a3e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	e014      	b.n	8002a3e <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d110      	bne.n	8002a3c <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8002a1a:	2203      	movs	r2, #3
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	2001      	movs	r0, #1
 8002a20:	f000 fa2a 	bl	8002e78 <xQueueGenericCreate>
 8002a24:	60f8      	str	r0, [r7, #12]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <osSemaphoreCreate+0x56>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2100      	movs	r1, #0
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 fa7a 	bl	8002f2c <xQueueGenericSend>
      return sema;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	e000      	b.n	8002a3e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8002a3c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002a52:	2300      	movs	r3, #0
 8002a54:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8002a5c:	2380      	movs	r3, #128	; 0x80
 8002a5e:	e03a      	b.n	8002ad6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6a:	d103      	bne.n	8002a74 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8002a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	e009      	b.n	8002a88 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d006      	beq.n	8002a88 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <osSemaphoreWait+0x40>
      ticks = 1;
 8002a84:	2301      	movs	r3, #1
 8002a86:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002a88:	f7ff ff32 	bl	80028f0 <inHandlerMode>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d017      	beq.n	8002ac2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002a92:	f107 0308 	add.w	r3, r7, #8
 8002a96:	461a      	mov	r2, r3
 8002a98:	2100      	movs	r1, #0
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 fcde 	bl	800345c <xQueueReceiveFromISR>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d001      	beq.n	8002aaa <osSemaphoreWait+0x62>
      return osErrorOS;
 8002aa6:	23ff      	movs	r3, #255	; 0xff
 8002aa8:	e015      	b.n	8002ad6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d011      	beq.n	8002ad4 <osSemaphoreWait+0x8c>
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <osSemaphoreWait+0x98>)
 8002ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	f3bf 8f4f 	dsb	sy
 8002abc:	f3bf 8f6f 	isb	sy
 8002ac0:	e008      	b.n	8002ad4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8002ac2:	68f9      	ldr	r1, [r7, #12]
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 fbbd 	bl	8003244 <xQueueSemaphoreTake>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d001      	beq.n	8002ad4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8002ad0:	23ff      	movs	r3, #255	; 0xff
 8002ad2:	e000      	b.n	8002ad6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	e000ed04 	.word	0xe000ed04

08002ae4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002af0:	2300      	movs	r3, #0
 8002af2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8002af4:	f7ff fefc 	bl	80028f0 <inHandlerMode>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d016      	beq.n	8002b2c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002afe:	f107 0308 	add.w	r3, r7, #8
 8002b02:	4619      	mov	r1, r3
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 fb0f 	bl	8003128 <xQueueGiveFromISR>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d001      	beq.n	8002b14 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002b10:	23ff      	movs	r3, #255	; 0xff
 8002b12:	e017      	b.n	8002b44 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d013      	beq.n	8002b42 <osSemaphoreRelease+0x5e>
 8002b1a:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <osSemaphoreRelease+0x68>)
 8002b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	f3bf 8f4f 	dsb	sy
 8002b26:	f3bf 8f6f 	isb	sy
 8002b2a:	e00a      	b.n	8002b42 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	2200      	movs	r2, #0
 8002b30:	2100      	movs	r1, #0
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f9fa 	bl	8002f2c <xQueueGenericSend>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d001      	beq.n	8002b42 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8002b3e:	23ff      	movs	r3, #255	; 0xff
 8002b40:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8002b42:	68fb      	ldr	r3, [r7, #12]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	e000ed04 	.word	0xe000ed04

08002b50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f103 0208 	add.w	r2, r3, #8
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f04f 32ff 	mov.w	r2, #4294967295
 8002b68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f103 0208 	add.w	r2, r3, #8
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f103 0208 	add.w	r2, r3, #8
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002baa:	b480      	push	{r7}
 8002bac:	b085      	sub	sp, #20
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
 8002bb2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	601a      	str	r2, [r3, #0]
}
 8002be6:	bf00      	nop
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b085      	sub	sp, #20
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
 8002bfa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c08:	d103      	bne.n	8002c12 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	e00c      	b.n	8002c2c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3308      	adds	r3, #8
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	e002      	b.n	8002c20 <vListInsert+0x2e>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d2f6      	bcs.n	8002c1a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	601a      	str	r2, [r3, #0]
}
 8002c58:	bf00      	nop
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6892      	ldr	r2, [r2, #8]
 8002c7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6852      	ldr	r2, [r2, #4]
 8002c84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d103      	bne.n	8002c98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	1e5a      	subs	r2, r3, #1
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10a      	bne.n	8002ce2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd0:	f383 8811 	msr	BASEPRI, r3
 8002cd4:	f3bf 8f6f 	isb	sy
 8002cd8:	f3bf 8f4f 	dsb	sy
 8002cdc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002cde:	bf00      	nop
 8002ce0:	e7fe      	b.n	8002ce0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002ce2:	f001 fe9f 	bl	8004a24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cee:	68f9      	ldr	r1, [r7, #12]
 8002cf0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002cf2:	fb01 f303 	mul.w	r3, r1, r3
 8002cf6:	441a      	add	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d12:	3b01      	subs	r3, #1
 8002d14:	68f9      	ldr	r1, [r7, #12]
 8002d16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d18:	fb01 f303 	mul.w	r3, r1, r3
 8002d1c:	441a      	add	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	22ff      	movs	r2, #255	; 0xff
 8002d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	22ff      	movs	r2, #255	; 0xff
 8002d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d114      	bne.n	8002d62 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d01a      	beq.n	8002d76 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	3310      	adds	r3, #16
 8002d44:	4618      	mov	r0, r3
 8002d46:	f001 f961 	bl	800400c <xTaskRemoveFromEventList>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d012      	beq.n	8002d76 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002d50:	4b0c      	ldr	r3, [pc, #48]	; (8002d84 <xQueueGenericReset+0xcc>)
 8002d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	f3bf 8f6f 	isb	sy
 8002d60:	e009      	b.n	8002d76 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	3310      	adds	r3, #16
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff fef2 	bl	8002b50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	3324      	adds	r3, #36	; 0x24
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff feed 	bl	8002b50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002d76:	f001 fe85 	bl	8004a84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002d7a:	2301      	movs	r3, #1
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	e000ed04 	.word	0xe000ed04

08002d88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08e      	sub	sp, #56	; 0x38
 8002d8c:	af02      	add	r7, sp, #8
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
 8002d94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10a      	bne.n	8002db2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da0:	f383 8811 	msr	BASEPRI, r3
 8002da4:	f3bf 8f6f 	isb	sy
 8002da8:	f3bf 8f4f 	dsb	sy
 8002dac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002dae:	bf00      	nop
 8002db0:	e7fe      	b.n	8002db0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10a      	bne.n	8002dce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dbc:	f383 8811 	msr	BASEPRI, r3
 8002dc0:	f3bf 8f6f 	isb	sy
 8002dc4:	f3bf 8f4f 	dsb	sy
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002dca:	bf00      	nop
 8002dcc:	e7fe      	b.n	8002dcc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d002      	beq.n	8002dda <xQueueGenericCreateStatic+0x52>
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <xQueueGenericCreateStatic+0x56>
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e000      	b.n	8002de0 <xQueueGenericCreateStatic+0x58>
 8002dde:	2300      	movs	r3, #0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10a      	bne.n	8002dfa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de8:	f383 8811 	msr	BASEPRI, r3
 8002dec:	f3bf 8f6f 	isb	sy
 8002df0:	f3bf 8f4f 	dsb	sy
 8002df4:	623b      	str	r3, [r7, #32]
}
 8002df6:	bf00      	nop
 8002df8:	e7fe      	b.n	8002df8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d102      	bne.n	8002e06 <xQueueGenericCreateStatic+0x7e>
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <xQueueGenericCreateStatic+0x82>
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <xQueueGenericCreateStatic+0x84>
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10a      	bne.n	8002e26 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e14:	f383 8811 	msr	BASEPRI, r3
 8002e18:	f3bf 8f6f 	isb	sy
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	61fb      	str	r3, [r7, #28]
}
 8002e22:	bf00      	nop
 8002e24:	e7fe      	b.n	8002e24 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002e26:	2348      	movs	r3, #72	; 0x48
 8002e28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2b48      	cmp	r3, #72	; 0x48
 8002e2e:	d00a      	beq.n	8002e46 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e34:	f383 8811 	msr	BASEPRI, r3
 8002e38:	f3bf 8f6f 	isb	sy
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	61bb      	str	r3, [r7, #24]
}
 8002e42:	bf00      	nop
 8002e44:	e7fe      	b.n	8002e44 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002e46:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00d      	beq.n	8002e6e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	4613      	mov	r3, r2
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	68b9      	ldr	r1, [r7, #8]
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 f83f 	bl	8002eec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3730      	adds	r7, #48	; 0x30
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08a      	sub	sp, #40	; 0x28
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	4613      	mov	r3, r2
 8002e84:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10a      	bne.n	8002ea2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e90:	f383 8811 	msr	BASEPRI, r3
 8002e94:	f3bf 8f6f 	isb	sy
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	613b      	str	r3, [r7, #16]
}
 8002e9e:	bf00      	nop
 8002ea0:	e7fe      	b.n	8002ea0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	68ba      	ldr	r2, [r7, #8]
 8002ea6:	fb02 f303 	mul.w	r3, r2, r3
 8002eaa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	3348      	adds	r3, #72	; 0x48
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f001 fed9 	bl	8004c68 <pvPortMalloc>
 8002eb6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d011      	beq.n	8002ee2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	3348      	adds	r3, #72	; 0x48
 8002ec6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ed0:	79fa      	ldrb	r2, [r7, #7]
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	68b9      	ldr	r1, [r7, #8]
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 f805 	bl	8002eec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ee2:	69bb      	ldr	r3, [r7, #24]
	}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3720      	adds	r7, #32
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
 8002ef8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d103      	bne.n	8002f08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	e002      	b.n	8002f0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	69b8      	ldr	r0, [r7, #24]
 8002f1e:	f7ff fecb 	bl	8002cb8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002f22:	bf00      	nop
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08e      	sub	sp, #56	; 0x38
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
 8002f38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10a      	bne.n	8002f5e <xQueueGenericSend+0x32>
	__asm volatile
 8002f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4c:	f383 8811 	msr	BASEPRI, r3
 8002f50:	f3bf 8f6f 	isb	sy
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f5a:	bf00      	nop
 8002f5c:	e7fe      	b.n	8002f5c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d103      	bne.n	8002f6c <xQueueGenericSend+0x40>
 8002f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <xQueueGenericSend+0x44>
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e000      	b.n	8002f72 <xQueueGenericSend+0x46>
 8002f70:	2300      	movs	r3, #0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10a      	bne.n	8002f8c <xQueueGenericSend+0x60>
	__asm volatile
 8002f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7a:	f383 8811 	msr	BASEPRI, r3
 8002f7e:	f3bf 8f6f 	isb	sy
 8002f82:	f3bf 8f4f 	dsb	sy
 8002f86:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f88:	bf00      	nop
 8002f8a:	e7fe      	b.n	8002f8a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d103      	bne.n	8002f9a <xQueueGenericSend+0x6e>
 8002f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <xQueueGenericSend+0x72>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <xQueueGenericSend+0x74>
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10a      	bne.n	8002fba <xQueueGenericSend+0x8e>
	__asm volatile
 8002fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa8:	f383 8811 	msr	BASEPRI, r3
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	623b      	str	r3, [r7, #32]
}
 8002fb6:	bf00      	nop
 8002fb8:	e7fe      	b.n	8002fb8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fba:	f001 f9e7 	bl	800438c <xTaskGetSchedulerState>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d102      	bne.n	8002fca <xQueueGenericSend+0x9e>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <xQueueGenericSend+0xa2>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <xQueueGenericSend+0xa4>
 8002fce:	2300      	movs	r3, #0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10a      	bne.n	8002fea <xQueueGenericSend+0xbe>
	__asm volatile
 8002fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd8:	f383 8811 	msr	BASEPRI, r3
 8002fdc:	f3bf 8f6f 	isb	sy
 8002fe0:	f3bf 8f4f 	dsb	sy
 8002fe4:	61fb      	str	r3, [r7, #28]
}
 8002fe6:	bf00      	nop
 8002fe8:	e7fe      	b.n	8002fe8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002fea:	f001 fd1b 	bl	8004a24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d302      	bcc.n	8003000 <xQueueGenericSend+0xd4>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d129      	bne.n	8003054 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	68b9      	ldr	r1, [r7, #8]
 8003004:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003006:	f000 fac1 	bl	800358c <prvCopyDataToQueue>
 800300a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800300c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	2b00      	cmp	r3, #0
 8003012:	d010      	beq.n	8003036 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003016:	3324      	adds	r3, #36	; 0x24
 8003018:	4618      	mov	r0, r3
 800301a:	f000 fff7 	bl	800400c <xTaskRemoveFromEventList>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d013      	beq.n	800304c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003024:	4b3f      	ldr	r3, [pc, #252]	; (8003124 <xQueueGenericSend+0x1f8>)
 8003026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	f3bf 8f4f 	dsb	sy
 8003030:	f3bf 8f6f 	isb	sy
 8003034:	e00a      	b.n	800304c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003038:	2b00      	cmp	r3, #0
 800303a:	d007      	beq.n	800304c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800303c:	4b39      	ldr	r3, [pc, #228]	; (8003124 <xQueueGenericSend+0x1f8>)
 800303e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	f3bf 8f4f 	dsb	sy
 8003048:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800304c:	f001 fd1a 	bl	8004a84 <vPortExitCritical>
				return pdPASS;
 8003050:	2301      	movs	r3, #1
 8003052:	e063      	b.n	800311c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d103      	bne.n	8003062 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800305a:	f001 fd13 	bl	8004a84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800305e:	2300      	movs	r3, #0
 8003060:	e05c      	b.n	800311c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003064:	2b00      	cmp	r3, #0
 8003066:	d106      	bne.n	8003076 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003068:	f107 0314 	add.w	r3, r7, #20
 800306c:	4618      	mov	r0, r3
 800306e:	f001 f82f 	bl	80040d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003072:	2301      	movs	r3, #1
 8003074:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003076:	f001 fd05 	bl	8004a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800307a:	f000 fddf 	bl	8003c3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800307e:	f001 fcd1 	bl	8004a24 <vPortEnterCritical>
 8003082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003084:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003088:	b25b      	sxtb	r3, r3
 800308a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308e:	d103      	bne.n	8003098 <xQueueGenericSend+0x16c>
 8003090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800309e:	b25b      	sxtb	r3, r3
 80030a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a4:	d103      	bne.n	80030ae <xQueueGenericSend+0x182>
 80030a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030ae:	f001 fce9 	bl	8004a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030b2:	1d3a      	adds	r2, r7, #4
 80030b4:	f107 0314 	add.w	r3, r7, #20
 80030b8:	4611      	mov	r1, r2
 80030ba:	4618      	mov	r0, r3
 80030bc:	f001 f81e 	bl	80040fc <xTaskCheckForTimeOut>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d124      	bne.n	8003110 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80030c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030c8:	f000 fb58 	bl	800377c <prvIsQueueFull>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d018      	beq.n	8003104 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80030d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d4:	3310      	adds	r3, #16
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	4611      	mov	r1, r2
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 ff72 	bl	8003fc4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80030e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030e2:	f000 fae3 	bl	80036ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80030e6:	f000 fdb7 	bl	8003c58 <xTaskResumeAll>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f47f af7c 	bne.w	8002fea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80030f2:	4b0c      	ldr	r3, [pc, #48]	; (8003124 <xQueueGenericSend+0x1f8>)
 80030f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	f3bf 8f4f 	dsb	sy
 80030fe:	f3bf 8f6f 	isb	sy
 8003102:	e772      	b.n	8002fea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003104:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003106:	f000 fad1 	bl	80036ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800310a:	f000 fda5 	bl	8003c58 <xTaskResumeAll>
 800310e:	e76c      	b.n	8002fea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003110:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003112:	f000 facb 	bl	80036ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003116:	f000 fd9f 	bl	8003c58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800311a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800311c:	4618      	mov	r0, r3
 800311e:	3738      	adds	r7, #56	; 0x38
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	e000ed04 	.word	0xe000ed04

08003128 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08e      	sub	sp, #56	; 0x38
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10a      	bne.n	8003152 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800313c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003140:	f383 8811 	msr	BASEPRI, r3
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	623b      	str	r3, [r7, #32]
}
 800314e:	bf00      	nop
 8003150:	e7fe      	b.n	8003150 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <xQueueGiveFromISR+0x48>
	__asm volatile
 800315a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315e:	f383 8811 	msr	BASEPRI, r3
 8003162:	f3bf 8f6f 	isb	sy
 8003166:	f3bf 8f4f 	dsb	sy
 800316a:	61fb      	str	r3, [r7, #28]
}
 800316c:	bf00      	nop
 800316e:	e7fe      	b.n	800316e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d103      	bne.n	8003180 <xQueueGiveFromISR+0x58>
 8003178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <xQueueGiveFromISR+0x5c>
 8003180:	2301      	movs	r3, #1
 8003182:	e000      	b.n	8003186 <xQueueGiveFromISR+0x5e>
 8003184:	2300      	movs	r3, #0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10a      	bne.n	80031a0 <xQueueGiveFromISR+0x78>
	__asm volatile
 800318a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318e:	f383 8811 	msr	BASEPRI, r3
 8003192:	f3bf 8f6f 	isb	sy
 8003196:	f3bf 8f4f 	dsb	sy
 800319a:	61bb      	str	r3, [r7, #24]
}
 800319c:	bf00      	nop
 800319e:	e7fe      	b.n	800319e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031a0:	f001 fd22 	bl	8004be8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80031a4:	f3ef 8211 	mrs	r2, BASEPRI
 80031a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ac:	f383 8811 	msr	BASEPRI, r3
 80031b0:	f3bf 8f6f 	isb	sy
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	617a      	str	r2, [r7, #20]
 80031ba:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80031bc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80031be:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80031c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d22b      	bcs.n	8003228 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80031d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80031da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031dc:	1c5a      	adds	r2, r3, #1
 80031de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80031e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80031e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ea:	d112      	bne.n	8003212 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d016      	beq.n	8003222 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f6:	3324      	adds	r3, #36	; 0x24
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 ff07 	bl	800400c <xTaskRemoveFromEventList>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00e      	beq.n	8003222 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00b      	beq.n	8003222 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2201      	movs	r2, #1
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	e007      	b.n	8003222 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003212:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003216:	3301      	adds	r3, #1
 8003218:	b2db      	uxtb	r3, r3
 800321a:	b25a      	sxtb	r2, r3
 800321c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003222:	2301      	movs	r3, #1
 8003224:	637b      	str	r3, [r7, #52]	; 0x34
 8003226:	e001      	b.n	800322c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003228:	2300      	movs	r3, #0
 800322a:	637b      	str	r3, [r7, #52]	; 0x34
 800322c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003236:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800323a:	4618      	mov	r0, r3
 800323c:	3738      	adds	r7, #56	; 0x38
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b08e      	sub	sp, #56	; 0x38
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800324e:	2300      	movs	r3, #0
 8003250:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003256:	2300      	movs	r3, #0
 8003258:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800325a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10a      	bne.n	8003276 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003264:	f383 8811 	msr	BASEPRI, r3
 8003268:	f3bf 8f6f 	isb	sy
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	623b      	str	r3, [r7, #32]
}
 8003272:	bf00      	nop
 8003274:	e7fe      	b.n	8003274 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00a      	beq.n	8003294 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800327e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003282:	f383 8811 	msr	BASEPRI, r3
 8003286:	f3bf 8f6f 	isb	sy
 800328a:	f3bf 8f4f 	dsb	sy
 800328e:	61fb      	str	r3, [r7, #28]
}
 8003290:	bf00      	nop
 8003292:	e7fe      	b.n	8003292 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003294:	f001 f87a 	bl	800438c <xTaskGetSchedulerState>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d102      	bne.n	80032a4 <xQueueSemaphoreTake+0x60>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <xQueueSemaphoreTake+0x64>
 80032a4:	2301      	movs	r3, #1
 80032a6:	e000      	b.n	80032aa <xQueueSemaphoreTake+0x66>
 80032a8:	2300      	movs	r3, #0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10a      	bne.n	80032c4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80032ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b2:	f383 8811 	msr	BASEPRI, r3
 80032b6:	f3bf 8f6f 	isb	sy
 80032ba:	f3bf 8f4f 	dsb	sy
 80032be:	61bb      	str	r3, [r7, #24]
}
 80032c0:	bf00      	nop
 80032c2:	e7fe      	b.n	80032c2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80032c4:	f001 fbae 	bl	8004a24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80032c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032cc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80032ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d024      	beq.n	800331e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80032d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d6:	1e5a      	subs	r2, r3, #1
 80032d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032da:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d104      	bne.n	80032ee <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80032e4:	f001 f9fa 	bl	80046dc <pvTaskIncrementMutexHeldCount>
 80032e8:	4602      	mov	r2, r0
 80032ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ec:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00f      	beq.n	8003316 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f8:	3310      	adds	r3, #16
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fe86 	bl	800400c <xTaskRemoveFromEventList>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d007      	beq.n	8003316 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003306:	4b54      	ldr	r3, [pc, #336]	; (8003458 <xQueueSemaphoreTake+0x214>)
 8003308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	f3bf 8f4f 	dsb	sy
 8003312:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003316:	f001 fbb5 	bl	8004a84 <vPortExitCritical>
				return pdPASS;
 800331a:	2301      	movs	r3, #1
 800331c:	e097      	b.n	800344e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d111      	bne.n	8003348 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00a      	beq.n	8003340 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800332a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332e:	f383 8811 	msr	BASEPRI, r3
 8003332:	f3bf 8f6f 	isb	sy
 8003336:	f3bf 8f4f 	dsb	sy
 800333a:	617b      	str	r3, [r7, #20]
}
 800333c:	bf00      	nop
 800333e:	e7fe      	b.n	800333e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003340:	f001 fba0 	bl	8004a84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003344:	2300      	movs	r3, #0
 8003346:	e082      	b.n	800344e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800334a:	2b00      	cmp	r3, #0
 800334c:	d106      	bne.n	800335c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800334e:	f107 030c 	add.w	r3, r7, #12
 8003352:	4618      	mov	r0, r3
 8003354:	f000 febc 	bl	80040d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003358:	2301      	movs	r3, #1
 800335a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800335c:	f001 fb92 	bl	8004a84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003360:	f000 fc6c 	bl	8003c3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003364:	f001 fb5e 	bl	8004a24 <vPortEnterCritical>
 8003368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800336e:	b25b      	sxtb	r3, r3
 8003370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003374:	d103      	bne.n	800337e <xQueueSemaphoreTake+0x13a>
 8003376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800337e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003380:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003384:	b25b      	sxtb	r3, r3
 8003386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338a:	d103      	bne.n	8003394 <xQueueSemaphoreTake+0x150>
 800338c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003394:	f001 fb76 	bl	8004a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003398:	463a      	mov	r2, r7
 800339a:	f107 030c 	add.w	r3, r7, #12
 800339e:	4611      	mov	r1, r2
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 feab 	bl	80040fc <xTaskCheckForTimeOut>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d132      	bne.n	8003412 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033ae:	f000 f9cf 	bl	8003750 <prvIsQueueEmpty>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d026      	beq.n	8003406 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d109      	bne.n	80033d4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80033c0:	f001 fb30 	bl	8004a24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80033c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 fffd 	bl	80043c8 <xTaskPriorityInherit>
 80033ce:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80033d0:	f001 fb58 	bl	8004a84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80033d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d6:	3324      	adds	r3, #36	; 0x24
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	4611      	mov	r1, r2
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 fdf1 	bl	8003fc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80033e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033e4:	f000 f962 	bl	80036ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80033e8:	f000 fc36 	bl	8003c58 <xTaskResumeAll>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f47f af68 	bne.w	80032c4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80033f4:	4b18      	ldr	r3, [pc, #96]	; (8003458 <xQueueSemaphoreTake+0x214>)
 80033f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	f3bf 8f4f 	dsb	sy
 8003400:	f3bf 8f6f 	isb	sy
 8003404:	e75e      	b.n	80032c4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003406:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003408:	f000 f950 	bl	80036ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800340c:	f000 fc24 	bl	8003c58 <xTaskResumeAll>
 8003410:	e758      	b.n	80032c4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003412:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003414:	f000 f94a 	bl	80036ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003418:	f000 fc1e 	bl	8003c58 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800341c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800341e:	f000 f997 	bl	8003750 <prvIsQueueEmpty>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	f43f af4d 	beq.w	80032c4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800342a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00d      	beq.n	800344c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003430:	f001 faf8 	bl	8004a24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003434:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003436:	f000 f891 	bl	800355c <prvGetDisinheritPriorityAfterTimeout>
 800343a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800343c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003442:	4618      	mov	r0, r3
 8003444:	f001 f8bc 	bl	80045c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003448:	f001 fb1c 	bl	8004a84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800344c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800344e:	4618      	mov	r0, r3
 8003450:	3738      	adds	r7, #56	; 0x38
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	e000ed04 	.word	0xe000ed04

0800345c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08e      	sub	sp, #56	; 0x38
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800346c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10a      	bne.n	8003488 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003476:	f383 8811 	msr	BASEPRI, r3
 800347a:	f3bf 8f6f 	isb	sy
 800347e:	f3bf 8f4f 	dsb	sy
 8003482:	623b      	str	r3, [r7, #32]
}
 8003484:	bf00      	nop
 8003486:	e7fe      	b.n	8003486 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d103      	bne.n	8003496 <xQueueReceiveFromISR+0x3a>
 800348e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <xQueueReceiveFromISR+0x3e>
 8003496:	2301      	movs	r3, #1
 8003498:	e000      	b.n	800349c <xQueueReceiveFromISR+0x40>
 800349a:	2300      	movs	r3, #0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10a      	bne.n	80034b6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80034a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a4:	f383 8811 	msr	BASEPRI, r3
 80034a8:	f3bf 8f6f 	isb	sy
 80034ac:	f3bf 8f4f 	dsb	sy
 80034b0:	61fb      	str	r3, [r7, #28]
}
 80034b2:	bf00      	nop
 80034b4:	e7fe      	b.n	80034b4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034b6:	f001 fb97 	bl	8004be8 <vPortValidateInterruptPriority>
	__asm volatile
 80034ba:	f3ef 8211 	mrs	r2, BASEPRI
 80034be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c2:	f383 8811 	msr	BASEPRI, r3
 80034c6:	f3bf 8f6f 	isb	sy
 80034ca:	f3bf 8f4f 	dsb	sy
 80034ce:	61ba      	str	r2, [r7, #24]
 80034d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80034d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80034d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d02f      	beq.n	8003542 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80034e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80034ec:	68b9      	ldr	r1, [r7, #8]
 80034ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034f0:	f000 f8b6 	bl	8003660 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80034f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f6:	1e5a      	subs	r2, r3, #1
 80034f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80034fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003504:	d112      	bne.n	800352c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d016      	beq.n	800353c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800350e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003510:	3310      	adds	r3, #16
 8003512:	4618      	mov	r0, r3
 8003514:	f000 fd7a 	bl	800400c <xTaskRemoveFromEventList>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00e      	beq.n	800353c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00b      	beq.n	800353c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	e007      	b.n	800353c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800352c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003530:	3301      	adds	r3, #1
 8003532:	b2db      	uxtb	r3, r3
 8003534:	b25a      	sxtb	r2, r3
 8003536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800353c:	2301      	movs	r3, #1
 800353e:	637b      	str	r3, [r7, #52]	; 0x34
 8003540:	e001      	b.n	8003546 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003542:	2300      	movs	r3, #0
 8003544:	637b      	str	r3, [r7, #52]	; 0x34
 8003546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003548:	613b      	str	r3, [r7, #16]
	__asm volatile
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	f383 8811 	msr	BASEPRI, r3
}
 8003550:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003554:	4618      	mov	r0, r3
 8003556:	3738      	adds	r7, #56	; 0x38
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	2b00      	cmp	r3, #0
 800356a:	d006      	beq.n	800357a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f1c3 0307 	rsb	r3, r3, #7
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	e001      	b.n	800357e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800357a:	2300      	movs	r3, #0
 800357c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800357e:	68fb      	ldr	r3, [r7, #12]
	}
 8003580:	4618      	mov	r0, r3
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003598:	2300      	movs	r3, #0
 800359a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10d      	bne.n	80035c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d14d      	bne.n	800364e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 ff7c 	bl	80044b4 <xTaskPriorityDisinherit>
 80035bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	609a      	str	r2, [r3, #8]
 80035c4:	e043      	b.n	800364e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d119      	bne.n	8003600 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6858      	ldr	r0, [r3, #4]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	461a      	mov	r2, r3
 80035d6:	68b9      	ldr	r1, [r7, #8]
 80035d8:	f001 fff7 	bl	80055ca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	441a      	add	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d32b      	bcc.n	800364e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	605a      	str	r2, [r3, #4]
 80035fe:	e026      	b.n	800364e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	68d8      	ldr	r0, [r3, #12]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003608:	461a      	mov	r2, r3
 800360a:	68b9      	ldr	r1, [r7, #8]
 800360c:	f001 ffdd 	bl	80055ca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	425b      	negs	r3, r3
 800361a:	441a      	add	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	429a      	cmp	r2, r3
 800362a:	d207      	bcs.n	800363c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	425b      	negs	r3, r3
 8003636:	441a      	add	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b02      	cmp	r3, #2
 8003640:	d105      	bne.n	800364e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	3b01      	subs	r3, #1
 800364c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1c5a      	adds	r2, r3, #1
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003656:	697b      	ldr	r3, [r7, #20]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	2b00      	cmp	r3, #0
 8003670:	d018      	beq.n	80036a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	441a      	add	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	429a      	cmp	r2, r3
 800368a:	d303      	bcc.n	8003694 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68d9      	ldr	r1, [r3, #12]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	461a      	mov	r2, r3
 800369e:	6838      	ldr	r0, [r7, #0]
 80036a0:	f001 ff93 	bl	80055ca <memcpy>
	}
}
 80036a4:	bf00      	nop
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80036b4:	f001 f9b6 	bl	8004a24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80036c0:	e011      	b.n	80036e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d012      	beq.n	80036f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3324      	adds	r3, #36	; 0x24
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 fc9c 	bl	800400c <xTaskRemoveFromEventList>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80036da:	f000 fd71 	bl	80041c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80036de:	7bfb      	ldrb	r3, [r7, #15]
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80036e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	dce9      	bgt.n	80036c2 <prvUnlockQueue+0x16>
 80036ee:	e000      	b.n	80036f2 <prvUnlockQueue+0x46>
					break;
 80036f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	22ff      	movs	r2, #255	; 0xff
 80036f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80036fa:	f001 f9c3 	bl	8004a84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80036fe:	f001 f991 	bl	8004a24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003708:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800370a:	e011      	b.n	8003730 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d012      	beq.n	800373a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3310      	adds	r3, #16
 8003718:	4618      	mov	r0, r3
 800371a:	f000 fc77 	bl	800400c <xTaskRemoveFromEventList>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003724:	f000 fd4c 	bl	80041c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003728:	7bbb      	ldrb	r3, [r7, #14]
 800372a:	3b01      	subs	r3, #1
 800372c:	b2db      	uxtb	r3, r3
 800372e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003730:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003734:	2b00      	cmp	r3, #0
 8003736:	dce9      	bgt.n	800370c <prvUnlockQueue+0x60>
 8003738:	e000      	b.n	800373c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800373a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	22ff      	movs	r2, #255	; 0xff
 8003740:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003744:	f001 f99e 	bl	8004a84 <vPortExitCritical>
}
 8003748:	bf00      	nop
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003758:	f001 f964 	bl	8004a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003760:	2b00      	cmp	r3, #0
 8003762:	d102      	bne.n	800376a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003764:	2301      	movs	r3, #1
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	e001      	b.n	800376e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800376a:	2300      	movs	r3, #0
 800376c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800376e:	f001 f989 	bl	8004a84 <vPortExitCritical>

	return xReturn;
 8003772:	68fb      	ldr	r3, [r7, #12]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003784:	f001 f94e 	bl	8004a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003790:	429a      	cmp	r2, r3
 8003792:	d102      	bne.n	800379a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003794:	2301      	movs	r3, #1
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	e001      	b.n	800379e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800379a:	2300      	movs	r3, #0
 800379c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800379e:	f001 f971 	bl	8004a84 <vPortExitCritical>

	return xReturn;
 80037a2:	68fb      	ldr	r3, [r7, #12]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08e      	sub	sp, #56	; 0x38
 80037b0:	af04      	add	r7, sp, #16
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
 80037b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80037ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10a      	bne.n	80037d6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80037c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c4:	f383 8811 	msr	BASEPRI, r3
 80037c8:	f3bf 8f6f 	isb	sy
 80037cc:	f3bf 8f4f 	dsb	sy
 80037d0:	623b      	str	r3, [r7, #32]
}
 80037d2:	bf00      	nop
 80037d4:	e7fe      	b.n	80037d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80037d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10a      	bne.n	80037f2 <xTaskCreateStatic+0x46>
	__asm volatile
 80037dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e0:	f383 8811 	msr	BASEPRI, r3
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	61fb      	str	r3, [r7, #28]
}
 80037ee:	bf00      	nop
 80037f0:	e7fe      	b.n	80037f0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80037f2:	23a0      	movs	r3, #160	; 0xa0
 80037f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	2ba0      	cmp	r3, #160	; 0xa0
 80037fa:	d00a      	beq.n	8003812 <xTaskCreateStatic+0x66>
	__asm volatile
 80037fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003800:	f383 8811 	msr	BASEPRI, r3
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	61bb      	str	r3, [r7, #24]
}
 800380e:	bf00      	nop
 8003810:	e7fe      	b.n	8003810 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003812:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003816:	2b00      	cmp	r3, #0
 8003818:	d01e      	beq.n	8003858 <xTaskCreateStatic+0xac>
 800381a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800381c:	2b00      	cmp	r3, #0
 800381e:	d01b      	beq.n	8003858 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003822:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003826:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003828:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	2202      	movs	r2, #2
 800382e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003832:	2300      	movs	r3, #0
 8003834:	9303      	str	r3, [sp, #12]
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	9302      	str	r3, [sp, #8]
 800383a:	f107 0314 	add.w	r3, r7, #20
 800383e:	9301      	str	r3, [sp, #4]
 8003840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	68b9      	ldr	r1, [r7, #8]
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 f850 	bl	80038f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003850:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003852:	f000 f8eb 	bl	8003a2c <prvAddNewTaskToReadyList>
 8003856:	e001      	b.n	800385c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003858:	2300      	movs	r3, #0
 800385a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800385c:	697b      	ldr	r3, [r7, #20]
	}
 800385e:	4618      	mov	r0, r3
 8003860:	3728      	adds	r7, #40	; 0x28
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003866:	b580      	push	{r7, lr}
 8003868:	b08c      	sub	sp, #48	; 0x30
 800386a:	af04      	add	r7, sp, #16
 800386c:	60f8      	str	r0, [r7, #12]
 800386e:	60b9      	str	r1, [r7, #8]
 8003870:	603b      	str	r3, [r7, #0]
 8003872:	4613      	mov	r3, r2
 8003874:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003876:	88fb      	ldrh	r3, [r7, #6]
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4618      	mov	r0, r3
 800387c:	f001 f9f4 	bl	8004c68 <pvPortMalloc>
 8003880:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00e      	beq.n	80038a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003888:	20a0      	movs	r0, #160	; 0xa0
 800388a:	f001 f9ed 	bl	8004c68 <pvPortMalloc>
 800388e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	631a      	str	r2, [r3, #48]	; 0x30
 800389c:	e005      	b.n	80038aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800389e:	6978      	ldr	r0, [r7, #20]
 80038a0:	f001 faae 	bl	8004e00 <vPortFree>
 80038a4:	e001      	b.n	80038aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80038a6:	2300      	movs	r3, #0
 80038a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d017      	beq.n	80038e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80038b8:	88fa      	ldrh	r2, [r7, #6]
 80038ba:	2300      	movs	r3, #0
 80038bc:	9303      	str	r3, [sp, #12]
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	9302      	str	r3, [sp, #8]
 80038c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c4:	9301      	str	r3, [sp, #4]
 80038c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	68b9      	ldr	r1, [r7, #8]
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f000 f80e 	bl	80038f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038d4:	69f8      	ldr	r0, [r7, #28]
 80038d6:	f000 f8a9 	bl	8003a2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80038da:	2301      	movs	r3, #1
 80038dc:	61bb      	str	r3, [r7, #24]
 80038de:	e002      	b.n	80038e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80038e0:	f04f 33ff 	mov.w	r3, #4294967295
 80038e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80038e6:	69bb      	ldr	r3, [r7, #24]
	}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3720      	adds	r7, #32
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b088      	sub	sp, #32
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80038fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003908:	3b01      	subs	r3, #1
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	f023 0307 	bic.w	r3, r3, #7
 8003916:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	617b      	str	r3, [r7, #20]
}
 8003934:	bf00      	nop
 8003936:	e7fe      	b.n	8003936 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d01f      	beq.n	800397e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800393e:	2300      	movs	r3, #0
 8003940:	61fb      	str	r3, [r7, #28]
 8003942:	e012      	b.n	800396a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	4413      	add	r3, r2
 800394a:	7819      	ldrb	r1, [r3, #0]
 800394c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	4413      	add	r3, r2
 8003952:	3334      	adds	r3, #52	; 0x34
 8003954:	460a      	mov	r2, r1
 8003956:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	4413      	add	r3, r2
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d006      	beq.n	8003972 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	3301      	adds	r3, #1
 8003968:	61fb      	str	r3, [r7, #28]
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	2b0f      	cmp	r3, #15
 800396e:	d9e9      	bls.n	8003944 <prvInitialiseNewTask+0x54>
 8003970:	e000      	b.n	8003974 <prvInitialiseNewTask+0x84>
			{
				break;
 8003972:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800397c:	e003      	b.n	8003986 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800397e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003988:	2b06      	cmp	r3, #6
 800398a:	d901      	bls.n	8003990 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800398c:	2306      	movs	r3, #6
 800398e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003992:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003994:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003998:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800399a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800399c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399e:	2200      	movs	r2, #0
 80039a0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80039a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a4:	3304      	adds	r3, #4
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7ff f8f2 	bl	8002b90 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80039ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ae:	3318      	adds	r3, #24
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff f8ed 	bl	8002b90 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80039b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039be:	f1c3 0207 	rsb	r2, r3, #7
 80039c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80039c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80039cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ce:	2200      	movs	r2, #0
 80039d0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80039d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80039dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039de:	334c      	adds	r3, #76	; 0x4c
 80039e0:	224c      	movs	r2, #76	; 0x4c
 80039e2:	2100      	movs	r1, #0
 80039e4:	4618      	mov	r0, r3
 80039e6:	f001 fd1f 	bl	8005428 <memset>
 80039ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ec:	4a0c      	ldr	r2, [pc, #48]	; (8003a20 <prvInitialiseNewTask+0x130>)
 80039ee:	651a      	str	r2, [r3, #80]	; 0x50
 80039f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f2:	4a0c      	ldr	r2, [pc, #48]	; (8003a24 <prvInitialiseNewTask+0x134>)
 80039f4:	655a      	str	r2, [r3, #84]	; 0x54
 80039f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f8:	4a0b      	ldr	r2, [pc, #44]	; (8003a28 <prvInitialiseNewTask+0x138>)
 80039fa:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	68f9      	ldr	r1, [r7, #12]
 8003a00:	69b8      	ldr	r0, [r7, #24]
 8003a02:	f000 fee5 	bl	80047d0 <pxPortInitialiseStack>
 8003a06:	4602      	mov	r2, r0
 8003a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d002      	beq.n	8003a18 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a16:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a18:	bf00      	nop
 8003a1a:	3720      	adds	r7, #32
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	20004120 	.word	0x20004120
 8003a24:	20004188 	.word	0x20004188
 8003a28:	200041f0 	.word	0x200041f0

08003a2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a34:	f000 fff6 	bl	8004a24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a38:	4b2a      	ldr	r3, [pc, #168]	; (8003ae4 <prvAddNewTaskToReadyList+0xb8>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	4a29      	ldr	r2, [pc, #164]	; (8003ae4 <prvAddNewTaskToReadyList+0xb8>)
 8003a40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a42:	4b29      	ldr	r3, [pc, #164]	; (8003ae8 <prvAddNewTaskToReadyList+0xbc>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d109      	bne.n	8003a5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a4a:	4a27      	ldr	r2, [pc, #156]	; (8003ae8 <prvAddNewTaskToReadyList+0xbc>)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a50:	4b24      	ldr	r3, [pc, #144]	; (8003ae4 <prvAddNewTaskToReadyList+0xb8>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d110      	bne.n	8003a7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a58:	f000 fbd6 	bl	8004208 <prvInitialiseTaskLists>
 8003a5c:	e00d      	b.n	8003a7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a5e:	4b23      	ldr	r3, [pc, #140]	; (8003aec <prvAddNewTaskToReadyList+0xc0>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d109      	bne.n	8003a7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a66:	4b20      	ldr	r3, [pc, #128]	; (8003ae8 <prvAddNewTaskToReadyList+0xbc>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d802      	bhi.n	8003a7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a74:	4a1c      	ldr	r2, [pc, #112]	; (8003ae8 <prvAddNewTaskToReadyList+0xbc>)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a7a:	4b1d      	ldr	r3, [pc, #116]	; (8003af0 <prvAddNewTaskToReadyList+0xc4>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	4a1b      	ldr	r2, [pc, #108]	; (8003af0 <prvAddNewTaskToReadyList+0xc4>)
 8003a82:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	2201      	movs	r2, #1
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	4b19      	ldr	r3, [pc, #100]	; (8003af4 <prvAddNewTaskToReadyList+0xc8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	4a18      	ldr	r2, [pc, #96]	; (8003af4 <prvAddNewTaskToReadyList+0xc8>)
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4a15      	ldr	r2, [pc, #84]	; (8003af8 <prvAddNewTaskToReadyList+0xcc>)
 8003aa4:	441a      	add	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4610      	mov	r0, r2
 8003aae:	f7ff f87c 	bl	8002baa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ab2:	f000 ffe7 	bl	8004a84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ab6:	4b0d      	ldr	r3, [pc, #52]	; (8003aec <prvAddNewTaskToReadyList+0xc0>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00e      	beq.n	8003adc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003abe:	4b0a      	ldr	r3, [pc, #40]	; (8003ae8 <prvAddNewTaskToReadyList+0xbc>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d207      	bcs.n	8003adc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003acc:	4b0b      	ldr	r3, [pc, #44]	; (8003afc <prvAddNewTaskToReadyList+0xd0>)
 8003ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	f3bf 8f4f 	dsb	sy
 8003ad8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003adc:	bf00      	nop
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	200004cc 	.word	0x200004cc
 8003ae8:	200003cc 	.word	0x200003cc
 8003aec:	200004d8 	.word	0x200004d8
 8003af0:	200004e8 	.word	0x200004e8
 8003af4:	200004d4 	.word	0x200004d4
 8003af8:	200003d0 	.word	0x200003d0
 8003afc:	e000ed04 	.word	0xe000ed04

08003b00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d017      	beq.n	8003b42 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b12:	4b13      	ldr	r3, [pc, #76]	; (8003b60 <vTaskDelay+0x60>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00a      	beq.n	8003b30 <vTaskDelay+0x30>
	__asm volatile
 8003b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1e:	f383 8811 	msr	BASEPRI, r3
 8003b22:	f3bf 8f6f 	isb	sy
 8003b26:	f3bf 8f4f 	dsb	sy
 8003b2a:	60bb      	str	r3, [r7, #8]
}
 8003b2c:	bf00      	nop
 8003b2e:	e7fe      	b.n	8003b2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b30:	f000 f884 	bl	8003c3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b34:	2100      	movs	r1, #0
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 fde4 	bl	8004704 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b3c:	f000 f88c 	bl	8003c58 <xTaskResumeAll>
 8003b40:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d107      	bne.n	8003b58 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003b48:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <vTaskDelay+0x64>)
 8003b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	f3bf 8f4f 	dsb	sy
 8003b54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b58:	bf00      	nop
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	200004f4 	.word	0x200004f4
 8003b64:	e000ed04 	.word	0xe000ed04

08003b68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b08a      	sub	sp, #40	; 0x28
 8003b6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b76:	463a      	mov	r2, r7
 8003b78:	1d39      	adds	r1, r7, #4
 8003b7a:	f107 0308 	add.w	r3, r7, #8
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fc fcac 	bl	80004dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b84:	6839      	ldr	r1, [r7, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	9202      	str	r2, [sp, #8]
 8003b8c:	9301      	str	r3, [sp, #4]
 8003b8e:	2300      	movs	r3, #0
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	2300      	movs	r3, #0
 8003b94:	460a      	mov	r2, r1
 8003b96:	4921      	ldr	r1, [pc, #132]	; (8003c1c <vTaskStartScheduler+0xb4>)
 8003b98:	4821      	ldr	r0, [pc, #132]	; (8003c20 <vTaskStartScheduler+0xb8>)
 8003b9a:	f7ff fe07 	bl	80037ac <xTaskCreateStatic>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	4a20      	ldr	r2, [pc, #128]	; (8003c24 <vTaskStartScheduler+0xbc>)
 8003ba2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ba4:	4b1f      	ldr	r3, [pc, #124]	; (8003c24 <vTaskStartScheduler+0xbc>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003bac:	2301      	movs	r3, #1
 8003bae:	617b      	str	r3, [r7, #20]
 8003bb0:	e001      	b.n	8003bb6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d11b      	bne.n	8003bf4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc0:	f383 8811 	msr	BASEPRI, r3
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	613b      	str	r3, [r7, #16]
}
 8003bce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003bd0:	4b15      	ldr	r3, [pc, #84]	; (8003c28 <vTaskStartScheduler+0xc0>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	334c      	adds	r3, #76	; 0x4c
 8003bd6:	4a15      	ldr	r2, [pc, #84]	; (8003c2c <vTaskStartScheduler+0xc4>)
 8003bd8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003bda:	4b15      	ldr	r3, [pc, #84]	; (8003c30 <vTaskStartScheduler+0xc8>)
 8003bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8003be0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003be2:	4b14      	ldr	r3, [pc, #80]	; (8003c34 <vTaskStartScheduler+0xcc>)
 8003be4:	2201      	movs	r2, #1
 8003be6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003be8:	4b13      	ldr	r3, [pc, #76]	; (8003c38 <vTaskStartScheduler+0xd0>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003bee:	f000 fe77 	bl	80048e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003bf2:	e00e      	b.n	8003c12 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bfa:	d10a      	bne.n	8003c12 <vTaskStartScheduler+0xaa>
	__asm volatile
 8003bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c00:	f383 8811 	msr	BASEPRI, r3
 8003c04:	f3bf 8f6f 	isb	sy
 8003c08:	f3bf 8f4f 	dsb	sy
 8003c0c:	60fb      	str	r3, [r7, #12]
}
 8003c0e:	bf00      	nop
 8003c10:	e7fe      	b.n	8003c10 <vTaskStartScheduler+0xa8>
}
 8003c12:	bf00      	nop
 8003c14:	3718      	adds	r7, #24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	08005bfc 	.word	0x08005bfc
 8003c20:	080041d9 	.word	0x080041d9
 8003c24:	200004f0 	.word	0x200004f0
 8003c28:	200003cc 	.word	0x200003cc
 8003c2c:	20000068 	.word	0x20000068
 8003c30:	200004ec 	.word	0x200004ec
 8003c34:	200004d8 	.word	0x200004d8
 8003c38:	200004d0 	.word	0x200004d0

08003c3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003c40:	4b04      	ldr	r3, [pc, #16]	; (8003c54 <vTaskSuspendAll+0x18>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	3301      	adds	r3, #1
 8003c46:	4a03      	ldr	r2, [pc, #12]	; (8003c54 <vTaskSuspendAll+0x18>)
 8003c48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003c4a:	bf00      	nop
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	200004f4 	.word	0x200004f4

08003c58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c62:	2300      	movs	r3, #0
 8003c64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c66:	4b41      	ldr	r3, [pc, #260]	; (8003d6c <xTaskResumeAll+0x114>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10a      	bne.n	8003c84 <xTaskResumeAll+0x2c>
	__asm volatile
 8003c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c72:	f383 8811 	msr	BASEPRI, r3
 8003c76:	f3bf 8f6f 	isb	sy
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	603b      	str	r3, [r7, #0]
}
 8003c80:	bf00      	nop
 8003c82:	e7fe      	b.n	8003c82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c84:	f000 fece 	bl	8004a24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c88:	4b38      	ldr	r3, [pc, #224]	; (8003d6c <xTaskResumeAll+0x114>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	4a37      	ldr	r2, [pc, #220]	; (8003d6c <xTaskResumeAll+0x114>)
 8003c90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c92:	4b36      	ldr	r3, [pc, #216]	; (8003d6c <xTaskResumeAll+0x114>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d161      	bne.n	8003d5e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c9a:	4b35      	ldr	r3, [pc, #212]	; (8003d70 <xTaskResumeAll+0x118>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d05d      	beq.n	8003d5e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ca2:	e02e      	b.n	8003d02 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ca4:	4b33      	ldr	r3, [pc, #204]	; (8003d74 <xTaskResumeAll+0x11c>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	3318      	adds	r3, #24
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7fe ffd7 	bl	8002c64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	3304      	adds	r3, #4
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fe ffd2 	bl	8002c64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	409a      	lsls	r2, r3
 8003cc8:	4b2b      	ldr	r3, [pc, #172]	; (8003d78 <xTaskResumeAll+0x120>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	4a2a      	ldr	r2, [pc, #168]	; (8003d78 <xTaskResumeAll+0x120>)
 8003cd0:	6013      	str	r3, [r2, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4a27      	ldr	r2, [pc, #156]	; (8003d7c <xTaskResumeAll+0x124>)
 8003ce0:	441a      	add	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	4610      	mov	r0, r2
 8003cea:	f7fe ff5e 	bl	8002baa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf2:	4b23      	ldr	r3, [pc, #140]	; (8003d80 <xTaskResumeAll+0x128>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d302      	bcc.n	8003d02 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003cfc:	4b21      	ldr	r3, [pc, #132]	; (8003d84 <xTaskResumeAll+0x12c>)
 8003cfe:	2201      	movs	r2, #1
 8003d00:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d02:	4b1c      	ldr	r3, [pc, #112]	; (8003d74 <xTaskResumeAll+0x11c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1cc      	bne.n	8003ca4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d10:	f000 fb1c 	bl	800434c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003d14:	4b1c      	ldr	r3, [pc, #112]	; (8003d88 <xTaskResumeAll+0x130>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d010      	beq.n	8003d42 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d20:	f000 f836 	bl	8003d90 <xTaskIncrementTick>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003d2a:	4b16      	ldr	r3, [pc, #88]	; (8003d84 <xTaskResumeAll+0x12c>)
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3b01      	subs	r3, #1
 8003d34:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1f1      	bne.n	8003d20 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003d3c:	4b12      	ldr	r3, [pc, #72]	; (8003d88 <xTaskResumeAll+0x130>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d42:	4b10      	ldr	r3, [pc, #64]	; (8003d84 <xTaskResumeAll+0x12c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d009      	beq.n	8003d5e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d4e:	4b0f      	ldr	r3, [pc, #60]	; (8003d8c <xTaskResumeAll+0x134>)
 8003d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d5e:	f000 fe91 	bl	8004a84 <vPortExitCritical>

	return xAlreadyYielded;
 8003d62:	68bb      	ldr	r3, [r7, #8]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	200004f4 	.word	0x200004f4
 8003d70:	200004cc 	.word	0x200004cc
 8003d74:	2000048c 	.word	0x2000048c
 8003d78:	200004d4 	.word	0x200004d4
 8003d7c:	200003d0 	.word	0x200003d0
 8003d80:	200003cc 	.word	0x200003cc
 8003d84:	200004e0 	.word	0x200004e0
 8003d88:	200004dc 	.word	0x200004dc
 8003d8c:	e000ed04 	.word	0xe000ed04

08003d90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d96:	2300      	movs	r3, #0
 8003d98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d9a:	4b4e      	ldr	r3, [pc, #312]	; (8003ed4 <xTaskIncrementTick+0x144>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f040 808e 	bne.w	8003ec0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003da4:	4b4c      	ldr	r3, [pc, #304]	; (8003ed8 <xTaskIncrementTick+0x148>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	3301      	adds	r3, #1
 8003daa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003dac:	4a4a      	ldr	r2, [pc, #296]	; (8003ed8 <xTaskIncrementTick+0x148>)
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d120      	bne.n	8003dfa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003db8:	4b48      	ldr	r3, [pc, #288]	; (8003edc <xTaskIncrementTick+0x14c>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <xTaskIncrementTick+0x48>
	__asm volatile
 8003dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc6:	f383 8811 	msr	BASEPRI, r3
 8003dca:	f3bf 8f6f 	isb	sy
 8003dce:	f3bf 8f4f 	dsb	sy
 8003dd2:	603b      	str	r3, [r7, #0]
}
 8003dd4:	bf00      	nop
 8003dd6:	e7fe      	b.n	8003dd6 <xTaskIncrementTick+0x46>
 8003dd8:	4b40      	ldr	r3, [pc, #256]	; (8003edc <xTaskIncrementTick+0x14c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	60fb      	str	r3, [r7, #12]
 8003dde:	4b40      	ldr	r3, [pc, #256]	; (8003ee0 <xTaskIncrementTick+0x150>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a3e      	ldr	r2, [pc, #248]	; (8003edc <xTaskIncrementTick+0x14c>)
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	4a3e      	ldr	r2, [pc, #248]	; (8003ee0 <xTaskIncrementTick+0x150>)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6013      	str	r3, [r2, #0]
 8003dec:	4b3d      	ldr	r3, [pc, #244]	; (8003ee4 <xTaskIncrementTick+0x154>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	3301      	adds	r3, #1
 8003df2:	4a3c      	ldr	r2, [pc, #240]	; (8003ee4 <xTaskIncrementTick+0x154>)
 8003df4:	6013      	str	r3, [r2, #0]
 8003df6:	f000 faa9 	bl	800434c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003dfa:	4b3b      	ldr	r3, [pc, #236]	; (8003ee8 <xTaskIncrementTick+0x158>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d348      	bcc.n	8003e96 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e04:	4b35      	ldr	r3, [pc, #212]	; (8003edc <xTaskIncrementTick+0x14c>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d104      	bne.n	8003e18 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e0e:	4b36      	ldr	r3, [pc, #216]	; (8003ee8 <xTaskIncrementTick+0x158>)
 8003e10:	f04f 32ff 	mov.w	r2, #4294967295
 8003e14:	601a      	str	r2, [r3, #0]
					break;
 8003e16:	e03e      	b.n	8003e96 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e18:	4b30      	ldr	r3, [pc, #192]	; (8003edc <xTaskIncrementTick+0x14c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d203      	bcs.n	8003e38 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e30:	4a2d      	ldr	r2, [pc, #180]	; (8003ee8 <xTaskIncrementTick+0x158>)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003e36:	e02e      	b.n	8003e96 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7fe ff11 	bl	8002c64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d004      	beq.n	8003e54 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	3318      	adds	r3, #24
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fe ff08 	bl	8002c64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e58:	2201      	movs	r2, #1
 8003e5a:	409a      	lsls	r2, r3
 8003e5c:	4b23      	ldr	r3, [pc, #140]	; (8003eec <xTaskIncrementTick+0x15c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	4a22      	ldr	r2, [pc, #136]	; (8003eec <xTaskIncrementTick+0x15c>)
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4a1f      	ldr	r2, [pc, #124]	; (8003ef0 <xTaskIncrementTick+0x160>)
 8003e74:	441a      	add	r2, r3
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	3304      	adds	r3, #4
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4610      	mov	r0, r2
 8003e7e:	f7fe fe94 	bl	8002baa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e86:	4b1b      	ldr	r3, [pc, #108]	; (8003ef4 <xTaskIncrementTick+0x164>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d3b9      	bcc.n	8003e04 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003e90:	2301      	movs	r3, #1
 8003e92:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e94:	e7b6      	b.n	8003e04 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e96:	4b17      	ldr	r3, [pc, #92]	; (8003ef4 <xTaskIncrementTick+0x164>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e9c:	4914      	ldr	r1, [pc, #80]	; (8003ef0 <xTaskIncrementTick+0x160>)
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4413      	add	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d901      	bls.n	8003eb2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003eb2:	4b11      	ldr	r3, [pc, #68]	; (8003ef8 <xTaskIncrementTick+0x168>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d007      	beq.n	8003eca <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	617b      	str	r3, [r7, #20]
 8003ebe:	e004      	b.n	8003eca <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003ec0:	4b0e      	ldr	r3, [pc, #56]	; (8003efc <xTaskIncrementTick+0x16c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	4a0d      	ldr	r2, [pc, #52]	; (8003efc <xTaskIncrementTick+0x16c>)
 8003ec8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003eca:	697b      	ldr	r3, [r7, #20]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3718      	adds	r7, #24
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	200004f4 	.word	0x200004f4
 8003ed8:	200004d0 	.word	0x200004d0
 8003edc:	20000484 	.word	0x20000484
 8003ee0:	20000488 	.word	0x20000488
 8003ee4:	200004e4 	.word	0x200004e4
 8003ee8:	200004ec 	.word	0x200004ec
 8003eec:	200004d4 	.word	0x200004d4
 8003ef0:	200003d0 	.word	0x200003d0
 8003ef4:	200003cc 	.word	0x200003cc
 8003ef8:	200004e0 	.word	0x200004e0
 8003efc:	200004dc 	.word	0x200004dc

08003f00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f06:	4b29      	ldr	r3, [pc, #164]	; (8003fac <vTaskSwitchContext+0xac>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f0e:	4b28      	ldr	r3, [pc, #160]	; (8003fb0 <vTaskSwitchContext+0xb0>)
 8003f10:	2201      	movs	r2, #1
 8003f12:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f14:	e044      	b.n	8003fa0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003f16:	4b26      	ldr	r3, [pc, #152]	; (8003fb0 <vTaskSwitchContext+0xb0>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f1c:	4b25      	ldr	r3, [pc, #148]	; (8003fb4 <vTaskSwitchContext+0xb4>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	fab3 f383 	clz	r3, r3
 8003f28:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003f2a:	7afb      	ldrb	r3, [r7, #11]
 8003f2c:	f1c3 031f 	rsb	r3, r3, #31
 8003f30:	617b      	str	r3, [r7, #20]
 8003f32:	4921      	ldr	r1, [pc, #132]	; (8003fb8 <vTaskSwitchContext+0xb8>)
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	4613      	mov	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4413      	add	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	440b      	add	r3, r1
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10a      	bne.n	8003f5c <vTaskSwitchContext+0x5c>
	__asm volatile
 8003f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4a:	f383 8811 	msr	BASEPRI, r3
 8003f4e:	f3bf 8f6f 	isb	sy
 8003f52:	f3bf 8f4f 	dsb	sy
 8003f56:	607b      	str	r3, [r7, #4]
}
 8003f58:	bf00      	nop
 8003f5a:	e7fe      	b.n	8003f5a <vTaskSwitchContext+0x5a>
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4413      	add	r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4a14      	ldr	r2, [pc, #80]	; (8003fb8 <vTaskSwitchContext+0xb8>)
 8003f68:	4413      	add	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	605a      	str	r2, [r3, #4]
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	3308      	adds	r3, #8
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d104      	bne.n	8003f8c <vTaskSwitchContext+0x8c>
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	605a      	str	r2, [r3, #4]
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	4a0a      	ldr	r2, [pc, #40]	; (8003fbc <vTaskSwitchContext+0xbc>)
 8003f94:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f96:	4b09      	ldr	r3, [pc, #36]	; (8003fbc <vTaskSwitchContext+0xbc>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	334c      	adds	r3, #76	; 0x4c
 8003f9c:	4a08      	ldr	r2, [pc, #32]	; (8003fc0 <vTaskSwitchContext+0xc0>)
 8003f9e:	6013      	str	r3, [r2, #0]
}
 8003fa0:	bf00      	nop
 8003fa2:	371c      	adds	r7, #28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	200004f4 	.word	0x200004f4
 8003fb0:	200004e0 	.word	0x200004e0
 8003fb4:	200004d4 	.word	0x200004d4
 8003fb8:	200003d0 	.word	0x200003d0
 8003fbc:	200003cc 	.word	0x200003cc
 8003fc0:	20000068 	.word	0x20000068

08003fc4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d10a      	bne.n	8003fea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd8:	f383 8811 	msr	BASEPRI, r3
 8003fdc:	f3bf 8f6f 	isb	sy
 8003fe0:	f3bf 8f4f 	dsb	sy
 8003fe4:	60fb      	str	r3, [r7, #12]
}
 8003fe6:	bf00      	nop
 8003fe8:	e7fe      	b.n	8003fe8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fea:	4b07      	ldr	r3, [pc, #28]	; (8004008 <vTaskPlaceOnEventList+0x44>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	3318      	adds	r3, #24
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fe fdfd 	bl	8002bf2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	6838      	ldr	r0, [r7, #0]
 8003ffc:	f000 fb82 	bl	8004704 <prvAddCurrentTaskToDelayedList>
}
 8004000:	bf00      	nop
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	200003cc 	.word	0x200003cc

0800400c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10a      	bne.n	8004038 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004026:	f383 8811 	msr	BASEPRI, r3
 800402a:	f3bf 8f6f 	isb	sy
 800402e:	f3bf 8f4f 	dsb	sy
 8004032:	60fb      	str	r3, [r7, #12]
}
 8004034:	bf00      	nop
 8004036:	e7fe      	b.n	8004036 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	3318      	adds	r3, #24
 800403c:	4618      	mov	r0, r3
 800403e:	f7fe fe11 	bl	8002c64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004042:	4b1d      	ldr	r3, [pc, #116]	; (80040b8 <xTaskRemoveFromEventList+0xac>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d11c      	bne.n	8004084 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	3304      	adds	r3, #4
 800404e:	4618      	mov	r0, r3
 8004050:	f7fe fe08 	bl	8002c64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004058:	2201      	movs	r2, #1
 800405a:	409a      	lsls	r2, r3
 800405c:	4b17      	ldr	r3, [pc, #92]	; (80040bc <xTaskRemoveFromEventList+0xb0>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4313      	orrs	r3, r2
 8004062:	4a16      	ldr	r2, [pc, #88]	; (80040bc <xTaskRemoveFromEventList+0xb0>)
 8004064:	6013      	str	r3, [r2, #0]
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800406a:	4613      	mov	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4a13      	ldr	r2, [pc, #76]	; (80040c0 <xTaskRemoveFromEventList+0xb4>)
 8004074:	441a      	add	r2, r3
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	3304      	adds	r3, #4
 800407a:	4619      	mov	r1, r3
 800407c:	4610      	mov	r0, r2
 800407e:	f7fe fd94 	bl	8002baa <vListInsertEnd>
 8004082:	e005      	b.n	8004090 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	3318      	adds	r3, #24
 8004088:	4619      	mov	r1, r3
 800408a:	480e      	ldr	r0, [pc, #56]	; (80040c4 <xTaskRemoveFromEventList+0xb8>)
 800408c:	f7fe fd8d 	bl	8002baa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004094:	4b0c      	ldr	r3, [pc, #48]	; (80040c8 <xTaskRemoveFromEventList+0xbc>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409a:	429a      	cmp	r2, r3
 800409c:	d905      	bls.n	80040aa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800409e:	2301      	movs	r3, #1
 80040a0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80040a2:	4b0a      	ldr	r3, [pc, #40]	; (80040cc <xTaskRemoveFromEventList+0xc0>)
 80040a4:	2201      	movs	r2, #1
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	e001      	b.n	80040ae <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80040aa:	2300      	movs	r3, #0
 80040ac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80040ae:	697b      	ldr	r3, [r7, #20]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	200004f4 	.word	0x200004f4
 80040bc:	200004d4 	.word	0x200004d4
 80040c0:	200003d0 	.word	0x200003d0
 80040c4:	2000048c 	.word	0x2000048c
 80040c8:	200003cc 	.word	0x200003cc
 80040cc:	200004e0 	.word	0x200004e0

080040d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80040d8:	4b06      	ldr	r3, [pc, #24]	; (80040f4 <vTaskInternalSetTimeOutState+0x24>)
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80040e0:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <vTaskInternalSetTimeOutState+0x28>)
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	605a      	str	r2, [r3, #4]
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	200004e4 	.word	0x200004e4
 80040f8:	200004d0 	.word	0x200004d0

080040fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b088      	sub	sp, #32
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10a      	bne.n	8004122 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800410c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004110:	f383 8811 	msr	BASEPRI, r3
 8004114:	f3bf 8f6f 	isb	sy
 8004118:	f3bf 8f4f 	dsb	sy
 800411c:	613b      	str	r3, [r7, #16]
}
 800411e:	bf00      	nop
 8004120:	e7fe      	b.n	8004120 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10a      	bne.n	800413e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412c:	f383 8811 	msr	BASEPRI, r3
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	60fb      	str	r3, [r7, #12]
}
 800413a:	bf00      	nop
 800413c:	e7fe      	b.n	800413c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800413e:	f000 fc71 	bl	8004a24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004142:	4b1d      	ldr	r3, [pc, #116]	; (80041b8 <xTaskCheckForTimeOut+0xbc>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415a:	d102      	bne.n	8004162 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800415c:	2300      	movs	r3, #0
 800415e:	61fb      	str	r3, [r7, #28]
 8004160:	e023      	b.n	80041aa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	4b15      	ldr	r3, [pc, #84]	; (80041bc <xTaskCheckForTimeOut+0xc0>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	429a      	cmp	r2, r3
 800416c:	d007      	beq.n	800417e <xTaskCheckForTimeOut+0x82>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	429a      	cmp	r2, r3
 8004176:	d302      	bcc.n	800417e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004178:	2301      	movs	r3, #1
 800417a:	61fb      	str	r3, [r7, #28]
 800417c:	e015      	b.n	80041aa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	429a      	cmp	r2, r3
 8004186:	d20b      	bcs.n	80041a0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	1ad2      	subs	r2, r2, r3
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f7ff ff9b 	bl	80040d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800419a:	2300      	movs	r3, #0
 800419c:	61fb      	str	r3, [r7, #28]
 800419e:	e004      	b.n	80041aa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	2200      	movs	r2, #0
 80041a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80041a6:	2301      	movs	r3, #1
 80041a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80041aa:	f000 fc6b 	bl	8004a84 <vPortExitCritical>

	return xReturn;
 80041ae:	69fb      	ldr	r3, [r7, #28]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3720      	adds	r7, #32
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	200004d0 	.word	0x200004d0
 80041bc:	200004e4 	.word	0x200004e4

080041c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80041c4:	4b03      	ldr	r3, [pc, #12]	; (80041d4 <vTaskMissedYield+0x14>)
 80041c6:	2201      	movs	r2, #1
 80041c8:	601a      	str	r2, [r3, #0]
}
 80041ca:	bf00      	nop
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	200004e0 	.word	0x200004e0

080041d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80041e0:	f000 f852 	bl	8004288 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80041e4:	4b06      	ldr	r3, [pc, #24]	; (8004200 <prvIdleTask+0x28>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d9f9      	bls.n	80041e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80041ec:	4b05      	ldr	r3, [pc, #20]	; (8004204 <prvIdleTask+0x2c>)
 80041ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80041fc:	e7f0      	b.n	80041e0 <prvIdleTask+0x8>
 80041fe:	bf00      	nop
 8004200:	200003d0 	.word	0x200003d0
 8004204:	e000ed04 	.word	0xe000ed04

08004208 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800420e:	2300      	movs	r3, #0
 8004210:	607b      	str	r3, [r7, #4]
 8004212:	e00c      	b.n	800422e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	4613      	mov	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4a12      	ldr	r2, [pc, #72]	; (8004268 <prvInitialiseTaskLists+0x60>)
 8004220:	4413      	add	r3, r2
 8004222:	4618      	mov	r0, r3
 8004224:	f7fe fc94 	bl	8002b50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3301      	adds	r3, #1
 800422c:	607b      	str	r3, [r7, #4]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b06      	cmp	r3, #6
 8004232:	d9ef      	bls.n	8004214 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004234:	480d      	ldr	r0, [pc, #52]	; (800426c <prvInitialiseTaskLists+0x64>)
 8004236:	f7fe fc8b 	bl	8002b50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800423a:	480d      	ldr	r0, [pc, #52]	; (8004270 <prvInitialiseTaskLists+0x68>)
 800423c:	f7fe fc88 	bl	8002b50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004240:	480c      	ldr	r0, [pc, #48]	; (8004274 <prvInitialiseTaskLists+0x6c>)
 8004242:	f7fe fc85 	bl	8002b50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004246:	480c      	ldr	r0, [pc, #48]	; (8004278 <prvInitialiseTaskLists+0x70>)
 8004248:	f7fe fc82 	bl	8002b50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800424c:	480b      	ldr	r0, [pc, #44]	; (800427c <prvInitialiseTaskLists+0x74>)
 800424e:	f7fe fc7f 	bl	8002b50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004252:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <prvInitialiseTaskLists+0x78>)
 8004254:	4a05      	ldr	r2, [pc, #20]	; (800426c <prvInitialiseTaskLists+0x64>)
 8004256:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004258:	4b0a      	ldr	r3, [pc, #40]	; (8004284 <prvInitialiseTaskLists+0x7c>)
 800425a:	4a05      	ldr	r2, [pc, #20]	; (8004270 <prvInitialiseTaskLists+0x68>)
 800425c:	601a      	str	r2, [r3, #0]
}
 800425e:	bf00      	nop
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	200003d0 	.word	0x200003d0
 800426c:	2000045c 	.word	0x2000045c
 8004270:	20000470 	.word	0x20000470
 8004274:	2000048c 	.word	0x2000048c
 8004278:	200004a0 	.word	0x200004a0
 800427c:	200004b8 	.word	0x200004b8
 8004280:	20000484 	.word	0x20000484
 8004284:	20000488 	.word	0x20000488

08004288 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800428e:	e019      	b.n	80042c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004290:	f000 fbc8 	bl	8004a24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004294:	4b10      	ldr	r3, [pc, #64]	; (80042d8 <prvCheckTasksWaitingTermination+0x50>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3304      	adds	r3, #4
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fe fcdf 	bl	8002c64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80042a6:	4b0d      	ldr	r3, [pc, #52]	; (80042dc <prvCheckTasksWaitingTermination+0x54>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	4a0b      	ldr	r2, [pc, #44]	; (80042dc <prvCheckTasksWaitingTermination+0x54>)
 80042ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80042b0:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <prvCheckTasksWaitingTermination+0x58>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3b01      	subs	r3, #1
 80042b6:	4a0a      	ldr	r2, [pc, #40]	; (80042e0 <prvCheckTasksWaitingTermination+0x58>)
 80042b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80042ba:	f000 fbe3 	bl	8004a84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f810 	bl	80042e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042c4:	4b06      	ldr	r3, [pc, #24]	; (80042e0 <prvCheckTasksWaitingTermination+0x58>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1e1      	bne.n	8004290 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80042cc:	bf00      	nop
 80042ce:	bf00      	nop
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	200004a0 	.word	0x200004a0
 80042dc:	200004cc 	.word	0x200004cc
 80042e0:	200004b4 	.word	0x200004b4

080042e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	334c      	adds	r3, #76	; 0x4c
 80042f0:	4618      	mov	r0, r3
 80042f2:	f001 f8b1 	bl	8005458 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d108      	bne.n	8004312 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004304:	4618      	mov	r0, r3
 8004306:	f000 fd7b 	bl	8004e00 <vPortFree>
				vPortFree( pxTCB );
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 fd78 	bl	8004e00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004310:	e018      	b.n	8004344 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004318:	2b01      	cmp	r3, #1
 800431a:	d103      	bne.n	8004324 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 fd6f 	bl	8004e00 <vPortFree>
	}
 8004322:	e00f      	b.n	8004344 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800432a:	2b02      	cmp	r3, #2
 800432c:	d00a      	beq.n	8004344 <prvDeleteTCB+0x60>
	__asm volatile
 800432e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004332:	f383 8811 	msr	BASEPRI, r3
 8004336:	f3bf 8f6f 	isb	sy
 800433a:	f3bf 8f4f 	dsb	sy
 800433e:	60fb      	str	r3, [r7, #12]
}
 8004340:	bf00      	nop
 8004342:	e7fe      	b.n	8004342 <prvDeleteTCB+0x5e>
	}
 8004344:	bf00      	nop
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004352:	4b0c      	ldr	r3, [pc, #48]	; (8004384 <prvResetNextTaskUnblockTime+0x38>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d104      	bne.n	8004366 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800435c:	4b0a      	ldr	r3, [pc, #40]	; (8004388 <prvResetNextTaskUnblockTime+0x3c>)
 800435e:	f04f 32ff 	mov.w	r2, #4294967295
 8004362:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004364:	e008      	b.n	8004378 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004366:	4b07      	ldr	r3, [pc, #28]	; (8004384 <prvResetNextTaskUnblockTime+0x38>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	4a04      	ldr	r2, [pc, #16]	; (8004388 <prvResetNextTaskUnblockTime+0x3c>)
 8004376:	6013      	str	r3, [r2, #0]
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr
 8004384:	20000484 	.word	0x20000484
 8004388:	200004ec 	.word	0x200004ec

0800438c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004392:	4b0b      	ldr	r3, [pc, #44]	; (80043c0 <xTaskGetSchedulerState+0x34>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d102      	bne.n	80043a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800439a:	2301      	movs	r3, #1
 800439c:	607b      	str	r3, [r7, #4]
 800439e:	e008      	b.n	80043b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043a0:	4b08      	ldr	r3, [pc, #32]	; (80043c4 <xTaskGetSchedulerState+0x38>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d102      	bne.n	80043ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80043a8:	2302      	movs	r3, #2
 80043aa:	607b      	str	r3, [r7, #4]
 80043ac:	e001      	b.n	80043b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80043ae:	2300      	movs	r3, #0
 80043b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80043b2:	687b      	ldr	r3, [r7, #4]
	}
 80043b4:	4618      	mov	r0, r3
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	200004d8 	.word	0x200004d8
 80043c4:	200004f4 	.word	0x200004f4

080043c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80043d4:	2300      	movs	r3, #0
 80043d6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d05e      	beq.n	800449c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e2:	4b31      	ldr	r3, [pc, #196]	; (80044a8 <xTaskPriorityInherit+0xe0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d24e      	bcs.n	800448a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	db06      	blt.n	8004402 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043f4:	4b2c      	ldr	r3, [pc, #176]	; (80044a8 <xTaskPriorityInherit+0xe0>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fa:	f1c3 0207 	rsb	r2, r3, #7
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	6959      	ldr	r1, [r3, #20]
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440a:	4613      	mov	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4413      	add	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4a26      	ldr	r2, [pc, #152]	; (80044ac <xTaskPriorityInherit+0xe4>)
 8004414:	4413      	add	r3, r2
 8004416:	4299      	cmp	r1, r3
 8004418:	d12f      	bne.n	800447a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	3304      	adds	r3, #4
 800441e:	4618      	mov	r0, r3
 8004420:	f7fe fc20 	bl	8002c64 <uxListRemove>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10a      	bne.n	8004440 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442e:	2201      	movs	r2, #1
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	43da      	mvns	r2, r3
 8004436:	4b1e      	ldr	r3, [pc, #120]	; (80044b0 <xTaskPriorityInherit+0xe8>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4013      	ands	r3, r2
 800443c:	4a1c      	ldr	r2, [pc, #112]	; (80044b0 <xTaskPriorityInherit+0xe8>)
 800443e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004440:	4b19      	ldr	r3, [pc, #100]	; (80044a8 <xTaskPriorityInherit+0xe0>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444e:	2201      	movs	r2, #1
 8004450:	409a      	lsls	r2, r3
 8004452:	4b17      	ldr	r3, [pc, #92]	; (80044b0 <xTaskPriorityInherit+0xe8>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4313      	orrs	r3, r2
 8004458:	4a15      	ldr	r2, [pc, #84]	; (80044b0 <xTaskPriorityInherit+0xe8>)
 800445a:	6013      	str	r3, [r2, #0]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004460:	4613      	mov	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4a10      	ldr	r2, [pc, #64]	; (80044ac <xTaskPriorityInherit+0xe4>)
 800446a:	441a      	add	r2, r3
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	3304      	adds	r3, #4
 8004470:	4619      	mov	r1, r3
 8004472:	4610      	mov	r0, r2
 8004474:	f7fe fb99 	bl	8002baa <vListInsertEnd>
 8004478:	e004      	b.n	8004484 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800447a:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <xTaskPriorityInherit+0xe0>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004484:	2301      	movs	r3, #1
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	e008      	b.n	800449c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800448e:	4b06      	ldr	r3, [pc, #24]	; (80044a8 <xTaskPriorityInherit+0xe0>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004494:	429a      	cmp	r2, r3
 8004496:	d201      	bcs.n	800449c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004498:	2301      	movs	r3, #1
 800449a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800449c:	68fb      	ldr	r3, [r7, #12]
	}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	200003cc 	.word	0x200003cc
 80044ac:	200003d0 	.word	0x200003d0
 80044b0:	200004d4 	.word	0x200004d4

080044b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80044c0:	2300      	movs	r3, #0
 80044c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d06e      	beq.n	80045a8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80044ca:	4b3a      	ldr	r3, [pc, #232]	; (80045b4 <xTaskPriorityDisinherit+0x100>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d00a      	beq.n	80044ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80044d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d8:	f383 8811 	msr	BASEPRI, r3
 80044dc:	f3bf 8f6f 	isb	sy
 80044e0:	f3bf 8f4f 	dsb	sy
 80044e4:	60fb      	str	r3, [r7, #12]
}
 80044e6:	bf00      	nop
 80044e8:	e7fe      	b.n	80044e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10a      	bne.n	8004508 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80044f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f6:	f383 8811 	msr	BASEPRI, r3
 80044fa:	f3bf 8f6f 	isb	sy
 80044fe:	f3bf 8f4f 	dsb	sy
 8004502:	60bb      	str	r3, [r7, #8]
}
 8004504:	bf00      	nop
 8004506:	e7fe      	b.n	8004506 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800450c:	1e5a      	subs	r2, r3, #1
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451a:	429a      	cmp	r2, r3
 800451c:	d044      	beq.n	80045a8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004522:	2b00      	cmp	r3, #0
 8004524:	d140      	bne.n	80045a8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	3304      	adds	r3, #4
 800452a:	4618      	mov	r0, r3
 800452c:	f7fe fb9a 	bl	8002c64 <uxListRemove>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d115      	bne.n	8004562 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800453a:	491f      	ldr	r1, [pc, #124]	; (80045b8 <xTaskPriorityDisinherit+0x104>)
 800453c:	4613      	mov	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4413      	add	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	440b      	add	r3, r1
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10a      	bne.n	8004562 <xTaskPriorityDisinherit+0xae>
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	2201      	movs	r2, #1
 8004552:	fa02 f303 	lsl.w	r3, r2, r3
 8004556:	43da      	mvns	r2, r3
 8004558:	4b18      	ldr	r3, [pc, #96]	; (80045bc <xTaskPriorityDisinherit+0x108>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4013      	ands	r3, r2
 800455e:	4a17      	ldr	r2, [pc, #92]	; (80045bc <xTaskPriorityDisinherit+0x108>)
 8004560:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456e:	f1c3 0207 	rsb	r2, r3, #7
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457a:	2201      	movs	r2, #1
 800457c:	409a      	lsls	r2, r3
 800457e:	4b0f      	ldr	r3, [pc, #60]	; (80045bc <xTaskPriorityDisinherit+0x108>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4313      	orrs	r3, r2
 8004584:	4a0d      	ldr	r2, [pc, #52]	; (80045bc <xTaskPriorityDisinherit+0x108>)
 8004586:	6013      	str	r3, [r2, #0]
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800458c:	4613      	mov	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4a08      	ldr	r2, [pc, #32]	; (80045b8 <xTaskPriorityDisinherit+0x104>)
 8004596:	441a      	add	r2, r3
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	3304      	adds	r3, #4
 800459c:	4619      	mov	r1, r3
 800459e:	4610      	mov	r0, r2
 80045a0:	f7fe fb03 	bl	8002baa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80045a4:	2301      	movs	r3, #1
 80045a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80045a8:	697b      	ldr	r3, [r7, #20]
	}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3718      	adds	r7, #24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	200003cc 	.word	0x200003cc
 80045b8:	200003d0 	.word	0x200003d0
 80045bc:	200004d4 	.word	0x200004d4

080045c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b088      	sub	sp, #32
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80045ce:	2301      	movs	r3, #1
 80045d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d077      	beq.n	80046c8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10a      	bne.n	80045f6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80045e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e4:	f383 8811 	msr	BASEPRI, r3
 80045e8:	f3bf 8f6f 	isb	sy
 80045ec:	f3bf 8f4f 	dsb	sy
 80045f0:	60fb      	str	r3, [r7, #12]
}
 80045f2:	bf00      	nop
 80045f4:	e7fe      	b.n	80045f4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d902      	bls.n	8004606 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	61fb      	str	r3, [r7, #28]
 8004604:	e002      	b.n	800460c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004610:	69fa      	ldr	r2, [r7, #28]
 8004612:	429a      	cmp	r2, r3
 8004614:	d058      	beq.n	80046c8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	429a      	cmp	r2, r3
 800461e:	d153      	bne.n	80046c8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004620:	4b2b      	ldr	r3, [pc, #172]	; (80046d0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	429a      	cmp	r2, r3
 8004628:	d10a      	bne.n	8004640 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800462a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462e:	f383 8811 	msr	BASEPRI, r3
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	60bb      	str	r3, [r7, #8]
}
 800463c:	bf00      	nop
 800463e:	e7fe      	b.n	800463e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004644:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	69fa      	ldr	r2, [r7, #28]
 800464a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	2b00      	cmp	r3, #0
 8004652:	db04      	blt.n	800465e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	f1c3 0207 	rsb	r2, r3, #7
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	6959      	ldr	r1, [r3, #20]
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	4613      	mov	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4a19      	ldr	r2, [pc, #100]	; (80046d4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800466e:	4413      	add	r3, r2
 8004670:	4299      	cmp	r1, r3
 8004672:	d129      	bne.n	80046c8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	3304      	adds	r3, #4
 8004678:	4618      	mov	r0, r3
 800467a:	f7fe faf3 	bl	8002c64 <uxListRemove>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10a      	bne.n	800469a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004688:	2201      	movs	r2, #1
 800468a:	fa02 f303 	lsl.w	r3, r2, r3
 800468e:	43da      	mvns	r2, r3
 8004690:	4b11      	ldr	r3, [pc, #68]	; (80046d8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4013      	ands	r3, r2
 8004696:	4a10      	ldr	r2, [pc, #64]	; (80046d8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004698:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469e:	2201      	movs	r2, #1
 80046a0:	409a      	lsls	r2, r3
 80046a2:	4b0d      	ldr	r3, [pc, #52]	; (80046d8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	4a0b      	ldr	r2, [pc, #44]	; (80046d8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80046aa:	6013      	str	r3, [r2, #0]
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b0:	4613      	mov	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4a06      	ldr	r2, [pc, #24]	; (80046d4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80046ba:	441a      	add	r2, r3
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	3304      	adds	r3, #4
 80046c0:	4619      	mov	r1, r3
 80046c2:	4610      	mov	r0, r2
 80046c4:	f7fe fa71 	bl	8002baa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80046c8:	bf00      	nop
 80046ca:	3720      	adds	r7, #32
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	200003cc 	.word	0x200003cc
 80046d4:	200003d0 	.word	0x200003d0
 80046d8:	200004d4 	.word	0x200004d4

080046dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80046e0:	4b07      	ldr	r3, [pc, #28]	; (8004700 <pvTaskIncrementMutexHeldCount+0x24>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d004      	beq.n	80046f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80046e8:	4b05      	ldr	r3, [pc, #20]	; (8004700 <pvTaskIncrementMutexHeldCount+0x24>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046ee:	3201      	adds	r2, #1
 80046f0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80046f2:	4b03      	ldr	r3, [pc, #12]	; (8004700 <pvTaskIncrementMutexHeldCount+0x24>)
 80046f4:	681b      	ldr	r3, [r3, #0]
	}
 80046f6:	4618      	mov	r0, r3
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	200003cc 	.word	0x200003cc

08004704 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800470e:	4b29      	ldr	r3, [pc, #164]	; (80047b4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004714:	4b28      	ldr	r3, [pc, #160]	; (80047b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	3304      	adds	r3, #4
 800471a:	4618      	mov	r0, r3
 800471c:	f7fe faa2 	bl	8002c64 <uxListRemove>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10b      	bne.n	800473e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004726:	4b24      	ldr	r3, [pc, #144]	; (80047b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472c:	2201      	movs	r2, #1
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	43da      	mvns	r2, r3
 8004734:	4b21      	ldr	r3, [pc, #132]	; (80047bc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4013      	ands	r3, r2
 800473a:	4a20      	ldr	r2, [pc, #128]	; (80047bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800473c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004744:	d10a      	bne.n	800475c <prvAddCurrentTaskToDelayedList+0x58>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d007      	beq.n	800475c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800474c:	4b1a      	ldr	r3, [pc, #104]	; (80047b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	3304      	adds	r3, #4
 8004752:	4619      	mov	r1, r3
 8004754:	481a      	ldr	r0, [pc, #104]	; (80047c0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004756:	f7fe fa28 	bl	8002baa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800475a:	e026      	b.n	80047aa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4413      	add	r3, r2
 8004762:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004764:	4b14      	ldr	r3, [pc, #80]	; (80047b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	429a      	cmp	r2, r3
 8004772:	d209      	bcs.n	8004788 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004774:	4b13      	ldr	r3, [pc, #76]	; (80047c4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	4b0f      	ldr	r3, [pc, #60]	; (80047b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	3304      	adds	r3, #4
 800477e:	4619      	mov	r1, r3
 8004780:	4610      	mov	r0, r2
 8004782:	f7fe fa36 	bl	8002bf2 <vListInsert>
}
 8004786:	e010      	b.n	80047aa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004788:	4b0f      	ldr	r3, [pc, #60]	; (80047c8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	4b0a      	ldr	r3, [pc, #40]	; (80047b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	3304      	adds	r3, #4
 8004792:	4619      	mov	r1, r3
 8004794:	4610      	mov	r0, r2
 8004796:	f7fe fa2c 	bl	8002bf2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800479a:	4b0c      	ldr	r3, [pc, #48]	; (80047cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d202      	bcs.n	80047aa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80047a4:	4a09      	ldr	r2, [pc, #36]	; (80047cc <prvAddCurrentTaskToDelayedList+0xc8>)
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	6013      	str	r3, [r2, #0]
}
 80047aa:	bf00      	nop
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	200004d0 	.word	0x200004d0
 80047b8:	200003cc 	.word	0x200003cc
 80047bc:	200004d4 	.word	0x200004d4
 80047c0:	200004b8 	.word	0x200004b8
 80047c4:	20000488 	.word	0x20000488
 80047c8:	20000484 	.word	0x20000484
 80047cc:	200004ec 	.word	0x200004ec

080047d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	3b04      	subs	r3, #4
 80047e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80047e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	3b04      	subs	r3, #4
 80047ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	f023 0201 	bic.w	r2, r3, #1
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	3b04      	subs	r3, #4
 80047fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004800:	4a0c      	ldr	r2, [pc, #48]	; (8004834 <pxPortInitialiseStack+0x64>)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	3b14      	subs	r3, #20
 800480a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	3b04      	subs	r3, #4
 8004816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f06f 0202 	mvn.w	r2, #2
 800481e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	3b20      	subs	r3, #32
 8004824:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004826:	68fb      	ldr	r3, [r7, #12]
}
 8004828:	4618      	mov	r0, r3
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	08004839 	.word	0x08004839

08004838 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800483e:	2300      	movs	r3, #0
 8004840:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004842:	4b12      	ldr	r3, [pc, #72]	; (800488c <prvTaskExitError+0x54>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484a:	d00a      	beq.n	8004862 <prvTaskExitError+0x2a>
	__asm volatile
 800484c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004850:	f383 8811 	msr	BASEPRI, r3
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	f3bf 8f4f 	dsb	sy
 800485c:	60fb      	str	r3, [r7, #12]
}
 800485e:	bf00      	nop
 8004860:	e7fe      	b.n	8004860 <prvTaskExitError+0x28>
	__asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	60bb      	str	r3, [r7, #8]
}
 8004874:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004876:	bf00      	nop
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0fc      	beq.n	8004878 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800487e:	bf00      	nop
 8004880:	bf00      	nop
 8004882:	3714      	adds	r7, #20
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	2000000c 	.word	0x2000000c

08004890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004890:	4b07      	ldr	r3, [pc, #28]	; (80048b0 <pxCurrentTCBConst2>)
 8004892:	6819      	ldr	r1, [r3, #0]
 8004894:	6808      	ldr	r0, [r1, #0]
 8004896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800489a:	f380 8809 	msr	PSP, r0
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f04f 0000 	mov.w	r0, #0
 80048a6:	f380 8811 	msr	BASEPRI, r0
 80048aa:	4770      	bx	lr
 80048ac:	f3af 8000 	nop.w

080048b0 <pxCurrentTCBConst2>:
 80048b0:	200003cc 	.word	0x200003cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80048b4:	bf00      	nop
 80048b6:	bf00      	nop

080048b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80048b8:	4808      	ldr	r0, [pc, #32]	; (80048dc <prvPortStartFirstTask+0x24>)
 80048ba:	6800      	ldr	r0, [r0, #0]
 80048bc:	6800      	ldr	r0, [r0, #0]
 80048be:	f380 8808 	msr	MSP, r0
 80048c2:	f04f 0000 	mov.w	r0, #0
 80048c6:	f380 8814 	msr	CONTROL, r0
 80048ca:	b662      	cpsie	i
 80048cc:	b661      	cpsie	f
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	f3bf 8f6f 	isb	sy
 80048d6:	df00      	svc	0
 80048d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80048da:	bf00      	nop
 80048dc:	e000ed08 	.word	0xe000ed08

080048e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80048e6:	4b46      	ldr	r3, [pc, #280]	; (8004a00 <xPortStartScheduler+0x120>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a46      	ldr	r2, [pc, #280]	; (8004a04 <xPortStartScheduler+0x124>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d10a      	bne.n	8004906 <xPortStartScheduler+0x26>
	__asm volatile
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	613b      	str	r3, [r7, #16]
}
 8004902:	bf00      	nop
 8004904:	e7fe      	b.n	8004904 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004906:	4b3e      	ldr	r3, [pc, #248]	; (8004a00 <xPortStartScheduler+0x120>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a3f      	ldr	r2, [pc, #252]	; (8004a08 <xPortStartScheduler+0x128>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d10a      	bne.n	8004926 <xPortStartScheduler+0x46>
	__asm volatile
 8004910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004914:	f383 8811 	msr	BASEPRI, r3
 8004918:	f3bf 8f6f 	isb	sy
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	60fb      	str	r3, [r7, #12]
}
 8004922:	bf00      	nop
 8004924:	e7fe      	b.n	8004924 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004926:	4b39      	ldr	r3, [pc, #228]	; (8004a0c <xPortStartScheduler+0x12c>)
 8004928:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	b2db      	uxtb	r3, r3
 8004930:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	22ff      	movs	r2, #255	; 0xff
 8004936:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	b2db      	uxtb	r3, r3
 800493e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004940:	78fb      	ldrb	r3, [r7, #3]
 8004942:	b2db      	uxtb	r3, r3
 8004944:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004948:	b2da      	uxtb	r2, r3
 800494a:	4b31      	ldr	r3, [pc, #196]	; (8004a10 <xPortStartScheduler+0x130>)
 800494c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800494e:	4b31      	ldr	r3, [pc, #196]	; (8004a14 <xPortStartScheduler+0x134>)
 8004950:	2207      	movs	r2, #7
 8004952:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004954:	e009      	b.n	800496a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004956:	4b2f      	ldr	r3, [pc, #188]	; (8004a14 <xPortStartScheduler+0x134>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	3b01      	subs	r3, #1
 800495c:	4a2d      	ldr	r2, [pc, #180]	; (8004a14 <xPortStartScheduler+0x134>)
 800495e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004960:	78fb      	ldrb	r3, [r7, #3]
 8004962:	b2db      	uxtb	r3, r3
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	b2db      	uxtb	r3, r3
 8004968:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800496a:	78fb      	ldrb	r3, [r7, #3]
 800496c:	b2db      	uxtb	r3, r3
 800496e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004972:	2b80      	cmp	r3, #128	; 0x80
 8004974:	d0ef      	beq.n	8004956 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004976:	4b27      	ldr	r3, [pc, #156]	; (8004a14 <xPortStartScheduler+0x134>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f1c3 0307 	rsb	r3, r3, #7
 800497e:	2b04      	cmp	r3, #4
 8004980:	d00a      	beq.n	8004998 <xPortStartScheduler+0xb8>
	__asm volatile
 8004982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	60bb      	str	r3, [r7, #8]
}
 8004994:	bf00      	nop
 8004996:	e7fe      	b.n	8004996 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004998:	4b1e      	ldr	r3, [pc, #120]	; (8004a14 <xPortStartScheduler+0x134>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	021b      	lsls	r3, r3, #8
 800499e:	4a1d      	ldr	r2, [pc, #116]	; (8004a14 <xPortStartScheduler+0x134>)
 80049a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80049a2:	4b1c      	ldr	r3, [pc, #112]	; (8004a14 <xPortStartScheduler+0x134>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049aa:	4a1a      	ldr	r2, [pc, #104]	; (8004a14 <xPortStartScheduler+0x134>)
 80049ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	b2da      	uxtb	r2, r3
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80049b6:	4b18      	ldr	r3, [pc, #96]	; (8004a18 <xPortStartScheduler+0x138>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a17      	ldr	r2, [pc, #92]	; (8004a18 <xPortStartScheduler+0x138>)
 80049bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80049c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80049c2:	4b15      	ldr	r3, [pc, #84]	; (8004a18 <xPortStartScheduler+0x138>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a14      	ldr	r2, [pc, #80]	; (8004a18 <xPortStartScheduler+0x138>)
 80049c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80049cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80049ce:	f000 f8dd 	bl	8004b8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80049d2:	4b12      	ldr	r3, [pc, #72]	; (8004a1c <xPortStartScheduler+0x13c>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80049d8:	f000 f8fc 	bl	8004bd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80049dc:	4b10      	ldr	r3, [pc, #64]	; (8004a20 <xPortStartScheduler+0x140>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a0f      	ldr	r2, [pc, #60]	; (8004a20 <xPortStartScheduler+0x140>)
 80049e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80049e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80049e8:	f7ff ff66 	bl	80048b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80049ec:	f7ff fa88 	bl	8003f00 <vTaskSwitchContext>
	prvTaskExitError();
 80049f0:	f7ff ff22 	bl	8004838 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	e000ed00 	.word	0xe000ed00
 8004a04:	410fc271 	.word	0x410fc271
 8004a08:	410fc270 	.word	0x410fc270
 8004a0c:	e000e400 	.word	0xe000e400
 8004a10:	200004f8 	.word	0x200004f8
 8004a14:	200004fc 	.word	0x200004fc
 8004a18:	e000ed20 	.word	0xe000ed20
 8004a1c:	2000000c 	.word	0x2000000c
 8004a20:	e000ef34 	.word	0xe000ef34

08004a24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
	__asm volatile
 8004a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2e:	f383 8811 	msr	BASEPRI, r3
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	607b      	str	r3, [r7, #4]
}
 8004a3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a3e:	4b0f      	ldr	r3, [pc, #60]	; (8004a7c <vPortEnterCritical+0x58>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	3301      	adds	r3, #1
 8004a44:	4a0d      	ldr	r2, [pc, #52]	; (8004a7c <vPortEnterCritical+0x58>)
 8004a46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004a48:	4b0c      	ldr	r3, [pc, #48]	; (8004a7c <vPortEnterCritical+0x58>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d10f      	bne.n	8004a70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a50:	4b0b      	ldr	r3, [pc, #44]	; (8004a80 <vPortEnterCritical+0x5c>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <vPortEnterCritical+0x4c>
	__asm volatile
 8004a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	603b      	str	r3, [r7, #0]
}
 8004a6c:	bf00      	nop
 8004a6e:	e7fe      	b.n	8004a6e <vPortEnterCritical+0x4a>
	}
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr
 8004a7c:	2000000c 	.word	0x2000000c
 8004a80:	e000ed04 	.word	0xe000ed04

08004a84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a8a:	4b12      	ldr	r3, [pc, #72]	; (8004ad4 <vPortExitCritical+0x50>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10a      	bne.n	8004aa8 <vPortExitCritical+0x24>
	__asm volatile
 8004a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a96:	f383 8811 	msr	BASEPRI, r3
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	f3bf 8f4f 	dsb	sy
 8004aa2:	607b      	str	r3, [r7, #4]
}
 8004aa4:	bf00      	nop
 8004aa6:	e7fe      	b.n	8004aa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004aa8:	4b0a      	ldr	r3, [pc, #40]	; (8004ad4 <vPortExitCritical+0x50>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	3b01      	subs	r3, #1
 8004aae:	4a09      	ldr	r2, [pc, #36]	; (8004ad4 <vPortExitCritical+0x50>)
 8004ab0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ab2:	4b08      	ldr	r3, [pc, #32]	; (8004ad4 <vPortExitCritical+0x50>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d105      	bne.n	8004ac6 <vPortExitCritical+0x42>
 8004aba:	2300      	movs	r3, #0
 8004abc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	f383 8811 	msr	BASEPRI, r3
}
 8004ac4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	2000000c 	.word	0x2000000c
	...

08004ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ae0:	f3ef 8009 	mrs	r0, PSP
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	4b15      	ldr	r3, [pc, #84]	; (8004b40 <pxCurrentTCBConst>)
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	f01e 0f10 	tst.w	lr, #16
 8004af0:	bf08      	it	eq
 8004af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004afa:	6010      	str	r0, [r2, #0]
 8004afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004b00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004b04:	f380 8811 	msr	BASEPRI, r0
 8004b08:	f3bf 8f4f 	dsb	sy
 8004b0c:	f3bf 8f6f 	isb	sy
 8004b10:	f7ff f9f6 	bl	8003f00 <vTaskSwitchContext>
 8004b14:	f04f 0000 	mov.w	r0, #0
 8004b18:	f380 8811 	msr	BASEPRI, r0
 8004b1c:	bc09      	pop	{r0, r3}
 8004b1e:	6819      	ldr	r1, [r3, #0]
 8004b20:	6808      	ldr	r0, [r1, #0]
 8004b22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b26:	f01e 0f10 	tst.w	lr, #16
 8004b2a:	bf08      	it	eq
 8004b2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004b30:	f380 8809 	msr	PSP, r0
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	f3af 8000 	nop.w

08004b40 <pxCurrentTCBConst>:
 8004b40:	200003cc 	.word	0x200003cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004b44:	bf00      	nop
 8004b46:	bf00      	nop

08004b48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b52:	f383 8811 	msr	BASEPRI, r3
 8004b56:	f3bf 8f6f 	isb	sy
 8004b5a:	f3bf 8f4f 	dsb	sy
 8004b5e:	607b      	str	r3, [r7, #4]
}
 8004b60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b62:	f7ff f915 	bl	8003d90 <xTaskIncrementTick>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d003      	beq.n	8004b74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b6c:	4b06      	ldr	r3, [pc, #24]	; (8004b88 <SysTick_Handler+0x40>)
 8004b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	2300      	movs	r3, #0
 8004b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	f383 8811 	msr	BASEPRI, r3
}
 8004b7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b80:	bf00      	nop
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	e000ed04 	.word	0xe000ed04

08004b8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b90:	4b0b      	ldr	r3, [pc, #44]	; (8004bc0 <vPortSetupTimerInterrupt+0x34>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b96:	4b0b      	ldr	r3, [pc, #44]	; (8004bc4 <vPortSetupTimerInterrupt+0x38>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b9c:	4b0a      	ldr	r3, [pc, #40]	; (8004bc8 <vPortSetupTimerInterrupt+0x3c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a0a      	ldr	r2, [pc, #40]	; (8004bcc <vPortSetupTimerInterrupt+0x40>)
 8004ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba6:	099b      	lsrs	r3, r3, #6
 8004ba8:	4a09      	ldr	r2, [pc, #36]	; (8004bd0 <vPortSetupTimerInterrupt+0x44>)
 8004baa:	3b01      	subs	r3, #1
 8004bac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004bae:	4b04      	ldr	r3, [pc, #16]	; (8004bc0 <vPortSetupTimerInterrupt+0x34>)
 8004bb0:	2207      	movs	r2, #7
 8004bb2:	601a      	str	r2, [r3, #0]
}
 8004bb4:	bf00      	nop
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	e000e010 	.word	0xe000e010
 8004bc4:	e000e018 	.word	0xe000e018
 8004bc8:	20000000 	.word	0x20000000
 8004bcc:	10624dd3 	.word	0x10624dd3
 8004bd0:	e000e014 	.word	0xe000e014

08004bd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004bd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004be4 <vPortEnableVFP+0x10>
 8004bd8:	6801      	ldr	r1, [r0, #0]
 8004bda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004bde:	6001      	str	r1, [r0, #0]
 8004be0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004be2:	bf00      	nop
 8004be4:	e000ed88 	.word	0xe000ed88

08004be8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004bee:	f3ef 8305 	mrs	r3, IPSR
 8004bf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2b0f      	cmp	r3, #15
 8004bf8:	d914      	bls.n	8004c24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004bfa:	4a17      	ldr	r2, [pc, #92]	; (8004c58 <vPortValidateInterruptPriority+0x70>)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4413      	add	r3, r2
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004c04:	4b15      	ldr	r3, [pc, #84]	; (8004c5c <vPortValidateInterruptPriority+0x74>)
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	7afa      	ldrb	r2, [r7, #11]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d20a      	bcs.n	8004c24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c12:	f383 8811 	msr	BASEPRI, r3
 8004c16:	f3bf 8f6f 	isb	sy
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	607b      	str	r3, [r7, #4]
}
 8004c20:	bf00      	nop
 8004c22:	e7fe      	b.n	8004c22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004c24:	4b0e      	ldr	r3, [pc, #56]	; (8004c60 <vPortValidateInterruptPriority+0x78>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c2c:	4b0d      	ldr	r3, [pc, #52]	; (8004c64 <vPortValidateInterruptPriority+0x7c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d90a      	bls.n	8004c4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	603b      	str	r3, [r7, #0]
}
 8004c46:	bf00      	nop
 8004c48:	e7fe      	b.n	8004c48 <vPortValidateInterruptPriority+0x60>
	}
 8004c4a:	bf00      	nop
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	e000e3f0 	.word	0xe000e3f0
 8004c5c:	200004f8 	.word	0x200004f8
 8004c60:	e000ed0c 	.word	0xe000ed0c
 8004c64:	200004fc 	.word	0x200004fc

08004c68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b08a      	sub	sp, #40	; 0x28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c70:	2300      	movs	r3, #0
 8004c72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004c74:	f7fe ffe2 	bl	8003c3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c78:	4b5b      	ldr	r3, [pc, #364]	; (8004de8 <pvPortMalloc+0x180>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004c80:	f000 f920 	bl	8004ec4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c84:	4b59      	ldr	r3, [pc, #356]	; (8004dec <pvPortMalloc+0x184>)
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f040 8093 	bne.w	8004db8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d01d      	beq.n	8004cd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004c98:	2208      	movs	r2, #8
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f003 0307 	and.w	r3, r3, #7
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d014      	beq.n	8004cd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f023 0307 	bic.w	r3, r3, #7
 8004cb0:	3308      	adds	r3, #8
 8004cb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f003 0307 	and.w	r3, r3, #7
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00a      	beq.n	8004cd4 <pvPortMalloc+0x6c>
	__asm volatile
 8004cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	617b      	str	r3, [r7, #20]
}
 8004cd0:	bf00      	nop
 8004cd2:	e7fe      	b.n	8004cd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d06e      	beq.n	8004db8 <pvPortMalloc+0x150>
 8004cda:	4b45      	ldr	r3, [pc, #276]	; (8004df0 <pvPortMalloc+0x188>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d869      	bhi.n	8004db8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ce4:	4b43      	ldr	r3, [pc, #268]	; (8004df4 <pvPortMalloc+0x18c>)
 8004ce6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ce8:	4b42      	ldr	r3, [pc, #264]	; (8004df4 <pvPortMalloc+0x18c>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cee:	e004      	b.n	8004cfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d903      	bls.n	8004d0c <pvPortMalloc+0xa4>
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1f1      	bne.n	8004cf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d0c:	4b36      	ldr	r3, [pc, #216]	; (8004de8 <pvPortMalloc+0x180>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d050      	beq.n	8004db8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2208      	movs	r2, #8
 8004d1c:	4413      	add	r3, r2
 8004d1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	6a3b      	ldr	r3, [r7, #32]
 8004d26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	1ad2      	subs	r2, r2, r3
 8004d30:	2308      	movs	r3, #8
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d91f      	bls.n	8004d78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	f003 0307 	and.w	r3, r3, #7
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00a      	beq.n	8004d60 <pvPortMalloc+0xf8>
	__asm volatile
 8004d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4e:	f383 8811 	msr	BASEPRI, r3
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	613b      	str	r3, [r7, #16]
}
 8004d5c:	bf00      	nop
 8004d5e:	e7fe      	b.n	8004d5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	1ad2      	subs	r2, r2, r3
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d72:	69b8      	ldr	r0, [r7, #24]
 8004d74:	f000 f908 	bl	8004f88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d78:	4b1d      	ldr	r3, [pc, #116]	; (8004df0 <pvPortMalloc+0x188>)
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	4a1b      	ldr	r2, [pc, #108]	; (8004df0 <pvPortMalloc+0x188>)
 8004d84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d86:	4b1a      	ldr	r3, [pc, #104]	; (8004df0 <pvPortMalloc+0x188>)
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	4b1b      	ldr	r3, [pc, #108]	; (8004df8 <pvPortMalloc+0x190>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d203      	bcs.n	8004d9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d92:	4b17      	ldr	r3, [pc, #92]	; (8004df0 <pvPortMalloc+0x188>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a18      	ldr	r2, [pc, #96]	; (8004df8 <pvPortMalloc+0x190>)
 8004d98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	4b13      	ldr	r3, [pc, #76]	; (8004dec <pvPortMalloc+0x184>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	431a      	orrs	r2, r3
 8004da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004daa:	2200      	movs	r2, #0
 8004dac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004dae:	4b13      	ldr	r3, [pc, #76]	; (8004dfc <pvPortMalloc+0x194>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	3301      	adds	r3, #1
 8004db4:	4a11      	ldr	r2, [pc, #68]	; (8004dfc <pvPortMalloc+0x194>)
 8004db6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004db8:	f7fe ff4e 	bl	8003c58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	f003 0307 	and.w	r3, r3, #7
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00a      	beq.n	8004ddc <pvPortMalloc+0x174>
	__asm volatile
 8004dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dca:	f383 8811 	msr	BASEPRI, r3
 8004dce:	f3bf 8f6f 	isb	sy
 8004dd2:	f3bf 8f4f 	dsb	sy
 8004dd6:	60fb      	str	r3, [r7, #12]
}
 8004dd8:	bf00      	nop
 8004dda:	e7fe      	b.n	8004dda <pvPortMalloc+0x172>
	return pvReturn;
 8004ddc:	69fb      	ldr	r3, [r7, #28]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3728      	adds	r7, #40	; 0x28
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	20004108 	.word	0x20004108
 8004dec:	2000411c 	.word	0x2000411c
 8004df0:	2000410c 	.word	0x2000410c
 8004df4:	20004100 	.word	0x20004100
 8004df8:	20004110 	.word	0x20004110
 8004dfc:	20004114 	.word	0x20004114

08004e00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d04d      	beq.n	8004eae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e12:	2308      	movs	r3, #8
 8004e14:	425b      	negs	r3, r3
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	4413      	add	r3, r2
 8004e1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	4b24      	ldr	r3, [pc, #144]	; (8004eb8 <vPortFree+0xb8>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4013      	ands	r3, r2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10a      	bne.n	8004e44 <vPortFree+0x44>
	__asm volatile
 8004e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	60fb      	str	r3, [r7, #12]
}
 8004e40:	bf00      	nop
 8004e42:	e7fe      	b.n	8004e42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00a      	beq.n	8004e62 <vPortFree+0x62>
	__asm volatile
 8004e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e50:	f383 8811 	msr	BASEPRI, r3
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	60bb      	str	r3, [r7, #8]
}
 8004e5e:	bf00      	nop
 8004e60:	e7fe      	b.n	8004e60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	4b14      	ldr	r3, [pc, #80]	; (8004eb8 <vPortFree+0xb8>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d01e      	beq.n	8004eae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d11a      	bne.n	8004eae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	4b0e      	ldr	r3, [pc, #56]	; (8004eb8 <vPortFree+0xb8>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	43db      	mvns	r3, r3
 8004e82:	401a      	ands	r2, r3
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004e88:	f7fe fed8 	bl	8003c3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	4b0a      	ldr	r3, [pc, #40]	; (8004ebc <vPortFree+0xbc>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4413      	add	r3, r2
 8004e96:	4a09      	ldr	r2, [pc, #36]	; (8004ebc <vPortFree+0xbc>)
 8004e98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e9a:	6938      	ldr	r0, [r7, #16]
 8004e9c:	f000 f874 	bl	8004f88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004ea0:	4b07      	ldr	r3, [pc, #28]	; (8004ec0 <vPortFree+0xc0>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	4a06      	ldr	r2, [pc, #24]	; (8004ec0 <vPortFree+0xc0>)
 8004ea8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004eaa:	f7fe fed5 	bl	8003c58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004eae:	bf00      	nop
 8004eb0:	3718      	adds	r7, #24
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	2000411c 	.word	0x2000411c
 8004ebc:	2000410c 	.word	0x2000410c
 8004ec0:	20004118 	.word	0x20004118

08004ec4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004eca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004ece:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004ed0:	4b27      	ldr	r3, [pc, #156]	; (8004f70 <prvHeapInit+0xac>)
 8004ed2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f003 0307 	and.w	r3, r3, #7
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00c      	beq.n	8004ef8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	3307      	adds	r3, #7
 8004ee2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f023 0307 	bic.w	r3, r3, #7
 8004eea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	4a1f      	ldr	r2, [pc, #124]	; (8004f70 <prvHeapInit+0xac>)
 8004ef4:	4413      	add	r3, r2
 8004ef6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004efc:	4a1d      	ldr	r2, [pc, #116]	; (8004f74 <prvHeapInit+0xb0>)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f02:	4b1c      	ldr	r3, [pc, #112]	; (8004f74 <prvHeapInit+0xb0>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f10:	2208      	movs	r2, #8
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	1a9b      	subs	r3, r3, r2
 8004f16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f023 0307 	bic.w	r3, r3, #7
 8004f1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4a15      	ldr	r2, [pc, #84]	; (8004f78 <prvHeapInit+0xb4>)
 8004f24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f26:	4b14      	ldr	r3, [pc, #80]	; (8004f78 <prvHeapInit+0xb4>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f2e:	4b12      	ldr	r3, [pc, #72]	; (8004f78 <prvHeapInit+0xb4>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2200      	movs	r2, #0
 8004f34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	1ad2      	subs	r2, r2, r3
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f44:	4b0c      	ldr	r3, [pc, #48]	; (8004f78 <prvHeapInit+0xb4>)
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	4a0a      	ldr	r2, [pc, #40]	; (8004f7c <prvHeapInit+0xb8>)
 8004f52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	4a09      	ldr	r2, [pc, #36]	; (8004f80 <prvHeapInit+0xbc>)
 8004f5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f5c:	4b09      	ldr	r3, [pc, #36]	; (8004f84 <prvHeapInit+0xc0>)
 8004f5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004f62:	601a      	str	r2, [r3, #0]
}
 8004f64:	bf00      	nop
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	20000500 	.word	0x20000500
 8004f74:	20004100 	.word	0x20004100
 8004f78:	20004108 	.word	0x20004108
 8004f7c:	20004110 	.word	0x20004110
 8004f80:	2000410c 	.word	0x2000410c
 8004f84:	2000411c 	.word	0x2000411c

08004f88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f90:	4b28      	ldr	r3, [pc, #160]	; (8005034 <prvInsertBlockIntoFreeList+0xac>)
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	e002      	b.n	8004f9c <prvInsertBlockIntoFreeList+0x14>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d8f7      	bhi.n	8004f96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d108      	bne.n	8004fca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	441a      	add	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	441a      	add	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d118      	bne.n	8005010 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	4b15      	ldr	r3, [pc, #84]	; (8005038 <prvInsertBlockIntoFreeList+0xb0>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d00d      	beq.n	8005006 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	441a      	add	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	e008      	b.n	8005018 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005006:	4b0c      	ldr	r3, [pc, #48]	; (8005038 <prvInsertBlockIntoFreeList+0xb0>)
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	e003      	b.n	8005018 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	429a      	cmp	r2, r3
 800501e:	d002      	beq.n	8005026 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005026:	bf00      	nop
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	20004100 	.word	0x20004100
 8005038:	20004108 	.word	0x20004108

0800503c <std>:
 800503c:	2300      	movs	r3, #0
 800503e:	b510      	push	{r4, lr}
 8005040:	4604      	mov	r4, r0
 8005042:	e9c0 3300 	strd	r3, r3, [r0]
 8005046:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800504a:	6083      	str	r3, [r0, #8]
 800504c:	8181      	strh	r1, [r0, #12]
 800504e:	6643      	str	r3, [r0, #100]	; 0x64
 8005050:	81c2      	strh	r2, [r0, #14]
 8005052:	6183      	str	r3, [r0, #24]
 8005054:	4619      	mov	r1, r3
 8005056:	2208      	movs	r2, #8
 8005058:	305c      	adds	r0, #92	; 0x5c
 800505a:	f000 f9e5 	bl	8005428 <memset>
 800505e:	4b0d      	ldr	r3, [pc, #52]	; (8005094 <std+0x58>)
 8005060:	6263      	str	r3, [r4, #36]	; 0x24
 8005062:	4b0d      	ldr	r3, [pc, #52]	; (8005098 <std+0x5c>)
 8005064:	62a3      	str	r3, [r4, #40]	; 0x28
 8005066:	4b0d      	ldr	r3, [pc, #52]	; (800509c <std+0x60>)
 8005068:	62e3      	str	r3, [r4, #44]	; 0x2c
 800506a:	4b0d      	ldr	r3, [pc, #52]	; (80050a0 <std+0x64>)
 800506c:	6323      	str	r3, [r4, #48]	; 0x30
 800506e:	4b0d      	ldr	r3, [pc, #52]	; (80050a4 <std+0x68>)
 8005070:	6224      	str	r4, [r4, #32]
 8005072:	429c      	cmp	r4, r3
 8005074:	d006      	beq.n	8005084 <std+0x48>
 8005076:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800507a:	4294      	cmp	r4, r2
 800507c:	d002      	beq.n	8005084 <std+0x48>
 800507e:	33d0      	adds	r3, #208	; 0xd0
 8005080:	429c      	cmp	r4, r3
 8005082:	d105      	bne.n	8005090 <std+0x54>
 8005084:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800508c:	f000 ba9a 	b.w	80055c4 <__retarget_lock_init_recursive>
 8005090:	bd10      	pop	{r4, pc}
 8005092:	bf00      	nop
 8005094:	08005279 	.word	0x08005279
 8005098:	0800529b 	.word	0x0800529b
 800509c:	080052d3 	.word	0x080052d3
 80050a0:	080052f7 	.word	0x080052f7
 80050a4:	20004120 	.word	0x20004120

080050a8 <stdio_exit_handler>:
 80050a8:	4a02      	ldr	r2, [pc, #8]	; (80050b4 <stdio_exit_handler+0xc>)
 80050aa:	4903      	ldr	r1, [pc, #12]	; (80050b8 <stdio_exit_handler+0x10>)
 80050ac:	4803      	ldr	r0, [pc, #12]	; (80050bc <stdio_exit_handler+0x14>)
 80050ae:	f000 b869 	b.w	8005184 <_fwalk_sglue>
 80050b2:	bf00      	nop
 80050b4:	20000010 	.word	0x20000010
 80050b8:	080058e5 	.word	0x080058e5
 80050bc:	2000001c 	.word	0x2000001c

080050c0 <cleanup_stdio>:
 80050c0:	6841      	ldr	r1, [r0, #4]
 80050c2:	4b0c      	ldr	r3, [pc, #48]	; (80050f4 <cleanup_stdio+0x34>)
 80050c4:	4299      	cmp	r1, r3
 80050c6:	b510      	push	{r4, lr}
 80050c8:	4604      	mov	r4, r0
 80050ca:	d001      	beq.n	80050d0 <cleanup_stdio+0x10>
 80050cc:	f000 fc0a 	bl	80058e4 <_fflush_r>
 80050d0:	68a1      	ldr	r1, [r4, #8]
 80050d2:	4b09      	ldr	r3, [pc, #36]	; (80050f8 <cleanup_stdio+0x38>)
 80050d4:	4299      	cmp	r1, r3
 80050d6:	d002      	beq.n	80050de <cleanup_stdio+0x1e>
 80050d8:	4620      	mov	r0, r4
 80050da:	f000 fc03 	bl	80058e4 <_fflush_r>
 80050de:	68e1      	ldr	r1, [r4, #12]
 80050e0:	4b06      	ldr	r3, [pc, #24]	; (80050fc <cleanup_stdio+0x3c>)
 80050e2:	4299      	cmp	r1, r3
 80050e4:	d004      	beq.n	80050f0 <cleanup_stdio+0x30>
 80050e6:	4620      	mov	r0, r4
 80050e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050ec:	f000 bbfa 	b.w	80058e4 <_fflush_r>
 80050f0:	bd10      	pop	{r4, pc}
 80050f2:	bf00      	nop
 80050f4:	20004120 	.word	0x20004120
 80050f8:	20004188 	.word	0x20004188
 80050fc:	200041f0 	.word	0x200041f0

08005100 <global_stdio_init.part.0>:
 8005100:	b510      	push	{r4, lr}
 8005102:	4b0b      	ldr	r3, [pc, #44]	; (8005130 <global_stdio_init.part.0+0x30>)
 8005104:	4c0b      	ldr	r4, [pc, #44]	; (8005134 <global_stdio_init.part.0+0x34>)
 8005106:	4a0c      	ldr	r2, [pc, #48]	; (8005138 <global_stdio_init.part.0+0x38>)
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	4620      	mov	r0, r4
 800510c:	2200      	movs	r2, #0
 800510e:	2104      	movs	r1, #4
 8005110:	f7ff ff94 	bl	800503c <std>
 8005114:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005118:	2201      	movs	r2, #1
 800511a:	2109      	movs	r1, #9
 800511c:	f7ff ff8e 	bl	800503c <std>
 8005120:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005124:	2202      	movs	r2, #2
 8005126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800512a:	2112      	movs	r1, #18
 800512c:	f7ff bf86 	b.w	800503c <std>
 8005130:	20004258 	.word	0x20004258
 8005134:	20004120 	.word	0x20004120
 8005138:	080050a9 	.word	0x080050a9

0800513c <__sfp_lock_acquire>:
 800513c:	4801      	ldr	r0, [pc, #4]	; (8005144 <__sfp_lock_acquire+0x8>)
 800513e:	f000 ba42 	b.w	80055c6 <__retarget_lock_acquire_recursive>
 8005142:	bf00      	nop
 8005144:	20004261 	.word	0x20004261

08005148 <__sfp_lock_release>:
 8005148:	4801      	ldr	r0, [pc, #4]	; (8005150 <__sfp_lock_release+0x8>)
 800514a:	f000 ba3d 	b.w	80055c8 <__retarget_lock_release_recursive>
 800514e:	bf00      	nop
 8005150:	20004261 	.word	0x20004261

08005154 <__sinit>:
 8005154:	b510      	push	{r4, lr}
 8005156:	4604      	mov	r4, r0
 8005158:	f7ff fff0 	bl	800513c <__sfp_lock_acquire>
 800515c:	6a23      	ldr	r3, [r4, #32]
 800515e:	b11b      	cbz	r3, 8005168 <__sinit+0x14>
 8005160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005164:	f7ff bff0 	b.w	8005148 <__sfp_lock_release>
 8005168:	4b04      	ldr	r3, [pc, #16]	; (800517c <__sinit+0x28>)
 800516a:	6223      	str	r3, [r4, #32]
 800516c:	4b04      	ldr	r3, [pc, #16]	; (8005180 <__sinit+0x2c>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1f5      	bne.n	8005160 <__sinit+0xc>
 8005174:	f7ff ffc4 	bl	8005100 <global_stdio_init.part.0>
 8005178:	e7f2      	b.n	8005160 <__sinit+0xc>
 800517a:	bf00      	nop
 800517c:	080050c1 	.word	0x080050c1
 8005180:	20004258 	.word	0x20004258

08005184 <_fwalk_sglue>:
 8005184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005188:	4607      	mov	r7, r0
 800518a:	4688      	mov	r8, r1
 800518c:	4614      	mov	r4, r2
 800518e:	2600      	movs	r6, #0
 8005190:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005194:	f1b9 0901 	subs.w	r9, r9, #1
 8005198:	d505      	bpl.n	80051a6 <_fwalk_sglue+0x22>
 800519a:	6824      	ldr	r4, [r4, #0]
 800519c:	2c00      	cmp	r4, #0
 800519e:	d1f7      	bne.n	8005190 <_fwalk_sglue+0xc>
 80051a0:	4630      	mov	r0, r6
 80051a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051a6:	89ab      	ldrh	r3, [r5, #12]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d907      	bls.n	80051bc <_fwalk_sglue+0x38>
 80051ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051b0:	3301      	adds	r3, #1
 80051b2:	d003      	beq.n	80051bc <_fwalk_sglue+0x38>
 80051b4:	4629      	mov	r1, r5
 80051b6:	4638      	mov	r0, r7
 80051b8:	47c0      	blx	r8
 80051ba:	4306      	orrs	r6, r0
 80051bc:	3568      	adds	r5, #104	; 0x68
 80051be:	e7e9      	b.n	8005194 <_fwalk_sglue+0x10>

080051c0 <_puts_r>:
 80051c0:	6a03      	ldr	r3, [r0, #32]
 80051c2:	b570      	push	{r4, r5, r6, lr}
 80051c4:	6884      	ldr	r4, [r0, #8]
 80051c6:	4605      	mov	r5, r0
 80051c8:	460e      	mov	r6, r1
 80051ca:	b90b      	cbnz	r3, 80051d0 <_puts_r+0x10>
 80051cc:	f7ff ffc2 	bl	8005154 <__sinit>
 80051d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051d2:	07db      	lsls	r3, r3, #31
 80051d4:	d405      	bmi.n	80051e2 <_puts_r+0x22>
 80051d6:	89a3      	ldrh	r3, [r4, #12]
 80051d8:	0598      	lsls	r0, r3, #22
 80051da:	d402      	bmi.n	80051e2 <_puts_r+0x22>
 80051dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051de:	f000 f9f2 	bl	80055c6 <__retarget_lock_acquire_recursive>
 80051e2:	89a3      	ldrh	r3, [r4, #12]
 80051e4:	0719      	lsls	r1, r3, #28
 80051e6:	d513      	bpl.n	8005210 <_puts_r+0x50>
 80051e8:	6923      	ldr	r3, [r4, #16]
 80051ea:	b18b      	cbz	r3, 8005210 <_puts_r+0x50>
 80051ec:	3e01      	subs	r6, #1
 80051ee:	68a3      	ldr	r3, [r4, #8]
 80051f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80051f4:	3b01      	subs	r3, #1
 80051f6:	60a3      	str	r3, [r4, #8]
 80051f8:	b9e9      	cbnz	r1, 8005236 <_puts_r+0x76>
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	da2e      	bge.n	800525c <_puts_r+0x9c>
 80051fe:	4622      	mov	r2, r4
 8005200:	210a      	movs	r1, #10
 8005202:	4628      	mov	r0, r5
 8005204:	f000 f87b 	bl	80052fe <__swbuf_r>
 8005208:	3001      	adds	r0, #1
 800520a:	d007      	beq.n	800521c <_puts_r+0x5c>
 800520c:	250a      	movs	r5, #10
 800520e:	e007      	b.n	8005220 <_puts_r+0x60>
 8005210:	4621      	mov	r1, r4
 8005212:	4628      	mov	r0, r5
 8005214:	f000 f8b0 	bl	8005378 <__swsetup_r>
 8005218:	2800      	cmp	r0, #0
 800521a:	d0e7      	beq.n	80051ec <_puts_r+0x2c>
 800521c:	f04f 35ff 	mov.w	r5, #4294967295
 8005220:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005222:	07da      	lsls	r2, r3, #31
 8005224:	d405      	bmi.n	8005232 <_puts_r+0x72>
 8005226:	89a3      	ldrh	r3, [r4, #12]
 8005228:	059b      	lsls	r3, r3, #22
 800522a:	d402      	bmi.n	8005232 <_puts_r+0x72>
 800522c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800522e:	f000 f9cb 	bl	80055c8 <__retarget_lock_release_recursive>
 8005232:	4628      	mov	r0, r5
 8005234:	bd70      	pop	{r4, r5, r6, pc}
 8005236:	2b00      	cmp	r3, #0
 8005238:	da04      	bge.n	8005244 <_puts_r+0x84>
 800523a:	69a2      	ldr	r2, [r4, #24]
 800523c:	429a      	cmp	r2, r3
 800523e:	dc06      	bgt.n	800524e <_puts_r+0x8e>
 8005240:	290a      	cmp	r1, #10
 8005242:	d004      	beq.n	800524e <_puts_r+0x8e>
 8005244:	6823      	ldr	r3, [r4, #0]
 8005246:	1c5a      	adds	r2, r3, #1
 8005248:	6022      	str	r2, [r4, #0]
 800524a:	7019      	strb	r1, [r3, #0]
 800524c:	e7cf      	b.n	80051ee <_puts_r+0x2e>
 800524e:	4622      	mov	r2, r4
 8005250:	4628      	mov	r0, r5
 8005252:	f000 f854 	bl	80052fe <__swbuf_r>
 8005256:	3001      	adds	r0, #1
 8005258:	d1c9      	bne.n	80051ee <_puts_r+0x2e>
 800525a:	e7df      	b.n	800521c <_puts_r+0x5c>
 800525c:	6823      	ldr	r3, [r4, #0]
 800525e:	250a      	movs	r5, #10
 8005260:	1c5a      	adds	r2, r3, #1
 8005262:	6022      	str	r2, [r4, #0]
 8005264:	701d      	strb	r5, [r3, #0]
 8005266:	e7db      	b.n	8005220 <_puts_r+0x60>

08005268 <puts>:
 8005268:	4b02      	ldr	r3, [pc, #8]	; (8005274 <puts+0xc>)
 800526a:	4601      	mov	r1, r0
 800526c:	6818      	ldr	r0, [r3, #0]
 800526e:	f7ff bfa7 	b.w	80051c0 <_puts_r>
 8005272:	bf00      	nop
 8005274:	20000068 	.word	0x20000068

08005278 <__sread>:
 8005278:	b510      	push	{r4, lr}
 800527a:	460c      	mov	r4, r1
 800527c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005280:	f000 f952 	bl	8005528 <_read_r>
 8005284:	2800      	cmp	r0, #0
 8005286:	bfab      	itete	ge
 8005288:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800528a:	89a3      	ldrhlt	r3, [r4, #12]
 800528c:	181b      	addge	r3, r3, r0
 800528e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005292:	bfac      	ite	ge
 8005294:	6563      	strge	r3, [r4, #84]	; 0x54
 8005296:	81a3      	strhlt	r3, [r4, #12]
 8005298:	bd10      	pop	{r4, pc}

0800529a <__swrite>:
 800529a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800529e:	461f      	mov	r7, r3
 80052a0:	898b      	ldrh	r3, [r1, #12]
 80052a2:	05db      	lsls	r3, r3, #23
 80052a4:	4605      	mov	r5, r0
 80052a6:	460c      	mov	r4, r1
 80052a8:	4616      	mov	r6, r2
 80052aa:	d505      	bpl.n	80052b8 <__swrite+0x1e>
 80052ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052b0:	2302      	movs	r3, #2
 80052b2:	2200      	movs	r2, #0
 80052b4:	f000 f926 	bl	8005504 <_lseek_r>
 80052b8:	89a3      	ldrh	r3, [r4, #12]
 80052ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052c2:	81a3      	strh	r3, [r4, #12]
 80052c4:	4632      	mov	r2, r6
 80052c6:	463b      	mov	r3, r7
 80052c8:	4628      	mov	r0, r5
 80052ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052ce:	f000 b93d 	b.w	800554c <_write_r>

080052d2 <__sseek>:
 80052d2:	b510      	push	{r4, lr}
 80052d4:	460c      	mov	r4, r1
 80052d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052da:	f000 f913 	bl	8005504 <_lseek_r>
 80052de:	1c43      	adds	r3, r0, #1
 80052e0:	89a3      	ldrh	r3, [r4, #12]
 80052e2:	bf15      	itete	ne
 80052e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80052e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052ee:	81a3      	strheq	r3, [r4, #12]
 80052f0:	bf18      	it	ne
 80052f2:	81a3      	strhne	r3, [r4, #12]
 80052f4:	bd10      	pop	{r4, pc}

080052f6 <__sclose>:
 80052f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052fa:	f000 b89d 	b.w	8005438 <_close_r>

080052fe <__swbuf_r>:
 80052fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005300:	460e      	mov	r6, r1
 8005302:	4614      	mov	r4, r2
 8005304:	4605      	mov	r5, r0
 8005306:	b118      	cbz	r0, 8005310 <__swbuf_r+0x12>
 8005308:	6a03      	ldr	r3, [r0, #32]
 800530a:	b90b      	cbnz	r3, 8005310 <__swbuf_r+0x12>
 800530c:	f7ff ff22 	bl	8005154 <__sinit>
 8005310:	69a3      	ldr	r3, [r4, #24]
 8005312:	60a3      	str	r3, [r4, #8]
 8005314:	89a3      	ldrh	r3, [r4, #12]
 8005316:	071a      	lsls	r2, r3, #28
 8005318:	d525      	bpl.n	8005366 <__swbuf_r+0x68>
 800531a:	6923      	ldr	r3, [r4, #16]
 800531c:	b31b      	cbz	r3, 8005366 <__swbuf_r+0x68>
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	6922      	ldr	r2, [r4, #16]
 8005322:	1a98      	subs	r0, r3, r2
 8005324:	6963      	ldr	r3, [r4, #20]
 8005326:	b2f6      	uxtb	r6, r6
 8005328:	4283      	cmp	r3, r0
 800532a:	4637      	mov	r7, r6
 800532c:	dc04      	bgt.n	8005338 <__swbuf_r+0x3a>
 800532e:	4621      	mov	r1, r4
 8005330:	4628      	mov	r0, r5
 8005332:	f000 fad7 	bl	80058e4 <_fflush_r>
 8005336:	b9e0      	cbnz	r0, 8005372 <__swbuf_r+0x74>
 8005338:	68a3      	ldr	r3, [r4, #8]
 800533a:	3b01      	subs	r3, #1
 800533c:	60a3      	str	r3, [r4, #8]
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	1c5a      	adds	r2, r3, #1
 8005342:	6022      	str	r2, [r4, #0]
 8005344:	701e      	strb	r6, [r3, #0]
 8005346:	6962      	ldr	r2, [r4, #20]
 8005348:	1c43      	adds	r3, r0, #1
 800534a:	429a      	cmp	r2, r3
 800534c:	d004      	beq.n	8005358 <__swbuf_r+0x5a>
 800534e:	89a3      	ldrh	r3, [r4, #12]
 8005350:	07db      	lsls	r3, r3, #31
 8005352:	d506      	bpl.n	8005362 <__swbuf_r+0x64>
 8005354:	2e0a      	cmp	r6, #10
 8005356:	d104      	bne.n	8005362 <__swbuf_r+0x64>
 8005358:	4621      	mov	r1, r4
 800535a:	4628      	mov	r0, r5
 800535c:	f000 fac2 	bl	80058e4 <_fflush_r>
 8005360:	b938      	cbnz	r0, 8005372 <__swbuf_r+0x74>
 8005362:	4638      	mov	r0, r7
 8005364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005366:	4621      	mov	r1, r4
 8005368:	4628      	mov	r0, r5
 800536a:	f000 f805 	bl	8005378 <__swsetup_r>
 800536e:	2800      	cmp	r0, #0
 8005370:	d0d5      	beq.n	800531e <__swbuf_r+0x20>
 8005372:	f04f 37ff 	mov.w	r7, #4294967295
 8005376:	e7f4      	b.n	8005362 <__swbuf_r+0x64>

08005378 <__swsetup_r>:
 8005378:	b538      	push	{r3, r4, r5, lr}
 800537a:	4b2a      	ldr	r3, [pc, #168]	; (8005424 <__swsetup_r+0xac>)
 800537c:	4605      	mov	r5, r0
 800537e:	6818      	ldr	r0, [r3, #0]
 8005380:	460c      	mov	r4, r1
 8005382:	b118      	cbz	r0, 800538c <__swsetup_r+0x14>
 8005384:	6a03      	ldr	r3, [r0, #32]
 8005386:	b90b      	cbnz	r3, 800538c <__swsetup_r+0x14>
 8005388:	f7ff fee4 	bl	8005154 <__sinit>
 800538c:	89a3      	ldrh	r3, [r4, #12]
 800538e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005392:	0718      	lsls	r0, r3, #28
 8005394:	d422      	bmi.n	80053dc <__swsetup_r+0x64>
 8005396:	06d9      	lsls	r1, r3, #27
 8005398:	d407      	bmi.n	80053aa <__swsetup_r+0x32>
 800539a:	2309      	movs	r3, #9
 800539c:	602b      	str	r3, [r5, #0]
 800539e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80053a2:	81a3      	strh	r3, [r4, #12]
 80053a4:	f04f 30ff 	mov.w	r0, #4294967295
 80053a8:	e034      	b.n	8005414 <__swsetup_r+0x9c>
 80053aa:	0758      	lsls	r0, r3, #29
 80053ac:	d512      	bpl.n	80053d4 <__swsetup_r+0x5c>
 80053ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053b0:	b141      	cbz	r1, 80053c4 <__swsetup_r+0x4c>
 80053b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053b6:	4299      	cmp	r1, r3
 80053b8:	d002      	beq.n	80053c0 <__swsetup_r+0x48>
 80053ba:	4628      	mov	r0, r5
 80053bc:	f000 f914 	bl	80055e8 <_free_r>
 80053c0:	2300      	movs	r3, #0
 80053c2:	6363      	str	r3, [r4, #52]	; 0x34
 80053c4:	89a3      	ldrh	r3, [r4, #12]
 80053c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80053ca:	81a3      	strh	r3, [r4, #12]
 80053cc:	2300      	movs	r3, #0
 80053ce:	6063      	str	r3, [r4, #4]
 80053d0:	6923      	ldr	r3, [r4, #16]
 80053d2:	6023      	str	r3, [r4, #0]
 80053d4:	89a3      	ldrh	r3, [r4, #12]
 80053d6:	f043 0308 	orr.w	r3, r3, #8
 80053da:	81a3      	strh	r3, [r4, #12]
 80053dc:	6923      	ldr	r3, [r4, #16]
 80053de:	b94b      	cbnz	r3, 80053f4 <__swsetup_r+0x7c>
 80053e0:	89a3      	ldrh	r3, [r4, #12]
 80053e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80053e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053ea:	d003      	beq.n	80053f4 <__swsetup_r+0x7c>
 80053ec:	4621      	mov	r1, r4
 80053ee:	4628      	mov	r0, r5
 80053f0:	f000 fac6 	bl	8005980 <__smakebuf_r>
 80053f4:	89a0      	ldrh	r0, [r4, #12]
 80053f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053fa:	f010 0301 	ands.w	r3, r0, #1
 80053fe:	d00a      	beq.n	8005416 <__swsetup_r+0x9e>
 8005400:	2300      	movs	r3, #0
 8005402:	60a3      	str	r3, [r4, #8]
 8005404:	6963      	ldr	r3, [r4, #20]
 8005406:	425b      	negs	r3, r3
 8005408:	61a3      	str	r3, [r4, #24]
 800540a:	6923      	ldr	r3, [r4, #16]
 800540c:	b943      	cbnz	r3, 8005420 <__swsetup_r+0xa8>
 800540e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005412:	d1c4      	bne.n	800539e <__swsetup_r+0x26>
 8005414:	bd38      	pop	{r3, r4, r5, pc}
 8005416:	0781      	lsls	r1, r0, #30
 8005418:	bf58      	it	pl
 800541a:	6963      	ldrpl	r3, [r4, #20]
 800541c:	60a3      	str	r3, [r4, #8]
 800541e:	e7f4      	b.n	800540a <__swsetup_r+0x92>
 8005420:	2000      	movs	r0, #0
 8005422:	e7f7      	b.n	8005414 <__swsetup_r+0x9c>
 8005424:	20000068 	.word	0x20000068

08005428 <memset>:
 8005428:	4402      	add	r2, r0
 800542a:	4603      	mov	r3, r0
 800542c:	4293      	cmp	r3, r2
 800542e:	d100      	bne.n	8005432 <memset+0xa>
 8005430:	4770      	bx	lr
 8005432:	f803 1b01 	strb.w	r1, [r3], #1
 8005436:	e7f9      	b.n	800542c <memset+0x4>

08005438 <_close_r>:
 8005438:	b538      	push	{r3, r4, r5, lr}
 800543a:	4d06      	ldr	r5, [pc, #24]	; (8005454 <_close_r+0x1c>)
 800543c:	2300      	movs	r3, #0
 800543e:	4604      	mov	r4, r0
 8005440:	4608      	mov	r0, r1
 8005442:	602b      	str	r3, [r5, #0]
 8005444:	f7fb fb3d 	bl	8000ac2 <_close>
 8005448:	1c43      	adds	r3, r0, #1
 800544a:	d102      	bne.n	8005452 <_close_r+0x1a>
 800544c:	682b      	ldr	r3, [r5, #0]
 800544e:	b103      	cbz	r3, 8005452 <_close_r+0x1a>
 8005450:	6023      	str	r3, [r4, #0]
 8005452:	bd38      	pop	{r3, r4, r5, pc}
 8005454:	2000425c 	.word	0x2000425c

08005458 <_reclaim_reent>:
 8005458:	4b29      	ldr	r3, [pc, #164]	; (8005500 <_reclaim_reent+0xa8>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4283      	cmp	r3, r0
 800545e:	b570      	push	{r4, r5, r6, lr}
 8005460:	4604      	mov	r4, r0
 8005462:	d04b      	beq.n	80054fc <_reclaim_reent+0xa4>
 8005464:	69c3      	ldr	r3, [r0, #28]
 8005466:	b143      	cbz	r3, 800547a <_reclaim_reent+0x22>
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d144      	bne.n	80054f8 <_reclaim_reent+0xa0>
 800546e:	69e3      	ldr	r3, [r4, #28]
 8005470:	6819      	ldr	r1, [r3, #0]
 8005472:	b111      	cbz	r1, 800547a <_reclaim_reent+0x22>
 8005474:	4620      	mov	r0, r4
 8005476:	f000 f8b7 	bl	80055e8 <_free_r>
 800547a:	6961      	ldr	r1, [r4, #20]
 800547c:	b111      	cbz	r1, 8005484 <_reclaim_reent+0x2c>
 800547e:	4620      	mov	r0, r4
 8005480:	f000 f8b2 	bl	80055e8 <_free_r>
 8005484:	69e1      	ldr	r1, [r4, #28]
 8005486:	b111      	cbz	r1, 800548e <_reclaim_reent+0x36>
 8005488:	4620      	mov	r0, r4
 800548a:	f000 f8ad 	bl	80055e8 <_free_r>
 800548e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005490:	b111      	cbz	r1, 8005498 <_reclaim_reent+0x40>
 8005492:	4620      	mov	r0, r4
 8005494:	f000 f8a8 	bl	80055e8 <_free_r>
 8005498:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800549a:	b111      	cbz	r1, 80054a2 <_reclaim_reent+0x4a>
 800549c:	4620      	mov	r0, r4
 800549e:	f000 f8a3 	bl	80055e8 <_free_r>
 80054a2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80054a4:	b111      	cbz	r1, 80054ac <_reclaim_reent+0x54>
 80054a6:	4620      	mov	r0, r4
 80054a8:	f000 f89e 	bl	80055e8 <_free_r>
 80054ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80054ae:	b111      	cbz	r1, 80054b6 <_reclaim_reent+0x5e>
 80054b0:	4620      	mov	r0, r4
 80054b2:	f000 f899 	bl	80055e8 <_free_r>
 80054b6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80054b8:	b111      	cbz	r1, 80054c0 <_reclaim_reent+0x68>
 80054ba:	4620      	mov	r0, r4
 80054bc:	f000 f894 	bl	80055e8 <_free_r>
 80054c0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80054c2:	b111      	cbz	r1, 80054ca <_reclaim_reent+0x72>
 80054c4:	4620      	mov	r0, r4
 80054c6:	f000 f88f 	bl	80055e8 <_free_r>
 80054ca:	6a23      	ldr	r3, [r4, #32]
 80054cc:	b1b3      	cbz	r3, 80054fc <_reclaim_reent+0xa4>
 80054ce:	4620      	mov	r0, r4
 80054d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80054d4:	4718      	bx	r3
 80054d6:	5949      	ldr	r1, [r1, r5]
 80054d8:	b941      	cbnz	r1, 80054ec <_reclaim_reent+0x94>
 80054da:	3504      	adds	r5, #4
 80054dc:	69e3      	ldr	r3, [r4, #28]
 80054de:	2d80      	cmp	r5, #128	; 0x80
 80054e0:	68d9      	ldr	r1, [r3, #12]
 80054e2:	d1f8      	bne.n	80054d6 <_reclaim_reent+0x7e>
 80054e4:	4620      	mov	r0, r4
 80054e6:	f000 f87f 	bl	80055e8 <_free_r>
 80054ea:	e7c0      	b.n	800546e <_reclaim_reent+0x16>
 80054ec:	680e      	ldr	r6, [r1, #0]
 80054ee:	4620      	mov	r0, r4
 80054f0:	f000 f87a 	bl	80055e8 <_free_r>
 80054f4:	4631      	mov	r1, r6
 80054f6:	e7ef      	b.n	80054d8 <_reclaim_reent+0x80>
 80054f8:	2500      	movs	r5, #0
 80054fa:	e7ef      	b.n	80054dc <_reclaim_reent+0x84>
 80054fc:	bd70      	pop	{r4, r5, r6, pc}
 80054fe:	bf00      	nop
 8005500:	20000068 	.word	0x20000068

08005504 <_lseek_r>:
 8005504:	b538      	push	{r3, r4, r5, lr}
 8005506:	4d07      	ldr	r5, [pc, #28]	; (8005524 <_lseek_r+0x20>)
 8005508:	4604      	mov	r4, r0
 800550a:	4608      	mov	r0, r1
 800550c:	4611      	mov	r1, r2
 800550e:	2200      	movs	r2, #0
 8005510:	602a      	str	r2, [r5, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	f7fb fafc 	bl	8000b10 <_lseek>
 8005518:	1c43      	adds	r3, r0, #1
 800551a:	d102      	bne.n	8005522 <_lseek_r+0x1e>
 800551c:	682b      	ldr	r3, [r5, #0]
 800551e:	b103      	cbz	r3, 8005522 <_lseek_r+0x1e>
 8005520:	6023      	str	r3, [r4, #0]
 8005522:	bd38      	pop	{r3, r4, r5, pc}
 8005524:	2000425c 	.word	0x2000425c

08005528 <_read_r>:
 8005528:	b538      	push	{r3, r4, r5, lr}
 800552a:	4d07      	ldr	r5, [pc, #28]	; (8005548 <_read_r+0x20>)
 800552c:	4604      	mov	r4, r0
 800552e:	4608      	mov	r0, r1
 8005530:	4611      	mov	r1, r2
 8005532:	2200      	movs	r2, #0
 8005534:	602a      	str	r2, [r5, #0]
 8005536:	461a      	mov	r2, r3
 8005538:	f7fb fa8a 	bl	8000a50 <_read>
 800553c:	1c43      	adds	r3, r0, #1
 800553e:	d102      	bne.n	8005546 <_read_r+0x1e>
 8005540:	682b      	ldr	r3, [r5, #0]
 8005542:	b103      	cbz	r3, 8005546 <_read_r+0x1e>
 8005544:	6023      	str	r3, [r4, #0]
 8005546:	bd38      	pop	{r3, r4, r5, pc}
 8005548:	2000425c 	.word	0x2000425c

0800554c <_write_r>:
 800554c:	b538      	push	{r3, r4, r5, lr}
 800554e:	4d07      	ldr	r5, [pc, #28]	; (800556c <_write_r+0x20>)
 8005550:	4604      	mov	r4, r0
 8005552:	4608      	mov	r0, r1
 8005554:	4611      	mov	r1, r2
 8005556:	2200      	movs	r2, #0
 8005558:	602a      	str	r2, [r5, #0]
 800555a:	461a      	mov	r2, r3
 800555c:	f7fb fa95 	bl	8000a8a <_write>
 8005560:	1c43      	adds	r3, r0, #1
 8005562:	d102      	bne.n	800556a <_write_r+0x1e>
 8005564:	682b      	ldr	r3, [r5, #0]
 8005566:	b103      	cbz	r3, 800556a <_write_r+0x1e>
 8005568:	6023      	str	r3, [r4, #0]
 800556a:	bd38      	pop	{r3, r4, r5, pc}
 800556c:	2000425c 	.word	0x2000425c

08005570 <__errno>:
 8005570:	4b01      	ldr	r3, [pc, #4]	; (8005578 <__errno+0x8>)
 8005572:	6818      	ldr	r0, [r3, #0]
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	20000068 	.word	0x20000068

0800557c <__libc_init_array>:
 800557c:	b570      	push	{r4, r5, r6, lr}
 800557e:	4d0d      	ldr	r5, [pc, #52]	; (80055b4 <__libc_init_array+0x38>)
 8005580:	4c0d      	ldr	r4, [pc, #52]	; (80055b8 <__libc_init_array+0x3c>)
 8005582:	1b64      	subs	r4, r4, r5
 8005584:	10a4      	asrs	r4, r4, #2
 8005586:	2600      	movs	r6, #0
 8005588:	42a6      	cmp	r6, r4
 800558a:	d109      	bne.n	80055a0 <__libc_init_array+0x24>
 800558c:	4d0b      	ldr	r5, [pc, #44]	; (80055bc <__libc_init_array+0x40>)
 800558e:	4c0c      	ldr	r4, [pc, #48]	; (80055c0 <__libc_init_array+0x44>)
 8005590:	f000 fa64 	bl	8005a5c <_init>
 8005594:	1b64      	subs	r4, r4, r5
 8005596:	10a4      	asrs	r4, r4, #2
 8005598:	2600      	movs	r6, #0
 800559a:	42a6      	cmp	r6, r4
 800559c:	d105      	bne.n	80055aa <__libc_init_array+0x2e>
 800559e:	bd70      	pop	{r4, r5, r6, pc}
 80055a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80055a4:	4798      	blx	r3
 80055a6:	3601      	adds	r6, #1
 80055a8:	e7ee      	b.n	8005588 <__libc_init_array+0xc>
 80055aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ae:	4798      	blx	r3
 80055b0:	3601      	adds	r6, #1
 80055b2:	e7f2      	b.n	800559a <__libc_init_array+0x1e>
 80055b4:	08005c24 	.word	0x08005c24
 80055b8:	08005c24 	.word	0x08005c24
 80055bc:	08005c24 	.word	0x08005c24
 80055c0:	08005c28 	.word	0x08005c28

080055c4 <__retarget_lock_init_recursive>:
 80055c4:	4770      	bx	lr

080055c6 <__retarget_lock_acquire_recursive>:
 80055c6:	4770      	bx	lr

080055c8 <__retarget_lock_release_recursive>:
 80055c8:	4770      	bx	lr

080055ca <memcpy>:
 80055ca:	440a      	add	r2, r1
 80055cc:	4291      	cmp	r1, r2
 80055ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80055d2:	d100      	bne.n	80055d6 <memcpy+0xc>
 80055d4:	4770      	bx	lr
 80055d6:	b510      	push	{r4, lr}
 80055d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055e0:	4291      	cmp	r1, r2
 80055e2:	d1f9      	bne.n	80055d8 <memcpy+0xe>
 80055e4:	bd10      	pop	{r4, pc}
	...

080055e8 <_free_r>:
 80055e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055ea:	2900      	cmp	r1, #0
 80055ec:	d044      	beq.n	8005678 <_free_r+0x90>
 80055ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055f2:	9001      	str	r0, [sp, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f1a1 0404 	sub.w	r4, r1, #4
 80055fa:	bfb8      	it	lt
 80055fc:	18e4      	addlt	r4, r4, r3
 80055fe:	f000 f8df 	bl	80057c0 <__malloc_lock>
 8005602:	4a1e      	ldr	r2, [pc, #120]	; (800567c <_free_r+0x94>)
 8005604:	9801      	ldr	r0, [sp, #4]
 8005606:	6813      	ldr	r3, [r2, #0]
 8005608:	b933      	cbnz	r3, 8005618 <_free_r+0x30>
 800560a:	6063      	str	r3, [r4, #4]
 800560c:	6014      	str	r4, [r2, #0]
 800560e:	b003      	add	sp, #12
 8005610:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005614:	f000 b8da 	b.w	80057cc <__malloc_unlock>
 8005618:	42a3      	cmp	r3, r4
 800561a:	d908      	bls.n	800562e <_free_r+0x46>
 800561c:	6825      	ldr	r5, [r4, #0]
 800561e:	1961      	adds	r1, r4, r5
 8005620:	428b      	cmp	r3, r1
 8005622:	bf01      	itttt	eq
 8005624:	6819      	ldreq	r1, [r3, #0]
 8005626:	685b      	ldreq	r3, [r3, #4]
 8005628:	1949      	addeq	r1, r1, r5
 800562a:	6021      	streq	r1, [r4, #0]
 800562c:	e7ed      	b.n	800560a <_free_r+0x22>
 800562e:	461a      	mov	r2, r3
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	b10b      	cbz	r3, 8005638 <_free_r+0x50>
 8005634:	42a3      	cmp	r3, r4
 8005636:	d9fa      	bls.n	800562e <_free_r+0x46>
 8005638:	6811      	ldr	r1, [r2, #0]
 800563a:	1855      	adds	r5, r2, r1
 800563c:	42a5      	cmp	r5, r4
 800563e:	d10b      	bne.n	8005658 <_free_r+0x70>
 8005640:	6824      	ldr	r4, [r4, #0]
 8005642:	4421      	add	r1, r4
 8005644:	1854      	adds	r4, r2, r1
 8005646:	42a3      	cmp	r3, r4
 8005648:	6011      	str	r1, [r2, #0]
 800564a:	d1e0      	bne.n	800560e <_free_r+0x26>
 800564c:	681c      	ldr	r4, [r3, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	6053      	str	r3, [r2, #4]
 8005652:	440c      	add	r4, r1
 8005654:	6014      	str	r4, [r2, #0]
 8005656:	e7da      	b.n	800560e <_free_r+0x26>
 8005658:	d902      	bls.n	8005660 <_free_r+0x78>
 800565a:	230c      	movs	r3, #12
 800565c:	6003      	str	r3, [r0, #0]
 800565e:	e7d6      	b.n	800560e <_free_r+0x26>
 8005660:	6825      	ldr	r5, [r4, #0]
 8005662:	1961      	adds	r1, r4, r5
 8005664:	428b      	cmp	r3, r1
 8005666:	bf04      	itt	eq
 8005668:	6819      	ldreq	r1, [r3, #0]
 800566a:	685b      	ldreq	r3, [r3, #4]
 800566c:	6063      	str	r3, [r4, #4]
 800566e:	bf04      	itt	eq
 8005670:	1949      	addeq	r1, r1, r5
 8005672:	6021      	streq	r1, [r4, #0]
 8005674:	6054      	str	r4, [r2, #4]
 8005676:	e7ca      	b.n	800560e <_free_r+0x26>
 8005678:	b003      	add	sp, #12
 800567a:	bd30      	pop	{r4, r5, pc}
 800567c:	20004264 	.word	0x20004264

08005680 <sbrk_aligned>:
 8005680:	b570      	push	{r4, r5, r6, lr}
 8005682:	4e0e      	ldr	r6, [pc, #56]	; (80056bc <sbrk_aligned+0x3c>)
 8005684:	460c      	mov	r4, r1
 8005686:	6831      	ldr	r1, [r6, #0]
 8005688:	4605      	mov	r5, r0
 800568a:	b911      	cbnz	r1, 8005692 <sbrk_aligned+0x12>
 800568c:	f000 f9d6 	bl	8005a3c <_sbrk_r>
 8005690:	6030      	str	r0, [r6, #0]
 8005692:	4621      	mov	r1, r4
 8005694:	4628      	mov	r0, r5
 8005696:	f000 f9d1 	bl	8005a3c <_sbrk_r>
 800569a:	1c43      	adds	r3, r0, #1
 800569c:	d00a      	beq.n	80056b4 <sbrk_aligned+0x34>
 800569e:	1cc4      	adds	r4, r0, #3
 80056a0:	f024 0403 	bic.w	r4, r4, #3
 80056a4:	42a0      	cmp	r0, r4
 80056a6:	d007      	beq.n	80056b8 <sbrk_aligned+0x38>
 80056a8:	1a21      	subs	r1, r4, r0
 80056aa:	4628      	mov	r0, r5
 80056ac:	f000 f9c6 	bl	8005a3c <_sbrk_r>
 80056b0:	3001      	adds	r0, #1
 80056b2:	d101      	bne.n	80056b8 <sbrk_aligned+0x38>
 80056b4:	f04f 34ff 	mov.w	r4, #4294967295
 80056b8:	4620      	mov	r0, r4
 80056ba:	bd70      	pop	{r4, r5, r6, pc}
 80056bc:	20004268 	.word	0x20004268

080056c0 <_malloc_r>:
 80056c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056c4:	1ccd      	adds	r5, r1, #3
 80056c6:	f025 0503 	bic.w	r5, r5, #3
 80056ca:	3508      	adds	r5, #8
 80056cc:	2d0c      	cmp	r5, #12
 80056ce:	bf38      	it	cc
 80056d0:	250c      	movcc	r5, #12
 80056d2:	2d00      	cmp	r5, #0
 80056d4:	4607      	mov	r7, r0
 80056d6:	db01      	blt.n	80056dc <_malloc_r+0x1c>
 80056d8:	42a9      	cmp	r1, r5
 80056da:	d905      	bls.n	80056e8 <_malloc_r+0x28>
 80056dc:	230c      	movs	r3, #12
 80056de:	603b      	str	r3, [r7, #0]
 80056e0:	2600      	movs	r6, #0
 80056e2:	4630      	mov	r0, r6
 80056e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80057bc <_malloc_r+0xfc>
 80056ec:	f000 f868 	bl	80057c0 <__malloc_lock>
 80056f0:	f8d8 3000 	ldr.w	r3, [r8]
 80056f4:	461c      	mov	r4, r3
 80056f6:	bb5c      	cbnz	r4, 8005750 <_malloc_r+0x90>
 80056f8:	4629      	mov	r1, r5
 80056fa:	4638      	mov	r0, r7
 80056fc:	f7ff ffc0 	bl	8005680 <sbrk_aligned>
 8005700:	1c43      	adds	r3, r0, #1
 8005702:	4604      	mov	r4, r0
 8005704:	d155      	bne.n	80057b2 <_malloc_r+0xf2>
 8005706:	f8d8 4000 	ldr.w	r4, [r8]
 800570a:	4626      	mov	r6, r4
 800570c:	2e00      	cmp	r6, #0
 800570e:	d145      	bne.n	800579c <_malloc_r+0xdc>
 8005710:	2c00      	cmp	r4, #0
 8005712:	d048      	beq.n	80057a6 <_malloc_r+0xe6>
 8005714:	6823      	ldr	r3, [r4, #0]
 8005716:	4631      	mov	r1, r6
 8005718:	4638      	mov	r0, r7
 800571a:	eb04 0903 	add.w	r9, r4, r3
 800571e:	f000 f98d 	bl	8005a3c <_sbrk_r>
 8005722:	4581      	cmp	r9, r0
 8005724:	d13f      	bne.n	80057a6 <_malloc_r+0xe6>
 8005726:	6821      	ldr	r1, [r4, #0]
 8005728:	1a6d      	subs	r5, r5, r1
 800572a:	4629      	mov	r1, r5
 800572c:	4638      	mov	r0, r7
 800572e:	f7ff ffa7 	bl	8005680 <sbrk_aligned>
 8005732:	3001      	adds	r0, #1
 8005734:	d037      	beq.n	80057a6 <_malloc_r+0xe6>
 8005736:	6823      	ldr	r3, [r4, #0]
 8005738:	442b      	add	r3, r5
 800573a:	6023      	str	r3, [r4, #0]
 800573c:	f8d8 3000 	ldr.w	r3, [r8]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d038      	beq.n	80057b6 <_malloc_r+0xf6>
 8005744:	685a      	ldr	r2, [r3, #4]
 8005746:	42a2      	cmp	r2, r4
 8005748:	d12b      	bne.n	80057a2 <_malloc_r+0xe2>
 800574a:	2200      	movs	r2, #0
 800574c:	605a      	str	r2, [r3, #4]
 800574e:	e00f      	b.n	8005770 <_malloc_r+0xb0>
 8005750:	6822      	ldr	r2, [r4, #0]
 8005752:	1b52      	subs	r2, r2, r5
 8005754:	d41f      	bmi.n	8005796 <_malloc_r+0xd6>
 8005756:	2a0b      	cmp	r2, #11
 8005758:	d917      	bls.n	800578a <_malloc_r+0xca>
 800575a:	1961      	adds	r1, r4, r5
 800575c:	42a3      	cmp	r3, r4
 800575e:	6025      	str	r5, [r4, #0]
 8005760:	bf18      	it	ne
 8005762:	6059      	strne	r1, [r3, #4]
 8005764:	6863      	ldr	r3, [r4, #4]
 8005766:	bf08      	it	eq
 8005768:	f8c8 1000 	streq.w	r1, [r8]
 800576c:	5162      	str	r2, [r4, r5]
 800576e:	604b      	str	r3, [r1, #4]
 8005770:	4638      	mov	r0, r7
 8005772:	f104 060b 	add.w	r6, r4, #11
 8005776:	f000 f829 	bl	80057cc <__malloc_unlock>
 800577a:	f026 0607 	bic.w	r6, r6, #7
 800577e:	1d23      	adds	r3, r4, #4
 8005780:	1af2      	subs	r2, r6, r3
 8005782:	d0ae      	beq.n	80056e2 <_malloc_r+0x22>
 8005784:	1b9b      	subs	r3, r3, r6
 8005786:	50a3      	str	r3, [r4, r2]
 8005788:	e7ab      	b.n	80056e2 <_malloc_r+0x22>
 800578a:	42a3      	cmp	r3, r4
 800578c:	6862      	ldr	r2, [r4, #4]
 800578e:	d1dd      	bne.n	800574c <_malloc_r+0x8c>
 8005790:	f8c8 2000 	str.w	r2, [r8]
 8005794:	e7ec      	b.n	8005770 <_malloc_r+0xb0>
 8005796:	4623      	mov	r3, r4
 8005798:	6864      	ldr	r4, [r4, #4]
 800579a:	e7ac      	b.n	80056f6 <_malloc_r+0x36>
 800579c:	4634      	mov	r4, r6
 800579e:	6876      	ldr	r6, [r6, #4]
 80057a0:	e7b4      	b.n	800570c <_malloc_r+0x4c>
 80057a2:	4613      	mov	r3, r2
 80057a4:	e7cc      	b.n	8005740 <_malloc_r+0x80>
 80057a6:	230c      	movs	r3, #12
 80057a8:	603b      	str	r3, [r7, #0]
 80057aa:	4638      	mov	r0, r7
 80057ac:	f000 f80e 	bl	80057cc <__malloc_unlock>
 80057b0:	e797      	b.n	80056e2 <_malloc_r+0x22>
 80057b2:	6025      	str	r5, [r4, #0]
 80057b4:	e7dc      	b.n	8005770 <_malloc_r+0xb0>
 80057b6:	605b      	str	r3, [r3, #4]
 80057b8:	deff      	udf	#255	; 0xff
 80057ba:	bf00      	nop
 80057bc:	20004264 	.word	0x20004264

080057c0 <__malloc_lock>:
 80057c0:	4801      	ldr	r0, [pc, #4]	; (80057c8 <__malloc_lock+0x8>)
 80057c2:	f7ff bf00 	b.w	80055c6 <__retarget_lock_acquire_recursive>
 80057c6:	bf00      	nop
 80057c8:	20004260 	.word	0x20004260

080057cc <__malloc_unlock>:
 80057cc:	4801      	ldr	r0, [pc, #4]	; (80057d4 <__malloc_unlock+0x8>)
 80057ce:	f7ff befb 	b.w	80055c8 <__retarget_lock_release_recursive>
 80057d2:	bf00      	nop
 80057d4:	20004260 	.word	0x20004260

080057d8 <__sflush_r>:
 80057d8:	898a      	ldrh	r2, [r1, #12]
 80057da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057de:	4605      	mov	r5, r0
 80057e0:	0710      	lsls	r0, r2, #28
 80057e2:	460c      	mov	r4, r1
 80057e4:	d458      	bmi.n	8005898 <__sflush_r+0xc0>
 80057e6:	684b      	ldr	r3, [r1, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	dc05      	bgt.n	80057f8 <__sflush_r+0x20>
 80057ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	dc02      	bgt.n	80057f8 <__sflush_r+0x20>
 80057f2:	2000      	movs	r0, #0
 80057f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057fa:	2e00      	cmp	r6, #0
 80057fc:	d0f9      	beq.n	80057f2 <__sflush_r+0x1a>
 80057fe:	2300      	movs	r3, #0
 8005800:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005804:	682f      	ldr	r7, [r5, #0]
 8005806:	6a21      	ldr	r1, [r4, #32]
 8005808:	602b      	str	r3, [r5, #0]
 800580a:	d032      	beq.n	8005872 <__sflush_r+0x9a>
 800580c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800580e:	89a3      	ldrh	r3, [r4, #12]
 8005810:	075a      	lsls	r2, r3, #29
 8005812:	d505      	bpl.n	8005820 <__sflush_r+0x48>
 8005814:	6863      	ldr	r3, [r4, #4]
 8005816:	1ac0      	subs	r0, r0, r3
 8005818:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800581a:	b10b      	cbz	r3, 8005820 <__sflush_r+0x48>
 800581c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800581e:	1ac0      	subs	r0, r0, r3
 8005820:	2300      	movs	r3, #0
 8005822:	4602      	mov	r2, r0
 8005824:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005826:	6a21      	ldr	r1, [r4, #32]
 8005828:	4628      	mov	r0, r5
 800582a:	47b0      	blx	r6
 800582c:	1c43      	adds	r3, r0, #1
 800582e:	89a3      	ldrh	r3, [r4, #12]
 8005830:	d106      	bne.n	8005840 <__sflush_r+0x68>
 8005832:	6829      	ldr	r1, [r5, #0]
 8005834:	291d      	cmp	r1, #29
 8005836:	d82b      	bhi.n	8005890 <__sflush_r+0xb8>
 8005838:	4a29      	ldr	r2, [pc, #164]	; (80058e0 <__sflush_r+0x108>)
 800583a:	410a      	asrs	r2, r1
 800583c:	07d6      	lsls	r6, r2, #31
 800583e:	d427      	bmi.n	8005890 <__sflush_r+0xb8>
 8005840:	2200      	movs	r2, #0
 8005842:	6062      	str	r2, [r4, #4]
 8005844:	04d9      	lsls	r1, r3, #19
 8005846:	6922      	ldr	r2, [r4, #16]
 8005848:	6022      	str	r2, [r4, #0]
 800584a:	d504      	bpl.n	8005856 <__sflush_r+0x7e>
 800584c:	1c42      	adds	r2, r0, #1
 800584e:	d101      	bne.n	8005854 <__sflush_r+0x7c>
 8005850:	682b      	ldr	r3, [r5, #0]
 8005852:	b903      	cbnz	r3, 8005856 <__sflush_r+0x7e>
 8005854:	6560      	str	r0, [r4, #84]	; 0x54
 8005856:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005858:	602f      	str	r7, [r5, #0]
 800585a:	2900      	cmp	r1, #0
 800585c:	d0c9      	beq.n	80057f2 <__sflush_r+0x1a>
 800585e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005862:	4299      	cmp	r1, r3
 8005864:	d002      	beq.n	800586c <__sflush_r+0x94>
 8005866:	4628      	mov	r0, r5
 8005868:	f7ff febe 	bl	80055e8 <_free_r>
 800586c:	2000      	movs	r0, #0
 800586e:	6360      	str	r0, [r4, #52]	; 0x34
 8005870:	e7c0      	b.n	80057f4 <__sflush_r+0x1c>
 8005872:	2301      	movs	r3, #1
 8005874:	4628      	mov	r0, r5
 8005876:	47b0      	blx	r6
 8005878:	1c41      	adds	r1, r0, #1
 800587a:	d1c8      	bne.n	800580e <__sflush_r+0x36>
 800587c:	682b      	ldr	r3, [r5, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d0c5      	beq.n	800580e <__sflush_r+0x36>
 8005882:	2b1d      	cmp	r3, #29
 8005884:	d001      	beq.n	800588a <__sflush_r+0xb2>
 8005886:	2b16      	cmp	r3, #22
 8005888:	d101      	bne.n	800588e <__sflush_r+0xb6>
 800588a:	602f      	str	r7, [r5, #0]
 800588c:	e7b1      	b.n	80057f2 <__sflush_r+0x1a>
 800588e:	89a3      	ldrh	r3, [r4, #12]
 8005890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005894:	81a3      	strh	r3, [r4, #12]
 8005896:	e7ad      	b.n	80057f4 <__sflush_r+0x1c>
 8005898:	690f      	ldr	r7, [r1, #16]
 800589a:	2f00      	cmp	r7, #0
 800589c:	d0a9      	beq.n	80057f2 <__sflush_r+0x1a>
 800589e:	0793      	lsls	r3, r2, #30
 80058a0:	680e      	ldr	r6, [r1, #0]
 80058a2:	bf08      	it	eq
 80058a4:	694b      	ldreq	r3, [r1, #20]
 80058a6:	600f      	str	r7, [r1, #0]
 80058a8:	bf18      	it	ne
 80058aa:	2300      	movne	r3, #0
 80058ac:	eba6 0807 	sub.w	r8, r6, r7
 80058b0:	608b      	str	r3, [r1, #8]
 80058b2:	f1b8 0f00 	cmp.w	r8, #0
 80058b6:	dd9c      	ble.n	80057f2 <__sflush_r+0x1a>
 80058b8:	6a21      	ldr	r1, [r4, #32]
 80058ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058bc:	4643      	mov	r3, r8
 80058be:	463a      	mov	r2, r7
 80058c0:	4628      	mov	r0, r5
 80058c2:	47b0      	blx	r6
 80058c4:	2800      	cmp	r0, #0
 80058c6:	dc06      	bgt.n	80058d6 <__sflush_r+0xfe>
 80058c8:	89a3      	ldrh	r3, [r4, #12]
 80058ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ce:	81a3      	strh	r3, [r4, #12]
 80058d0:	f04f 30ff 	mov.w	r0, #4294967295
 80058d4:	e78e      	b.n	80057f4 <__sflush_r+0x1c>
 80058d6:	4407      	add	r7, r0
 80058d8:	eba8 0800 	sub.w	r8, r8, r0
 80058dc:	e7e9      	b.n	80058b2 <__sflush_r+0xda>
 80058de:	bf00      	nop
 80058e0:	dfbffffe 	.word	0xdfbffffe

080058e4 <_fflush_r>:
 80058e4:	b538      	push	{r3, r4, r5, lr}
 80058e6:	690b      	ldr	r3, [r1, #16]
 80058e8:	4605      	mov	r5, r0
 80058ea:	460c      	mov	r4, r1
 80058ec:	b913      	cbnz	r3, 80058f4 <_fflush_r+0x10>
 80058ee:	2500      	movs	r5, #0
 80058f0:	4628      	mov	r0, r5
 80058f2:	bd38      	pop	{r3, r4, r5, pc}
 80058f4:	b118      	cbz	r0, 80058fe <_fflush_r+0x1a>
 80058f6:	6a03      	ldr	r3, [r0, #32]
 80058f8:	b90b      	cbnz	r3, 80058fe <_fflush_r+0x1a>
 80058fa:	f7ff fc2b 	bl	8005154 <__sinit>
 80058fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d0f3      	beq.n	80058ee <_fflush_r+0xa>
 8005906:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005908:	07d0      	lsls	r0, r2, #31
 800590a:	d404      	bmi.n	8005916 <_fflush_r+0x32>
 800590c:	0599      	lsls	r1, r3, #22
 800590e:	d402      	bmi.n	8005916 <_fflush_r+0x32>
 8005910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005912:	f7ff fe58 	bl	80055c6 <__retarget_lock_acquire_recursive>
 8005916:	4628      	mov	r0, r5
 8005918:	4621      	mov	r1, r4
 800591a:	f7ff ff5d 	bl	80057d8 <__sflush_r>
 800591e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005920:	07da      	lsls	r2, r3, #31
 8005922:	4605      	mov	r5, r0
 8005924:	d4e4      	bmi.n	80058f0 <_fflush_r+0xc>
 8005926:	89a3      	ldrh	r3, [r4, #12]
 8005928:	059b      	lsls	r3, r3, #22
 800592a:	d4e1      	bmi.n	80058f0 <_fflush_r+0xc>
 800592c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800592e:	f7ff fe4b 	bl	80055c8 <__retarget_lock_release_recursive>
 8005932:	e7dd      	b.n	80058f0 <_fflush_r+0xc>

08005934 <__swhatbuf_r>:
 8005934:	b570      	push	{r4, r5, r6, lr}
 8005936:	460c      	mov	r4, r1
 8005938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800593c:	2900      	cmp	r1, #0
 800593e:	b096      	sub	sp, #88	; 0x58
 8005940:	4615      	mov	r5, r2
 8005942:	461e      	mov	r6, r3
 8005944:	da0d      	bge.n	8005962 <__swhatbuf_r+0x2e>
 8005946:	89a3      	ldrh	r3, [r4, #12]
 8005948:	f013 0f80 	tst.w	r3, #128	; 0x80
 800594c:	f04f 0100 	mov.w	r1, #0
 8005950:	bf0c      	ite	eq
 8005952:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005956:	2340      	movne	r3, #64	; 0x40
 8005958:	2000      	movs	r0, #0
 800595a:	6031      	str	r1, [r6, #0]
 800595c:	602b      	str	r3, [r5, #0]
 800595e:	b016      	add	sp, #88	; 0x58
 8005960:	bd70      	pop	{r4, r5, r6, pc}
 8005962:	466a      	mov	r2, sp
 8005964:	f000 f848 	bl	80059f8 <_fstat_r>
 8005968:	2800      	cmp	r0, #0
 800596a:	dbec      	blt.n	8005946 <__swhatbuf_r+0x12>
 800596c:	9901      	ldr	r1, [sp, #4]
 800596e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005972:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005976:	4259      	negs	r1, r3
 8005978:	4159      	adcs	r1, r3
 800597a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800597e:	e7eb      	b.n	8005958 <__swhatbuf_r+0x24>

08005980 <__smakebuf_r>:
 8005980:	898b      	ldrh	r3, [r1, #12]
 8005982:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005984:	079d      	lsls	r5, r3, #30
 8005986:	4606      	mov	r6, r0
 8005988:	460c      	mov	r4, r1
 800598a:	d507      	bpl.n	800599c <__smakebuf_r+0x1c>
 800598c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005990:	6023      	str	r3, [r4, #0]
 8005992:	6123      	str	r3, [r4, #16]
 8005994:	2301      	movs	r3, #1
 8005996:	6163      	str	r3, [r4, #20]
 8005998:	b002      	add	sp, #8
 800599a:	bd70      	pop	{r4, r5, r6, pc}
 800599c:	ab01      	add	r3, sp, #4
 800599e:	466a      	mov	r2, sp
 80059a0:	f7ff ffc8 	bl	8005934 <__swhatbuf_r>
 80059a4:	9900      	ldr	r1, [sp, #0]
 80059a6:	4605      	mov	r5, r0
 80059a8:	4630      	mov	r0, r6
 80059aa:	f7ff fe89 	bl	80056c0 <_malloc_r>
 80059ae:	b948      	cbnz	r0, 80059c4 <__smakebuf_r+0x44>
 80059b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059b4:	059a      	lsls	r2, r3, #22
 80059b6:	d4ef      	bmi.n	8005998 <__smakebuf_r+0x18>
 80059b8:	f023 0303 	bic.w	r3, r3, #3
 80059bc:	f043 0302 	orr.w	r3, r3, #2
 80059c0:	81a3      	strh	r3, [r4, #12]
 80059c2:	e7e3      	b.n	800598c <__smakebuf_r+0xc>
 80059c4:	89a3      	ldrh	r3, [r4, #12]
 80059c6:	6020      	str	r0, [r4, #0]
 80059c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059cc:	81a3      	strh	r3, [r4, #12]
 80059ce:	9b00      	ldr	r3, [sp, #0]
 80059d0:	6163      	str	r3, [r4, #20]
 80059d2:	9b01      	ldr	r3, [sp, #4]
 80059d4:	6120      	str	r0, [r4, #16]
 80059d6:	b15b      	cbz	r3, 80059f0 <__smakebuf_r+0x70>
 80059d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059dc:	4630      	mov	r0, r6
 80059de:	f000 f81d 	bl	8005a1c <_isatty_r>
 80059e2:	b128      	cbz	r0, 80059f0 <__smakebuf_r+0x70>
 80059e4:	89a3      	ldrh	r3, [r4, #12]
 80059e6:	f023 0303 	bic.w	r3, r3, #3
 80059ea:	f043 0301 	orr.w	r3, r3, #1
 80059ee:	81a3      	strh	r3, [r4, #12]
 80059f0:	89a3      	ldrh	r3, [r4, #12]
 80059f2:	431d      	orrs	r5, r3
 80059f4:	81a5      	strh	r5, [r4, #12]
 80059f6:	e7cf      	b.n	8005998 <__smakebuf_r+0x18>

080059f8 <_fstat_r>:
 80059f8:	b538      	push	{r3, r4, r5, lr}
 80059fa:	4d07      	ldr	r5, [pc, #28]	; (8005a18 <_fstat_r+0x20>)
 80059fc:	2300      	movs	r3, #0
 80059fe:	4604      	mov	r4, r0
 8005a00:	4608      	mov	r0, r1
 8005a02:	4611      	mov	r1, r2
 8005a04:	602b      	str	r3, [r5, #0]
 8005a06:	f7fb f868 	bl	8000ada <_fstat>
 8005a0a:	1c43      	adds	r3, r0, #1
 8005a0c:	d102      	bne.n	8005a14 <_fstat_r+0x1c>
 8005a0e:	682b      	ldr	r3, [r5, #0]
 8005a10:	b103      	cbz	r3, 8005a14 <_fstat_r+0x1c>
 8005a12:	6023      	str	r3, [r4, #0]
 8005a14:	bd38      	pop	{r3, r4, r5, pc}
 8005a16:	bf00      	nop
 8005a18:	2000425c 	.word	0x2000425c

08005a1c <_isatty_r>:
 8005a1c:	b538      	push	{r3, r4, r5, lr}
 8005a1e:	4d06      	ldr	r5, [pc, #24]	; (8005a38 <_isatty_r+0x1c>)
 8005a20:	2300      	movs	r3, #0
 8005a22:	4604      	mov	r4, r0
 8005a24:	4608      	mov	r0, r1
 8005a26:	602b      	str	r3, [r5, #0]
 8005a28:	f7fb f867 	bl	8000afa <_isatty>
 8005a2c:	1c43      	adds	r3, r0, #1
 8005a2e:	d102      	bne.n	8005a36 <_isatty_r+0x1a>
 8005a30:	682b      	ldr	r3, [r5, #0]
 8005a32:	b103      	cbz	r3, 8005a36 <_isatty_r+0x1a>
 8005a34:	6023      	str	r3, [r4, #0]
 8005a36:	bd38      	pop	{r3, r4, r5, pc}
 8005a38:	2000425c 	.word	0x2000425c

08005a3c <_sbrk_r>:
 8005a3c:	b538      	push	{r3, r4, r5, lr}
 8005a3e:	4d06      	ldr	r5, [pc, #24]	; (8005a58 <_sbrk_r+0x1c>)
 8005a40:	2300      	movs	r3, #0
 8005a42:	4604      	mov	r4, r0
 8005a44:	4608      	mov	r0, r1
 8005a46:	602b      	str	r3, [r5, #0]
 8005a48:	f7fb f870 	bl	8000b2c <_sbrk>
 8005a4c:	1c43      	adds	r3, r0, #1
 8005a4e:	d102      	bne.n	8005a56 <_sbrk_r+0x1a>
 8005a50:	682b      	ldr	r3, [r5, #0]
 8005a52:	b103      	cbz	r3, 8005a56 <_sbrk_r+0x1a>
 8005a54:	6023      	str	r3, [r4, #0]
 8005a56:	bd38      	pop	{r3, r4, r5, pc}
 8005a58:	2000425c 	.word	0x2000425c

08005a5c <_init>:
 8005a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5e:	bf00      	nop
 8005a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a62:	bc08      	pop	{r3}
 8005a64:	469e      	mov	lr, r3
 8005a66:	4770      	bx	lr

08005a68 <_fini>:
 8005a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6a:	bf00      	nop
 8005a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a6e:	bc08      	pop	{r3}
 8005a70:	469e      	mov	lr, r3
 8005a72:	4770      	bx	lr
