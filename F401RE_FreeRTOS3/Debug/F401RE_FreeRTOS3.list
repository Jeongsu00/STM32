
F401RE_FreeRTOS3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d74  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08005f14  08005f14  00015f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006008  08006008  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08006008  08006008  00016008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006010  08006010  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006010  08006010  00016010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006014  08006014  00016014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006018  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047dc  2000006c  08006084  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004848  08006084  00024848  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000165c0  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036f6  00000000  00000000  0003669f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001348  00000000  00000000  00039d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ee5  00000000  00000000  0003b0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019a00  00000000  00000000  0003bfc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016b79  00000000  00000000  000559c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000984f5  00000000  00000000  0006c53e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000055dc  00000000  00000000  00104a34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0010a010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005efc 	.word	0x08005efc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08005efc 	.word	0x08005efc

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <vApplicationGetIdleTaskMemory+0x2c>)
 80004ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	4a06      	ldr	r2, [pc, #24]	; (800050c <vApplicationGetIdleTaskMemory+0x30>)
 80004f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	20000098 	.word	0x20000098
 800050c:	20000138 	.word	0x20000138

08000510 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	4a07      	ldr	r2, [pc, #28]	; (800053c <vApplicationGetTimerTaskMemory+0x2c>)
 8000520:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	4a06      	ldr	r2, [pc, #24]	; (8000540 <vApplicationGetTimerTaskMemory+0x30>)
 8000526:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800052e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000530:	bf00      	nop
 8000532:	3714      	adds	r7, #20
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr
 800053c:	20000338 	.word	0x20000338
 8000540:	200003d8 	.word	0x200003d8

08000544 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000544:	b5b0      	push	{r4, r5, r7, lr}
 8000546:	b092      	sub	sp, #72	; 0x48
 8000548:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of myTimer01 */
  osTimerDef(myTimer01, Callback01);
 800054a:	4b22      	ldr	r3, [pc, #136]	; (80005d4 <MX_FREERTOS_Init+0x90>)
 800054c:	643b      	str	r3, [r7, #64]	; 0x40
 800054e:	2300      	movs	r3, #0
 8000550:	647b      	str	r3, [r7, #68]	; 0x44
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8000552:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000556:	2200      	movs	r2, #0
 8000558:	2101      	movs	r1, #1
 800055a:	4618      	mov	r0, r3
 800055c:	f002 fa6c 	bl	8002a38 <osTimerCreate>
 8000560:	4603      	mov	r3, r0
 8000562:	4a1d      	ldr	r2, [pc, #116]	; (80005d8 <MX_FREERTOS_Init+0x94>)
 8000564:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTimer02 */
  osTimerDef(myTimer02, Callback02);
 8000566:	4b1d      	ldr	r3, [pc, #116]	; (80005dc <MX_FREERTOS_Init+0x98>)
 8000568:	63bb      	str	r3, [r7, #56]	; 0x38
 800056a:	2300      	movs	r3, #0
 800056c:	63fb      	str	r3, [r7, #60]	; 0x3c
  myTimer02Handle = osTimerCreate(osTimer(myTimer02), osTimerOnce, NULL);
 800056e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000572:	2200      	movs	r2, #0
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f002 fa5e 	bl	8002a38 <osTimerCreate>
 800057c:	4603      	mov	r3, r0
 800057e:	4a18      	ldr	r2, [pc, #96]	; (80005e0 <MX_FREERTOS_Init+0x9c>)
 8000580:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000582:	4b18      	ldr	r3, [pc, #96]	; (80005e4 <MX_FREERTOS_Init+0xa0>)
 8000584:	f107 041c 	add.w	r4, r7, #28
 8000588:	461d      	mov	r5, r3
 800058a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800058c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800058e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000592:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000596:	f107 031c 	add.w	r3, r7, #28
 800059a:	2100      	movs	r1, #0
 800059c:	4618      	mov	r0, r3
 800059e:	f002 f9ea 	bl	8002976 <osThreadCreate>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a10      	ldr	r2, [pc, #64]	; (80005e8 <MX_FREERTOS_Init+0xa4>)
 80005a6:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 80005a8:	4b10      	ldr	r3, [pc, #64]	; (80005ec <MX_FREERTOS_Init+0xa8>)
 80005aa:	463c      	mov	r4, r7
 80005ac:	461d      	mov	r5, r3
 80005ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80005ba:	463b      	mov	r3, r7
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f002 f9d9 	bl	8002976 <osThreadCreate>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4a0a      	ldr	r2, [pc, #40]	; (80005f0 <MX_FREERTOS_Init+0xac>)
 80005c8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005ca:	bf00      	nop
 80005cc:	3748      	adds	r7, #72	; 0x48
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bdb0      	pop	{r4, r5, r7, pc}
 80005d2:	bf00      	nop
 80005d4:	0800066d 	.word	0x0800066d
 80005d8:	20000090 	.word	0x20000090
 80005dc:	08000695 	.word	0x08000695
 80005e0:	20000094 	.word	0x20000094
 80005e4:	08005f20 	.word	0x08005f20
 80005e8:	20000088 	.word	0x20000088
 80005ec:	08005f48 	.word	0x08005f48
 80005f0:	2000008c 	.word	0x2000008c

080005f4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	osTimerStart(myTimer01Handle, 1000);
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <StartDefaultTask+0x24>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000604:	4618      	mov	r0, r3
 8000606:	f002 fa4b 	bl	8002aa0 <osTimerStart>
  /* Infinite loop */
  for(;;)
  {
	  printf("Sending from StartDefaultTask\r\n");
 800060a:	4804      	ldr	r0, [pc, #16]	; (800061c <StartDefaultTask+0x28>)
 800060c:	f005 f87c 	bl	8005708 <puts>
	  osDelay(200);
 8000610:	20c8      	movs	r0, #200	; 0xc8
 8000612:	f002 f9fc 	bl	8002a0e <osDelay>
	  printf("Sending from StartDefaultTask\r\n");
 8000616:	e7f8      	b.n	800060a <StartDefaultTask+0x16>
 8000618:	20000090 	.word	0x20000090
 800061c:	08005f64 	.word	0x08005f64

08000620 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)){
 8000628:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800062c:	480c      	ldr	r0, [pc, #48]	; (8000660 <StartTask02+0x40>)
 800062e:	f000 fe19 	bl	8001264 <HAL_GPIO_ReadPin>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d00e      	beq.n	8000656 <StartTask02+0x36>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8000638:	2201      	movs	r2, #1
 800063a:	2140      	movs	r1, #64	; 0x40
 800063c:	4808      	ldr	r0, [pc, #32]	; (8000660 <StartTask02+0x40>)
 800063e:	f000 fe29 	bl	8001294 <HAL_GPIO_WritePin>
		  printf("Sending from StartTask02\r\n");
 8000642:	4808      	ldr	r0, [pc, #32]	; (8000664 <StartTask02+0x44>)
 8000644:	f005 f860 	bl	8005708 <puts>
		  osTimerStart(myTimer02Handle, 2000);
 8000648:	4b07      	ldr	r3, [pc, #28]	; (8000668 <StartTask02+0x48>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000650:	4618      	mov	r0, r3
 8000652:	f002 fa25 	bl	8002aa0 <osTimerStart>
	  }
	  osDelay(20);
 8000656:	2014      	movs	r0, #20
 8000658:	f002 f9d9 	bl	8002a0e <osDelay>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)){
 800065c:	e7e4      	b.n	8000628 <StartTask02+0x8>
 800065e:	bf00      	nop
 8000660:	40020000 	.word	0x40020000
 8000664:	08005f84 	.word	0x08005f84
 8000668:	20000094 	.word	0x20000094

0800066c <Callback01>:
  /* USER CODE END StartTask02 */
}

/* Callback01 function */
void Callback01(void const * argument)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	4805      	ldr	r0, [pc, #20]	; (800068c <Callback01+0x20>)
 8000678:	f000 fe25 	bl	80012c6 <HAL_GPIO_TogglePin>
	printf("Sending from Callback\r\n");
 800067c:	4804      	ldr	r0, [pc, #16]	; (8000690 <Callback01+0x24>)
 800067e:	f005 f843 	bl	8005708 <puts>
  /* USER CODE END Callback01 */
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40020000 	.word	0x40020000
 8000690:	08005fa0 	.word	0x08005fa0

08000694 <Callback02>:

/* Callback02 function */
void Callback02(void const * argument)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback02 */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2140      	movs	r1, #64	; 0x40
 80006a0:	4804      	ldr	r0, [pc, #16]	; (80006b4 <Callback02+0x20>)
 80006a2:	f000 fdf7 	bl	8001294 <HAL_GPIO_WritePin>
	printf("Sending from Callback02\r\n");
 80006a6:	4804      	ldr	r0, [pc, #16]	; (80006b8 <Callback02+0x24>)
 80006a8:	f005 f82e 	bl	8005708 <puts>
  /* USER CODE END Callback02 */
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40020000 	.word	0x40020000
 80006b8:	08005fb8 	.word	0x08005fb8

080006bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08a      	sub	sp, #40	; 0x28
 80006c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
 80006d6:	4b2d      	ldr	r3, [pc, #180]	; (800078c <MX_GPIO_Init+0xd0>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a2c      	ldr	r2, [pc, #176]	; (800078c <MX_GPIO_Init+0xd0>)
 80006dc:	f043 0304 	orr.w	r3, r3, #4
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b2a      	ldr	r3, [pc, #168]	; (800078c <MX_GPIO_Init+0xd0>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0304 	and.w	r3, r3, #4
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	4b26      	ldr	r3, [pc, #152]	; (800078c <MX_GPIO_Init+0xd0>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a25      	ldr	r2, [pc, #148]	; (800078c <MX_GPIO_Init+0xd0>)
 80006f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b23      	ldr	r3, [pc, #140]	; (800078c <MX_GPIO_Init+0xd0>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <MX_GPIO_Init+0xd0>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a1e      	ldr	r2, [pc, #120]	; (800078c <MX_GPIO_Init+0xd0>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <MX_GPIO_Init+0xd0>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_GPIO_Init+0xd0>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a17      	ldr	r2, [pc, #92]	; (800078c <MX_GPIO_Init+0xd0>)
 8000730:	f043 0302 	orr.w	r3, r3, #2
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_GPIO_Init+0xd0>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	21e0      	movs	r1, #224	; 0xe0
 8000746:	4812      	ldr	r0, [pc, #72]	; (8000790 <MX_GPIO_Init+0xd4>)
 8000748:	f000 fda4 	bl	8001294 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PA6 PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7;
 800074c:	23e0      	movs	r3, #224	; 0xe0
 800074e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000750:	2301      	movs	r3, #1
 8000752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	2300      	movs	r3, #0
 800075a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	4619      	mov	r1, r3
 8000762:	480b      	ldr	r0, [pc, #44]	; (8000790 <MX_GPIO_Init+0xd4>)
 8000764:	f000 fbfa 	bl	8000f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000768:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800076c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4619      	mov	r1, r3
 800077c:	4804      	ldr	r0, [pc, #16]	; (8000790 <MX_GPIO_Init+0xd4>)
 800077e:	f000 fbed 	bl	8000f5c <HAL_GPIO_Init>

}
 8000782:	bf00      	nop
 8000784:	3728      	adds	r7, #40	; 0x28
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800
 8000790:	40020000 	.word	0x40020000

08000794 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800079c:	1d39      	adds	r1, r7, #4
 800079e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007a2:	2201      	movs	r2, #1
 80007a4:	4803      	ldr	r0, [pc, #12]	; (80007b4 <__io_putchar+0x20>)
 80007a6:	f001 fd40 	bl	800222a <HAL_UART_Transmit>
	return ch;
 80007aa:	687b      	ldr	r3, [r7, #4]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000824 	.word	0x20000824

080007b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007bc:	f000 faaa 	bl	8000d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c0:	f000 f80a 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c4:	f7ff ff7a 	bl	80006bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007c8:	f000 fa08 	bl	8000bdc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80007cc:	f7ff feba 	bl	8000544 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80007d0:	f002 f8ca 	bl	8002968 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <main+0x1c>
	...

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b094      	sub	sp, #80	; 0x50
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	2230      	movs	r2, #48	; 0x30
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f005 f86e 	bl	80058c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	f107 030c 	add.w	r3, r7, #12
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fc:	2300      	movs	r3, #0
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <SystemClock_Config+0xd0>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000804:	4a28      	ldr	r2, [pc, #160]	; (80008a8 <SystemClock_Config+0xd0>)
 8000806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080a:	6413      	str	r3, [r2, #64]	; 0x40
 800080c:	4b26      	ldr	r3, [pc, #152]	; (80008a8 <SystemClock_Config+0xd0>)
 800080e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000818:	2300      	movs	r3, #0
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	4b23      	ldr	r3, [pc, #140]	; (80008ac <SystemClock_Config+0xd4>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000824:	4a21      	ldr	r2, [pc, #132]	; (80008ac <SystemClock_Config+0xd4>)
 8000826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800082a:	6013      	str	r3, [r2, #0]
 800082c:	4b1f      	ldr	r3, [pc, #124]	; (80008ac <SystemClock_Config+0xd4>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000838:	2302      	movs	r3, #2
 800083a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800083c:	2301      	movs	r3, #1
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000840:	2310      	movs	r3, #16
 8000842:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000844:	2302      	movs	r3, #2
 8000846:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000848:	2300      	movs	r3, #0
 800084a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800084c:	2310      	movs	r3, #16
 800084e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000850:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000854:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000856:	2304      	movs	r3, #4
 8000858:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800085a:	2307      	movs	r3, #7
 800085c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085e:	f107 0320 	add.w	r3, r7, #32
 8000862:	4618      	mov	r0, r3
 8000864:	f000 fd4a 	bl	80012fc <HAL_RCC_OscConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800086e:	f000 f831 	bl	80008d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000872:	230f      	movs	r3, #15
 8000874:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000876:	2302      	movs	r3, #2
 8000878:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800087e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000882:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	2102      	movs	r1, #2
 800088e:	4618      	mov	r0, r3
 8000890:	f000 ffac 	bl	80017ec <HAL_RCC_ClockConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800089a:	f000 f81b 	bl	80008d4 <Error_Handler>
  }
}
 800089e:	bf00      	nop
 80008a0:	3750      	adds	r7, #80	; 0x50
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40007000 	.word	0x40007000

080008b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a04      	ldr	r2, [pc, #16]	; (80008d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d101      	bne.n	80008c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008c2:	f000 fa49 	bl	8000d58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40000800 	.word	0x40000800

080008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008dc:	e7fe      	b.n	80008dc <Error_Handler+0x8>
	...

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	4b12      	ldr	r3, [pc, #72]	; (8000934 <HAL_MspInit+0x54>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	4a11      	ldr	r2, [pc, #68]	; (8000934 <HAL_MspInit+0x54>)
 80008f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f4:	6453      	str	r3, [r2, #68]	; 0x44
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <HAL_MspInit+0x54>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <HAL_MspInit+0x54>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <HAL_MspInit+0x54>)
 800090c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000910:	6413      	str	r3, [r2, #64]	; 0x40
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <HAL_MspInit+0x54>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	210f      	movs	r1, #15
 8000922:	f06f 0001 	mvn.w	r0, #1
 8000926:	f000 faef 	bl	8000f08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800

08000938 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08e      	sub	sp, #56	; 0x38
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000940:	2300      	movs	r3, #0
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000944:	2300      	movs	r3, #0
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	4b33      	ldr	r3, [pc, #204]	; (8000a1c <HAL_InitTick+0xe4>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000950:	4a32      	ldr	r2, [pc, #200]	; (8000a1c <HAL_InitTick+0xe4>)
 8000952:	f043 0304 	orr.w	r3, r3, #4
 8000956:	6413      	str	r3, [r2, #64]	; 0x40
 8000958:	4b30      	ldr	r3, [pc, #192]	; (8000a1c <HAL_InitTick+0xe4>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095c:	f003 0304 	and.w	r3, r3, #4
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000964:	f107 0210 	add.w	r2, r7, #16
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	4611      	mov	r1, r2
 800096e:	4618      	mov	r0, r3
 8000970:	f001 f95c 	bl	8001c2c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000974:	6a3b      	ldr	r3, [r7, #32]
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800097a:	2b00      	cmp	r3, #0
 800097c:	d103      	bne.n	8000986 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800097e:	f001 f92d 	bl	8001bdc <HAL_RCC_GetPCLK1Freq>
 8000982:	6378      	str	r0, [r7, #52]	; 0x34
 8000984:	e004      	b.n	8000990 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000986:	f001 f929 	bl	8001bdc <HAL_RCC_GetPCLK1Freq>
 800098a:	4603      	mov	r3, r0
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000992:	4a23      	ldr	r2, [pc, #140]	; (8000a20 <HAL_InitTick+0xe8>)
 8000994:	fba2 2303 	umull	r2, r3, r2, r3
 8000998:	0c9b      	lsrs	r3, r3, #18
 800099a:	3b01      	subs	r3, #1
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800099e:	4b21      	ldr	r3, [pc, #132]	; (8000a24 <HAL_InitTick+0xec>)
 80009a0:	4a21      	ldr	r2, [pc, #132]	; (8000a28 <HAL_InitTick+0xf0>)
 80009a2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80009a4:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <HAL_InitTick+0xec>)
 80009a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009aa:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80009ac:	4a1d      	ldr	r2, [pc, #116]	; (8000a24 <HAL_InitTick+0xec>)
 80009ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009b0:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80009b2:	4b1c      	ldr	r3, [pc, #112]	; (8000a24 <HAL_InitTick+0xec>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b8:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <HAL_InitTick+0xec>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009be:	4b19      	ldr	r3, [pc, #100]	; (8000a24 <HAL_InitTick+0xec>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80009c4:	4817      	ldr	r0, [pc, #92]	; (8000a24 <HAL_InitTick+0xec>)
 80009c6:	f001 f963 	bl	8001c90 <HAL_TIM_Base_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80009d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d11b      	bne.n	8000a10 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80009d8:	4812      	ldr	r0, [pc, #72]	; (8000a24 <HAL_InitTick+0xec>)
 80009da:	f001 f9b3 	bl	8001d44 <HAL_TIM_Base_Start_IT>
 80009de:	4603      	mov	r3, r0
 80009e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80009e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d111      	bne.n	8000a10 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80009ec:	201e      	movs	r0, #30
 80009ee:	f000 faa7 	bl	8000f40 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b0f      	cmp	r3, #15
 80009f6:	d808      	bhi.n	8000a0a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80009f8:	2200      	movs	r2, #0
 80009fa:	6879      	ldr	r1, [r7, #4]
 80009fc:	201e      	movs	r0, #30
 80009fe:	f000 fa83 	bl	8000f08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a02:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <HAL_InitTick+0xf4>)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6013      	str	r3, [r2, #0]
 8000a08:	e002      	b.n	8000a10 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3738      	adds	r7, #56	; 0x38
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	431bde83 	.word	0x431bde83
 8000a24:	200007d8 	.word	0x200007d8
 8000a28:	40000800 	.word	0x40000800
 8000a2c:	20000004 	.word	0x20000004

08000a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <NMI_Handler+0x4>

08000a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <HardFault_Handler+0x4>

08000a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <MemManage_Handler+0x4>

08000a42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <BusFault_Handler+0x4>

08000a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <UsageFault_Handler+0x4>

08000a4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a60:	4802      	ldr	r0, [pc, #8]	; (8000a6c <TIM4_IRQHandler+0x10>)
 8000a62:	f001 f9d1 	bl	8001e08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200007d8 	.word	0x200007d8

08000a70 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	e00a      	b.n	8000a98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a82:	f3af 8000 	nop.w
 8000a86:	4601      	mov	r1, r0
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	1c5a      	adds	r2, r3, #1
 8000a8c:	60ba      	str	r2, [r7, #8]
 8000a8e:	b2ca      	uxtb	r2, r1
 8000a90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	3301      	adds	r3, #1
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697a      	ldr	r2, [r7, #20]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	dbf0      	blt.n	8000a82 <_read+0x12>
  }

  return len;
 8000aa0:	687b      	ldr	r3, [r7, #4]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b086      	sub	sp, #24
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	60f8      	str	r0, [r7, #12]
 8000ab2:	60b9      	str	r1, [r7, #8]
 8000ab4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	e009      	b.n	8000ad0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	1c5a      	adds	r2, r3, #1
 8000ac0:	60ba      	str	r2, [r7, #8]
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff fe65 	bl	8000794 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	3301      	adds	r3, #1
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697a      	ldr	r2, [r7, #20]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	dbf1      	blt.n	8000abc <_write+0x12>
  }
  return len;
 8000ad8:	687b      	ldr	r3, [r7, #4]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <_close>:

int _close(int file)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b0a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <_isatty>:

int _isatty(int file)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
	...

08000b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b54:	4a14      	ldr	r2, [pc, #80]	; (8000ba8 <_sbrk+0x5c>)
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <_sbrk+0x60>)
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b60:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <_sbrk+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d102      	bne.n	8000b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b68:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <_sbrk+0x64>)
 8000b6a:	4a12      	ldr	r2, [pc, #72]	; (8000bb4 <_sbrk+0x68>)
 8000b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <_sbrk+0x64>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d207      	bcs.n	8000b8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b7c:	f004 ff48 	bl	8005a10 <__errno>
 8000b80:	4603      	mov	r3, r0
 8000b82:	220c      	movs	r2, #12
 8000b84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b86:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8a:	e009      	b.n	8000ba0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <_sbrk+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b92:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	4a05      	ldr	r2, [pc, #20]	; (8000bb0 <_sbrk+0x64>)
 8000b9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20018000 	.word	0x20018000
 8000bac:	00000400 	.word	0x00000400
 8000bb0:	20000820 	.word	0x20000820
 8000bb4:	20004848 	.word	0x20004848

08000bb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <SystemInit+0x20>)
 8000bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc2:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <SystemInit+0x20>)
 8000bc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_USART2_UART_Init+0x4c>)
 8000be2:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <MX_USART2_UART_Init+0x50>)
 8000be4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <MX_USART2_UART_Init+0x4c>)
 8000be8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_USART2_UART_Init+0x4c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <MX_USART2_UART_Init+0x4c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <MX_USART2_UART_Init+0x4c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_USART2_UART_Init+0x4c>)
 8000c02:	220c      	movs	r2, #12
 8000c04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <MX_USART2_UART_Init+0x4c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_USART2_UART_Init+0x4c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_USART2_UART_Init+0x4c>)
 8000c14:	f001 fabc 	bl	8002190 <HAL_UART_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c1e:	f7ff fe59 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000824 	.word	0x20000824
 8000c2c:	40004400 	.word	0x40004400

08000c30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a19      	ldr	r2, [pc, #100]	; (8000cb4 <HAL_UART_MspInit+0x84>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d12b      	bne.n	8000caa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a17      	ldr	r2, [pc, #92]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a10      	ldr	r2, [pc, #64]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c8a:	230c      	movs	r3, #12
 8000c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c96:	2303      	movs	r3, #3
 8000c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c9a:	2307      	movs	r3, #7
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4805      	ldr	r0, [pc, #20]	; (8000cbc <HAL_UART_MspInit+0x8c>)
 8000ca6:	f000 f959 	bl	8000f5c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000caa:	bf00      	nop
 8000cac:	3728      	adds	r7, #40	; 0x28
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40004400 	.word	0x40004400
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020000 	.word	0x40020000

08000cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc4:	480d      	ldr	r0, [pc, #52]	; (8000cfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cc6:	490e      	ldr	r1, [pc, #56]	; (8000d00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cc8:	4a0e      	ldr	r2, [pc, #56]	; (8000d04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ccc:	e002      	b.n	8000cd4 <LoopCopyDataInit>

08000cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd2:	3304      	adds	r3, #4

08000cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd8:	d3f9      	bcc.n	8000cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cda:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cdc:	4c0b      	ldr	r4, [pc, #44]	; (8000d0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce0:	e001      	b.n	8000ce6 <LoopFillZerobss>

08000ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce4:	3204      	adds	r2, #4

08000ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce8:	d3fb      	bcc.n	8000ce2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cea:	f7ff ff65 	bl	8000bb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cee:	f004 fe95 	bl	8005a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf2:	f7ff fd61 	bl	80007b8 <main>
  bx  lr    
 8000cf6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cf8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d00:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000d04:	08006018 	.word	0x08006018
  ldr r2, =_sbss
 8000d08:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000d0c:	20004848 	.word	0x20004848

08000d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC_IRQHandler>
	...

08000d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d18:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	; (8000d54 <HAL_Init+0x40>)
 8000d1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d24:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <HAL_Init+0x40>)
 8000d2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <HAL_Init+0x40>)
 8000d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f000 f8d8 	bl	8000ef2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d42:	200f      	movs	r0, #15
 8000d44:	f7ff fdf8 	bl	8000938 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d48:	f7ff fdca 	bl	80008e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023c00 	.word	0x40023c00

08000d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_IncTick+0x20>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_IncTick+0x24>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <HAL_IncTick+0x24>)
 8000d6a:	6013      	str	r3, [r2, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	20000868 	.word	0x20000868

08000d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return uwTick;
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <HAL_GetTick+0x14>)
 8000d86:	681b      	ldr	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000868 	.word	0x20000868

08000d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <__NVIC_SetPriorityGrouping+0x44>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dae:	68ba      	ldr	r2, [r7, #8]
 8000db0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db4:	4013      	ands	r3, r2
 8000db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dca:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <__NVIC_SetPriorityGrouping+0x44>)
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	60d3      	str	r3, [r2, #12]
}
 8000dd0:	bf00      	nop
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <__NVIC_GetPriorityGrouping+0x18>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	f003 0307 	and.w	r3, r3, #7
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	db0b      	blt.n	8000e26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	f003 021f 	and.w	r2, r3, #31
 8000e14:	4907      	ldr	r1, [pc, #28]	; (8000e34 <__NVIC_EnableIRQ+0x38>)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	095b      	lsrs	r3, r3, #5
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000e100 	.word	0xe000e100

08000e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	6039      	str	r1, [r7, #0]
 8000e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	db0a      	blt.n	8000e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	490c      	ldr	r1, [pc, #48]	; (8000e84 <__NVIC_SetPriority+0x4c>)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	0112      	lsls	r2, r2, #4
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	440b      	add	r3, r1
 8000e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e60:	e00a      	b.n	8000e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	4908      	ldr	r1, [pc, #32]	; (8000e88 <__NVIC_SetPriority+0x50>)
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	f003 030f 	and.w	r3, r3, #15
 8000e6e:	3b04      	subs	r3, #4
 8000e70:	0112      	lsls	r2, r2, #4
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	440b      	add	r3, r1
 8000e76:	761a      	strb	r2, [r3, #24]
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000e100 	.word	0xe000e100
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b089      	sub	sp, #36	; 0x24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f1c3 0307 	rsb	r3, r3, #7
 8000ea6:	2b04      	cmp	r3, #4
 8000ea8:	bf28      	it	cs
 8000eaa:	2304      	movcs	r3, #4
 8000eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	2b06      	cmp	r3, #6
 8000eb4:	d902      	bls.n	8000ebc <NVIC_EncodePriority+0x30>
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3b03      	subs	r3, #3
 8000eba:	e000      	b.n	8000ebe <NVIC_EncodePriority+0x32>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43da      	mvns	r2, r3
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	401a      	ands	r2, r3
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	fa01 f303 	lsl.w	r3, r1, r3
 8000ede:	43d9      	mvns	r1, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	4313      	orrs	r3, r2
         );
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3724      	adds	r7, #36	; 0x24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff ff4c 	bl	8000d98 <__NVIC_SetPriorityGrouping>
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
 8000f14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f1a:	f7ff ff61 	bl	8000de0 <__NVIC_GetPriorityGrouping>
 8000f1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	68b9      	ldr	r1, [r7, #8]
 8000f24:	6978      	ldr	r0, [r7, #20]
 8000f26:	f7ff ffb1 	bl	8000e8c <NVIC_EncodePriority>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f30:	4611      	mov	r1, r2
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff ff80 	bl	8000e38 <__NVIC_SetPriority>
}
 8000f38:	bf00      	nop
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff ff54 	bl	8000dfc <__NVIC_EnableIRQ>
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	; 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
 8000f76:	e159      	b.n	800122c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f78:	2201      	movs	r2, #1
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	f040 8148 	bne.w	8001226 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 0303 	and.w	r3, r3, #3
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d005      	beq.n	8000fae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d130      	bne.n	8001010 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	2203      	movs	r2, #3
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	68da      	ldr	r2, [r3, #12]
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	091b      	lsrs	r3, r3, #4
 8000ffa:	f003 0201 	and.w	r2, r3, #1
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 0303 	and.w	r3, r3, #3
 8001018:	2b03      	cmp	r3, #3
 800101a:	d017      	beq.n	800104c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	2203      	movs	r2, #3
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	689a      	ldr	r2, [r3, #8]
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d123      	bne.n	80010a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	08da      	lsrs	r2, r3, #3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3208      	adds	r2, #8
 8001060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001064:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	f003 0307 	and.w	r3, r3, #7
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	220f      	movs	r2, #15
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	691a      	ldr	r2, [r3, #16]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	08da      	lsrs	r2, r3, #3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	3208      	adds	r2, #8
 800109a:	69b9      	ldr	r1, [r7, #24]
 800109c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	2203      	movs	r2, #3
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 0203 	and.w	r2, r3, #3
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f000 80a2 	beq.w	8001226 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	4b57      	ldr	r3, [pc, #348]	; (8001244 <HAL_GPIO_Init+0x2e8>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	4a56      	ldr	r2, [pc, #344]	; (8001244 <HAL_GPIO_Init+0x2e8>)
 80010ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f0:	6453      	str	r3, [r2, #68]	; 0x44
 80010f2:	4b54      	ldr	r3, [pc, #336]	; (8001244 <HAL_GPIO_Init+0x2e8>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010fe:	4a52      	ldr	r2, [pc, #328]	; (8001248 <HAL_GPIO_Init+0x2ec>)
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	089b      	lsrs	r3, r3, #2
 8001104:	3302      	adds	r3, #2
 8001106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	f003 0303 	and.w	r3, r3, #3
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	220f      	movs	r2, #15
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a49      	ldr	r2, [pc, #292]	; (800124c <HAL_GPIO_Init+0x2f0>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d019      	beq.n	800115e <HAL_GPIO_Init+0x202>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a48      	ldr	r2, [pc, #288]	; (8001250 <HAL_GPIO_Init+0x2f4>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d013      	beq.n	800115a <HAL_GPIO_Init+0x1fe>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a47      	ldr	r2, [pc, #284]	; (8001254 <HAL_GPIO_Init+0x2f8>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d00d      	beq.n	8001156 <HAL_GPIO_Init+0x1fa>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a46      	ldr	r2, [pc, #280]	; (8001258 <HAL_GPIO_Init+0x2fc>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d007      	beq.n	8001152 <HAL_GPIO_Init+0x1f6>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a45      	ldr	r2, [pc, #276]	; (800125c <HAL_GPIO_Init+0x300>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d101      	bne.n	800114e <HAL_GPIO_Init+0x1f2>
 800114a:	2304      	movs	r3, #4
 800114c:	e008      	b.n	8001160 <HAL_GPIO_Init+0x204>
 800114e:	2307      	movs	r3, #7
 8001150:	e006      	b.n	8001160 <HAL_GPIO_Init+0x204>
 8001152:	2303      	movs	r3, #3
 8001154:	e004      	b.n	8001160 <HAL_GPIO_Init+0x204>
 8001156:	2302      	movs	r3, #2
 8001158:	e002      	b.n	8001160 <HAL_GPIO_Init+0x204>
 800115a:	2301      	movs	r3, #1
 800115c:	e000      	b.n	8001160 <HAL_GPIO_Init+0x204>
 800115e:	2300      	movs	r3, #0
 8001160:	69fa      	ldr	r2, [r7, #28]
 8001162:	f002 0203 	and.w	r2, r2, #3
 8001166:	0092      	lsls	r2, r2, #2
 8001168:	4093      	lsls	r3, r2
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001170:	4935      	ldr	r1, [pc, #212]	; (8001248 <HAL_GPIO_Init+0x2ec>)
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	089b      	lsrs	r3, r3, #2
 8001176:	3302      	adds	r3, #2
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800117e:	4b38      	ldr	r3, [pc, #224]	; (8001260 <HAL_GPIO_Init+0x304>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011a2:	4a2f      	ldr	r2, [pc, #188]	; (8001260 <HAL_GPIO_Init+0x304>)
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a8:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <HAL_GPIO_Init+0x304>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011cc:	4a24      	ldr	r2, [pc, #144]	; (8001260 <HAL_GPIO_Init+0x304>)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011d2:	4b23      	ldr	r3, [pc, #140]	; (8001260 <HAL_GPIO_Init+0x304>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	43db      	mvns	r3, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4013      	ands	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011f6:	4a1a      	ldr	r2, [pc, #104]	; (8001260 <HAL_GPIO_Init+0x304>)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011fc:	4b18      	ldr	r3, [pc, #96]	; (8001260 <HAL_GPIO_Init+0x304>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001220:	4a0f      	ldr	r2, [pc, #60]	; (8001260 <HAL_GPIO_Init+0x304>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3301      	adds	r3, #1
 800122a:	61fb      	str	r3, [r7, #28]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	2b0f      	cmp	r3, #15
 8001230:	f67f aea2 	bls.w	8000f78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001234:	bf00      	nop
 8001236:	bf00      	nop
 8001238:	3724      	adds	r7, #36	; 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800
 8001248:	40013800 	.word	0x40013800
 800124c:	40020000 	.word	0x40020000
 8001250:	40020400 	.word	0x40020400
 8001254:	40020800 	.word	0x40020800
 8001258:	40020c00 	.word	0x40020c00
 800125c:	40021000 	.word	0x40021000
 8001260:	40013c00 	.word	0x40013c00

08001264 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	691a      	ldr	r2, [r3, #16]
 8001274:	887b      	ldrh	r3, [r7, #2]
 8001276:	4013      	ands	r3, r2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d002      	beq.n	8001282 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800127c:	2301      	movs	r3, #1
 800127e:	73fb      	strb	r3, [r7, #15]
 8001280:	e001      	b.n	8001286 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001282:	2300      	movs	r3, #0
 8001284:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001286:	7bfb      	ldrb	r3, [r7, #15]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	807b      	strh	r3, [r7, #2]
 80012a0:	4613      	mov	r3, r2
 80012a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012a4:	787b      	ldrb	r3, [r7, #1]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012aa:	887a      	ldrh	r2, [r7, #2]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012b0:	e003      	b.n	80012ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012b2:	887b      	ldrh	r3, [r7, #2]
 80012b4:	041a      	lsls	r2, r3, #16
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	619a      	str	r2, [r3, #24]
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b085      	sub	sp, #20
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	460b      	mov	r3, r1
 80012d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012d8:	887a      	ldrh	r2, [r7, #2]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4013      	ands	r3, r2
 80012de:	041a      	lsls	r2, r3, #16
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	43d9      	mvns	r1, r3
 80012e4:	887b      	ldrh	r3, [r7, #2]
 80012e6:	400b      	ands	r3, r1
 80012e8:	431a      	orrs	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	619a      	str	r2, [r3, #24]
}
 80012ee:	bf00      	nop
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
	...

080012fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e267      	b.n	80017de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b00      	cmp	r3, #0
 8001318:	d075      	beq.n	8001406 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800131a:	4b88      	ldr	r3, [pc, #544]	; (800153c <HAL_RCC_OscConfig+0x240>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 030c 	and.w	r3, r3, #12
 8001322:	2b04      	cmp	r3, #4
 8001324:	d00c      	beq.n	8001340 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001326:	4b85      	ldr	r3, [pc, #532]	; (800153c <HAL_RCC_OscConfig+0x240>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800132e:	2b08      	cmp	r3, #8
 8001330:	d112      	bne.n	8001358 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001332:	4b82      	ldr	r3, [pc, #520]	; (800153c <HAL_RCC_OscConfig+0x240>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800133a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800133e:	d10b      	bne.n	8001358 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001340:	4b7e      	ldr	r3, [pc, #504]	; (800153c <HAL_RCC_OscConfig+0x240>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d05b      	beq.n	8001404 <HAL_RCC_OscConfig+0x108>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d157      	bne.n	8001404 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e242      	b.n	80017de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001360:	d106      	bne.n	8001370 <HAL_RCC_OscConfig+0x74>
 8001362:	4b76      	ldr	r3, [pc, #472]	; (800153c <HAL_RCC_OscConfig+0x240>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a75      	ldr	r2, [pc, #468]	; (800153c <HAL_RCC_OscConfig+0x240>)
 8001368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	e01d      	b.n	80013ac <HAL_RCC_OscConfig+0xb0>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001378:	d10c      	bne.n	8001394 <HAL_RCC_OscConfig+0x98>
 800137a:	4b70      	ldr	r3, [pc, #448]	; (800153c <HAL_RCC_OscConfig+0x240>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a6f      	ldr	r2, [pc, #444]	; (800153c <HAL_RCC_OscConfig+0x240>)
 8001380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	4b6d      	ldr	r3, [pc, #436]	; (800153c <HAL_RCC_OscConfig+0x240>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a6c      	ldr	r2, [pc, #432]	; (800153c <HAL_RCC_OscConfig+0x240>)
 800138c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	e00b      	b.n	80013ac <HAL_RCC_OscConfig+0xb0>
 8001394:	4b69      	ldr	r3, [pc, #420]	; (800153c <HAL_RCC_OscConfig+0x240>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a68      	ldr	r2, [pc, #416]	; (800153c <HAL_RCC_OscConfig+0x240>)
 800139a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	4b66      	ldr	r3, [pc, #408]	; (800153c <HAL_RCC_OscConfig+0x240>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a65      	ldr	r2, [pc, #404]	; (800153c <HAL_RCC_OscConfig+0x240>)
 80013a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d013      	beq.n	80013dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b4:	f7ff fce4 	bl	8000d80 <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013bc:	f7ff fce0 	bl	8000d80 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b64      	cmp	r3, #100	; 0x64
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e207      	b.n	80017de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ce:	4b5b      	ldr	r3, [pc, #364]	; (800153c <HAL_RCC_OscConfig+0x240>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d0f0      	beq.n	80013bc <HAL_RCC_OscConfig+0xc0>
 80013da:	e014      	b.n	8001406 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013dc:	f7ff fcd0 	bl	8000d80 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013e4:	f7ff fccc 	bl	8000d80 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b64      	cmp	r3, #100	; 0x64
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e1f3      	b.n	80017de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013f6:	4b51      	ldr	r3, [pc, #324]	; (800153c <HAL_RCC_OscConfig+0x240>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f0      	bne.n	80013e4 <HAL_RCC_OscConfig+0xe8>
 8001402:	e000      	b.n	8001406 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d063      	beq.n	80014da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001412:	4b4a      	ldr	r3, [pc, #296]	; (800153c <HAL_RCC_OscConfig+0x240>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 030c 	and.w	r3, r3, #12
 800141a:	2b00      	cmp	r3, #0
 800141c:	d00b      	beq.n	8001436 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800141e:	4b47      	ldr	r3, [pc, #284]	; (800153c <HAL_RCC_OscConfig+0x240>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001426:	2b08      	cmp	r3, #8
 8001428:	d11c      	bne.n	8001464 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800142a:	4b44      	ldr	r3, [pc, #272]	; (800153c <HAL_RCC_OscConfig+0x240>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d116      	bne.n	8001464 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001436:	4b41      	ldr	r3, [pc, #260]	; (800153c <HAL_RCC_OscConfig+0x240>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d005      	beq.n	800144e <HAL_RCC_OscConfig+0x152>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d001      	beq.n	800144e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e1c7      	b.n	80017de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144e:	4b3b      	ldr	r3, [pc, #236]	; (800153c <HAL_RCC_OscConfig+0x240>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	4937      	ldr	r1, [pc, #220]	; (800153c <HAL_RCC_OscConfig+0x240>)
 800145e:	4313      	orrs	r3, r2
 8001460:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001462:	e03a      	b.n	80014da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d020      	beq.n	80014ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800146c:	4b34      	ldr	r3, [pc, #208]	; (8001540 <HAL_RCC_OscConfig+0x244>)
 800146e:	2201      	movs	r2, #1
 8001470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001472:	f7ff fc85 	bl	8000d80 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001478:	e008      	b.n	800148c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800147a:	f7ff fc81 	bl	8000d80 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e1a8      	b.n	80017de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800148c:	4b2b      	ldr	r3, [pc, #172]	; (800153c <HAL_RCC_OscConfig+0x240>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d0f0      	beq.n	800147a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001498:	4b28      	ldr	r3, [pc, #160]	; (800153c <HAL_RCC_OscConfig+0x240>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	4925      	ldr	r1, [pc, #148]	; (800153c <HAL_RCC_OscConfig+0x240>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	600b      	str	r3, [r1, #0]
 80014ac:	e015      	b.n	80014da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ae:	4b24      	ldr	r3, [pc, #144]	; (8001540 <HAL_RCC_OscConfig+0x244>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b4:	f7ff fc64 	bl	8000d80 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014bc:	f7ff fc60 	bl	8000d80 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e187      	b.n	80017de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ce:	4b1b      	ldr	r3, [pc, #108]	; (800153c <HAL_RCC_OscConfig+0x240>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f0      	bne.n	80014bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0308 	and.w	r3, r3, #8
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d036      	beq.n	8001554 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d016      	beq.n	800151c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <HAL_RCC_OscConfig+0x248>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f4:	f7ff fc44 	bl	8000d80 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014fc:	f7ff fc40 	bl	8000d80 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e167      	b.n	80017de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800150e:	4b0b      	ldr	r3, [pc, #44]	; (800153c <HAL_RCC_OscConfig+0x240>)
 8001510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f0      	beq.n	80014fc <HAL_RCC_OscConfig+0x200>
 800151a:	e01b      	b.n	8001554 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <HAL_RCC_OscConfig+0x248>)
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001522:	f7ff fc2d 	bl	8000d80 <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001528:	e00e      	b.n	8001548 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800152a:	f7ff fc29 	bl	8000d80 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d907      	bls.n	8001548 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e150      	b.n	80017de <HAL_RCC_OscConfig+0x4e2>
 800153c:	40023800 	.word	0x40023800
 8001540:	42470000 	.word	0x42470000
 8001544:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001548:	4b88      	ldr	r3, [pc, #544]	; (800176c <HAL_RCC_OscConfig+0x470>)
 800154a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1ea      	bne.n	800152a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	2b00      	cmp	r3, #0
 800155e:	f000 8097 	beq.w	8001690 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001566:	4b81      	ldr	r3, [pc, #516]	; (800176c <HAL_RCC_OscConfig+0x470>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10f      	bne.n	8001592 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	4b7d      	ldr	r3, [pc, #500]	; (800176c <HAL_RCC_OscConfig+0x470>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	4a7c      	ldr	r2, [pc, #496]	; (800176c <HAL_RCC_OscConfig+0x470>)
 800157c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001580:	6413      	str	r3, [r2, #64]	; 0x40
 8001582:	4b7a      	ldr	r3, [pc, #488]	; (800176c <HAL_RCC_OscConfig+0x470>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800158e:	2301      	movs	r3, #1
 8001590:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001592:	4b77      	ldr	r3, [pc, #476]	; (8001770 <HAL_RCC_OscConfig+0x474>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159a:	2b00      	cmp	r3, #0
 800159c:	d118      	bne.n	80015d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800159e:	4b74      	ldr	r3, [pc, #464]	; (8001770 <HAL_RCC_OscConfig+0x474>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a73      	ldr	r2, [pc, #460]	; (8001770 <HAL_RCC_OscConfig+0x474>)
 80015a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015aa:	f7ff fbe9 	bl	8000d80 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015b2:	f7ff fbe5 	bl	8000d80 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e10c      	b.n	80017de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c4:	4b6a      	ldr	r3, [pc, #424]	; (8001770 <HAL_RCC_OscConfig+0x474>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0f0      	beq.n	80015b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d106      	bne.n	80015e6 <HAL_RCC_OscConfig+0x2ea>
 80015d8:	4b64      	ldr	r3, [pc, #400]	; (800176c <HAL_RCC_OscConfig+0x470>)
 80015da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015dc:	4a63      	ldr	r2, [pc, #396]	; (800176c <HAL_RCC_OscConfig+0x470>)
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	6713      	str	r3, [r2, #112]	; 0x70
 80015e4:	e01c      	b.n	8001620 <HAL_RCC_OscConfig+0x324>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2b05      	cmp	r3, #5
 80015ec:	d10c      	bne.n	8001608 <HAL_RCC_OscConfig+0x30c>
 80015ee:	4b5f      	ldr	r3, [pc, #380]	; (800176c <HAL_RCC_OscConfig+0x470>)
 80015f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f2:	4a5e      	ldr	r2, [pc, #376]	; (800176c <HAL_RCC_OscConfig+0x470>)
 80015f4:	f043 0304 	orr.w	r3, r3, #4
 80015f8:	6713      	str	r3, [r2, #112]	; 0x70
 80015fa:	4b5c      	ldr	r3, [pc, #368]	; (800176c <HAL_RCC_OscConfig+0x470>)
 80015fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fe:	4a5b      	ldr	r2, [pc, #364]	; (800176c <HAL_RCC_OscConfig+0x470>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6713      	str	r3, [r2, #112]	; 0x70
 8001606:	e00b      	b.n	8001620 <HAL_RCC_OscConfig+0x324>
 8001608:	4b58      	ldr	r3, [pc, #352]	; (800176c <HAL_RCC_OscConfig+0x470>)
 800160a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160c:	4a57      	ldr	r2, [pc, #348]	; (800176c <HAL_RCC_OscConfig+0x470>)
 800160e:	f023 0301 	bic.w	r3, r3, #1
 8001612:	6713      	str	r3, [r2, #112]	; 0x70
 8001614:	4b55      	ldr	r3, [pc, #340]	; (800176c <HAL_RCC_OscConfig+0x470>)
 8001616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001618:	4a54      	ldr	r2, [pc, #336]	; (800176c <HAL_RCC_OscConfig+0x470>)
 800161a:	f023 0304 	bic.w	r3, r3, #4
 800161e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d015      	beq.n	8001654 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001628:	f7ff fbaa 	bl	8000d80 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800162e:	e00a      	b.n	8001646 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001630:	f7ff fba6 	bl	8000d80 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	f241 3288 	movw	r2, #5000	; 0x1388
 800163e:	4293      	cmp	r3, r2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e0cb      	b.n	80017de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001646:	4b49      	ldr	r3, [pc, #292]	; (800176c <HAL_RCC_OscConfig+0x470>)
 8001648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0ee      	beq.n	8001630 <HAL_RCC_OscConfig+0x334>
 8001652:	e014      	b.n	800167e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001654:	f7ff fb94 	bl	8000d80 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800165a:	e00a      	b.n	8001672 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800165c:	f7ff fb90 	bl	8000d80 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	f241 3288 	movw	r2, #5000	; 0x1388
 800166a:	4293      	cmp	r3, r2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e0b5      	b.n	80017de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001672:	4b3e      	ldr	r3, [pc, #248]	; (800176c <HAL_RCC_OscConfig+0x470>)
 8001674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1ee      	bne.n	800165c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800167e:	7dfb      	ldrb	r3, [r7, #23]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d105      	bne.n	8001690 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001684:	4b39      	ldr	r3, [pc, #228]	; (800176c <HAL_RCC_OscConfig+0x470>)
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	4a38      	ldr	r2, [pc, #224]	; (800176c <HAL_RCC_OscConfig+0x470>)
 800168a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800168e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 80a1 	beq.w	80017dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800169a:	4b34      	ldr	r3, [pc, #208]	; (800176c <HAL_RCC_OscConfig+0x470>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 030c 	and.w	r3, r3, #12
 80016a2:	2b08      	cmp	r3, #8
 80016a4:	d05c      	beq.n	8001760 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d141      	bne.n	8001732 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ae:	4b31      	ldr	r3, [pc, #196]	; (8001774 <HAL_RCC_OscConfig+0x478>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b4:	f7ff fb64 	bl	8000d80 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016bc:	f7ff fb60 	bl	8000d80 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e087      	b.n	80017de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ce:	4b27      	ldr	r3, [pc, #156]	; (800176c <HAL_RCC_OscConfig+0x470>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f0      	bne.n	80016bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69da      	ldr	r2, [r3, #28]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	019b      	lsls	r3, r3, #6
 80016ea:	431a      	orrs	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f0:	085b      	lsrs	r3, r3, #1
 80016f2:	3b01      	subs	r3, #1
 80016f4:	041b      	lsls	r3, r3, #16
 80016f6:	431a      	orrs	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fc:	061b      	lsls	r3, r3, #24
 80016fe:	491b      	ldr	r1, [pc, #108]	; (800176c <HAL_RCC_OscConfig+0x470>)
 8001700:	4313      	orrs	r3, r2
 8001702:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001704:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <HAL_RCC_OscConfig+0x478>)
 8001706:	2201      	movs	r2, #1
 8001708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170a:	f7ff fb39 	bl	8000d80 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001712:	f7ff fb35 	bl	8000d80 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e05c      	b.n	80017de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001724:	4b11      	ldr	r3, [pc, #68]	; (800176c <HAL_RCC_OscConfig+0x470>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0f0      	beq.n	8001712 <HAL_RCC_OscConfig+0x416>
 8001730:	e054      	b.n	80017dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001732:	4b10      	ldr	r3, [pc, #64]	; (8001774 <HAL_RCC_OscConfig+0x478>)
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001738:	f7ff fb22 	bl	8000d80 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001740:	f7ff fb1e 	bl	8000d80 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e045      	b.n	80017de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_RCC_OscConfig+0x470>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f0      	bne.n	8001740 <HAL_RCC_OscConfig+0x444>
 800175e:	e03d      	b.n	80017dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d107      	bne.n	8001778 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e038      	b.n	80017de <HAL_RCC_OscConfig+0x4e2>
 800176c:	40023800 	.word	0x40023800
 8001770:	40007000 	.word	0x40007000
 8001774:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001778:	4b1b      	ldr	r3, [pc, #108]	; (80017e8 <HAL_RCC_OscConfig+0x4ec>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d028      	beq.n	80017d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001790:	429a      	cmp	r2, r3
 8001792:	d121      	bne.n	80017d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800179e:	429a      	cmp	r2, r3
 80017a0:	d11a      	bne.n	80017d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017a8:	4013      	ands	r3, r2
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d111      	bne.n	80017d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017be:	085b      	lsrs	r3, r3, #1
 80017c0:	3b01      	subs	r3, #1
 80017c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d107      	bne.n	80017d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d001      	beq.n	80017dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e000      	b.n	80017de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800

080017ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d101      	bne.n	8001800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e0cc      	b.n	800199a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001800:	4b68      	ldr	r3, [pc, #416]	; (80019a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d90c      	bls.n	8001828 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180e:	4b65      	ldr	r3, [pc, #404]	; (80019a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001816:	4b63      	ldr	r3, [pc, #396]	; (80019a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	429a      	cmp	r2, r3
 8001822:	d001      	beq.n	8001828 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e0b8      	b.n	800199a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d020      	beq.n	8001876 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	2b00      	cmp	r3, #0
 800183e:	d005      	beq.n	800184c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001840:	4b59      	ldr	r3, [pc, #356]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	4a58      	ldr	r2, [pc, #352]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800184a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0308 	and.w	r3, r3, #8
 8001854:	2b00      	cmp	r3, #0
 8001856:	d005      	beq.n	8001864 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001858:	4b53      	ldr	r3, [pc, #332]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	4a52      	ldr	r2, [pc, #328]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001862:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001864:	4b50      	ldr	r3, [pc, #320]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	494d      	ldr	r1, [pc, #308]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	4313      	orrs	r3, r2
 8001874:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	d044      	beq.n	800190c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d107      	bne.n	800189a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188a:	4b47      	ldr	r3, [pc, #284]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d119      	bne.n	80018ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e07f      	b.n	800199a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d003      	beq.n	80018aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018a6:	2b03      	cmp	r3, #3
 80018a8:	d107      	bne.n	80018ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018aa:	4b3f      	ldr	r3, [pc, #252]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d109      	bne.n	80018ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e06f      	b.n	800199a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ba:	4b3b      	ldr	r3, [pc, #236]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e067      	b.n	800199a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ca:	4b37      	ldr	r3, [pc, #220]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f023 0203 	bic.w	r2, r3, #3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	4934      	ldr	r1, [pc, #208]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018dc:	f7ff fa50 	bl	8000d80 <HAL_GetTick>
 80018e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e2:	e00a      	b.n	80018fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e4:	f7ff fa4c 	bl	8000d80 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e04f      	b.n	800199a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fa:	4b2b      	ldr	r3, [pc, #172]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 020c 	and.w	r2, r3, #12
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	429a      	cmp	r2, r3
 800190a:	d1eb      	bne.n	80018e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800190c:	4b25      	ldr	r3, [pc, #148]	; (80019a4 <HAL_RCC_ClockConfig+0x1b8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	d20c      	bcs.n	8001934 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191a:	4b22      	ldr	r3, [pc, #136]	; (80019a4 <HAL_RCC_ClockConfig+0x1b8>)
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001922:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	429a      	cmp	r2, r3
 800192e:	d001      	beq.n	8001934 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e032      	b.n	800199a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	2b00      	cmp	r3, #0
 800193e:	d008      	beq.n	8001952 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001940:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	4916      	ldr	r1, [pc, #88]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 800194e:	4313      	orrs	r3, r2
 8001950:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0308 	and.w	r3, r3, #8
 800195a:	2b00      	cmp	r3, #0
 800195c:	d009      	beq.n	8001972 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800195e:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	490e      	ldr	r1, [pc, #56]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	4313      	orrs	r3, r2
 8001970:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001972:	f000 f821 	bl	80019b8 <HAL_RCC_GetSysClockFreq>
 8001976:	4602      	mov	r2, r0
 8001978:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	091b      	lsrs	r3, r3, #4
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	490a      	ldr	r1, [pc, #40]	; (80019ac <HAL_RCC_ClockConfig+0x1c0>)
 8001984:	5ccb      	ldrb	r3, [r1, r3]
 8001986:	fa22 f303 	lsr.w	r3, r2, r3
 800198a:	4a09      	ldr	r2, [pc, #36]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 800198c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe ffd0 	bl	8000938 <HAL_InitTick>

  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40023c00 	.word	0x40023c00
 80019a8:	40023800 	.word	0x40023800
 80019ac:	08005ff0 	.word	0x08005ff0
 80019b0:	20000000 	.word	0x20000000
 80019b4:	20000004 	.word	0x20000004

080019b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019bc:	b094      	sub	sp, #80	; 0x50
 80019be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	647b      	str	r3, [r7, #68]	; 0x44
 80019c4:	2300      	movs	r3, #0
 80019c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019c8:	2300      	movs	r3, #0
 80019ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019d0:	4b79      	ldr	r3, [pc, #484]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 030c 	and.w	r3, r3, #12
 80019d8:	2b08      	cmp	r3, #8
 80019da:	d00d      	beq.n	80019f8 <HAL_RCC_GetSysClockFreq+0x40>
 80019dc:	2b08      	cmp	r3, #8
 80019de:	f200 80e1 	bhi.w	8001ba4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <HAL_RCC_GetSysClockFreq+0x34>
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	d003      	beq.n	80019f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80019ea:	e0db      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019ec:	4b73      	ldr	r3, [pc, #460]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x204>)
 80019ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80019f0:	e0db      	b.n	8001baa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019f2:	4b73      	ldr	r3, [pc, #460]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x208>)
 80019f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019f6:	e0d8      	b.n	8001baa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019f8:	4b6f      	ldr	r3, [pc, #444]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a00:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a02:	4b6d      	ldr	r3, [pc, #436]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d063      	beq.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a0e:	4b6a      	ldr	r3, [pc, #424]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	099b      	lsrs	r3, r3, #6
 8001a14:	2200      	movs	r2, #0
 8001a16:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a18:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a20:	633b      	str	r3, [r7, #48]	; 0x30
 8001a22:	2300      	movs	r3, #0
 8001a24:	637b      	str	r3, [r7, #52]	; 0x34
 8001a26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a2a:	4622      	mov	r2, r4
 8001a2c:	462b      	mov	r3, r5
 8001a2e:	f04f 0000 	mov.w	r0, #0
 8001a32:	f04f 0100 	mov.w	r1, #0
 8001a36:	0159      	lsls	r1, r3, #5
 8001a38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a3c:	0150      	lsls	r0, r2, #5
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4621      	mov	r1, r4
 8001a44:	1a51      	subs	r1, r2, r1
 8001a46:	6139      	str	r1, [r7, #16]
 8001a48:	4629      	mov	r1, r5
 8001a4a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	f04f 0300 	mov.w	r3, #0
 8001a58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a5c:	4659      	mov	r1, fp
 8001a5e:	018b      	lsls	r3, r1, #6
 8001a60:	4651      	mov	r1, sl
 8001a62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a66:	4651      	mov	r1, sl
 8001a68:	018a      	lsls	r2, r1, #6
 8001a6a:	4651      	mov	r1, sl
 8001a6c:	ebb2 0801 	subs.w	r8, r2, r1
 8001a70:	4659      	mov	r1, fp
 8001a72:	eb63 0901 	sbc.w	r9, r3, r1
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	f04f 0300 	mov.w	r3, #0
 8001a7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a8a:	4690      	mov	r8, r2
 8001a8c:	4699      	mov	r9, r3
 8001a8e:	4623      	mov	r3, r4
 8001a90:	eb18 0303 	adds.w	r3, r8, r3
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	462b      	mov	r3, r5
 8001a98:	eb49 0303 	adc.w	r3, r9, r3
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	f04f 0300 	mov.w	r3, #0
 8001aa6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001aaa:	4629      	mov	r1, r5
 8001aac:	024b      	lsls	r3, r1, #9
 8001aae:	4621      	mov	r1, r4
 8001ab0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ab4:	4621      	mov	r1, r4
 8001ab6:	024a      	lsls	r2, r1, #9
 8001ab8:	4610      	mov	r0, r2
 8001aba:	4619      	mov	r1, r3
 8001abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001abe:	2200      	movs	r2, #0
 8001ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ac2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ac4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ac8:	f7fe fb8a 	bl	80001e0 <__aeabi_uldivmod>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ad4:	e058      	b.n	8001b88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ad6:	4b38      	ldr	r3, [pc, #224]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	099b      	lsrs	r3, r3, #6
 8001adc:	2200      	movs	r2, #0
 8001ade:	4618      	mov	r0, r3
 8001ae0:	4611      	mov	r1, r2
 8001ae2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ae6:	623b      	str	r3, [r7, #32]
 8001ae8:	2300      	movs	r3, #0
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
 8001aec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001af0:	4642      	mov	r2, r8
 8001af2:	464b      	mov	r3, r9
 8001af4:	f04f 0000 	mov.w	r0, #0
 8001af8:	f04f 0100 	mov.w	r1, #0
 8001afc:	0159      	lsls	r1, r3, #5
 8001afe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b02:	0150      	lsls	r0, r2, #5
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4641      	mov	r1, r8
 8001b0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b0e:	4649      	mov	r1, r9
 8001b10:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b14:	f04f 0200 	mov.w	r2, #0
 8001b18:	f04f 0300 	mov.w	r3, #0
 8001b1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b28:	ebb2 040a 	subs.w	r4, r2, sl
 8001b2c:	eb63 050b 	sbc.w	r5, r3, fp
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	f04f 0300 	mov.w	r3, #0
 8001b38:	00eb      	lsls	r3, r5, #3
 8001b3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b3e:	00e2      	lsls	r2, r4, #3
 8001b40:	4614      	mov	r4, r2
 8001b42:	461d      	mov	r5, r3
 8001b44:	4643      	mov	r3, r8
 8001b46:	18e3      	adds	r3, r4, r3
 8001b48:	603b      	str	r3, [r7, #0]
 8001b4a:	464b      	mov	r3, r9
 8001b4c:	eb45 0303 	adc.w	r3, r5, r3
 8001b50:	607b      	str	r3, [r7, #4]
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b5e:	4629      	mov	r1, r5
 8001b60:	028b      	lsls	r3, r1, #10
 8001b62:	4621      	mov	r1, r4
 8001b64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b68:	4621      	mov	r1, r4
 8001b6a:	028a      	lsls	r2, r1, #10
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	4619      	mov	r1, r3
 8001b70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b72:	2200      	movs	r2, #0
 8001b74:	61bb      	str	r3, [r7, #24]
 8001b76:	61fa      	str	r2, [r7, #28]
 8001b78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b7c:	f7fe fb30 	bl	80001e0 <__aeabi_uldivmod>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4613      	mov	r3, r2
 8001b86:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	0c1b      	lsrs	r3, r3, #16
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	3301      	adds	r3, #1
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ba2:	e002      	b.n	8001baa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ba4:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x204>)
 8001ba6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ba8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001baa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3750      	adds	r7, #80	; 0x50
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	00f42400 	.word	0x00f42400
 8001bc0:	007a1200 	.word	0x007a1200

08001bc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bca:	681b      	ldr	r3, [r3, #0]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	20000000 	.word	0x20000000

08001bdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001be0:	f7ff fff0 	bl	8001bc4 <HAL_RCC_GetHCLKFreq>
 8001be4:	4602      	mov	r2, r0
 8001be6:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	0a9b      	lsrs	r3, r3, #10
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	4903      	ldr	r1, [pc, #12]	; (8001c00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bf2:	5ccb      	ldrb	r3, [r1, r3]
 8001bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	08006000 	.word	0x08006000

08001c04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c08:	f7ff ffdc 	bl	8001bc4 <HAL_RCC_GetHCLKFreq>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	0b5b      	lsrs	r3, r3, #13
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	4903      	ldr	r1, [pc, #12]	; (8001c28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c1a:	5ccb      	ldrb	r3, [r1, r3]
 8001c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40023800 	.word	0x40023800
 8001c28:	08006000 	.word	0x08006000

08001c2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	220f      	movs	r2, #15
 8001c3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c3c:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <HAL_RCC_GetClockConfig+0x5c>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 0203 	and.w	r2, r3, #3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c48:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <HAL_RCC_GetClockConfig+0x5c>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <HAL_RCC_GetClockConfig+0x5c>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c60:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <HAL_RCC_GetClockConfig+0x5c>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	08db      	lsrs	r3, r3, #3
 8001c66:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c6e:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <HAL_RCC_GetClockConfig+0x60>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0207 	and.w	r2, r3, #7
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	601a      	str	r2, [r3, #0]
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40023c00 	.word	0x40023c00

08001c90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e041      	b.n	8001d26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d106      	bne.n	8001cbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f839 	bl	8001d2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3304      	adds	r3, #4
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4610      	mov	r0, r2
 8001cd0:	f000 f9ca 	bl	8002068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
	...

08001d44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d001      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e044      	b.n	8001de6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68da      	ldr	r2, [r3, #12]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0201 	orr.w	r2, r2, #1
 8001d72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a1e      	ldr	r2, [pc, #120]	; (8001df4 <HAL_TIM_Base_Start_IT+0xb0>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d018      	beq.n	8001db0 <HAL_TIM_Base_Start_IT+0x6c>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d86:	d013      	beq.n	8001db0 <HAL_TIM_Base_Start_IT+0x6c>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a1a      	ldr	r2, [pc, #104]	; (8001df8 <HAL_TIM_Base_Start_IT+0xb4>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d00e      	beq.n	8001db0 <HAL_TIM_Base_Start_IT+0x6c>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a19      	ldr	r2, [pc, #100]	; (8001dfc <HAL_TIM_Base_Start_IT+0xb8>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d009      	beq.n	8001db0 <HAL_TIM_Base_Start_IT+0x6c>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a17      	ldr	r2, [pc, #92]	; (8001e00 <HAL_TIM_Base_Start_IT+0xbc>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d004      	beq.n	8001db0 <HAL_TIM_Base_Start_IT+0x6c>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a16      	ldr	r2, [pc, #88]	; (8001e04 <HAL_TIM_Base_Start_IT+0xc0>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d111      	bne.n	8001dd4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2b06      	cmp	r3, #6
 8001dc0:	d010      	beq.n	8001de4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f042 0201 	orr.w	r2, r2, #1
 8001dd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dd2:	e007      	b.n	8001de4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 0201 	orr.w	r2, r2, #1
 8001de2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	40010000 	.word	0x40010000
 8001df8:	40000400 	.word	0x40000400
 8001dfc:	40000800 	.word	0x40000800
 8001e00:	40000c00 	.word	0x40000c00
 8001e04:	40014000 	.word	0x40014000

08001e08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d122      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d11b      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f06f 0202 	mvn.w	r2, #2
 8001e34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f8ee 	bl	800202c <HAL_TIM_IC_CaptureCallback>
 8001e50:	e005      	b.n	8001e5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f8e0 	bl	8002018 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f8f1 	bl	8002040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	d122      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b04      	cmp	r3, #4
 8001e7e:	d11b      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0204 	mvn.w	r2, #4
 8001e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f8c4 	bl	800202c <HAL_TIM_IC_CaptureCallback>
 8001ea4:	e005      	b.n	8001eb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f8b6 	bl	8002018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f8c7 	bl	8002040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	2b08      	cmp	r3, #8
 8001ec4:	d122      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f003 0308 	and.w	r3, r3, #8
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d11b      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0208 	mvn.w	r2, #8
 8001edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2204      	movs	r2, #4
 8001ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f89a 	bl	800202c <HAL_TIM_IC_CaptureCallback>
 8001ef8:	e005      	b.n	8001f06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f88c 	bl	8002018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f89d 	bl	8002040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	f003 0310 	and.w	r3, r3, #16
 8001f16:	2b10      	cmp	r3, #16
 8001f18:	d122      	bne.n	8001f60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f003 0310 	and.w	r3, r3, #16
 8001f24:	2b10      	cmp	r3, #16
 8001f26:	d11b      	bne.n	8001f60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f06f 0210 	mvn.w	r2, #16
 8001f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2208      	movs	r2, #8
 8001f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f870 	bl	800202c <HAL_TIM_IC_CaptureCallback>
 8001f4c:	e005      	b.n	8001f5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f862 	bl	8002018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 f873 	bl	8002040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d10e      	bne.n	8001f8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d107      	bne.n	8001f8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f06f 0201 	mvn.w	r2, #1
 8001f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7fe fc92 	bl	80008b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f96:	2b80      	cmp	r3, #128	; 0x80
 8001f98:	d10e      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa4:	2b80      	cmp	r3, #128	; 0x80
 8001fa6:	d107      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f8e2 	bl	800217c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc2:	2b40      	cmp	r3, #64	; 0x40
 8001fc4:	d10e      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd0:	2b40      	cmp	r3, #64	; 0x40
 8001fd2:	d107      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f838 	bl	8002054 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	f003 0320 	and.w	r3, r3, #32
 8001fee:	2b20      	cmp	r3, #32
 8001ff0:	d10e      	bne.n	8002010 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f003 0320 	and.w	r3, r3, #32
 8001ffc:	2b20      	cmp	r3, #32
 8001ffe:	d107      	bne.n	8002010 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f06f 0220 	mvn.w	r2, #32
 8002008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f8ac 	bl	8002168 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a34      	ldr	r2, [pc, #208]	; (800214c <TIM_Base_SetConfig+0xe4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d00f      	beq.n	80020a0 <TIM_Base_SetConfig+0x38>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002086:	d00b      	beq.n	80020a0 <TIM_Base_SetConfig+0x38>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a31      	ldr	r2, [pc, #196]	; (8002150 <TIM_Base_SetConfig+0xe8>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d007      	beq.n	80020a0 <TIM_Base_SetConfig+0x38>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a30      	ldr	r2, [pc, #192]	; (8002154 <TIM_Base_SetConfig+0xec>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d003      	beq.n	80020a0 <TIM_Base_SetConfig+0x38>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a2f      	ldr	r2, [pc, #188]	; (8002158 <TIM_Base_SetConfig+0xf0>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d108      	bne.n	80020b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a25      	ldr	r2, [pc, #148]	; (800214c <TIM_Base_SetConfig+0xe4>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d01b      	beq.n	80020f2 <TIM_Base_SetConfig+0x8a>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c0:	d017      	beq.n	80020f2 <TIM_Base_SetConfig+0x8a>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a22      	ldr	r2, [pc, #136]	; (8002150 <TIM_Base_SetConfig+0xe8>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d013      	beq.n	80020f2 <TIM_Base_SetConfig+0x8a>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a21      	ldr	r2, [pc, #132]	; (8002154 <TIM_Base_SetConfig+0xec>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d00f      	beq.n	80020f2 <TIM_Base_SetConfig+0x8a>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a20      	ldr	r2, [pc, #128]	; (8002158 <TIM_Base_SetConfig+0xf0>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d00b      	beq.n	80020f2 <TIM_Base_SetConfig+0x8a>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a1f      	ldr	r2, [pc, #124]	; (800215c <TIM_Base_SetConfig+0xf4>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d007      	beq.n	80020f2 <TIM_Base_SetConfig+0x8a>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a1e      	ldr	r2, [pc, #120]	; (8002160 <TIM_Base_SetConfig+0xf8>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d003      	beq.n	80020f2 <TIM_Base_SetConfig+0x8a>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a1d      	ldr	r2, [pc, #116]	; (8002164 <TIM_Base_SetConfig+0xfc>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d108      	bne.n	8002104 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	4313      	orrs	r3, r2
 8002102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	4313      	orrs	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a08      	ldr	r2, [pc, #32]	; (800214c <TIM_Base_SetConfig+0xe4>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d103      	bne.n	8002138 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	691a      	ldr	r2, [r3, #16]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	615a      	str	r2, [r3, #20]
}
 800213e:	bf00      	nop
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	40010000 	.word	0x40010000
 8002150:	40000400 	.word	0x40000400
 8002154:	40000800 	.word	0x40000800
 8002158:	40000c00 	.word	0x40000c00
 800215c:	40014000 	.word	0x40014000
 8002160:	40014400 	.word	0x40014400
 8002164:	40014800 	.word	0x40014800

08002168 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e03f      	b.n	8002222 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d106      	bne.n	80021bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7fe fd3a 	bl	8000c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2224      	movs	r2, #36	; 0x24
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f929 	bl	800242c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	691a      	ldr	r2, [r3, #16]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	695a      	ldr	r2, [r3, #20]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68da      	ldr	r2, [r3, #12]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002208:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2220      	movs	r2, #32
 8002214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2220      	movs	r2, #32
 800221c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b08a      	sub	sp, #40	; 0x28
 800222e:	af02      	add	r7, sp, #8
 8002230:	60f8      	str	r0, [r7, #12]
 8002232:	60b9      	str	r1, [r7, #8]
 8002234:	603b      	str	r3, [r7, #0]
 8002236:	4613      	mov	r3, r2
 8002238:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b20      	cmp	r3, #32
 8002248:	d17c      	bne.n	8002344 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d002      	beq.n	8002256 <HAL_UART_Transmit+0x2c>
 8002250:	88fb      	ldrh	r3, [r7, #6]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e075      	b.n	8002346 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_UART_Transmit+0x3e>
 8002264:	2302      	movs	r3, #2
 8002266:	e06e      	b.n	8002346 <HAL_UART_Transmit+0x11c>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2221      	movs	r2, #33	; 0x21
 800227a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800227e:	f7fe fd7f 	bl	8000d80 <HAL_GetTick>
 8002282:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	88fa      	ldrh	r2, [r7, #6]
 8002288:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	88fa      	ldrh	r2, [r7, #6]
 800228e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002298:	d108      	bne.n	80022ac <HAL_UART_Transmit+0x82>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d104      	bne.n	80022ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	61bb      	str	r3, [r7, #24]
 80022aa:	e003      	b.n	80022b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80022bc:	e02a      	b.n	8002314 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	2200      	movs	r2, #0
 80022c6:	2180      	movs	r1, #128	; 0x80
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f000 f840 	bl	800234e <UART_WaitOnFlagUntilTimeout>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e036      	b.n	8002346 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10b      	bne.n	80022f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	3302      	adds	r3, #2
 80022f2:	61bb      	str	r3, [r7, #24]
 80022f4:	e007      	b.n	8002306 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	781a      	ldrb	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	3301      	adds	r3, #1
 8002304:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800230a:	b29b      	uxth	r3, r3
 800230c:	3b01      	subs	r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002318:	b29b      	uxth	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1cf      	bne.n	80022be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	2200      	movs	r2, #0
 8002326:	2140      	movs	r1, #64	; 0x40
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 f810 	bl	800234e <UART_WaitOnFlagUntilTimeout>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e006      	b.n	8002346 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2220      	movs	r2, #32
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	e000      	b.n	8002346 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002344:	2302      	movs	r3, #2
  }
}
 8002346:	4618      	mov	r0, r3
 8002348:	3720      	adds	r7, #32
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b090      	sub	sp, #64	; 0x40
 8002352:	af00      	add	r7, sp, #0
 8002354:	60f8      	str	r0, [r7, #12]
 8002356:	60b9      	str	r1, [r7, #8]
 8002358:	603b      	str	r3, [r7, #0]
 800235a:	4613      	mov	r3, r2
 800235c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800235e:	e050      	b.n	8002402 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002366:	d04c      	beq.n	8002402 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800236a:	2b00      	cmp	r3, #0
 800236c:	d007      	beq.n	800237e <UART_WaitOnFlagUntilTimeout+0x30>
 800236e:	f7fe fd07 	bl	8000d80 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800237a:	429a      	cmp	r2, r3
 800237c:	d241      	bcs.n	8002402 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	330c      	adds	r3, #12
 8002384:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002388:	e853 3f00 	ldrex	r3, [r3]
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002394:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	330c      	adds	r3, #12
 800239c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800239e:	637a      	str	r2, [r7, #52]	; 0x34
 80023a0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023a6:	e841 2300 	strex	r3, r2, [r1]
 80023aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80023ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1e5      	bne.n	800237e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	3314      	adds	r3, #20
 80023b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	e853 3f00 	ldrex	r3, [r3]
 80023c0:	613b      	str	r3, [r7, #16]
   return(result);
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	f023 0301 	bic.w	r3, r3, #1
 80023c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	3314      	adds	r3, #20
 80023d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023d2:	623a      	str	r2, [r7, #32]
 80023d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023d6:	69f9      	ldr	r1, [r7, #28]
 80023d8:	6a3a      	ldr	r2, [r7, #32]
 80023da:	e841 2300 	strex	r3, r2, [r1]
 80023de:	61bb      	str	r3, [r7, #24]
   return(result);
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1e5      	bne.n	80023b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2220      	movs	r2, #32
 80023ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2220      	movs	r2, #32
 80023f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e00f      	b.n	8002422 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	4013      	ands	r3, r2
 800240c:	68ba      	ldr	r2, [r7, #8]
 800240e:	429a      	cmp	r2, r3
 8002410:	bf0c      	ite	eq
 8002412:	2301      	moveq	r3, #1
 8002414:	2300      	movne	r3, #0
 8002416:	b2db      	uxtb	r3, r3
 8002418:	461a      	mov	r2, r3
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	429a      	cmp	r2, r3
 800241e:	d09f      	beq.n	8002360 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3740      	adds	r7, #64	; 0x40
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800242c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002430:	b0c0      	sub	sp, #256	; 0x100
 8002432:	af00      	add	r7, sp, #0
 8002434:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002448:	68d9      	ldr	r1, [r3, #12]
 800244a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	ea40 0301 	orr.w	r3, r0, r1
 8002454:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	431a      	orrs	r2, r3
 8002464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	431a      	orrs	r2, r3
 800246c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	4313      	orrs	r3, r2
 8002474:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002484:	f021 010c 	bic.w	r1, r1, #12
 8002488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002492:	430b      	orrs	r3, r1
 8002494:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80024a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024a6:	6999      	ldr	r1, [r3, #24]
 80024a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	ea40 0301 	orr.w	r3, r0, r1
 80024b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	4b8f      	ldr	r3, [pc, #572]	; (80026f8 <UART_SetConfig+0x2cc>)
 80024bc:	429a      	cmp	r2, r3
 80024be:	d005      	beq.n	80024cc <UART_SetConfig+0xa0>
 80024c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	4b8d      	ldr	r3, [pc, #564]	; (80026fc <UART_SetConfig+0x2d0>)
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d104      	bne.n	80024d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80024cc:	f7ff fb9a 	bl	8001c04 <HAL_RCC_GetPCLK2Freq>
 80024d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80024d4:	e003      	b.n	80024de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80024d6:	f7ff fb81 	bl	8001bdc <HAL_RCC_GetPCLK1Freq>
 80024da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024e8:	f040 810c 	bne.w	8002704 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024f0:	2200      	movs	r2, #0
 80024f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80024f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80024fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80024fe:	4622      	mov	r2, r4
 8002500:	462b      	mov	r3, r5
 8002502:	1891      	adds	r1, r2, r2
 8002504:	65b9      	str	r1, [r7, #88]	; 0x58
 8002506:	415b      	adcs	r3, r3
 8002508:	65fb      	str	r3, [r7, #92]	; 0x5c
 800250a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800250e:	4621      	mov	r1, r4
 8002510:	eb12 0801 	adds.w	r8, r2, r1
 8002514:	4629      	mov	r1, r5
 8002516:	eb43 0901 	adc.w	r9, r3, r1
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	f04f 0300 	mov.w	r3, #0
 8002522:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002526:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800252a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800252e:	4690      	mov	r8, r2
 8002530:	4699      	mov	r9, r3
 8002532:	4623      	mov	r3, r4
 8002534:	eb18 0303 	adds.w	r3, r8, r3
 8002538:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800253c:	462b      	mov	r3, r5
 800253e:	eb49 0303 	adc.w	r3, r9, r3
 8002542:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002552:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002556:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800255a:	460b      	mov	r3, r1
 800255c:	18db      	adds	r3, r3, r3
 800255e:	653b      	str	r3, [r7, #80]	; 0x50
 8002560:	4613      	mov	r3, r2
 8002562:	eb42 0303 	adc.w	r3, r2, r3
 8002566:	657b      	str	r3, [r7, #84]	; 0x54
 8002568:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800256c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002570:	f7fd fe36 	bl	80001e0 <__aeabi_uldivmod>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	4b61      	ldr	r3, [pc, #388]	; (8002700 <UART_SetConfig+0x2d4>)
 800257a:	fba3 2302 	umull	r2, r3, r3, r2
 800257e:	095b      	lsrs	r3, r3, #5
 8002580:	011c      	lsls	r4, r3, #4
 8002582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002586:	2200      	movs	r2, #0
 8002588:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800258c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002590:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002594:	4642      	mov	r2, r8
 8002596:	464b      	mov	r3, r9
 8002598:	1891      	adds	r1, r2, r2
 800259a:	64b9      	str	r1, [r7, #72]	; 0x48
 800259c:	415b      	adcs	r3, r3
 800259e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80025a4:	4641      	mov	r1, r8
 80025a6:	eb12 0a01 	adds.w	sl, r2, r1
 80025aa:	4649      	mov	r1, r9
 80025ac:	eb43 0b01 	adc.w	fp, r3, r1
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80025bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80025c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025c4:	4692      	mov	sl, r2
 80025c6:	469b      	mov	fp, r3
 80025c8:	4643      	mov	r3, r8
 80025ca:	eb1a 0303 	adds.w	r3, sl, r3
 80025ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80025d2:	464b      	mov	r3, r9
 80025d4:	eb4b 0303 	adc.w	r3, fp, r3
 80025d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80025dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80025e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80025ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80025f0:	460b      	mov	r3, r1
 80025f2:	18db      	adds	r3, r3, r3
 80025f4:	643b      	str	r3, [r7, #64]	; 0x40
 80025f6:	4613      	mov	r3, r2
 80025f8:	eb42 0303 	adc.w	r3, r2, r3
 80025fc:	647b      	str	r3, [r7, #68]	; 0x44
 80025fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002602:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002606:	f7fd fdeb 	bl	80001e0 <__aeabi_uldivmod>
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	4611      	mov	r1, r2
 8002610:	4b3b      	ldr	r3, [pc, #236]	; (8002700 <UART_SetConfig+0x2d4>)
 8002612:	fba3 2301 	umull	r2, r3, r3, r1
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	2264      	movs	r2, #100	; 0x64
 800261a:	fb02 f303 	mul.w	r3, r2, r3
 800261e:	1acb      	subs	r3, r1, r3
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002626:	4b36      	ldr	r3, [pc, #216]	; (8002700 <UART_SetConfig+0x2d4>)
 8002628:	fba3 2302 	umull	r2, r3, r3, r2
 800262c:	095b      	lsrs	r3, r3, #5
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002634:	441c      	add	r4, r3
 8002636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800263a:	2200      	movs	r2, #0
 800263c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002640:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002644:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002648:	4642      	mov	r2, r8
 800264a:	464b      	mov	r3, r9
 800264c:	1891      	adds	r1, r2, r2
 800264e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002650:	415b      	adcs	r3, r3
 8002652:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002654:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002658:	4641      	mov	r1, r8
 800265a:	1851      	adds	r1, r2, r1
 800265c:	6339      	str	r1, [r7, #48]	; 0x30
 800265e:	4649      	mov	r1, r9
 8002660:	414b      	adcs	r3, r1
 8002662:	637b      	str	r3, [r7, #52]	; 0x34
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002670:	4659      	mov	r1, fp
 8002672:	00cb      	lsls	r3, r1, #3
 8002674:	4651      	mov	r1, sl
 8002676:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800267a:	4651      	mov	r1, sl
 800267c:	00ca      	lsls	r2, r1, #3
 800267e:	4610      	mov	r0, r2
 8002680:	4619      	mov	r1, r3
 8002682:	4603      	mov	r3, r0
 8002684:	4642      	mov	r2, r8
 8002686:	189b      	adds	r3, r3, r2
 8002688:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800268c:	464b      	mov	r3, r9
 800268e:	460a      	mov	r2, r1
 8002690:	eb42 0303 	adc.w	r3, r2, r3
 8002694:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80026a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80026a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80026ac:	460b      	mov	r3, r1
 80026ae:	18db      	adds	r3, r3, r3
 80026b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80026b2:	4613      	mov	r3, r2
 80026b4:	eb42 0303 	adc.w	r3, r2, r3
 80026b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80026c2:	f7fd fd8d 	bl	80001e0 <__aeabi_uldivmod>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	4b0d      	ldr	r3, [pc, #52]	; (8002700 <UART_SetConfig+0x2d4>)
 80026cc:	fba3 1302 	umull	r1, r3, r3, r2
 80026d0:	095b      	lsrs	r3, r3, #5
 80026d2:	2164      	movs	r1, #100	; 0x64
 80026d4:	fb01 f303 	mul.w	r3, r1, r3
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	3332      	adds	r3, #50	; 0x32
 80026de:	4a08      	ldr	r2, [pc, #32]	; (8002700 <UART_SetConfig+0x2d4>)
 80026e0:	fba2 2303 	umull	r2, r3, r2, r3
 80026e4:	095b      	lsrs	r3, r3, #5
 80026e6:	f003 0207 	and.w	r2, r3, #7
 80026ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4422      	add	r2, r4
 80026f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80026f4:	e106      	b.n	8002904 <UART_SetConfig+0x4d8>
 80026f6:	bf00      	nop
 80026f8:	40011000 	.word	0x40011000
 80026fc:	40011400 	.word	0x40011400
 8002700:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002704:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002708:	2200      	movs	r2, #0
 800270a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800270e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002712:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002716:	4642      	mov	r2, r8
 8002718:	464b      	mov	r3, r9
 800271a:	1891      	adds	r1, r2, r2
 800271c:	6239      	str	r1, [r7, #32]
 800271e:	415b      	adcs	r3, r3
 8002720:	627b      	str	r3, [r7, #36]	; 0x24
 8002722:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002726:	4641      	mov	r1, r8
 8002728:	1854      	adds	r4, r2, r1
 800272a:	4649      	mov	r1, r9
 800272c:	eb43 0501 	adc.w	r5, r3, r1
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	f04f 0300 	mov.w	r3, #0
 8002738:	00eb      	lsls	r3, r5, #3
 800273a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800273e:	00e2      	lsls	r2, r4, #3
 8002740:	4614      	mov	r4, r2
 8002742:	461d      	mov	r5, r3
 8002744:	4643      	mov	r3, r8
 8002746:	18e3      	adds	r3, r4, r3
 8002748:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800274c:	464b      	mov	r3, r9
 800274e:	eb45 0303 	adc.w	r3, r5, r3
 8002752:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002762:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002766:	f04f 0200 	mov.w	r2, #0
 800276a:	f04f 0300 	mov.w	r3, #0
 800276e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002772:	4629      	mov	r1, r5
 8002774:	008b      	lsls	r3, r1, #2
 8002776:	4621      	mov	r1, r4
 8002778:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800277c:	4621      	mov	r1, r4
 800277e:	008a      	lsls	r2, r1, #2
 8002780:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002784:	f7fd fd2c 	bl	80001e0 <__aeabi_uldivmod>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	4b60      	ldr	r3, [pc, #384]	; (8002910 <UART_SetConfig+0x4e4>)
 800278e:	fba3 2302 	umull	r2, r3, r3, r2
 8002792:	095b      	lsrs	r3, r3, #5
 8002794:	011c      	lsls	r4, r3, #4
 8002796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800279a:	2200      	movs	r2, #0
 800279c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80027a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80027a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80027a8:	4642      	mov	r2, r8
 80027aa:	464b      	mov	r3, r9
 80027ac:	1891      	adds	r1, r2, r2
 80027ae:	61b9      	str	r1, [r7, #24]
 80027b0:	415b      	adcs	r3, r3
 80027b2:	61fb      	str	r3, [r7, #28]
 80027b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027b8:	4641      	mov	r1, r8
 80027ba:	1851      	adds	r1, r2, r1
 80027bc:	6139      	str	r1, [r7, #16]
 80027be:	4649      	mov	r1, r9
 80027c0:	414b      	adcs	r3, r1
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	f04f 0200 	mov.w	r2, #0
 80027c8:	f04f 0300 	mov.w	r3, #0
 80027cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027d0:	4659      	mov	r1, fp
 80027d2:	00cb      	lsls	r3, r1, #3
 80027d4:	4651      	mov	r1, sl
 80027d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027da:	4651      	mov	r1, sl
 80027dc:	00ca      	lsls	r2, r1, #3
 80027de:	4610      	mov	r0, r2
 80027e0:	4619      	mov	r1, r3
 80027e2:	4603      	mov	r3, r0
 80027e4:	4642      	mov	r2, r8
 80027e6:	189b      	adds	r3, r3, r2
 80027e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027ec:	464b      	mov	r3, r9
 80027ee:	460a      	mov	r2, r1
 80027f0:	eb42 0303 	adc.w	r3, r2, r3
 80027f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80027f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	67bb      	str	r3, [r7, #120]	; 0x78
 8002802:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	f04f 0300 	mov.w	r3, #0
 800280c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002810:	4649      	mov	r1, r9
 8002812:	008b      	lsls	r3, r1, #2
 8002814:	4641      	mov	r1, r8
 8002816:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800281a:	4641      	mov	r1, r8
 800281c:	008a      	lsls	r2, r1, #2
 800281e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002822:	f7fd fcdd 	bl	80001e0 <__aeabi_uldivmod>
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	4611      	mov	r1, r2
 800282c:	4b38      	ldr	r3, [pc, #224]	; (8002910 <UART_SetConfig+0x4e4>)
 800282e:	fba3 2301 	umull	r2, r3, r3, r1
 8002832:	095b      	lsrs	r3, r3, #5
 8002834:	2264      	movs	r2, #100	; 0x64
 8002836:	fb02 f303 	mul.w	r3, r2, r3
 800283a:	1acb      	subs	r3, r1, r3
 800283c:	011b      	lsls	r3, r3, #4
 800283e:	3332      	adds	r3, #50	; 0x32
 8002840:	4a33      	ldr	r2, [pc, #204]	; (8002910 <UART_SetConfig+0x4e4>)
 8002842:	fba2 2303 	umull	r2, r3, r2, r3
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800284c:	441c      	add	r4, r3
 800284e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002852:	2200      	movs	r2, #0
 8002854:	673b      	str	r3, [r7, #112]	; 0x70
 8002856:	677a      	str	r2, [r7, #116]	; 0x74
 8002858:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800285c:	4642      	mov	r2, r8
 800285e:	464b      	mov	r3, r9
 8002860:	1891      	adds	r1, r2, r2
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	415b      	adcs	r3, r3
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800286c:	4641      	mov	r1, r8
 800286e:	1851      	adds	r1, r2, r1
 8002870:	6039      	str	r1, [r7, #0]
 8002872:	4649      	mov	r1, r9
 8002874:	414b      	adcs	r3, r1
 8002876:	607b      	str	r3, [r7, #4]
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002884:	4659      	mov	r1, fp
 8002886:	00cb      	lsls	r3, r1, #3
 8002888:	4651      	mov	r1, sl
 800288a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800288e:	4651      	mov	r1, sl
 8002890:	00ca      	lsls	r2, r1, #3
 8002892:	4610      	mov	r0, r2
 8002894:	4619      	mov	r1, r3
 8002896:	4603      	mov	r3, r0
 8002898:	4642      	mov	r2, r8
 800289a:	189b      	adds	r3, r3, r2
 800289c:	66bb      	str	r3, [r7, #104]	; 0x68
 800289e:	464b      	mov	r3, r9
 80028a0:	460a      	mov	r2, r1
 80028a2:	eb42 0303 	adc.w	r3, r2, r3
 80028a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80028a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	663b      	str	r3, [r7, #96]	; 0x60
 80028b2:	667a      	str	r2, [r7, #100]	; 0x64
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80028c0:	4649      	mov	r1, r9
 80028c2:	008b      	lsls	r3, r1, #2
 80028c4:	4641      	mov	r1, r8
 80028c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028ca:	4641      	mov	r1, r8
 80028cc:	008a      	lsls	r2, r1, #2
 80028ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80028d2:	f7fd fc85 	bl	80001e0 <__aeabi_uldivmod>
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	4b0d      	ldr	r3, [pc, #52]	; (8002910 <UART_SetConfig+0x4e4>)
 80028dc:	fba3 1302 	umull	r1, r3, r3, r2
 80028e0:	095b      	lsrs	r3, r3, #5
 80028e2:	2164      	movs	r1, #100	; 0x64
 80028e4:	fb01 f303 	mul.w	r3, r1, r3
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	3332      	adds	r3, #50	; 0x32
 80028ee:	4a08      	ldr	r2, [pc, #32]	; (8002910 <UART_SetConfig+0x4e4>)
 80028f0:	fba2 2303 	umull	r2, r3, r2, r3
 80028f4:	095b      	lsrs	r3, r3, #5
 80028f6:	f003 020f 	and.w	r2, r3, #15
 80028fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4422      	add	r2, r4
 8002902:	609a      	str	r2, [r3, #8]
}
 8002904:	bf00      	nop
 8002906:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800290a:	46bd      	mov	sp, r7
 800290c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002910:	51eb851f 	.word	0x51eb851f

08002914 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002922:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002926:	2b84      	cmp	r3, #132	; 0x84
 8002928:	d005      	beq.n	8002936 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800292a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	4413      	add	r3, r2
 8002932:	3303      	adds	r3, #3
 8002934:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002936:	68fb      	ldr	r3, [r7, #12]
}
 8002938:	4618      	mov	r0, r3
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800294a:	f3ef 8305 	mrs	r3, IPSR
 800294e:	607b      	str	r3, [r7, #4]
  return(result);
 8002950:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002952:	2b00      	cmp	r3, #0
 8002954:	bf14      	ite	ne
 8002956:	2301      	movne	r3, #1
 8002958:	2300      	moveq	r3, #0
 800295a:	b2db      	uxtb	r3, r3
}
 800295c:	4618      	mov	r0, r3
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800296c:	f001 f856 	bl	8003a1c <vTaskStartScheduler>
  
  return osOK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	bd80      	pop	{r7, pc}

08002976 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002976:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002978:	b089      	sub	sp, #36	; 0x24
 800297a:	af04      	add	r7, sp, #16
 800297c:	6078      	str	r0, [r7, #4]
 800297e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d020      	beq.n	80029ca <osThreadCreate+0x54>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d01c      	beq.n	80029ca <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685c      	ldr	r4, [r3, #4]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691e      	ldr	r6, [r3, #16]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff ffb6 	bl	8002914 <makeFreeRtosPriority>
 80029a8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029b2:	9202      	str	r2, [sp, #8]
 80029b4:	9301      	str	r3, [sp, #4]
 80029b6:	9100      	str	r1, [sp, #0]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	4632      	mov	r2, r6
 80029bc:	4629      	mov	r1, r5
 80029be:	4620      	mov	r0, r4
 80029c0:	f000 fe4e 	bl	8003660 <xTaskCreateStatic>
 80029c4:	4603      	mov	r3, r0
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	e01c      	b.n	8002a04 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685c      	ldr	r4, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029d6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff ff98 	bl	8002914 <makeFreeRtosPriority>
 80029e4:	4602      	mov	r2, r0
 80029e6:	f107 030c 	add.w	r3, r7, #12
 80029ea:	9301      	str	r3, [sp, #4]
 80029ec:	9200      	str	r2, [sp, #0]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	4632      	mov	r2, r6
 80029f2:	4629      	mov	r1, r5
 80029f4:	4620      	mov	r0, r4
 80029f6:	f000 fe90 	bl	800371a <xTaskCreate>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d001      	beq.n	8002a04 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002a00:	2300      	movs	r3, #0
 8002a02:	e000      	b.n	8002a06 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002a04:	68fb      	ldr	r3, [r7, #12]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a0e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b084      	sub	sp, #16
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <osDelay+0x16>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	e000      	b.n	8002a26 <osDelay+0x18>
 8002a24:	2301      	movs	r3, #1
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 ffc4 	bl	80039b4 <vTaskDelay>
  
  return osOK;
 8002a2c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
	...

08002a38 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af02      	add	r7, sp, #8
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	460b      	mov	r3, r1
 8002a42:	607a      	str	r2, [r7, #4]
 8002a44:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d013      	beq.n	8002a76 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8002a4e:	7afb      	ldrb	r3, [r7, #11]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d101      	bne.n	8002a58 <osTimerCreate+0x20>
 8002a54:	2101      	movs	r1, #1
 8002a56:	e000      	b.n	8002a5a <osTimerCreate+0x22>
 8002a58:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8002a62:	9201      	str	r2, [sp, #4]
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	460a      	mov	r2, r1
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	480b      	ldr	r0, [pc, #44]	; (8002a9c <osTimerCreate+0x64>)
 8002a6e:	f001 fd9c 	bl	80045aa <xTimerCreateStatic>
 8002a72:	4603      	mov	r3, r0
 8002a74:	e00e      	b.n	8002a94 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8002a76:	7afb      	ldrb	r3, [r7, #11]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <osTimerCreate+0x48>
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	e000      	b.n	8002a82 <osTimerCreate+0x4a>
 8002a80:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	4803      	ldr	r0, [pc, #12]	; (8002a9c <osTimerCreate+0x64>)
 8002a8e:	f001 fd6b 	bl	8004568 <xTimerCreate>
 8002a92:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	08005fd4 	.word	0x08005fd4

08002aa0 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b088      	sub	sp, #32
 8002aa4:	af02      	add	r7, sp, #8
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <osTimerStart+0x20>
    ticks = 1;
 8002abc:	2301      	movs	r3, #1
 8002abe:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8002ac0:	f7ff ff40 	bl	8002944 <inHandlerMode>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d01a      	beq.n	8002b00 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8002aca:	f107 030c 	add.w	r3, r7, #12
 8002ace:	2200      	movs	r2, #0
 8002ad0:	9200      	str	r2, [sp, #0]
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	2109      	movs	r1, #9
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f001 fde0 	bl	800469c <xTimerGenericCommand>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d002      	beq.n	8002ae8 <osTimerStart+0x48>
    {
      result = osErrorOS;
 8002ae2:	23ff      	movs	r3, #255	; 0xff
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	e018      	b.n	8002b1a <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d015      	beq.n	8002b1a <osTimerStart+0x7a>
 8002aee:	4b0d      	ldr	r3, [pc, #52]	; (8002b24 <osTimerStart+0x84>)
 8002af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	f3bf 8f4f 	dsb	sy
 8002afa:	f3bf 8f6f 	isb	sy
 8002afe:	e00c      	b.n	8002b1a <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8002b00:	2300      	movs	r3, #0
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	2300      	movs	r3, #0
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	2104      	movs	r1, #4
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f001 fdc6 	bl	800469c <xTimerGenericCommand>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d001      	beq.n	8002b1a <osTimerStart+0x7a>
      result = osErrorOS;
 8002b16:	23ff      	movs	r3, #255	; 0xff
 8002b18:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8002b1a:	697b      	ldr	r3, [r7, #20]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	e000ed04 	.word	0xe000ed04

08002b28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f103 0208 	add.w	r2, r3, #8
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f103 0208 	add.w	r2, r3, #8
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f103 0208 	add.w	r2, r3, #8
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b82:	b480      	push	{r7}
 8002b84:	b085      	sub	sp, #20
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
 8002b8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	601a      	str	r2, [r3, #0]
}
 8002bbe:	bf00      	nop
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b085      	sub	sp, #20
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
 8002bd2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be0:	d103      	bne.n	8002bea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	e00c      	b.n	8002c04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	3308      	adds	r3, #8
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	e002      	b.n	8002bf8 <vListInsert+0x2e>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d2f6      	bcs.n	8002bf2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	1c5a      	adds	r2, r3, #1
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	601a      	str	r2, [r3, #0]
}
 8002c30:	bf00      	nop
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6892      	ldr	r2, [r2, #8]
 8002c52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6852      	ldr	r2, [r2, #4]
 8002c5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d103      	bne.n	8002c70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	1e5a      	subs	r2, r3, #1
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10a      	bne.n	8002cba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca8:	f383 8811 	msr	BASEPRI, r3
 8002cac:	f3bf 8f6f 	isb	sy
 8002cb0:	f3bf 8f4f 	dsb	sy
 8002cb4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002cb6:	bf00      	nop
 8002cb8:	e7fe      	b.n	8002cb8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002cba:	f002 f903 	bl	8004ec4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc6:	68f9      	ldr	r1, [r7, #12]
 8002cc8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002cca:	fb01 f303 	mul.w	r3, r1, r3
 8002cce:	441a      	add	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cea:	3b01      	subs	r3, #1
 8002cec:	68f9      	ldr	r1, [r7, #12]
 8002cee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002cf0:	fb01 f303 	mul.w	r3, r1, r3
 8002cf4:	441a      	add	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	22ff      	movs	r2, #255	; 0xff
 8002cfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	22ff      	movs	r2, #255	; 0xff
 8002d06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d114      	bne.n	8002d3a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d01a      	beq.n	8002d4e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	3310      	adds	r3, #16
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f001 f911 	bl	8003f44 <xTaskRemoveFromEventList>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d012      	beq.n	8002d4e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002d28:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <xQueueGenericReset+0xcc>)
 8002d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	f3bf 8f4f 	dsb	sy
 8002d34:	f3bf 8f6f 	isb	sy
 8002d38:	e009      	b.n	8002d4e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	3310      	adds	r3, #16
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff fef2 	bl	8002b28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	3324      	adds	r3, #36	; 0x24
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff feed 	bl	8002b28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002d4e:	f002 f8e9 	bl	8004f24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002d52:	2301      	movs	r3, #1
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	e000ed04 	.word	0xe000ed04

08002d60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08e      	sub	sp, #56	; 0x38
 8002d64:	af02      	add	r7, sp, #8
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
 8002d6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10a      	bne.n	8002d8a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d78:	f383 8811 	msr	BASEPRI, r3
 8002d7c:	f3bf 8f6f 	isb	sy
 8002d80:	f3bf 8f4f 	dsb	sy
 8002d84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d86:	bf00      	nop
 8002d88:	e7fe      	b.n	8002d88 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10a      	bne.n	8002da6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d94:	f383 8811 	msr	BASEPRI, r3
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002da2:	bf00      	nop
 8002da4:	e7fe      	b.n	8002da4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d002      	beq.n	8002db2 <xQueueGenericCreateStatic+0x52>
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <xQueueGenericCreateStatic+0x56>
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <xQueueGenericCreateStatic+0x58>
 8002db6:	2300      	movs	r3, #0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10a      	bne.n	8002dd2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc0:	f383 8811 	msr	BASEPRI, r3
 8002dc4:	f3bf 8f6f 	isb	sy
 8002dc8:	f3bf 8f4f 	dsb	sy
 8002dcc:	623b      	str	r3, [r7, #32]
}
 8002dce:	bf00      	nop
 8002dd0:	e7fe      	b.n	8002dd0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d102      	bne.n	8002dde <xQueueGenericCreateStatic+0x7e>
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <xQueueGenericCreateStatic+0x82>
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <xQueueGenericCreateStatic+0x84>
 8002de2:	2300      	movs	r3, #0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10a      	bne.n	8002dfe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dec:	f383 8811 	msr	BASEPRI, r3
 8002df0:	f3bf 8f6f 	isb	sy
 8002df4:	f3bf 8f4f 	dsb	sy
 8002df8:	61fb      	str	r3, [r7, #28]
}
 8002dfa:	bf00      	nop
 8002dfc:	e7fe      	b.n	8002dfc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002dfe:	2348      	movs	r3, #72	; 0x48
 8002e00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2b48      	cmp	r3, #72	; 0x48
 8002e06:	d00a      	beq.n	8002e1e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0c:	f383 8811 	msr	BASEPRI, r3
 8002e10:	f3bf 8f6f 	isb	sy
 8002e14:	f3bf 8f4f 	dsb	sy
 8002e18:	61bb      	str	r3, [r7, #24]
}
 8002e1a:	bf00      	nop
 8002e1c:	e7fe      	b.n	8002e1c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002e1e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00d      	beq.n	8002e46 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e32:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	68b9      	ldr	r1, [r7, #8]
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f000 f805 	bl	8002e50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3730      	adds	r7, #48	; 0x30
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
 8002e5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d103      	bne.n	8002e6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	e002      	b.n	8002e72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e7e:	2101      	movs	r1, #1
 8002e80:	69b8      	ldr	r0, [r7, #24]
 8002e82:	f7ff ff05 	bl	8002c90 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002e86:	bf00      	nop
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b08e      	sub	sp, #56	; 0x38
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
 8002e9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10a      	bne.n	8002ec2 <xQueueGenericSend+0x32>
	__asm volatile
 8002eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb0:	f383 8811 	msr	BASEPRI, r3
 8002eb4:	f3bf 8f6f 	isb	sy
 8002eb8:	f3bf 8f4f 	dsb	sy
 8002ebc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002ebe:	bf00      	nop
 8002ec0:	e7fe      	b.n	8002ec0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d103      	bne.n	8002ed0 <xQueueGenericSend+0x40>
 8002ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <xQueueGenericSend+0x44>
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e000      	b.n	8002ed6 <xQueueGenericSend+0x46>
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10a      	bne.n	8002ef0 <xQueueGenericSend+0x60>
	__asm volatile
 8002eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ede:	f383 8811 	msr	BASEPRI, r3
 8002ee2:	f3bf 8f6f 	isb	sy
 8002ee6:	f3bf 8f4f 	dsb	sy
 8002eea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002eec:	bf00      	nop
 8002eee:	e7fe      	b.n	8002eee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d103      	bne.n	8002efe <xQueueGenericSend+0x6e>
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <xQueueGenericSend+0x72>
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <xQueueGenericSend+0x74>
 8002f02:	2300      	movs	r3, #0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10a      	bne.n	8002f1e <xQueueGenericSend+0x8e>
	__asm volatile
 8002f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0c:	f383 8811 	msr	BASEPRI, r3
 8002f10:	f3bf 8f6f 	isb	sy
 8002f14:	f3bf 8f4f 	dsb	sy
 8002f18:	623b      	str	r3, [r7, #32]
}
 8002f1a:	bf00      	nop
 8002f1c:	e7fe      	b.n	8002f1c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f1e:	f001 f9d1 	bl	80042c4 <xTaskGetSchedulerState>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d102      	bne.n	8002f2e <xQueueGenericSend+0x9e>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <xQueueGenericSend+0xa2>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <xQueueGenericSend+0xa4>
 8002f32:	2300      	movs	r3, #0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10a      	bne.n	8002f4e <xQueueGenericSend+0xbe>
	__asm volatile
 8002f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3c:	f383 8811 	msr	BASEPRI, r3
 8002f40:	f3bf 8f6f 	isb	sy
 8002f44:	f3bf 8f4f 	dsb	sy
 8002f48:	61fb      	str	r3, [r7, #28]
}
 8002f4a:	bf00      	nop
 8002f4c:	e7fe      	b.n	8002f4c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f4e:	f001 ffb9 	bl	8004ec4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d302      	bcc.n	8002f64 <xQueueGenericSend+0xd4>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d129      	bne.n	8002fb8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	68b9      	ldr	r1, [r7, #8]
 8002f68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f6a:	f000 fa0b 	bl	8003384 <prvCopyDataToQueue>
 8002f6e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d010      	beq.n	8002f9a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7a:	3324      	adds	r3, #36	; 0x24
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 ffe1 	bl	8003f44 <xTaskRemoveFromEventList>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d013      	beq.n	8002fb0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002f88:	4b3f      	ldr	r3, [pc, #252]	; (8003088 <xQueueGenericSend+0x1f8>)
 8002f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	f3bf 8f6f 	isb	sy
 8002f98:	e00a      	b.n	8002fb0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d007      	beq.n	8002fb0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002fa0:	4b39      	ldr	r3, [pc, #228]	; (8003088 <xQueueGenericSend+0x1f8>)
 8002fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	f3bf 8f4f 	dsb	sy
 8002fac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002fb0:	f001 ffb8 	bl	8004f24 <vPortExitCritical>
				return pdPASS;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e063      	b.n	8003080 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d103      	bne.n	8002fc6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002fbe:	f001 ffb1 	bl	8004f24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	e05c      	b.n	8003080 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d106      	bne.n	8002fda <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002fcc:	f107 0314 	add.w	r3, r7, #20
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f001 f819 	bl	8004008 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002fda:	f001 ffa3 	bl	8004f24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002fde:	f000 fd8d 	bl	8003afc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002fe2:	f001 ff6f 	bl	8004ec4 <vPortEnterCritical>
 8002fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fec:	b25b      	sxtb	r3, r3
 8002fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff2:	d103      	bne.n	8002ffc <xQueueGenericSend+0x16c>
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003002:	b25b      	sxtb	r3, r3
 8003004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003008:	d103      	bne.n	8003012 <xQueueGenericSend+0x182>
 800300a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003012:	f001 ff87 	bl	8004f24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003016:	1d3a      	adds	r2, r7, #4
 8003018:	f107 0314 	add.w	r3, r7, #20
 800301c:	4611      	mov	r1, r2
 800301e:	4618      	mov	r0, r3
 8003020:	f001 f808 	bl	8004034 <xTaskCheckForTimeOut>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d124      	bne.n	8003074 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800302a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800302c:	f000 faa2 	bl	8003574 <prvIsQueueFull>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d018      	beq.n	8003068 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003038:	3310      	adds	r3, #16
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	4611      	mov	r1, r2
 800303e:	4618      	mov	r0, r3
 8003040:	f000 ff30 	bl	8003ea4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003044:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003046:	f000 fa2d 	bl	80034a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800304a:	f000 fd65 	bl	8003b18 <xTaskResumeAll>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	f47f af7c 	bne.w	8002f4e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003056:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <xQueueGenericSend+0x1f8>)
 8003058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	f3bf 8f4f 	dsb	sy
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	e772      	b.n	8002f4e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003068:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800306a:	f000 fa1b 	bl	80034a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800306e:	f000 fd53 	bl	8003b18 <xTaskResumeAll>
 8003072:	e76c      	b.n	8002f4e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003074:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003076:	f000 fa15 	bl	80034a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800307a:	f000 fd4d 	bl	8003b18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800307e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003080:	4618      	mov	r0, r3
 8003082:	3738      	adds	r7, #56	; 0x38
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	e000ed04 	.word	0xe000ed04

0800308c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b090      	sub	sp, #64	; 0x40
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
 8003098:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800309e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10a      	bne.n	80030ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80030a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a8:	f383 8811 	msr	BASEPRI, r3
 80030ac:	f3bf 8f6f 	isb	sy
 80030b0:	f3bf 8f4f 	dsb	sy
 80030b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80030b6:	bf00      	nop
 80030b8:	e7fe      	b.n	80030b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d103      	bne.n	80030c8 <xQueueGenericSendFromISR+0x3c>
 80030c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <xQueueGenericSendFromISR+0x40>
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <xQueueGenericSendFromISR+0x42>
 80030cc:	2300      	movs	r3, #0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10a      	bne.n	80030e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80030d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d6:	f383 8811 	msr	BASEPRI, r3
 80030da:	f3bf 8f6f 	isb	sy
 80030de:	f3bf 8f4f 	dsb	sy
 80030e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80030e4:	bf00      	nop
 80030e6:	e7fe      	b.n	80030e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d103      	bne.n	80030f6 <xQueueGenericSendFromISR+0x6a>
 80030ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <xQueueGenericSendFromISR+0x6e>
 80030f6:	2301      	movs	r3, #1
 80030f8:	e000      	b.n	80030fc <xQueueGenericSendFromISR+0x70>
 80030fa:	2300      	movs	r3, #0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10a      	bne.n	8003116 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003104:	f383 8811 	msr	BASEPRI, r3
 8003108:	f3bf 8f6f 	isb	sy
 800310c:	f3bf 8f4f 	dsb	sy
 8003110:	623b      	str	r3, [r7, #32]
}
 8003112:	bf00      	nop
 8003114:	e7fe      	b.n	8003114 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003116:	f001 ffb7 	bl	8005088 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800311a:	f3ef 8211 	mrs	r2, BASEPRI
 800311e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003122:	f383 8811 	msr	BASEPRI, r3
 8003126:	f3bf 8f6f 	isb	sy
 800312a:	f3bf 8f4f 	dsb	sy
 800312e:	61fa      	str	r2, [r7, #28]
 8003130:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003132:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003134:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800313a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800313c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313e:	429a      	cmp	r2, r3
 8003140:	d302      	bcc.n	8003148 <xQueueGenericSendFromISR+0xbc>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	2b02      	cmp	r3, #2
 8003146:	d12f      	bne.n	80031a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800314a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800314e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003156:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	68b9      	ldr	r1, [r7, #8]
 800315c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800315e:	f000 f911 	bl	8003384 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003162:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316a:	d112      	bne.n	8003192 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800316c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	2b00      	cmp	r3, #0
 8003172:	d016      	beq.n	80031a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003176:	3324      	adds	r3, #36	; 0x24
 8003178:	4618      	mov	r0, r3
 800317a:	f000 fee3 	bl	8003f44 <xTaskRemoveFromEventList>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00e      	beq.n	80031a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00b      	beq.n	80031a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	e007      	b.n	80031a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003192:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003196:	3301      	adds	r3, #1
 8003198:	b2db      	uxtb	r3, r3
 800319a:	b25a      	sxtb	r2, r3
 800319c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80031a2:	2301      	movs	r3, #1
 80031a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80031a6:	e001      	b.n	80031ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80031a8:	2300      	movs	r3, #0
 80031aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80031b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80031b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3740      	adds	r7, #64	; 0x40
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
	...

080031c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b08c      	sub	sp, #48	; 0x30
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80031d0:	2300      	movs	r3, #0
 80031d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80031d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10a      	bne.n	80031f4 <xQueueReceive+0x30>
	__asm volatile
 80031de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e2:	f383 8811 	msr	BASEPRI, r3
 80031e6:	f3bf 8f6f 	isb	sy
 80031ea:	f3bf 8f4f 	dsb	sy
 80031ee:	623b      	str	r3, [r7, #32]
}
 80031f0:	bf00      	nop
 80031f2:	e7fe      	b.n	80031f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d103      	bne.n	8003202 <xQueueReceive+0x3e>
 80031fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <xQueueReceive+0x42>
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <xQueueReceive+0x44>
 8003206:	2300      	movs	r3, #0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10a      	bne.n	8003222 <xQueueReceive+0x5e>
	__asm volatile
 800320c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003210:	f383 8811 	msr	BASEPRI, r3
 8003214:	f3bf 8f6f 	isb	sy
 8003218:	f3bf 8f4f 	dsb	sy
 800321c:	61fb      	str	r3, [r7, #28]
}
 800321e:	bf00      	nop
 8003220:	e7fe      	b.n	8003220 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003222:	f001 f84f 	bl	80042c4 <xTaskGetSchedulerState>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d102      	bne.n	8003232 <xQueueReceive+0x6e>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <xQueueReceive+0x72>
 8003232:	2301      	movs	r3, #1
 8003234:	e000      	b.n	8003238 <xQueueReceive+0x74>
 8003236:	2300      	movs	r3, #0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10a      	bne.n	8003252 <xQueueReceive+0x8e>
	__asm volatile
 800323c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003240:	f383 8811 	msr	BASEPRI, r3
 8003244:	f3bf 8f6f 	isb	sy
 8003248:	f3bf 8f4f 	dsb	sy
 800324c:	61bb      	str	r3, [r7, #24]
}
 800324e:	bf00      	nop
 8003250:	e7fe      	b.n	8003250 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003252:	f001 fe37 	bl	8004ec4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	2b00      	cmp	r3, #0
 8003260:	d01f      	beq.n	80032a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003262:	68b9      	ldr	r1, [r7, #8]
 8003264:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003266:	f000 f8f7 	bl	8003458 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	1e5a      	subs	r2, r3, #1
 800326e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003270:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00f      	beq.n	800329a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800327a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327c:	3310      	adds	r3, #16
 800327e:	4618      	mov	r0, r3
 8003280:	f000 fe60 	bl	8003f44 <xTaskRemoveFromEventList>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d007      	beq.n	800329a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800328a:	4b3d      	ldr	r3, [pc, #244]	; (8003380 <xQueueReceive+0x1bc>)
 800328c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	f3bf 8f4f 	dsb	sy
 8003296:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800329a:	f001 fe43 	bl	8004f24 <vPortExitCritical>
				return pdPASS;
 800329e:	2301      	movs	r3, #1
 80032a0:	e069      	b.n	8003376 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d103      	bne.n	80032b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032a8:	f001 fe3c 	bl	8004f24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80032ac:	2300      	movs	r3, #0
 80032ae:	e062      	b.n	8003376 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032b6:	f107 0310 	add.w	r3, r7, #16
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 fea4 	bl	8004008 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032c0:	2301      	movs	r3, #1
 80032c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032c4:	f001 fe2e 	bl	8004f24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032c8:	f000 fc18 	bl	8003afc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032cc:	f001 fdfa 	bl	8004ec4 <vPortEnterCritical>
 80032d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032d6:	b25b      	sxtb	r3, r3
 80032d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032dc:	d103      	bne.n	80032e6 <xQueueReceive+0x122>
 80032de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032ec:	b25b      	sxtb	r3, r3
 80032ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f2:	d103      	bne.n	80032fc <xQueueReceive+0x138>
 80032f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032fc:	f001 fe12 	bl	8004f24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003300:	1d3a      	adds	r2, r7, #4
 8003302:	f107 0310 	add.w	r3, r7, #16
 8003306:	4611      	mov	r1, r2
 8003308:	4618      	mov	r0, r3
 800330a:	f000 fe93 	bl	8004034 <xTaskCheckForTimeOut>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d123      	bne.n	800335c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003316:	f000 f917 	bl	8003548 <prvIsQueueEmpty>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d017      	beq.n	8003350 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003322:	3324      	adds	r3, #36	; 0x24
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	4611      	mov	r1, r2
 8003328:	4618      	mov	r0, r3
 800332a:	f000 fdbb 	bl	8003ea4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800332e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003330:	f000 f8b8 	bl	80034a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003334:	f000 fbf0 	bl	8003b18 <xTaskResumeAll>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d189      	bne.n	8003252 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800333e:	4b10      	ldr	r3, [pc, #64]	; (8003380 <xQueueReceive+0x1bc>)
 8003340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	f3bf 8f4f 	dsb	sy
 800334a:	f3bf 8f6f 	isb	sy
 800334e:	e780      	b.n	8003252 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003352:	f000 f8a7 	bl	80034a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003356:	f000 fbdf 	bl	8003b18 <xTaskResumeAll>
 800335a:	e77a      	b.n	8003252 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800335c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800335e:	f000 f8a1 	bl	80034a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003362:	f000 fbd9 	bl	8003b18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003366:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003368:	f000 f8ee 	bl	8003548 <prvIsQueueEmpty>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	f43f af6f 	beq.w	8003252 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003374:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003376:	4618      	mov	r0, r3
 8003378:	3730      	adds	r7, #48	; 0x30
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	e000ed04 	.word	0xe000ed04

08003384 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003390:	2300      	movs	r3, #0
 8003392:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003398:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10d      	bne.n	80033be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d14d      	bne.n	8003446 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 ffa6 	bl	8004300 <xTaskPriorityDisinherit>
 80033b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	609a      	str	r2, [r3, #8]
 80033bc:	e043      	b.n	8003446 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d119      	bne.n	80033f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6858      	ldr	r0, [r3, #4]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	461a      	mov	r2, r3
 80033ce:	68b9      	ldr	r1, [r7, #8]
 80033d0:	f002 fb4b 	bl	8005a6a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033dc:	441a      	add	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d32b      	bcc.n	8003446 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	605a      	str	r2, [r3, #4]
 80033f6:	e026      	b.n	8003446 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	68d8      	ldr	r0, [r3, #12]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	461a      	mov	r2, r3
 8003402:	68b9      	ldr	r1, [r7, #8]
 8003404:	f002 fb31 	bl	8005a6a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	425b      	negs	r3, r3
 8003412:	441a      	add	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	429a      	cmp	r2, r3
 8003422:	d207      	bcs.n	8003434 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	425b      	negs	r3, r3
 800342e:	441a      	add	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d105      	bne.n	8003446 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d002      	beq.n	8003446 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	3b01      	subs	r3, #1
 8003444:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1c5a      	adds	r2, r3, #1
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800344e:	697b      	ldr	r3, [r7, #20]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	2b00      	cmp	r3, #0
 8003468:	d018      	beq.n	800349c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	441a      	add	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	429a      	cmp	r2, r3
 8003482:	d303      	bcc.n	800348c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68d9      	ldr	r1, [r3, #12]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	461a      	mov	r2, r3
 8003496:	6838      	ldr	r0, [r7, #0]
 8003498:	f002 fae7 	bl	8005a6a <memcpy>
	}
}
 800349c:	bf00      	nop
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80034ac:	f001 fd0a 	bl	8004ec4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034b8:	e011      	b.n	80034de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d012      	beq.n	80034e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3324      	adds	r3, #36	; 0x24
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 fd3c 	bl	8003f44 <xTaskRemoveFromEventList>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80034d2:	f000 fe11 	bl	80040f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80034d6:	7bfb      	ldrb	r3, [r7, #15]
 80034d8:	3b01      	subs	r3, #1
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	dce9      	bgt.n	80034ba <prvUnlockQueue+0x16>
 80034e6:	e000      	b.n	80034ea <prvUnlockQueue+0x46>
					break;
 80034e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	22ff      	movs	r2, #255	; 0xff
 80034ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80034f2:	f001 fd17 	bl	8004f24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80034f6:	f001 fce5 	bl	8004ec4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003500:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003502:	e011      	b.n	8003528 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d012      	beq.n	8003532 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3310      	adds	r3, #16
 8003510:	4618      	mov	r0, r3
 8003512:	f000 fd17 	bl	8003f44 <xTaskRemoveFromEventList>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800351c:	f000 fdec 	bl	80040f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003520:	7bbb      	ldrb	r3, [r7, #14]
 8003522:	3b01      	subs	r3, #1
 8003524:	b2db      	uxtb	r3, r3
 8003526:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003528:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800352c:	2b00      	cmp	r3, #0
 800352e:	dce9      	bgt.n	8003504 <prvUnlockQueue+0x60>
 8003530:	e000      	b.n	8003534 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003532:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	22ff      	movs	r2, #255	; 0xff
 8003538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800353c:	f001 fcf2 	bl	8004f24 <vPortExitCritical>
}
 8003540:	bf00      	nop
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003550:	f001 fcb8 	bl	8004ec4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003558:	2b00      	cmp	r3, #0
 800355a:	d102      	bne.n	8003562 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800355c:	2301      	movs	r3, #1
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	e001      	b.n	8003566 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003562:	2300      	movs	r3, #0
 8003564:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003566:	f001 fcdd 	bl	8004f24 <vPortExitCritical>

	return xReturn;
 800356a:	68fb      	ldr	r3, [r7, #12]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800357c:	f001 fca2 	bl	8004ec4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003588:	429a      	cmp	r2, r3
 800358a:	d102      	bne.n	8003592 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800358c:	2301      	movs	r3, #1
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	e001      	b.n	8003596 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003592:	2300      	movs	r3, #0
 8003594:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003596:	f001 fcc5 	bl	8004f24 <vPortExitCritical>

	return xReturn;
 800359a:	68fb      	ldr	r3, [r7, #12]
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035ae:	2300      	movs	r3, #0
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	e014      	b.n	80035de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80035b4:	4a0f      	ldr	r2, [pc, #60]	; (80035f4 <vQueueAddToRegistry+0x50>)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10b      	bne.n	80035d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80035c0:	490c      	ldr	r1, [pc, #48]	; (80035f4 <vQueueAddToRegistry+0x50>)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80035ca:	4a0a      	ldr	r2, [pc, #40]	; (80035f4 <vQueueAddToRegistry+0x50>)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	4413      	add	r3, r2
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80035d6:	e006      	b.n	80035e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	3301      	adds	r3, #1
 80035dc:	60fb      	str	r3, [r7, #12]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2b07      	cmp	r3, #7
 80035e2:	d9e7      	bls.n	80035b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80035e4:	bf00      	nop
 80035e6:	bf00      	nop
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	2000086c 	.word	0x2000086c

080035f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003608:	f001 fc5c 	bl	8004ec4 <vPortEnterCritical>
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003612:	b25b      	sxtb	r3, r3
 8003614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003618:	d103      	bne.n	8003622 <vQueueWaitForMessageRestricted+0x2a>
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003628:	b25b      	sxtb	r3, r3
 800362a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800362e:	d103      	bne.n	8003638 <vQueueWaitForMessageRestricted+0x40>
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003638:	f001 fc74 	bl	8004f24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003640:	2b00      	cmp	r3, #0
 8003642:	d106      	bne.n	8003652 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	3324      	adds	r3, #36	; 0x24
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	68b9      	ldr	r1, [r7, #8]
 800364c:	4618      	mov	r0, r3
 800364e:	f000 fc4d 	bl	8003eec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003652:	6978      	ldr	r0, [r7, #20]
 8003654:	f7ff ff26 	bl	80034a4 <prvUnlockQueue>
	}
 8003658:	bf00      	nop
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003660:	b580      	push	{r7, lr}
 8003662:	b08e      	sub	sp, #56	; 0x38
 8003664:	af04      	add	r7, sp, #16
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
 800366c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800366e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10a      	bne.n	800368a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003678:	f383 8811 	msr	BASEPRI, r3
 800367c:	f3bf 8f6f 	isb	sy
 8003680:	f3bf 8f4f 	dsb	sy
 8003684:	623b      	str	r3, [r7, #32]
}
 8003686:	bf00      	nop
 8003688:	e7fe      	b.n	8003688 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800368a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10a      	bne.n	80036a6 <xTaskCreateStatic+0x46>
	__asm volatile
 8003690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003694:	f383 8811 	msr	BASEPRI, r3
 8003698:	f3bf 8f6f 	isb	sy
 800369c:	f3bf 8f4f 	dsb	sy
 80036a0:	61fb      	str	r3, [r7, #28]
}
 80036a2:	bf00      	nop
 80036a4:	e7fe      	b.n	80036a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80036a6:	23a0      	movs	r3, #160	; 0xa0
 80036a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	2ba0      	cmp	r3, #160	; 0xa0
 80036ae:	d00a      	beq.n	80036c6 <xTaskCreateStatic+0x66>
	__asm volatile
 80036b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b4:	f383 8811 	msr	BASEPRI, r3
 80036b8:	f3bf 8f6f 	isb	sy
 80036bc:	f3bf 8f4f 	dsb	sy
 80036c0:	61bb      	str	r3, [r7, #24]
}
 80036c2:	bf00      	nop
 80036c4:	e7fe      	b.n	80036c4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80036c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80036c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d01e      	beq.n	800370c <xTaskCreateStatic+0xac>
 80036ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d01b      	beq.n	800370c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	2202      	movs	r2, #2
 80036e2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80036e6:	2300      	movs	r3, #0
 80036e8:	9303      	str	r3, [sp, #12]
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	9302      	str	r3, [sp, #8]
 80036ee:	f107 0314 	add.w	r3, r7, #20
 80036f2:	9301      	str	r3, [sp, #4]
 80036f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	68b9      	ldr	r1, [r7, #8]
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 f850 	bl	80037a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003704:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003706:	f000 f8eb 	bl	80038e0 <prvAddNewTaskToReadyList>
 800370a:	e001      	b.n	8003710 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800370c:	2300      	movs	r3, #0
 800370e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003710:	697b      	ldr	r3, [r7, #20]
	}
 8003712:	4618      	mov	r0, r3
 8003714:	3728      	adds	r7, #40	; 0x28
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800371a:	b580      	push	{r7, lr}
 800371c:	b08c      	sub	sp, #48	; 0x30
 800371e:	af04      	add	r7, sp, #16
 8003720:	60f8      	str	r0, [r7, #12]
 8003722:	60b9      	str	r1, [r7, #8]
 8003724:	603b      	str	r3, [r7, #0]
 8003726:	4613      	mov	r3, r2
 8003728:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800372a:	88fb      	ldrh	r3, [r7, #6]
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4618      	mov	r0, r3
 8003730:	f001 fcea 	bl	8005108 <pvPortMalloc>
 8003734:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00e      	beq.n	800375a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800373c:	20a0      	movs	r0, #160	; 0xa0
 800373e:	f001 fce3 	bl	8005108 <pvPortMalloc>
 8003742:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	631a      	str	r2, [r3, #48]	; 0x30
 8003750:	e005      	b.n	800375e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003752:	6978      	ldr	r0, [r7, #20]
 8003754:	f001 fda4 	bl	80052a0 <vPortFree>
 8003758:	e001      	b.n	800375e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800375a:	2300      	movs	r3, #0
 800375c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d017      	beq.n	8003794 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800376c:	88fa      	ldrh	r2, [r7, #6]
 800376e:	2300      	movs	r3, #0
 8003770:	9303      	str	r3, [sp, #12]
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	9302      	str	r3, [sp, #8]
 8003776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003778:	9301      	str	r3, [sp, #4]
 800377a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	68b9      	ldr	r1, [r7, #8]
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 f80e 	bl	80037a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003788:	69f8      	ldr	r0, [r7, #28]
 800378a:	f000 f8a9 	bl	80038e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800378e:	2301      	movs	r3, #1
 8003790:	61bb      	str	r3, [r7, #24]
 8003792:	e002      	b.n	800379a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003794:	f04f 33ff 	mov.w	r3, #4294967295
 8003798:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800379a:	69bb      	ldr	r3, [r7, #24]
	}
 800379c:	4618      	mov	r0, r3
 800379e:	3720      	adds	r7, #32
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b088      	sub	sp, #32
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
 80037b0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80037b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80037bc:	3b01      	subs	r3, #1
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	f023 0307 	bic.w	r3, r3, #7
 80037ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00a      	beq.n	80037ec <prvInitialiseNewTask+0x48>
	__asm volatile
 80037d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037da:	f383 8811 	msr	BASEPRI, r3
 80037de:	f3bf 8f6f 	isb	sy
 80037e2:	f3bf 8f4f 	dsb	sy
 80037e6:	617b      	str	r3, [r7, #20]
}
 80037e8:	bf00      	nop
 80037ea:	e7fe      	b.n	80037ea <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d01f      	beq.n	8003832 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037f2:	2300      	movs	r3, #0
 80037f4:	61fb      	str	r3, [r7, #28]
 80037f6:	e012      	b.n	800381e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	4413      	add	r3, r2
 80037fe:	7819      	ldrb	r1, [r3, #0]
 8003800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	4413      	add	r3, r2
 8003806:	3334      	adds	r3, #52	; 0x34
 8003808:	460a      	mov	r2, r1
 800380a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	4413      	add	r3, r2
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d006      	beq.n	8003826 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	3301      	adds	r3, #1
 800381c:	61fb      	str	r3, [r7, #28]
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	2b0f      	cmp	r3, #15
 8003822:	d9e9      	bls.n	80037f8 <prvInitialiseNewTask+0x54>
 8003824:	e000      	b.n	8003828 <prvInitialiseNewTask+0x84>
			{
				break;
 8003826:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003830:	e003      	b.n	800383a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800383a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383c:	2b06      	cmp	r3, #6
 800383e:	d901      	bls.n	8003844 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003840:	2306      	movs	r3, #6
 8003842:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003846:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003848:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800384a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800384e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003852:	2200      	movs	r2, #0
 8003854:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003858:	3304      	adds	r3, #4
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff f984 	bl	8002b68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003862:	3318      	adds	r3, #24
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff f97f 	bl	8002b68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800386a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800386e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003872:	f1c3 0207 	rsb	r2, r3, #7
 8003876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003878:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800387a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800387e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003882:	2200      	movs	r2, #0
 8003884:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388a:	2200      	movs	r2, #0
 800388c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003892:	334c      	adds	r3, #76	; 0x4c
 8003894:	224c      	movs	r2, #76	; 0x4c
 8003896:	2100      	movs	r1, #0
 8003898:	4618      	mov	r0, r3
 800389a:	f002 f815 	bl	80058c8 <memset>
 800389e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a0:	4a0c      	ldr	r2, [pc, #48]	; (80038d4 <prvInitialiseNewTask+0x130>)
 80038a2:	651a      	str	r2, [r3, #80]	; 0x50
 80038a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a6:	4a0c      	ldr	r2, [pc, #48]	; (80038d8 <prvInitialiseNewTask+0x134>)
 80038a8:	655a      	str	r2, [r3, #84]	; 0x54
 80038aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ac:	4a0b      	ldr	r2, [pc, #44]	; (80038dc <prvInitialiseNewTask+0x138>)
 80038ae:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	68f9      	ldr	r1, [r7, #12]
 80038b4:	69b8      	ldr	r0, [r7, #24]
 80038b6:	f001 f9db 	bl	8004c70 <pxPortInitialiseStack>
 80038ba:	4602      	mov	r2, r0
 80038bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038be:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80038c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80038c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038cc:	bf00      	nop
 80038ce:	3720      	adds	r7, #32
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	200046fc 	.word	0x200046fc
 80038d8:	20004764 	.word	0x20004764
 80038dc:	200047cc 	.word	0x200047cc

080038e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80038e8:	f001 faec 	bl	8004ec4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80038ec:	4b2a      	ldr	r3, [pc, #168]	; (8003998 <prvAddNewTaskToReadyList+0xb8>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	3301      	adds	r3, #1
 80038f2:	4a29      	ldr	r2, [pc, #164]	; (8003998 <prvAddNewTaskToReadyList+0xb8>)
 80038f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80038f6:	4b29      	ldr	r3, [pc, #164]	; (800399c <prvAddNewTaskToReadyList+0xbc>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d109      	bne.n	8003912 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80038fe:	4a27      	ldr	r2, [pc, #156]	; (800399c <prvAddNewTaskToReadyList+0xbc>)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003904:	4b24      	ldr	r3, [pc, #144]	; (8003998 <prvAddNewTaskToReadyList+0xb8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d110      	bne.n	800392e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800390c:	f000 fc18 	bl	8004140 <prvInitialiseTaskLists>
 8003910:	e00d      	b.n	800392e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003912:	4b23      	ldr	r3, [pc, #140]	; (80039a0 <prvAddNewTaskToReadyList+0xc0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d109      	bne.n	800392e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800391a:	4b20      	ldr	r3, [pc, #128]	; (800399c <prvAddNewTaskToReadyList+0xbc>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003924:	429a      	cmp	r2, r3
 8003926:	d802      	bhi.n	800392e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003928:	4a1c      	ldr	r2, [pc, #112]	; (800399c <prvAddNewTaskToReadyList+0xbc>)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800392e:	4b1d      	ldr	r3, [pc, #116]	; (80039a4 <prvAddNewTaskToReadyList+0xc4>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3301      	adds	r3, #1
 8003934:	4a1b      	ldr	r2, [pc, #108]	; (80039a4 <prvAddNewTaskToReadyList+0xc4>)
 8003936:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393c:	2201      	movs	r2, #1
 800393e:	409a      	lsls	r2, r3
 8003940:	4b19      	ldr	r3, [pc, #100]	; (80039a8 <prvAddNewTaskToReadyList+0xc8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4313      	orrs	r3, r2
 8003946:	4a18      	ldr	r2, [pc, #96]	; (80039a8 <prvAddNewTaskToReadyList+0xc8>)
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800394e:	4613      	mov	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4a15      	ldr	r2, [pc, #84]	; (80039ac <prvAddNewTaskToReadyList+0xcc>)
 8003958:	441a      	add	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3304      	adds	r3, #4
 800395e:	4619      	mov	r1, r3
 8003960:	4610      	mov	r0, r2
 8003962:	f7ff f90e 	bl	8002b82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003966:	f001 fadd 	bl	8004f24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800396a:	4b0d      	ldr	r3, [pc, #52]	; (80039a0 <prvAddNewTaskToReadyList+0xc0>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00e      	beq.n	8003990 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003972:	4b0a      	ldr	r3, [pc, #40]	; (800399c <prvAddNewTaskToReadyList+0xbc>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397c:	429a      	cmp	r2, r3
 800397e:	d207      	bcs.n	8003990 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003980:	4b0b      	ldr	r3, [pc, #44]	; (80039b0 <prvAddNewTaskToReadyList+0xd0>)
 8003982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003990:	bf00      	nop
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	200009ac 	.word	0x200009ac
 800399c:	200008ac 	.word	0x200008ac
 80039a0:	200009b8 	.word	0x200009b8
 80039a4:	200009c8 	.word	0x200009c8
 80039a8:	200009b4 	.word	0x200009b4
 80039ac:	200008b0 	.word	0x200008b0
 80039b0:	e000ed04 	.word	0xe000ed04

080039b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80039bc:	2300      	movs	r3, #0
 80039be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d017      	beq.n	80039f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80039c6:	4b13      	ldr	r3, [pc, #76]	; (8003a14 <vTaskDelay+0x60>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00a      	beq.n	80039e4 <vTaskDelay+0x30>
	__asm volatile
 80039ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d2:	f383 8811 	msr	BASEPRI, r3
 80039d6:	f3bf 8f6f 	isb	sy
 80039da:	f3bf 8f4f 	dsb	sy
 80039de:	60bb      	str	r3, [r7, #8]
}
 80039e0:	bf00      	nop
 80039e2:	e7fe      	b.n	80039e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80039e4:	f000 f88a 	bl	8003afc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80039e8:	2100      	movs	r1, #0
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 fd0e 	bl	800440c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80039f0:	f000 f892 	bl	8003b18 <xTaskResumeAll>
 80039f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d107      	bne.n	8003a0c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80039fc:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <vTaskDelay+0x64>)
 80039fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a0c:	bf00      	nop
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	200009d4 	.word	0x200009d4
 8003a18:	e000ed04 	.word	0xe000ed04

08003a1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08a      	sub	sp, #40	; 0x28
 8003a20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a2a:	463a      	mov	r2, r7
 8003a2c:	1d39      	adds	r1, r7, #4
 8003a2e:	f107 0308 	add.w	r3, r7, #8
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fc fd52 	bl	80004dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a38:	6839      	ldr	r1, [r7, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68ba      	ldr	r2, [r7, #8]
 8003a3e:	9202      	str	r2, [sp, #8]
 8003a40:	9301      	str	r3, [sp, #4]
 8003a42:	2300      	movs	r3, #0
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	2300      	movs	r3, #0
 8003a48:	460a      	mov	r2, r1
 8003a4a:	4924      	ldr	r1, [pc, #144]	; (8003adc <vTaskStartScheduler+0xc0>)
 8003a4c:	4824      	ldr	r0, [pc, #144]	; (8003ae0 <vTaskStartScheduler+0xc4>)
 8003a4e:	f7ff fe07 	bl	8003660 <xTaskCreateStatic>
 8003a52:	4603      	mov	r3, r0
 8003a54:	4a23      	ldr	r2, [pc, #140]	; (8003ae4 <vTaskStartScheduler+0xc8>)
 8003a56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a58:	4b22      	ldr	r3, [pc, #136]	; (8003ae4 <vTaskStartScheduler+0xc8>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d002      	beq.n	8003a66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a60:	2301      	movs	r3, #1
 8003a62:	617b      	str	r3, [r7, #20]
 8003a64:	e001      	b.n	8003a6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a66:	2300      	movs	r3, #0
 8003a68:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d102      	bne.n	8003a76 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003a70:	f000 fd32 	bl	80044d8 <xTimerCreateTimerTask>
 8003a74:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d11b      	bne.n	8003ab4 <vTaskStartScheduler+0x98>
	__asm volatile
 8003a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a80:	f383 8811 	msr	BASEPRI, r3
 8003a84:	f3bf 8f6f 	isb	sy
 8003a88:	f3bf 8f4f 	dsb	sy
 8003a8c:	613b      	str	r3, [r7, #16]
}
 8003a8e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003a90:	4b15      	ldr	r3, [pc, #84]	; (8003ae8 <vTaskStartScheduler+0xcc>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	334c      	adds	r3, #76	; 0x4c
 8003a96:	4a15      	ldr	r2, [pc, #84]	; (8003aec <vTaskStartScheduler+0xd0>)
 8003a98:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a9a:	4b15      	ldr	r3, [pc, #84]	; (8003af0 <vTaskStartScheduler+0xd4>)
 8003a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003aa2:	4b14      	ldr	r3, [pc, #80]	; (8003af4 <vTaskStartScheduler+0xd8>)
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003aa8:	4b13      	ldr	r3, [pc, #76]	; (8003af8 <vTaskStartScheduler+0xdc>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003aae:	f001 f967 	bl	8004d80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ab2:	e00e      	b.n	8003ad2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aba:	d10a      	bne.n	8003ad2 <vTaskStartScheduler+0xb6>
	__asm volatile
 8003abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac0:	f383 8811 	msr	BASEPRI, r3
 8003ac4:	f3bf 8f6f 	isb	sy
 8003ac8:	f3bf 8f4f 	dsb	sy
 8003acc:	60fb      	str	r3, [r7, #12]
}
 8003ace:	bf00      	nop
 8003ad0:	e7fe      	b.n	8003ad0 <vTaskStartScheduler+0xb4>
}
 8003ad2:	bf00      	nop
 8003ad4:	3718      	adds	r7, #24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	08005fd8 	.word	0x08005fd8
 8003ae0:	08004111 	.word	0x08004111
 8003ae4:	200009d0 	.word	0x200009d0
 8003ae8:	200008ac 	.word	0x200008ac
 8003aec:	20000068 	.word	0x20000068
 8003af0:	200009cc 	.word	0x200009cc
 8003af4:	200009b8 	.word	0x200009b8
 8003af8:	200009b0 	.word	0x200009b0

08003afc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003b00:	4b04      	ldr	r3, [pc, #16]	; (8003b14 <vTaskSuspendAll+0x18>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	3301      	adds	r3, #1
 8003b06:	4a03      	ldr	r2, [pc, #12]	; (8003b14 <vTaskSuspendAll+0x18>)
 8003b08:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003b0a:	bf00      	nop
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	200009d4 	.word	0x200009d4

08003b18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003b22:	2300      	movs	r3, #0
 8003b24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003b26:	4b41      	ldr	r3, [pc, #260]	; (8003c2c <xTaskResumeAll+0x114>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10a      	bne.n	8003b44 <xTaskResumeAll+0x2c>
	__asm volatile
 8003b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b32:	f383 8811 	msr	BASEPRI, r3
 8003b36:	f3bf 8f6f 	isb	sy
 8003b3a:	f3bf 8f4f 	dsb	sy
 8003b3e:	603b      	str	r3, [r7, #0]
}
 8003b40:	bf00      	nop
 8003b42:	e7fe      	b.n	8003b42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b44:	f001 f9be 	bl	8004ec4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b48:	4b38      	ldr	r3, [pc, #224]	; (8003c2c <xTaskResumeAll+0x114>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	4a37      	ldr	r2, [pc, #220]	; (8003c2c <xTaskResumeAll+0x114>)
 8003b50:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b52:	4b36      	ldr	r3, [pc, #216]	; (8003c2c <xTaskResumeAll+0x114>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d161      	bne.n	8003c1e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b5a:	4b35      	ldr	r3, [pc, #212]	; (8003c30 <xTaskResumeAll+0x118>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d05d      	beq.n	8003c1e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b62:	e02e      	b.n	8003bc2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b64:	4b33      	ldr	r3, [pc, #204]	; (8003c34 <xTaskResumeAll+0x11c>)
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	3318      	adds	r3, #24
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff f863 	bl	8002c3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	3304      	adds	r3, #4
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff f85e 	bl	8002c3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b84:	2201      	movs	r2, #1
 8003b86:	409a      	lsls	r2, r3
 8003b88:	4b2b      	ldr	r3, [pc, #172]	; (8003c38 <xTaskResumeAll+0x120>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	4a2a      	ldr	r2, [pc, #168]	; (8003c38 <xTaskResumeAll+0x120>)
 8003b90:	6013      	str	r3, [r2, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b96:	4613      	mov	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4413      	add	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4a27      	ldr	r2, [pc, #156]	; (8003c3c <xTaskResumeAll+0x124>)
 8003ba0:	441a      	add	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	4610      	mov	r0, r2
 8003baa:	f7fe ffea 	bl	8002b82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb2:	4b23      	ldr	r3, [pc, #140]	; (8003c40 <xTaskResumeAll+0x128>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d302      	bcc.n	8003bc2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003bbc:	4b21      	ldr	r3, [pc, #132]	; (8003c44 <xTaskResumeAll+0x12c>)
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bc2:	4b1c      	ldr	r3, [pc, #112]	; (8003c34 <xTaskResumeAll+0x11c>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1cc      	bne.n	8003b64 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003bd0:	f000 fb58 	bl	8004284 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003bd4:	4b1c      	ldr	r3, [pc, #112]	; (8003c48 <xTaskResumeAll+0x130>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d010      	beq.n	8003c02 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003be0:	f000 f846 	bl	8003c70 <xTaskIncrementTick>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d002      	beq.n	8003bf0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003bea:	4b16      	ldr	r3, [pc, #88]	; (8003c44 <xTaskResumeAll+0x12c>)
 8003bec:	2201      	movs	r2, #1
 8003bee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1f1      	bne.n	8003be0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003bfc:	4b12      	ldr	r3, [pc, #72]	; (8003c48 <xTaskResumeAll+0x130>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003c02:	4b10      	ldr	r3, [pc, #64]	; (8003c44 <xTaskResumeAll+0x12c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d009      	beq.n	8003c1e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003c0e:	4b0f      	ldr	r3, [pc, #60]	; (8003c4c <xTaskResumeAll+0x134>)
 8003c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	f3bf 8f4f 	dsb	sy
 8003c1a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c1e:	f001 f981 	bl	8004f24 <vPortExitCritical>

	return xAlreadyYielded;
 8003c22:	68bb      	ldr	r3, [r7, #8]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	200009d4 	.word	0x200009d4
 8003c30:	200009ac 	.word	0x200009ac
 8003c34:	2000096c 	.word	0x2000096c
 8003c38:	200009b4 	.word	0x200009b4
 8003c3c:	200008b0 	.word	0x200008b0
 8003c40:	200008ac 	.word	0x200008ac
 8003c44:	200009c0 	.word	0x200009c0
 8003c48:	200009bc 	.word	0x200009bc
 8003c4c:	e000ed04 	.word	0xe000ed04

08003c50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003c56:	4b05      	ldr	r3, [pc, #20]	; (8003c6c <xTaskGetTickCount+0x1c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003c5c:	687b      	ldr	r3, [r7, #4]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	200009b0 	.word	0x200009b0

08003c70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c76:	2300      	movs	r3, #0
 8003c78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c7a:	4b4e      	ldr	r3, [pc, #312]	; (8003db4 <xTaskIncrementTick+0x144>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f040 808e 	bne.w	8003da0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c84:	4b4c      	ldr	r3, [pc, #304]	; (8003db8 <xTaskIncrementTick+0x148>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c8c:	4a4a      	ldr	r2, [pc, #296]	; (8003db8 <xTaskIncrementTick+0x148>)
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d120      	bne.n	8003cda <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c98:	4b48      	ldr	r3, [pc, #288]	; (8003dbc <xTaskIncrementTick+0x14c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <xTaskIncrementTick+0x48>
	__asm volatile
 8003ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca6:	f383 8811 	msr	BASEPRI, r3
 8003caa:	f3bf 8f6f 	isb	sy
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	603b      	str	r3, [r7, #0]
}
 8003cb4:	bf00      	nop
 8003cb6:	e7fe      	b.n	8003cb6 <xTaskIncrementTick+0x46>
 8003cb8:	4b40      	ldr	r3, [pc, #256]	; (8003dbc <xTaskIncrementTick+0x14c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	60fb      	str	r3, [r7, #12]
 8003cbe:	4b40      	ldr	r3, [pc, #256]	; (8003dc0 <xTaskIncrementTick+0x150>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a3e      	ldr	r2, [pc, #248]	; (8003dbc <xTaskIncrementTick+0x14c>)
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	4a3e      	ldr	r2, [pc, #248]	; (8003dc0 <xTaskIncrementTick+0x150>)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6013      	str	r3, [r2, #0]
 8003ccc:	4b3d      	ldr	r3, [pc, #244]	; (8003dc4 <xTaskIncrementTick+0x154>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	4a3c      	ldr	r2, [pc, #240]	; (8003dc4 <xTaskIncrementTick+0x154>)
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	f000 fad5 	bl	8004284 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003cda:	4b3b      	ldr	r3, [pc, #236]	; (8003dc8 <xTaskIncrementTick+0x158>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d348      	bcc.n	8003d76 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ce4:	4b35      	ldr	r3, [pc, #212]	; (8003dbc <xTaskIncrementTick+0x14c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d104      	bne.n	8003cf8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cee:	4b36      	ldr	r3, [pc, #216]	; (8003dc8 <xTaskIncrementTick+0x158>)
 8003cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf4:	601a      	str	r2, [r3, #0]
					break;
 8003cf6:	e03e      	b.n	8003d76 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cf8:	4b30      	ldr	r3, [pc, #192]	; (8003dbc <xTaskIncrementTick+0x14c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d203      	bcs.n	8003d18 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003d10:	4a2d      	ldr	r2, [pc, #180]	; (8003dc8 <xTaskIncrementTick+0x158>)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003d16:	e02e      	b.n	8003d76 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	3304      	adds	r3, #4
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7fe ff8d 	bl	8002c3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d004      	beq.n	8003d34 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	3318      	adds	r3, #24
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fe ff84 	bl	8002c3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d38:	2201      	movs	r2, #1
 8003d3a:	409a      	lsls	r2, r3
 8003d3c:	4b23      	ldr	r3, [pc, #140]	; (8003dcc <xTaskIncrementTick+0x15c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	4a22      	ldr	r2, [pc, #136]	; (8003dcc <xTaskIncrementTick+0x15c>)
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4a1f      	ldr	r2, [pc, #124]	; (8003dd0 <xTaskIncrementTick+0x160>)
 8003d54:	441a      	add	r2, r3
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	3304      	adds	r3, #4
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	4610      	mov	r0, r2
 8003d5e:	f7fe ff10 	bl	8002b82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d66:	4b1b      	ldr	r3, [pc, #108]	; (8003dd4 <xTaskIncrementTick+0x164>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d3b9      	bcc.n	8003ce4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003d70:	2301      	movs	r3, #1
 8003d72:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d74:	e7b6      	b.n	8003ce4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d76:	4b17      	ldr	r3, [pc, #92]	; (8003dd4 <xTaskIncrementTick+0x164>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d7c:	4914      	ldr	r1, [pc, #80]	; (8003dd0 <xTaskIncrementTick+0x160>)
 8003d7e:	4613      	mov	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	440b      	add	r3, r1
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d901      	bls.n	8003d92 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003d92:	4b11      	ldr	r3, [pc, #68]	; (8003dd8 <xTaskIncrementTick+0x168>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d007      	beq.n	8003daa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	617b      	str	r3, [r7, #20]
 8003d9e:	e004      	b.n	8003daa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003da0:	4b0e      	ldr	r3, [pc, #56]	; (8003ddc <xTaskIncrementTick+0x16c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3301      	adds	r3, #1
 8003da6:	4a0d      	ldr	r2, [pc, #52]	; (8003ddc <xTaskIncrementTick+0x16c>)
 8003da8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003daa:	697b      	ldr	r3, [r7, #20]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3718      	adds	r7, #24
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	200009d4 	.word	0x200009d4
 8003db8:	200009b0 	.word	0x200009b0
 8003dbc:	20000964 	.word	0x20000964
 8003dc0:	20000968 	.word	0x20000968
 8003dc4:	200009c4 	.word	0x200009c4
 8003dc8:	200009cc 	.word	0x200009cc
 8003dcc:	200009b4 	.word	0x200009b4
 8003dd0:	200008b0 	.word	0x200008b0
 8003dd4:	200008ac 	.word	0x200008ac
 8003dd8:	200009c0 	.word	0x200009c0
 8003ddc:	200009bc 	.word	0x200009bc

08003de0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003de0:	b480      	push	{r7}
 8003de2:	b087      	sub	sp, #28
 8003de4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003de6:	4b29      	ldr	r3, [pc, #164]	; (8003e8c <vTaskSwitchContext+0xac>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003dee:	4b28      	ldr	r3, [pc, #160]	; (8003e90 <vTaskSwitchContext+0xb0>)
 8003df0:	2201      	movs	r2, #1
 8003df2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003df4:	e044      	b.n	8003e80 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003df6:	4b26      	ldr	r3, [pc, #152]	; (8003e90 <vTaskSwitchContext+0xb0>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dfc:	4b25      	ldr	r3, [pc, #148]	; (8003e94 <vTaskSwitchContext+0xb4>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	fab3 f383 	clz	r3, r3
 8003e08:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003e0a:	7afb      	ldrb	r3, [r7, #11]
 8003e0c:	f1c3 031f 	rsb	r3, r3, #31
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	4921      	ldr	r1, [pc, #132]	; (8003e98 <vTaskSwitchContext+0xb8>)
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	4613      	mov	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	440b      	add	r3, r1
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10a      	bne.n	8003e3c <vTaskSwitchContext+0x5c>
	__asm volatile
 8003e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2a:	f383 8811 	msr	BASEPRI, r3
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	f3bf 8f4f 	dsb	sy
 8003e36:	607b      	str	r3, [r7, #4]
}
 8003e38:	bf00      	nop
 8003e3a:	e7fe      	b.n	8003e3a <vTaskSwitchContext+0x5a>
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4a14      	ldr	r2, [pc, #80]	; (8003e98 <vTaskSwitchContext+0xb8>)
 8003e48:	4413      	add	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	605a      	str	r2, [r3, #4]
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	3308      	adds	r3, #8
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d104      	bne.n	8003e6c <vTaskSwitchContext+0x8c>
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	605a      	str	r2, [r3, #4]
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	4a0a      	ldr	r2, [pc, #40]	; (8003e9c <vTaskSwitchContext+0xbc>)
 8003e74:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003e76:	4b09      	ldr	r3, [pc, #36]	; (8003e9c <vTaskSwitchContext+0xbc>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	334c      	adds	r3, #76	; 0x4c
 8003e7c:	4a08      	ldr	r2, [pc, #32]	; (8003ea0 <vTaskSwitchContext+0xc0>)
 8003e7e:	6013      	str	r3, [r2, #0]
}
 8003e80:	bf00      	nop
 8003e82:	371c      	adds	r7, #28
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	200009d4 	.word	0x200009d4
 8003e90:	200009c0 	.word	0x200009c0
 8003e94:	200009b4 	.word	0x200009b4
 8003e98:	200008b0 	.word	0x200008b0
 8003e9c:	200008ac 	.word	0x200008ac
 8003ea0:	20000068 	.word	0x20000068

08003ea4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10a      	bne.n	8003eca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	60fb      	str	r3, [r7, #12]
}
 8003ec6:	bf00      	nop
 8003ec8:	e7fe      	b.n	8003ec8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003eca:	4b07      	ldr	r3, [pc, #28]	; (8003ee8 <vTaskPlaceOnEventList+0x44>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	3318      	adds	r3, #24
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7fe fe79 	bl	8002bca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ed8:	2101      	movs	r1, #1
 8003eda:	6838      	ldr	r0, [r7, #0]
 8003edc:	f000 fa96 	bl	800440c <prvAddCurrentTaskToDelayedList>
}
 8003ee0:	bf00      	nop
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	200008ac 	.word	0x200008ac

08003eec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10a      	bne.n	8003f14 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f02:	f383 8811 	msr	BASEPRI, r3
 8003f06:	f3bf 8f6f 	isb	sy
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	617b      	str	r3, [r7, #20]
}
 8003f10:	bf00      	nop
 8003f12:	e7fe      	b.n	8003f12 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f14:	4b0a      	ldr	r3, [pc, #40]	; (8003f40 <vTaskPlaceOnEventListRestricted+0x54>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	3318      	adds	r3, #24
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f7fe fe30 	bl	8002b82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d002      	beq.n	8003f2e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003f28:	f04f 33ff 	mov.w	r3, #4294967295
 8003f2c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003f2e:	6879      	ldr	r1, [r7, #4]
 8003f30:	68b8      	ldr	r0, [r7, #8]
 8003f32:	f000 fa6b 	bl	800440c <prvAddCurrentTaskToDelayedList>
	}
 8003f36:	bf00      	nop
 8003f38:	3718      	adds	r7, #24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	200008ac 	.word	0x200008ac

08003f44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10a      	bne.n	8003f70 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5e:	f383 8811 	msr	BASEPRI, r3
 8003f62:	f3bf 8f6f 	isb	sy
 8003f66:	f3bf 8f4f 	dsb	sy
 8003f6a:	60fb      	str	r3, [r7, #12]
}
 8003f6c:	bf00      	nop
 8003f6e:	e7fe      	b.n	8003f6e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	3318      	adds	r3, #24
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7fe fe61 	bl	8002c3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f7a:	4b1d      	ldr	r3, [pc, #116]	; (8003ff0 <xTaskRemoveFromEventList+0xac>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d11c      	bne.n	8003fbc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	3304      	adds	r3, #4
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fe fe58 	bl	8002c3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f90:	2201      	movs	r2, #1
 8003f92:	409a      	lsls	r2, r3
 8003f94:	4b17      	ldr	r3, [pc, #92]	; (8003ff4 <xTaskRemoveFromEventList+0xb0>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	4a16      	ldr	r2, [pc, #88]	; (8003ff4 <xTaskRemoveFromEventList+0xb0>)
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4a13      	ldr	r2, [pc, #76]	; (8003ff8 <xTaskRemoveFromEventList+0xb4>)
 8003fac:	441a      	add	r2, r3
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	4610      	mov	r0, r2
 8003fb6:	f7fe fde4 	bl	8002b82 <vListInsertEnd>
 8003fba:	e005      	b.n	8003fc8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	3318      	adds	r3, #24
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	480e      	ldr	r0, [pc, #56]	; (8003ffc <xTaskRemoveFromEventList+0xb8>)
 8003fc4:	f7fe fddd 	bl	8002b82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fcc:	4b0c      	ldr	r3, [pc, #48]	; (8004000 <xTaskRemoveFromEventList+0xbc>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d905      	bls.n	8003fe2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003fda:	4b0a      	ldr	r3, [pc, #40]	; (8004004 <xTaskRemoveFromEventList+0xc0>)
 8003fdc:	2201      	movs	r2, #1
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	e001      	b.n	8003fe6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003fe6:	697b      	ldr	r3, [r7, #20]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3718      	adds	r7, #24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	200009d4 	.word	0x200009d4
 8003ff4:	200009b4 	.word	0x200009b4
 8003ff8:	200008b0 	.word	0x200008b0
 8003ffc:	2000096c 	.word	0x2000096c
 8004000:	200008ac 	.word	0x200008ac
 8004004:	200009c0 	.word	0x200009c0

08004008 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004010:	4b06      	ldr	r3, [pc, #24]	; (800402c <vTaskInternalSetTimeOutState+0x24>)
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004018:	4b05      	ldr	r3, [pc, #20]	; (8004030 <vTaskInternalSetTimeOutState+0x28>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	605a      	str	r2, [r3, #4]
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	200009c4 	.word	0x200009c4
 8004030:	200009b0 	.word	0x200009b0

08004034 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b088      	sub	sp, #32
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10a      	bne.n	800405a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004048:	f383 8811 	msr	BASEPRI, r3
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	613b      	str	r3, [r7, #16]
}
 8004056:	bf00      	nop
 8004058:	e7fe      	b.n	8004058 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10a      	bne.n	8004076 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004064:	f383 8811 	msr	BASEPRI, r3
 8004068:	f3bf 8f6f 	isb	sy
 800406c:	f3bf 8f4f 	dsb	sy
 8004070:	60fb      	str	r3, [r7, #12]
}
 8004072:	bf00      	nop
 8004074:	e7fe      	b.n	8004074 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004076:	f000 ff25 	bl	8004ec4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800407a:	4b1d      	ldr	r3, [pc, #116]	; (80040f0 <xTaskCheckForTimeOut+0xbc>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004092:	d102      	bne.n	800409a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004094:	2300      	movs	r3, #0
 8004096:	61fb      	str	r3, [r7, #28]
 8004098:	e023      	b.n	80040e2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	4b15      	ldr	r3, [pc, #84]	; (80040f4 <xTaskCheckForTimeOut+0xc0>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d007      	beq.n	80040b6 <xTaskCheckForTimeOut+0x82>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d302      	bcc.n	80040b6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80040b0:	2301      	movs	r3, #1
 80040b2:	61fb      	str	r3, [r7, #28]
 80040b4:	e015      	b.n	80040e2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d20b      	bcs.n	80040d8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	1ad2      	subs	r2, r2, r3
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f7ff ff9b 	bl	8004008 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80040d2:	2300      	movs	r3, #0
 80040d4:	61fb      	str	r3, [r7, #28]
 80040d6:	e004      	b.n	80040e2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	2200      	movs	r2, #0
 80040dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80040de:	2301      	movs	r3, #1
 80040e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80040e2:	f000 ff1f 	bl	8004f24 <vPortExitCritical>

	return xReturn;
 80040e6:	69fb      	ldr	r3, [r7, #28]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3720      	adds	r7, #32
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	200009b0 	.word	0x200009b0
 80040f4:	200009c4 	.word	0x200009c4

080040f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80040fc:	4b03      	ldr	r3, [pc, #12]	; (800410c <vTaskMissedYield+0x14>)
 80040fe:	2201      	movs	r2, #1
 8004100:	601a      	str	r2, [r3, #0]
}
 8004102:	bf00      	nop
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	200009c0 	.word	0x200009c0

08004110 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004118:	f000 f852 	bl	80041c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800411c:	4b06      	ldr	r3, [pc, #24]	; (8004138 <prvIdleTask+0x28>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d9f9      	bls.n	8004118 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004124:	4b05      	ldr	r3, [pc, #20]	; (800413c <prvIdleTask+0x2c>)
 8004126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004134:	e7f0      	b.n	8004118 <prvIdleTask+0x8>
 8004136:	bf00      	nop
 8004138:	200008b0 	.word	0x200008b0
 800413c:	e000ed04 	.word	0xe000ed04

08004140 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004146:	2300      	movs	r3, #0
 8004148:	607b      	str	r3, [r7, #4]
 800414a:	e00c      	b.n	8004166 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	4613      	mov	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4413      	add	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4a12      	ldr	r2, [pc, #72]	; (80041a0 <prvInitialiseTaskLists+0x60>)
 8004158:	4413      	add	r3, r2
 800415a:	4618      	mov	r0, r3
 800415c:	f7fe fce4 	bl	8002b28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3301      	adds	r3, #1
 8004164:	607b      	str	r3, [r7, #4]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b06      	cmp	r3, #6
 800416a:	d9ef      	bls.n	800414c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800416c:	480d      	ldr	r0, [pc, #52]	; (80041a4 <prvInitialiseTaskLists+0x64>)
 800416e:	f7fe fcdb 	bl	8002b28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004172:	480d      	ldr	r0, [pc, #52]	; (80041a8 <prvInitialiseTaskLists+0x68>)
 8004174:	f7fe fcd8 	bl	8002b28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004178:	480c      	ldr	r0, [pc, #48]	; (80041ac <prvInitialiseTaskLists+0x6c>)
 800417a:	f7fe fcd5 	bl	8002b28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800417e:	480c      	ldr	r0, [pc, #48]	; (80041b0 <prvInitialiseTaskLists+0x70>)
 8004180:	f7fe fcd2 	bl	8002b28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004184:	480b      	ldr	r0, [pc, #44]	; (80041b4 <prvInitialiseTaskLists+0x74>)
 8004186:	f7fe fccf 	bl	8002b28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800418a:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <prvInitialiseTaskLists+0x78>)
 800418c:	4a05      	ldr	r2, [pc, #20]	; (80041a4 <prvInitialiseTaskLists+0x64>)
 800418e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004190:	4b0a      	ldr	r3, [pc, #40]	; (80041bc <prvInitialiseTaskLists+0x7c>)
 8004192:	4a05      	ldr	r2, [pc, #20]	; (80041a8 <prvInitialiseTaskLists+0x68>)
 8004194:	601a      	str	r2, [r3, #0]
}
 8004196:	bf00      	nop
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	200008b0 	.word	0x200008b0
 80041a4:	2000093c 	.word	0x2000093c
 80041a8:	20000950 	.word	0x20000950
 80041ac:	2000096c 	.word	0x2000096c
 80041b0:	20000980 	.word	0x20000980
 80041b4:	20000998 	.word	0x20000998
 80041b8:	20000964 	.word	0x20000964
 80041bc:	20000968 	.word	0x20000968

080041c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041c6:	e019      	b.n	80041fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80041c8:	f000 fe7c 	bl	8004ec4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041cc:	4b10      	ldr	r3, [pc, #64]	; (8004210 <prvCheckTasksWaitingTermination+0x50>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3304      	adds	r3, #4
 80041d8:	4618      	mov	r0, r3
 80041da:	f7fe fd2f 	bl	8002c3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80041de:	4b0d      	ldr	r3, [pc, #52]	; (8004214 <prvCheckTasksWaitingTermination+0x54>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	3b01      	subs	r3, #1
 80041e4:	4a0b      	ldr	r2, [pc, #44]	; (8004214 <prvCheckTasksWaitingTermination+0x54>)
 80041e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80041e8:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <prvCheckTasksWaitingTermination+0x58>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3b01      	subs	r3, #1
 80041ee:	4a0a      	ldr	r2, [pc, #40]	; (8004218 <prvCheckTasksWaitingTermination+0x58>)
 80041f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80041f2:	f000 fe97 	bl	8004f24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f810 	bl	800421c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041fc:	4b06      	ldr	r3, [pc, #24]	; (8004218 <prvCheckTasksWaitingTermination+0x58>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1e1      	bne.n	80041c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004204:	bf00      	nop
 8004206:	bf00      	nop
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	20000980 	.word	0x20000980
 8004214:	200009ac 	.word	0x200009ac
 8004218:	20000994 	.word	0x20000994

0800421c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	334c      	adds	r3, #76	; 0x4c
 8004228:	4618      	mov	r0, r3
 800422a:	f001 fb65 	bl	80058f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004234:	2b00      	cmp	r3, #0
 8004236:	d108      	bne.n	800424a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423c:	4618      	mov	r0, r3
 800423e:	f001 f82f 	bl	80052a0 <vPortFree>
				vPortFree( pxTCB );
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f001 f82c 	bl	80052a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004248:	e018      	b.n	800427c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004250:	2b01      	cmp	r3, #1
 8004252:	d103      	bne.n	800425c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f001 f823 	bl	80052a0 <vPortFree>
	}
 800425a:	e00f      	b.n	800427c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004262:	2b02      	cmp	r3, #2
 8004264:	d00a      	beq.n	800427c <prvDeleteTCB+0x60>
	__asm volatile
 8004266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426a:	f383 8811 	msr	BASEPRI, r3
 800426e:	f3bf 8f6f 	isb	sy
 8004272:	f3bf 8f4f 	dsb	sy
 8004276:	60fb      	str	r3, [r7, #12]
}
 8004278:	bf00      	nop
 800427a:	e7fe      	b.n	800427a <prvDeleteTCB+0x5e>
	}
 800427c:	bf00      	nop
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800428a:	4b0c      	ldr	r3, [pc, #48]	; (80042bc <prvResetNextTaskUnblockTime+0x38>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d104      	bne.n	800429e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004294:	4b0a      	ldr	r3, [pc, #40]	; (80042c0 <prvResetNextTaskUnblockTime+0x3c>)
 8004296:	f04f 32ff 	mov.w	r2, #4294967295
 800429a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800429c:	e008      	b.n	80042b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800429e:	4b07      	ldr	r3, [pc, #28]	; (80042bc <prvResetNextTaskUnblockTime+0x38>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	4a04      	ldr	r2, [pc, #16]	; (80042c0 <prvResetNextTaskUnblockTime+0x3c>)
 80042ae:	6013      	str	r3, [r2, #0]
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	20000964 	.word	0x20000964
 80042c0:	200009cc 	.word	0x200009cc

080042c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80042ca:	4b0b      	ldr	r3, [pc, #44]	; (80042f8 <xTaskGetSchedulerState+0x34>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d102      	bne.n	80042d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80042d2:	2301      	movs	r3, #1
 80042d4:	607b      	str	r3, [r7, #4]
 80042d6:	e008      	b.n	80042ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042d8:	4b08      	ldr	r3, [pc, #32]	; (80042fc <xTaskGetSchedulerState+0x38>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d102      	bne.n	80042e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80042e0:	2302      	movs	r3, #2
 80042e2:	607b      	str	r3, [r7, #4]
 80042e4:	e001      	b.n	80042ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80042e6:	2300      	movs	r3, #0
 80042e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80042ea:	687b      	ldr	r3, [r7, #4]
	}
 80042ec:	4618      	mov	r0, r3
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	200009b8 	.word	0x200009b8
 80042fc:	200009d4 	.word	0x200009d4

08004300 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800430c:	2300      	movs	r3, #0
 800430e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d06e      	beq.n	80043f4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004316:	4b3a      	ldr	r3, [pc, #232]	; (8004400 <xTaskPriorityDisinherit+0x100>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	429a      	cmp	r2, r3
 800431e:	d00a      	beq.n	8004336 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004324:	f383 8811 	msr	BASEPRI, r3
 8004328:	f3bf 8f6f 	isb	sy
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	60fb      	str	r3, [r7, #12]
}
 8004332:	bf00      	nop
 8004334:	e7fe      	b.n	8004334 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10a      	bne.n	8004354 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800433e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004342:	f383 8811 	msr	BASEPRI, r3
 8004346:	f3bf 8f6f 	isb	sy
 800434a:	f3bf 8f4f 	dsb	sy
 800434e:	60bb      	str	r3, [r7, #8]
}
 8004350:	bf00      	nop
 8004352:	e7fe      	b.n	8004352 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004358:	1e5a      	subs	r2, r3, #1
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004366:	429a      	cmp	r2, r3
 8004368:	d044      	beq.n	80043f4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800436e:	2b00      	cmp	r3, #0
 8004370:	d140      	bne.n	80043f4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	3304      	adds	r3, #4
 8004376:	4618      	mov	r0, r3
 8004378:	f7fe fc60 	bl	8002c3c <uxListRemove>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d115      	bne.n	80043ae <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004386:	491f      	ldr	r1, [pc, #124]	; (8004404 <xTaskPriorityDisinherit+0x104>)
 8004388:	4613      	mov	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	440b      	add	r3, r1
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10a      	bne.n	80043ae <xTaskPriorityDisinherit+0xae>
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439c:	2201      	movs	r2, #1
 800439e:	fa02 f303 	lsl.w	r3, r2, r3
 80043a2:	43da      	mvns	r2, r3
 80043a4:	4b18      	ldr	r3, [pc, #96]	; (8004408 <xTaskPriorityDisinherit+0x108>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4013      	ands	r3, r2
 80043aa:	4a17      	ldr	r2, [pc, #92]	; (8004408 <xTaskPriorityDisinherit+0x108>)
 80043ac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ba:	f1c3 0207 	rsb	r2, r3, #7
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c6:	2201      	movs	r2, #1
 80043c8:	409a      	lsls	r2, r3
 80043ca:	4b0f      	ldr	r3, [pc, #60]	; (8004408 <xTaskPriorityDisinherit+0x108>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	4a0d      	ldr	r2, [pc, #52]	; (8004408 <xTaskPriorityDisinherit+0x108>)
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d8:	4613      	mov	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4413      	add	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4a08      	ldr	r2, [pc, #32]	; (8004404 <xTaskPriorityDisinherit+0x104>)
 80043e2:	441a      	add	r2, r3
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	3304      	adds	r3, #4
 80043e8:	4619      	mov	r1, r3
 80043ea:	4610      	mov	r0, r2
 80043ec:	f7fe fbc9 	bl	8002b82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80043f0:	2301      	movs	r3, #1
 80043f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80043f4:	697b      	ldr	r3, [r7, #20]
	}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	200008ac 	.word	0x200008ac
 8004404:	200008b0 	.word	0x200008b0
 8004408:	200009b4 	.word	0x200009b4

0800440c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004416:	4b29      	ldr	r3, [pc, #164]	; (80044bc <prvAddCurrentTaskToDelayedList+0xb0>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800441c:	4b28      	ldr	r3, [pc, #160]	; (80044c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	3304      	adds	r3, #4
 8004422:	4618      	mov	r0, r3
 8004424:	f7fe fc0a 	bl	8002c3c <uxListRemove>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10b      	bne.n	8004446 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800442e:	4b24      	ldr	r3, [pc, #144]	; (80044c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004434:	2201      	movs	r2, #1
 8004436:	fa02 f303 	lsl.w	r3, r2, r3
 800443a:	43da      	mvns	r2, r3
 800443c:	4b21      	ldr	r3, [pc, #132]	; (80044c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4013      	ands	r3, r2
 8004442:	4a20      	ldr	r2, [pc, #128]	; (80044c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004444:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444c:	d10a      	bne.n	8004464 <prvAddCurrentTaskToDelayedList+0x58>
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d007      	beq.n	8004464 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004454:	4b1a      	ldr	r3, [pc, #104]	; (80044c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	3304      	adds	r3, #4
 800445a:	4619      	mov	r1, r3
 800445c:	481a      	ldr	r0, [pc, #104]	; (80044c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800445e:	f7fe fb90 	bl	8002b82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004462:	e026      	b.n	80044b2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4413      	add	r3, r2
 800446a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800446c:	4b14      	ldr	r3, [pc, #80]	; (80044c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	429a      	cmp	r2, r3
 800447a:	d209      	bcs.n	8004490 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800447c:	4b13      	ldr	r3, [pc, #76]	; (80044cc <prvAddCurrentTaskToDelayedList+0xc0>)
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	4b0f      	ldr	r3, [pc, #60]	; (80044c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	3304      	adds	r3, #4
 8004486:	4619      	mov	r1, r3
 8004488:	4610      	mov	r0, r2
 800448a:	f7fe fb9e 	bl	8002bca <vListInsert>
}
 800448e:	e010      	b.n	80044b2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004490:	4b0f      	ldr	r3, [pc, #60]	; (80044d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	4b0a      	ldr	r3, [pc, #40]	; (80044c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3304      	adds	r3, #4
 800449a:	4619      	mov	r1, r3
 800449c:	4610      	mov	r0, r2
 800449e:	f7fe fb94 	bl	8002bca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80044a2:	4b0c      	ldr	r3, [pc, #48]	; (80044d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d202      	bcs.n	80044b2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80044ac:	4a09      	ldr	r2, [pc, #36]	; (80044d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	6013      	str	r3, [r2, #0]
}
 80044b2:	bf00      	nop
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	200009b0 	.word	0x200009b0
 80044c0:	200008ac 	.word	0x200008ac
 80044c4:	200009b4 	.word	0x200009b4
 80044c8:	20000998 	.word	0x20000998
 80044cc:	20000968 	.word	0x20000968
 80044d0:	20000964 	.word	0x20000964
 80044d4:	200009cc 	.word	0x200009cc

080044d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b08a      	sub	sp, #40	; 0x28
 80044dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80044de:	2300      	movs	r3, #0
 80044e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80044e2:	f000 fb85 	bl	8004bf0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80044e6:	4b1c      	ldr	r3, [pc, #112]	; (8004558 <xTimerCreateTimerTask+0x80>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d021      	beq.n	8004532 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80044f2:	2300      	movs	r3, #0
 80044f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80044f6:	1d3a      	adds	r2, r7, #4
 80044f8:	f107 0108 	add.w	r1, r7, #8
 80044fc:	f107 030c 	add.w	r3, r7, #12
 8004500:	4618      	mov	r0, r3
 8004502:	f7fc f805 	bl	8000510 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004506:	6879      	ldr	r1, [r7, #4]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	9202      	str	r2, [sp, #8]
 800450e:	9301      	str	r3, [sp, #4]
 8004510:	2306      	movs	r3, #6
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	2300      	movs	r3, #0
 8004516:	460a      	mov	r2, r1
 8004518:	4910      	ldr	r1, [pc, #64]	; (800455c <xTimerCreateTimerTask+0x84>)
 800451a:	4811      	ldr	r0, [pc, #68]	; (8004560 <xTimerCreateTimerTask+0x88>)
 800451c:	f7ff f8a0 	bl	8003660 <xTaskCreateStatic>
 8004520:	4603      	mov	r3, r0
 8004522:	4a10      	ldr	r2, [pc, #64]	; (8004564 <xTimerCreateTimerTask+0x8c>)
 8004524:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004526:	4b0f      	ldr	r3, [pc, #60]	; (8004564 <xTimerCreateTimerTask+0x8c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800452e:	2301      	movs	r3, #1
 8004530:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10a      	bne.n	800454e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453c:	f383 8811 	msr	BASEPRI, r3
 8004540:	f3bf 8f6f 	isb	sy
 8004544:	f3bf 8f4f 	dsb	sy
 8004548:	613b      	str	r3, [r7, #16]
}
 800454a:	bf00      	nop
 800454c:	e7fe      	b.n	800454c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800454e:	697b      	ldr	r3, [r7, #20]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	20000a08 	.word	0x20000a08
 800455c:	08005fe0 	.word	0x08005fe0
 8004560:	080047d1 	.word	0x080047d1
 8004564:	20000a0c 	.word	0x20000a0c

08004568 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8004568:	b580      	push	{r7, lr}
 800456a:	b088      	sub	sp, #32
 800456c:	af02      	add	r7, sp, #8
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
 8004574:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8004576:	2028      	movs	r0, #40	; 0x28
 8004578:	f000 fdc6 	bl	8005108 <pvPortMalloc>
 800457c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00d      	beq.n	80045a0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	9301      	str	r3, [sp, #4]
 8004590:	6a3b      	ldr	r3, [r7, #32]
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	68b9      	ldr	r1, [r7, #8]
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 f843 	bl	8004626 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80045a0:	697b      	ldr	r3, [r7, #20]
	}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3718      	adds	r7, #24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b08a      	sub	sp, #40	; 0x28
 80045ae:	af02      	add	r7, sp, #8
 80045b0:	60f8      	str	r0, [r7, #12]
 80045b2:	60b9      	str	r1, [r7, #8]
 80045b4:	607a      	str	r2, [r7, #4]
 80045b6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80045b8:	2328      	movs	r3, #40	; 0x28
 80045ba:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	2b28      	cmp	r3, #40	; 0x28
 80045c0:	d00a      	beq.n	80045d8 <xTimerCreateStatic+0x2e>
	__asm volatile
 80045c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c6:	f383 8811 	msr	BASEPRI, r3
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	61bb      	str	r3, [r7, #24]
}
 80045d4:	bf00      	nop
 80045d6:	e7fe      	b.n	80045d6 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80045d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80045da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10a      	bne.n	80045f6 <xTimerCreateStatic+0x4c>
	__asm volatile
 80045e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e4:	f383 8811 	msr	BASEPRI, r3
 80045e8:	f3bf 8f6f 	isb	sy
 80045ec:	f3bf 8f4f 	dsb	sy
 80045f0:	617b      	str	r3, [r7, #20]
}
 80045f2:	bf00      	nop
 80045f4:	e7fe      	b.n	80045f4 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80045f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f8:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00d      	beq.n	800461c <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	9301      	str	r3, [sp, #4]
 800460c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	68b9      	ldr	r1, [r7, #8]
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 f805 	bl	8004626 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800461c:	69fb      	ldr	r3, [r7, #28]
	}
 800461e:	4618      	mov	r0, r3
 8004620:	3720      	adds	r7, #32
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b086      	sub	sp, #24
 800462a:	af00      	add	r7, sp, #0
 800462c:	60f8      	str	r0, [r7, #12]
 800462e:	60b9      	str	r1, [r7, #8]
 8004630:	607a      	str	r2, [r7, #4]
 8004632:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10a      	bne.n	8004650 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800463a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463e:	f383 8811 	msr	BASEPRI, r3
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	617b      	str	r3, [r7, #20]
}
 800464c:	bf00      	nop
 800464e:	e7fe      	b.n	800464e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	2b00      	cmp	r3, #0
 8004654:	d01e      	beq.n	8004694 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8004656:	f000 facb 	bl	8004bf0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8004666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	6a3a      	ldr	r2, [r7, #32]
 8004670:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	3304      	adds	r3, #4
 8004676:	4618      	mov	r0, r3
 8004678:	f7fe fa76 	bl	8002b68 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d008      	beq.n	8004694 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8004682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004684:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004688:	f043 0304 	orr.w	r3, r3, #4
 800468c:	b2da      	uxtb	r2, r3
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8004694:	bf00      	nop
 8004696:	3718      	adds	r7, #24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b08a      	sub	sp, #40	; 0x28
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
 80046a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80046aa:	2300      	movs	r3, #0
 80046ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10a      	bne.n	80046ca <xTimerGenericCommand+0x2e>
	__asm volatile
 80046b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	623b      	str	r3, [r7, #32]
}
 80046c6:	bf00      	nop
 80046c8:	e7fe      	b.n	80046c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80046ca:	4b1a      	ldr	r3, [pc, #104]	; (8004734 <xTimerGenericCommand+0x98>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d02a      	beq.n	8004728 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2b05      	cmp	r3, #5
 80046e2:	dc18      	bgt.n	8004716 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80046e4:	f7ff fdee 	bl	80042c4 <xTaskGetSchedulerState>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d109      	bne.n	8004702 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80046ee:	4b11      	ldr	r3, [pc, #68]	; (8004734 <xTimerGenericCommand+0x98>)
 80046f0:	6818      	ldr	r0, [r3, #0]
 80046f2:	f107 0114 	add.w	r1, r7, #20
 80046f6:	2300      	movs	r3, #0
 80046f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046fa:	f7fe fbc9 	bl	8002e90 <xQueueGenericSend>
 80046fe:	6278      	str	r0, [r7, #36]	; 0x24
 8004700:	e012      	b.n	8004728 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004702:	4b0c      	ldr	r3, [pc, #48]	; (8004734 <xTimerGenericCommand+0x98>)
 8004704:	6818      	ldr	r0, [r3, #0]
 8004706:	f107 0114 	add.w	r1, r7, #20
 800470a:	2300      	movs	r3, #0
 800470c:	2200      	movs	r2, #0
 800470e:	f7fe fbbf 	bl	8002e90 <xQueueGenericSend>
 8004712:	6278      	str	r0, [r7, #36]	; 0x24
 8004714:	e008      	b.n	8004728 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004716:	4b07      	ldr	r3, [pc, #28]	; (8004734 <xTimerGenericCommand+0x98>)
 8004718:	6818      	ldr	r0, [r3, #0]
 800471a:	f107 0114 	add.w	r1, r7, #20
 800471e:	2300      	movs	r3, #0
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	f7fe fcb3 	bl	800308c <xQueueGenericSendFromISR>
 8004726:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800472a:	4618      	mov	r0, r3
 800472c:	3728      	adds	r7, #40	; 0x28
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	20000a08 	.word	0x20000a08

08004738 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b088      	sub	sp, #32
 800473c:	af02      	add	r7, sp, #8
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004742:	4b22      	ldr	r3, [pc, #136]	; (80047cc <prvProcessExpiredTimer+0x94>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	3304      	adds	r3, #4
 8004750:	4618      	mov	r0, r3
 8004752:	f7fe fa73 	bl	8002c3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b00      	cmp	r3, #0
 8004762:	d022      	beq.n	80047aa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	699a      	ldr	r2, [r3, #24]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	18d1      	adds	r1, r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	6978      	ldr	r0, [r7, #20]
 8004772:	f000 f8d1 	bl	8004918 <prvInsertTimerInActiveList>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d01f      	beq.n	80047bc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800477c:	2300      	movs	r3, #0
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	2300      	movs	r3, #0
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	2100      	movs	r1, #0
 8004786:	6978      	ldr	r0, [r7, #20]
 8004788:	f7ff ff88 	bl	800469c <xTimerGenericCommand>
 800478c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d113      	bne.n	80047bc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004798:	f383 8811 	msr	BASEPRI, r3
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	60fb      	str	r3, [r7, #12]
}
 80047a6:	bf00      	nop
 80047a8:	e7fe      	b.n	80047a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80047b0:	f023 0301 	bic.w	r3, r3, #1
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	6978      	ldr	r0, [r7, #20]
 80047c2:	4798      	blx	r3
}
 80047c4:	bf00      	nop
 80047c6:	3718      	adds	r7, #24
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	20000a00 	.word	0x20000a00

080047d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047d8:	f107 0308 	add.w	r3, r7, #8
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 f857 	bl	8004890 <prvGetNextExpireTime>
 80047e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	4619      	mov	r1, r3
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 f803 	bl	80047f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80047ee:	f000 f8d5 	bl	800499c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047f2:	e7f1      	b.n	80047d8 <prvTimerTask+0x8>

080047f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80047fe:	f7ff f97d 	bl	8003afc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004802:	f107 0308 	add.w	r3, r7, #8
 8004806:	4618      	mov	r0, r3
 8004808:	f000 f866 	bl	80048d8 <prvSampleTimeNow>
 800480c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d130      	bne.n	8004876 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10a      	bne.n	8004830 <prvProcessTimerOrBlockTask+0x3c>
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	429a      	cmp	r2, r3
 8004820:	d806      	bhi.n	8004830 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004822:	f7ff f979 	bl	8003b18 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004826:	68f9      	ldr	r1, [r7, #12]
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7ff ff85 	bl	8004738 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800482e:	e024      	b.n	800487a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d008      	beq.n	8004848 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004836:	4b13      	ldr	r3, [pc, #76]	; (8004884 <prvProcessTimerOrBlockTask+0x90>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <prvProcessTimerOrBlockTask+0x50>
 8004840:	2301      	movs	r3, #1
 8004842:	e000      	b.n	8004846 <prvProcessTimerOrBlockTask+0x52>
 8004844:	2300      	movs	r3, #0
 8004846:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004848:	4b0f      	ldr	r3, [pc, #60]	; (8004888 <prvProcessTimerOrBlockTask+0x94>)
 800484a:	6818      	ldr	r0, [r3, #0]
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	683a      	ldr	r2, [r7, #0]
 8004854:	4619      	mov	r1, r3
 8004856:	f7fe fecf 	bl	80035f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800485a:	f7ff f95d 	bl	8003b18 <xTaskResumeAll>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10a      	bne.n	800487a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004864:	4b09      	ldr	r3, [pc, #36]	; (800488c <prvProcessTimerOrBlockTask+0x98>)
 8004866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	f3bf 8f4f 	dsb	sy
 8004870:	f3bf 8f6f 	isb	sy
}
 8004874:	e001      	b.n	800487a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004876:	f7ff f94f 	bl	8003b18 <xTaskResumeAll>
}
 800487a:	bf00      	nop
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	20000a04 	.word	0x20000a04
 8004888:	20000a08 	.word	0x20000a08
 800488c:	e000ed04 	.word	0xe000ed04

08004890 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004898:	4b0e      	ldr	r3, [pc, #56]	; (80048d4 <prvGetNextExpireTime+0x44>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <prvGetNextExpireTime+0x16>
 80048a2:	2201      	movs	r2, #1
 80048a4:	e000      	b.n	80048a8 <prvGetNextExpireTime+0x18>
 80048a6:	2200      	movs	r2, #0
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d105      	bne.n	80048c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048b4:	4b07      	ldr	r3, [pc, #28]	; (80048d4 <prvGetNextExpireTime+0x44>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	e001      	b.n	80048c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80048c4:	68fb      	ldr	r3, [r7, #12]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	20000a00 	.word	0x20000a00

080048d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80048e0:	f7ff f9b6 	bl	8003c50 <xTaskGetTickCount>
 80048e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80048e6:	4b0b      	ldr	r3, [pc, #44]	; (8004914 <prvSampleTimeNow+0x3c>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d205      	bcs.n	80048fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80048f0:	f000 f91a 	bl	8004b28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	e002      	b.n	8004902 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004902:	4a04      	ldr	r2, [pc, #16]	; (8004914 <prvSampleTimeNow+0x3c>)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004908:	68fb      	ldr	r3, [r7, #12]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	20000a10 	.word	0x20000a10

08004918 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
 8004924:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004926:	2300      	movs	r3, #0
 8004928:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	429a      	cmp	r2, r3
 800493c:	d812      	bhi.n	8004964 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	1ad2      	subs	r2, r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	429a      	cmp	r2, r3
 800494a:	d302      	bcc.n	8004952 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800494c:	2301      	movs	r3, #1
 800494e:	617b      	str	r3, [r7, #20]
 8004950:	e01b      	b.n	800498a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004952:	4b10      	ldr	r3, [pc, #64]	; (8004994 <prvInsertTimerInActiveList+0x7c>)
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	3304      	adds	r3, #4
 800495a:	4619      	mov	r1, r3
 800495c:	4610      	mov	r0, r2
 800495e:	f7fe f934 	bl	8002bca <vListInsert>
 8004962:	e012      	b.n	800498a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	429a      	cmp	r2, r3
 800496a:	d206      	bcs.n	800497a <prvInsertTimerInActiveList+0x62>
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	429a      	cmp	r2, r3
 8004972:	d302      	bcc.n	800497a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004974:	2301      	movs	r3, #1
 8004976:	617b      	str	r3, [r7, #20]
 8004978:	e007      	b.n	800498a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800497a:	4b07      	ldr	r3, [pc, #28]	; (8004998 <prvInsertTimerInActiveList+0x80>)
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	3304      	adds	r3, #4
 8004982:	4619      	mov	r1, r3
 8004984:	4610      	mov	r0, r2
 8004986:	f7fe f920 	bl	8002bca <vListInsert>
		}
	}

	return xProcessTimerNow;
 800498a:	697b      	ldr	r3, [r7, #20]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3718      	adds	r7, #24
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	20000a04 	.word	0x20000a04
 8004998:	20000a00 	.word	0x20000a00

0800499c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b08c      	sub	sp, #48	; 0x30
 80049a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049a2:	e0ae      	b.n	8004b02 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f2c0 80ab 	blt.w	8004b02 <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d004      	beq.n	80049c2 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ba:	3304      	adds	r3, #4
 80049bc:	4618      	mov	r0, r3
 80049be:	f7fe f93d 	bl	8002c3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049c2:	1d3b      	adds	r3, r7, #4
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7ff ff87 	bl	80048d8 <prvSampleTimeNow>
 80049ca:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2b09      	cmp	r3, #9
 80049d0:	f200 8096 	bhi.w	8004b00 <prvProcessReceivedCommands+0x164>
 80049d4:	a201      	add	r2, pc, #4	; (adr r2, 80049dc <prvProcessReceivedCommands+0x40>)
 80049d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049da:	bf00      	nop
 80049dc:	08004a05 	.word	0x08004a05
 80049e0:	08004a05 	.word	0x08004a05
 80049e4:	08004a05 	.word	0x08004a05
 80049e8:	08004a79 	.word	0x08004a79
 80049ec:	08004a8d 	.word	0x08004a8d
 80049f0:	08004ad7 	.word	0x08004ad7
 80049f4:	08004a05 	.word	0x08004a05
 80049f8:	08004a05 	.word	0x08004a05
 80049fc:	08004a79 	.word	0x08004a79
 8004a00:	08004a8d 	.word	0x08004a8d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a0a:	f043 0301 	orr.w	r3, r3, #1
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	18d1      	adds	r1, r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6a3a      	ldr	r2, [r7, #32]
 8004a22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a24:	f7ff ff78 	bl	8004918 <prvInsertTimerInActiveList>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d069      	beq.n	8004b02 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a34:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a3c:	f003 0304 	and.w	r3, r3, #4
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d05e      	beq.n	8004b02 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	441a      	add	r2, r3
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	2300      	movs	r3, #0
 8004a52:	2100      	movs	r1, #0
 8004a54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a56:	f7ff fe21 	bl	800469c <xTimerGenericCommand>
 8004a5a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d14f      	bne.n	8004b02 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8004a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	61bb      	str	r3, [r7, #24]
}
 8004a74:	bf00      	nop
 8004a76:	e7fe      	b.n	8004a76 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a7e:	f023 0301 	bic.w	r3, r3, #1
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8004a8a:	e03a      	b.n	8004b02 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a92:	f043 0301 	orr.w	r3, r3, #1
 8004a96:	b2da      	uxtb	r2, r3
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10a      	bne.n	8004ac2 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8004aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab0:	f383 8811 	msr	BASEPRI, r3
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	617b      	str	r3, [r7, #20]
}
 8004abe:	bf00      	nop
 8004ac0:	e7fe      	b.n	8004ac0 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	699a      	ldr	r2, [r3, #24]
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	18d1      	adds	r1, r2, r3
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	6a3a      	ldr	r2, [r7, #32]
 8004ace:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ad0:	f7ff ff22 	bl	8004918 <prvInsertTimerInActiveList>
					break;
 8004ad4:	e015      	b.n	8004b02 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d103      	bne.n	8004aec <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8004ae4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ae6:	f000 fbdb 	bl	80052a0 <vPortFree>
 8004aea:	e00a      	b.n	8004b02 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004af2:	f023 0301 	bic.w	r3, r3, #1
 8004af6:	b2da      	uxtb	r2, r3
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004afe:	e000      	b.n	8004b02 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 8004b00:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b02:	4b08      	ldr	r3, [pc, #32]	; (8004b24 <prvProcessReceivedCommands+0x188>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f107 0108 	add.w	r1, r7, #8
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7fe fb59 	bl	80031c4 <xQueueReceive>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f47f af45 	bne.w	80049a4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004b1a:	bf00      	nop
 8004b1c:	bf00      	nop
 8004b1e:	3728      	adds	r7, #40	; 0x28
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	20000a08 	.word	0x20000a08

08004b28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b088      	sub	sp, #32
 8004b2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b2e:	e048      	b.n	8004bc2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b30:	4b2d      	ldr	r3, [pc, #180]	; (8004be8 <prvSwitchTimerLists+0xc0>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b3a:	4b2b      	ldr	r3, [pc, #172]	; (8004be8 <prvSwitchTimerLists+0xc0>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	3304      	adds	r3, #4
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7fe f877 	bl	8002c3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d02e      	beq.n	8004bc2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d90e      	bls.n	8004b94 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b82:	4b19      	ldr	r3, [pc, #100]	; (8004be8 <prvSwitchTimerLists+0xc0>)
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	3304      	adds	r3, #4
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	4610      	mov	r0, r2
 8004b8e:	f7fe f81c 	bl	8002bca <vListInsert>
 8004b92:	e016      	b.n	8004bc2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b94:	2300      	movs	r3, #0
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	2300      	movs	r3, #0
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f7ff fd7c 	bl	800469c <xTimerGenericCommand>
 8004ba4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10a      	bne.n	8004bc2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	603b      	str	r3, [r7, #0]
}
 8004bbe:	bf00      	nop
 8004bc0:	e7fe      	b.n	8004bc0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bc2:	4b09      	ldr	r3, [pc, #36]	; (8004be8 <prvSwitchTimerLists+0xc0>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1b1      	bne.n	8004b30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004bcc:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <prvSwitchTimerLists+0xc0>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004bd2:	4b06      	ldr	r3, [pc, #24]	; (8004bec <prvSwitchTimerLists+0xc4>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a04      	ldr	r2, [pc, #16]	; (8004be8 <prvSwitchTimerLists+0xc0>)
 8004bd8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004bda:	4a04      	ldr	r2, [pc, #16]	; (8004bec <prvSwitchTimerLists+0xc4>)
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	6013      	str	r3, [r2, #0]
}
 8004be0:	bf00      	nop
 8004be2:	3718      	adds	r7, #24
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	20000a00 	.word	0x20000a00
 8004bec:	20000a04 	.word	0x20000a04

08004bf0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004bf6:	f000 f965 	bl	8004ec4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004bfa:	4b15      	ldr	r3, [pc, #84]	; (8004c50 <prvCheckForValidListAndQueue+0x60>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d120      	bne.n	8004c44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004c02:	4814      	ldr	r0, [pc, #80]	; (8004c54 <prvCheckForValidListAndQueue+0x64>)
 8004c04:	f7fd ff90 	bl	8002b28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004c08:	4813      	ldr	r0, [pc, #76]	; (8004c58 <prvCheckForValidListAndQueue+0x68>)
 8004c0a:	f7fd ff8d 	bl	8002b28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004c0e:	4b13      	ldr	r3, [pc, #76]	; (8004c5c <prvCheckForValidListAndQueue+0x6c>)
 8004c10:	4a10      	ldr	r2, [pc, #64]	; (8004c54 <prvCheckForValidListAndQueue+0x64>)
 8004c12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004c14:	4b12      	ldr	r3, [pc, #72]	; (8004c60 <prvCheckForValidListAndQueue+0x70>)
 8004c16:	4a10      	ldr	r2, [pc, #64]	; (8004c58 <prvCheckForValidListAndQueue+0x68>)
 8004c18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	4b11      	ldr	r3, [pc, #68]	; (8004c64 <prvCheckForValidListAndQueue+0x74>)
 8004c20:	4a11      	ldr	r2, [pc, #68]	; (8004c68 <prvCheckForValidListAndQueue+0x78>)
 8004c22:	210c      	movs	r1, #12
 8004c24:	200a      	movs	r0, #10
 8004c26:	f7fe f89b 	bl	8002d60 <xQueueGenericCreateStatic>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	4a08      	ldr	r2, [pc, #32]	; (8004c50 <prvCheckForValidListAndQueue+0x60>)
 8004c2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004c30:	4b07      	ldr	r3, [pc, #28]	; (8004c50 <prvCheckForValidListAndQueue+0x60>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d005      	beq.n	8004c44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004c38:	4b05      	ldr	r3, [pc, #20]	; (8004c50 <prvCheckForValidListAndQueue+0x60>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	490b      	ldr	r1, [pc, #44]	; (8004c6c <prvCheckForValidListAndQueue+0x7c>)
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fe fcb0 	bl	80035a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c44:	f000 f96e 	bl	8004f24 <vPortExitCritical>
}
 8004c48:	bf00      	nop
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20000a08 	.word	0x20000a08
 8004c54:	200009d8 	.word	0x200009d8
 8004c58:	200009ec 	.word	0x200009ec
 8004c5c:	20000a00 	.word	0x20000a00
 8004c60:	20000a04 	.word	0x20000a04
 8004c64:	20000a8c 	.word	0x20000a8c
 8004c68:	20000a14 	.word	0x20000a14
 8004c6c:	08005fe8 	.word	0x08005fe8

08004c70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	3b04      	subs	r3, #4
 8004c80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	3b04      	subs	r3, #4
 8004c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	f023 0201 	bic.w	r2, r3, #1
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	3b04      	subs	r3, #4
 8004c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ca0:	4a0c      	ldr	r2, [pc, #48]	; (8004cd4 <pxPortInitialiseStack+0x64>)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	3b14      	subs	r3, #20
 8004caa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	3b04      	subs	r3, #4
 8004cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f06f 0202 	mvn.w	r2, #2
 8004cbe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	3b20      	subs	r3, #32
 8004cc4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3714      	adds	r7, #20
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	08004cd9 	.word	0x08004cd9

08004cd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004ce2:	4b12      	ldr	r3, [pc, #72]	; (8004d2c <prvTaskExitError+0x54>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cea:	d00a      	beq.n	8004d02 <prvTaskExitError+0x2a>
	__asm volatile
 8004cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf0:	f383 8811 	msr	BASEPRI, r3
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	60fb      	str	r3, [r7, #12]
}
 8004cfe:	bf00      	nop
 8004d00:	e7fe      	b.n	8004d00 <prvTaskExitError+0x28>
	__asm volatile
 8004d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	60bb      	str	r3, [r7, #8]
}
 8004d14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d16:	bf00      	nop
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0fc      	beq.n	8004d18 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d1e:	bf00      	nop
 8004d20:	bf00      	nop
 8004d22:	3714      	adds	r7, #20
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	2000000c 	.word	0x2000000c

08004d30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d30:	4b07      	ldr	r3, [pc, #28]	; (8004d50 <pxCurrentTCBConst2>)
 8004d32:	6819      	ldr	r1, [r3, #0]
 8004d34:	6808      	ldr	r0, [r1, #0]
 8004d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d3a:	f380 8809 	msr	PSP, r0
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f04f 0000 	mov.w	r0, #0
 8004d46:	f380 8811 	msr	BASEPRI, r0
 8004d4a:	4770      	bx	lr
 8004d4c:	f3af 8000 	nop.w

08004d50 <pxCurrentTCBConst2>:
 8004d50:	200008ac 	.word	0x200008ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d54:	bf00      	nop
 8004d56:	bf00      	nop

08004d58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004d58:	4808      	ldr	r0, [pc, #32]	; (8004d7c <prvPortStartFirstTask+0x24>)
 8004d5a:	6800      	ldr	r0, [r0, #0]
 8004d5c:	6800      	ldr	r0, [r0, #0]
 8004d5e:	f380 8808 	msr	MSP, r0
 8004d62:	f04f 0000 	mov.w	r0, #0
 8004d66:	f380 8814 	msr	CONTROL, r0
 8004d6a:	b662      	cpsie	i
 8004d6c:	b661      	cpsie	f
 8004d6e:	f3bf 8f4f 	dsb	sy
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	df00      	svc	0
 8004d78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004d7a:	bf00      	nop
 8004d7c:	e000ed08 	.word	0xe000ed08

08004d80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d86:	4b46      	ldr	r3, [pc, #280]	; (8004ea0 <xPortStartScheduler+0x120>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a46      	ldr	r2, [pc, #280]	; (8004ea4 <xPortStartScheduler+0x124>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d10a      	bne.n	8004da6 <xPortStartScheduler+0x26>
	__asm volatile
 8004d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	613b      	str	r3, [r7, #16]
}
 8004da2:	bf00      	nop
 8004da4:	e7fe      	b.n	8004da4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004da6:	4b3e      	ldr	r3, [pc, #248]	; (8004ea0 <xPortStartScheduler+0x120>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a3f      	ldr	r2, [pc, #252]	; (8004ea8 <xPortStartScheduler+0x128>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d10a      	bne.n	8004dc6 <xPortStartScheduler+0x46>
	__asm volatile
 8004db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	60fb      	str	r3, [r7, #12]
}
 8004dc2:	bf00      	nop
 8004dc4:	e7fe      	b.n	8004dc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004dc6:	4b39      	ldr	r3, [pc, #228]	; (8004eac <xPortStartScheduler+0x12c>)
 8004dc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	22ff      	movs	r2, #255	; 0xff
 8004dd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004de0:	78fb      	ldrb	r3, [r7, #3]
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	4b31      	ldr	r3, [pc, #196]	; (8004eb0 <xPortStartScheduler+0x130>)
 8004dec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004dee:	4b31      	ldr	r3, [pc, #196]	; (8004eb4 <xPortStartScheduler+0x134>)
 8004df0:	2207      	movs	r2, #7
 8004df2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004df4:	e009      	b.n	8004e0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004df6:	4b2f      	ldr	r3, [pc, #188]	; (8004eb4 <xPortStartScheduler+0x134>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	4a2d      	ldr	r2, [pc, #180]	; (8004eb4 <xPortStartScheduler+0x134>)
 8004dfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e00:	78fb      	ldrb	r3, [r7, #3]
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e0a:	78fb      	ldrb	r3, [r7, #3]
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e12:	2b80      	cmp	r3, #128	; 0x80
 8004e14:	d0ef      	beq.n	8004df6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e16:	4b27      	ldr	r3, [pc, #156]	; (8004eb4 <xPortStartScheduler+0x134>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f1c3 0307 	rsb	r3, r3, #7
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d00a      	beq.n	8004e38 <xPortStartScheduler+0xb8>
	__asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	60bb      	str	r3, [r7, #8]
}
 8004e34:	bf00      	nop
 8004e36:	e7fe      	b.n	8004e36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e38:	4b1e      	ldr	r3, [pc, #120]	; (8004eb4 <xPortStartScheduler+0x134>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	021b      	lsls	r3, r3, #8
 8004e3e:	4a1d      	ldr	r2, [pc, #116]	; (8004eb4 <xPortStartScheduler+0x134>)
 8004e40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e42:	4b1c      	ldr	r3, [pc, #112]	; (8004eb4 <xPortStartScheduler+0x134>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e4a:	4a1a      	ldr	r2, [pc, #104]	; (8004eb4 <xPortStartScheduler+0x134>)
 8004e4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e56:	4b18      	ldr	r3, [pc, #96]	; (8004eb8 <xPortStartScheduler+0x138>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a17      	ldr	r2, [pc, #92]	; (8004eb8 <xPortStartScheduler+0x138>)
 8004e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e62:	4b15      	ldr	r3, [pc, #84]	; (8004eb8 <xPortStartScheduler+0x138>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a14      	ldr	r2, [pc, #80]	; (8004eb8 <xPortStartScheduler+0x138>)
 8004e68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004e6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e6e:	f000 f8dd 	bl	800502c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e72:	4b12      	ldr	r3, [pc, #72]	; (8004ebc <xPortStartScheduler+0x13c>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004e78:	f000 f8fc 	bl	8005074 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004e7c:	4b10      	ldr	r3, [pc, #64]	; (8004ec0 <xPortStartScheduler+0x140>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a0f      	ldr	r2, [pc, #60]	; (8004ec0 <xPortStartScheduler+0x140>)
 8004e82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004e86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e88:	f7ff ff66 	bl	8004d58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e8c:	f7fe ffa8 	bl	8003de0 <vTaskSwitchContext>
	prvTaskExitError();
 8004e90:	f7ff ff22 	bl	8004cd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3718      	adds	r7, #24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	e000ed00 	.word	0xe000ed00
 8004ea4:	410fc271 	.word	0x410fc271
 8004ea8:	410fc270 	.word	0x410fc270
 8004eac:	e000e400 	.word	0xe000e400
 8004eb0:	20000ad4 	.word	0x20000ad4
 8004eb4:	20000ad8 	.word	0x20000ad8
 8004eb8:	e000ed20 	.word	0xe000ed20
 8004ebc:	2000000c 	.word	0x2000000c
 8004ec0:	e000ef34 	.word	0xe000ef34

08004ec4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
	__asm volatile
 8004eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ece:	f383 8811 	msr	BASEPRI, r3
 8004ed2:	f3bf 8f6f 	isb	sy
 8004ed6:	f3bf 8f4f 	dsb	sy
 8004eda:	607b      	str	r3, [r7, #4]
}
 8004edc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004ede:	4b0f      	ldr	r3, [pc, #60]	; (8004f1c <vPortEnterCritical+0x58>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	4a0d      	ldr	r2, [pc, #52]	; (8004f1c <vPortEnterCritical+0x58>)
 8004ee6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ee8:	4b0c      	ldr	r3, [pc, #48]	; (8004f1c <vPortEnterCritical+0x58>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d10f      	bne.n	8004f10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ef0:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <vPortEnterCritical+0x5c>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <vPortEnterCritical+0x4c>
	__asm volatile
 8004efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	603b      	str	r3, [r7, #0]
}
 8004f0c:	bf00      	nop
 8004f0e:	e7fe      	b.n	8004f0e <vPortEnterCritical+0x4a>
	}
}
 8004f10:	bf00      	nop
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr
 8004f1c:	2000000c 	.word	0x2000000c
 8004f20:	e000ed04 	.word	0xe000ed04

08004f24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f2a:	4b12      	ldr	r3, [pc, #72]	; (8004f74 <vPortExitCritical+0x50>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10a      	bne.n	8004f48 <vPortExitCritical+0x24>
	__asm volatile
 8004f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	607b      	str	r3, [r7, #4]
}
 8004f44:	bf00      	nop
 8004f46:	e7fe      	b.n	8004f46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004f48:	4b0a      	ldr	r3, [pc, #40]	; (8004f74 <vPortExitCritical+0x50>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	4a09      	ldr	r2, [pc, #36]	; (8004f74 <vPortExitCritical+0x50>)
 8004f50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f52:	4b08      	ldr	r3, [pc, #32]	; (8004f74 <vPortExitCritical+0x50>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d105      	bne.n	8004f66 <vPortExitCritical+0x42>
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	f383 8811 	msr	BASEPRI, r3
}
 8004f64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	2000000c 	.word	0x2000000c
	...

08004f80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f80:	f3ef 8009 	mrs	r0, PSP
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	4b15      	ldr	r3, [pc, #84]	; (8004fe0 <pxCurrentTCBConst>)
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	f01e 0f10 	tst.w	lr, #16
 8004f90:	bf08      	it	eq
 8004f92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004f96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f9a:	6010      	str	r0, [r2, #0]
 8004f9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004fa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004fa4:	f380 8811 	msr	BASEPRI, r0
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	f3bf 8f6f 	isb	sy
 8004fb0:	f7fe ff16 	bl	8003de0 <vTaskSwitchContext>
 8004fb4:	f04f 0000 	mov.w	r0, #0
 8004fb8:	f380 8811 	msr	BASEPRI, r0
 8004fbc:	bc09      	pop	{r0, r3}
 8004fbe:	6819      	ldr	r1, [r3, #0]
 8004fc0:	6808      	ldr	r0, [r1, #0]
 8004fc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fc6:	f01e 0f10 	tst.w	lr, #16
 8004fca:	bf08      	it	eq
 8004fcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004fd0:	f380 8809 	msr	PSP, r0
 8004fd4:	f3bf 8f6f 	isb	sy
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	f3af 8000 	nop.w

08004fe0 <pxCurrentTCBConst>:
 8004fe0:	200008ac 	.word	0x200008ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004fe4:	bf00      	nop
 8004fe6:	bf00      	nop

08004fe8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
	__asm volatile
 8004fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	607b      	str	r3, [r7, #4]
}
 8005000:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005002:	f7fe fe35 	bl	8003c70 <xTaskIncrementTick>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d003      	beq.n	8005014 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800500c:	4b06      	ldr	r3, [pc, #24]	; (8005028 <SysTick_Handler+0x40>)
 800500e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	2300      	movs	r3, #0
 8005016:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	f383 8811 	msr	BASEPRI, r3
}
 800501e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005020:	bf00      	nop
 8005022:	3708      	adds	r7, #8
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	e000ed04 	.word	0xe000ed04

0800502c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005030:	4b0b      	ldr	r3, [pc, #44]	; (8005060 <vPortSetupTimerInterrupt+0x34>)
 8005032:	2200      	movs	r2, #0
 8005034:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005036:	4b0b      	ldr	r3, [pc, #44]	; (8005064 <vPortSetupTimerInterrupt+0x38>)
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800503c:	4b0a      	ldr	r3, [pc, #40]	; (8005068 <vPortSetupTimerInterrupt+0x3c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a0a      	ldr	r2, [pc, #40]	; (800506c <vPortSetupTimerInterrupt+0x40>)
 8005042:	fba2 2303 	umull	r2, r3, r2, r3
 8005046:	099b      	lsrs	r3, r3, #6
 8005048:	4a09      	ldr	r2, [pc, #36]	; (8005070 <vPortSetupTimerInterrupt+0x44>)
 800504a:	3b01      	subs	r3, #1
 800504c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800504e:	4b04      	ldr	r3, [pc, #16]	; (8005060 <vPortSetupTimerInterrupt+0x34>)
 8005050:	2207      	movs	r2, #7
 8005052:	601a      	str	r2, [r3, #0]
}
 8005054:	bf00      	nop
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	e000e010 	.word	0xe000e010
 8005064:	e000e018 	.word	0xe000e018
 8005068:	20000000 	.word	0x20000000
 800506c:	10624dd3 	.word	0x10624dd3
 8005070:	e000e014 	.word	0xe000e014

08005074 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005074:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005084 <vPortEnableVFP+0x10>
 8005078:	6801      	ldr	r1, [r0, #0]
 800507a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800507e:	6001      	str	r1, [r0, #0]
 8005080:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005082:	bf00      	nop
 8005084:	e000ed88 	.word	0xe000ed88

08005088 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800508e:	f3ef 8305 	mrs	r3, IPSR
 8005092:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2b0f      	cmp	r3, #15
 8005098:	d914      	bls.n	80050c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800509a:	4a17      	ldr	r2, [pc, #92]	; (80050f8 <vPortValidateInterruptPriority+0x70>)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4413      	add	r3, r2
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80050a4:	4b15      	ldr	r3, [pc, #84]	; (80050fc <vPortValidateInterruptPriority+0x74>)
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	7afa      	ldrb	r2, [r7, #11]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d20a      	bcs.n	80050c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80050ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	607b      	str	r3, [r7, #4]
}
 80050c0:	bf00      	nop
 80050c2:	e7fe      	b.n	80050c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80050c4:	4b0e      	ldr	r3, [pc, #56]	; (8005100 <vPortValidateInterruptPriority+0x78>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80050cc:	4b0d      	ldr	r3, [pc, #52]	; (8005104 <vPortValidateInterruptPriority+0x7c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d90a      	bls.n	80050ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80050d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d8:	f383 8811 	msr	BASEPRI, r3
 80050dc:	f3bf 8f6f 	isb	sy
 80050e0:	f3bf 8f4f 	dsb	sy
 80050e4:	603b      	str	r3, [r7, #0]
}
 80050e6:	bf00      	nop
 80050e8:	e7fe      	b.n	80050e8 <vPortValidateInterruptPriority+0x60>
	}
 80050ea:	bf00      	nop
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	e000e3f0 	.word	0xe000e3f0
 80050fc:	20000ad4 	.word	0x20000ad4
 8005100:	e000ed0c 	.word	0xe000ed0c
 8005104:	20000ad8 	.word	0x20000ad8

08005108 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b08a      	sub	sp, #40	; 0x28
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005110:	2300      	movs	r3, #0
 8005112:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005114:	f7fe fcf2 	bl	8003afc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005118:	4b5b      	ldr	r3, [pc, #364]	; (8005288 <pvPortMalloc+0x180>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d101      	bne.n	8005124 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005120:	f000 f920 	bl	8005364 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005124:	4b59      	ldr	r3, [pc, #356]	; (800528c <pvPortMalloc+0x184>)
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4013      	ands	r3, r2
 800512c:	2b00      	cmp	r3, #0
 800512e:	f040 8093 	bne.w	8005258 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d01d      	beq.n	8005174 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005138:	2208      	movs	r2, #8
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4413      	add	r3, r2
 800513e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f003 0307 	and.w	r3, r3, #7
 8005146:	2b00      	cmp	r3, #0
 8005148:	d014      	beq.n	8005174 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f023 0307 	bic.w	r3, r3, #7
 8005150:	3308      	adds	r3, #8
 8005152:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f003 0307 	and.w	r3, r3, #7
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00a      	beq.n	8005174 <pvPortMalloc+0x6c>
	__asm volatile
 800515e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005162:	f383 8811 	msr	BASEPRI, r3
 8005166:	f3bf 8f6f 	isb	sy
 800516a:	f3bf 8f4f 	dsb	sy
 800516e:	617b      	str	r3, [r7, #20]
}
 8005170:	bf00      	nop
 8005172:	e7fe      	b.n	8005172 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d06e      	beq.n	8005258 <pvPortMalloc+0x150>
 800517a:	4b45      	ldr	r3, [pc, #276]	; (8005290 <pvPortMalloc+0x188>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	429a      	cmp	r2, r3
 8005182:	d869      	bhi.n	8005258 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005184:	4b43      	ldr	r3, [pc, #268]	; (8005294 <pvPortMalloc+0x18c>)
 8005186:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005188:	4b42      	ldr	r3, [pc, #264]	; (8005294 <pvPortMalloc+0x18c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800518e:	e004      	b.n	800519a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005192:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d903      	bls.n	80051ac <pvPortMalloc+0xa4>
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1f1      	bne.n	8005190 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80051ac:	4b36      	ldr	r3, [pc, #216]	; (8005288 <pvPortMalloc+0x180>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d050      	beq.n	8005258 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80051b6:	6a3b      	ldr	r3, [r7, #32]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2208      	movs	r2, #8
 80051bc:	4413      	add	r3, r2
 80051be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80051c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	1ad2      	subs	r2, r2, r3
 80051d0:	2308      	movs	r3, #8
 80051d2:	005b      	lsls	r3, r3, #1
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d91f      	bls.n	8005218 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80051d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4413      	add	r3, r2
 80051de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	f003 0307 	and.w	r3, r3, #7
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <pvPortMalloc+0xf8>
	__asm volatile
 80051ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ee:	f383 8811 	msr	BASEPRI, r3
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	f3bf 8f4f 	dsb	sy
 80051fa:	613b      	str	r3, [r7, #16]
}
 80051fc:	bf00      	nop
 80051fe:	e7fe      	b.n	80051fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	1ad2      	subs	r2, r2, r3
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005212:	69b8      	ldr	r0, [r7, #24]
 8005214:	f000 f908 	bl	8005428 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005218:	4b1d      	ldr	r3, [pc, #116]	; (8005290 <pvPortMalloc+0x188>)
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	4a1b      	ldr	r2, [pc, #108]	; (8005290 <pvPortMalloc+0x188>)
 8005224:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005226:	4b1a      	ldr	r3, [pc, #104]	; (8005290 <pvPortMalloc+0x188>)
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	4b1b      	ldr	r3, [pc, #108]	; (8005298 <pvPortMalloc+0x190>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	429a      	cmp	r2, r3
 8005230:	d203      	bcs.n	800523a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005232:	4b17      	ldr	r3, [pc, #92]	; (8005290 <pvPortMalloc+0x188>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a18      	ldr	r2, [pc, #96]	; (8005298 <pvPortMalloc+0x190>)
 8005238:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	4b13      	ldr	r3, [pc, #76]	; (800528c <pvPortMalloc+0x184>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	431a      	orrs	r2, r3
 8005244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005246:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	2200      	movs	r2, #0
 800524c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800524e:	4b13      	ldr	r3, [pc, #76]	; (800529c <pvPortMalloc+0x194>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3301      	adds	r3, #1
 8005254:	4a11      	ldr	r2, [pc, #68]	; (800529c <pvPortMalloc+0x194>)
 8005256:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005258:	f7fe fc5e 	bl	8003b18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	f003 0307 	and.w	r3, r3, #7
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00a      	beq.n	800527c <pvPortMalloc+0x174>
	__asm volatile
 8005266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526a:	f383 8811 	msr	BASEPRI, r3
 800526e:	f3bf 8f6f 	isb	sy
 8005272:	f3bf 8f4f 	dsb	sy
 8005276:	60fb      	str	r3, [r7, #12]
}
 8005278:	bf00      	nop
 800527a:	e7fe      	b.n	800527a <pvPortMalloc+0x172>
	return pvReturn;
 800527c:	69fb      	ldr	r3, [r7, #28]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3728      	adds	r7, #40	; 0x28
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	200046e4 	.word	0x200046e4
 800528c:	200046f8 	.word	0x200046f8
 8005290:	200046e8 	.word	0x200046e8
 8005294:	200046dc 	.word	0x200046dc
 8005298:	200046ec 	.word	0x200046ec
 800529c:	200046f0 	.word	0x200046f0

080052a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d04d      	beq.n	800534e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80052b2:	2308      	movs	r3, #8
 80052b4:	425b      	negs	r3, r3
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	4413      	add	r3, r2
 80052ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	4b24      	ldr	r3, [pc, #144]	; (8005358 <vPortFree+0xb8>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4013      	ands	r3, r2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10a      	bne.n	80052e4 <vPortFree+0x44>
	__asm volatile
 80052ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d2:	f383 8811 	msr	BASEPRI, r3
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	60fb      	str	r3, [r7, #12]
}
 80052e0:	bf00      	nop
 80052e2:	e7fe      	b.n	80052e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00a      	beq.n	8005302 <vPortFree+0x62>
	__asm volatile
 80052ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f0:	f383 8811 	msr	BASEPRI, r3
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	60bb      	str	r3, [r7, #8]
}
 80052fe:	bf00      	nop
 8005300:	e7fe      	b.n	8005300 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	4b14      	ldr	r3, [pc, #80]	; (8005358 <vPortFree+0xb8>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4013      	ands	r3, r2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d01e      	beq.n	800534e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d11a      	bne.n	800534e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	4b0e      	ldr	r3, [pc, #56]	; (8005358 <vPortFree+0xb8>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	43db      	mvns	r3, r3
 8005322:	401a      	ands	r2, r3
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005328:	f7fe fbe8 	bl	8003afc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	4b0a      	ldr	r3, [pc, #40]	; (800535c <vPortFree+0xbc>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4413      	add	r3, r2
 8005336:	4a09      	ldr	r2, [pc, #36]	; (800535c <vPortFree+0xbc>)
 8005338:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800533a:	6938      	ldr	r0, [r7, #16]
 800533c:	f000 f874 	bl	8005428 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005340:	4b07      	ldr	r3, [pc, #28]	; (8005360 <vPortFree+0xc0>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3301      	adds	r3, #1
 8005346:	4a06      	ldr	r2, [pc, #24]	; (8005360 <vPortFree+0xc0>)
 8005348:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800534a:	f7fe fbe5 	bl	8003b18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800534e:	bf00      	nop
 8005350:	3718      	adds	r7, #24
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	200046f8 	.word	0x200046f8
 800535c:	200046e8 	.word	0x200046e8
 8005360:	200046f4 	.word	0x200046f4

08005364 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800536a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800536e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005370:	4b27      	ldr	r3, [pc, #156]	; (8005410 <prvHeapInit+0xac>)
 8005372:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f003 0307 	and.w	r3, r3, #7
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00c      	beq.n	8005398 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	3307      	adds	r3, #7
 8005382:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f023 0307 	bic.w	r3, r3, #7
 800538a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	4a1f      	ldr	r2, [pc, #124]	; (8005410 <prvHeapInit+0xac>)
 8005394:	4413      	add	r3, r2
 8005396:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800539c:	4a1d      	ldr	r2, [pc, #116]	; (8005414 <prvHeapInit+0xb0>)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80053a2:	4b1c      	ldr	r3, [pc, #112]	; (8005414 <prvHeapInit+0xb0>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	4413      	add	r3, r2
 80053ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80053b0:	2208      	movs	r2, #8
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	1a9b      	subs	r3, r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 0307 	bic.w	r3, r3, #7
 80053be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4a15      	ldr	r2, [pc, #84]	; (8005418 <prvHeapInit+0xb4>)
 80053c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80053c6:	4b14      	ldr	r3, [pc, #80]	; (8005418 <prvHeapInit+0xb4>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2200      	movs	r2, #0
 80053cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80053ce:	4b12      	ldr	r3, [pc, #72]	; (8005418 <prvHeapInit+0xb4>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2200      	movs	r2, #0
 80053d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	1ad2      	subs	r2, r2, r3
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80053e4:	4b0c      	ldr	r3, [pc, #48]	; (8005418 <prvHeapInit+0xb4>)
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	4a0a      	ldr	r2, [pc, #40]	; (800541c <prvHeapInit+0xb8>)
 80053f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	4a09      	ldr	r2, [pc, #36]	; (8005420 <prvHeapInit+0xbc>)
 80053fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80053fc:	4b09      	ldr	r3, [pc, #36]	; (8005424 <prvHeapInit+0xc0>)
 80053fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005402:	601a      	str	r2, [r3, #0]
}
 8005404:	bf00      	nop
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	20000adc 	.word	0x20000adc
 8005414:	200046dc 	.word	0x200046dc
 8005418:	200046e4 	.word	0x200046e4
 800541c:	200046ec 	.word	0x200046ec
 8005420:	200046e8 	.word	0x200046e8
 8005424:	200046f8 	.word	0x200046f8

08005428 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005430:	4b28      	ldr	r3, [pc, #160]	; (80054d4 <prvInsertBlockIntoFreeList+0xac>)
 8005432:	60fb      	str	r3, [r7, #12]
 8005434:	e002      	b.n	800543c <prvInsertBlockIntoFreeList+0x14>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	60fb      	str	r3, [r7, #12]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	429a      	cmp	r2, r3
 8005444:	d8f7      	bhi.n	8005436 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	4413      	add	r3, r2
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	429a      	cmp	r2, r3
 8005456:	d108      	bne.n	800546a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	441a      	add	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	441a      	add	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	429a      	cmp	r2, r3
 800547c:	d118      	bne.n	80054b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	4b15      	ldr	r3, [pc, #84]	; (80054d8 <prvInsertBlockIntoFreeList+0xb0>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	429a      	cmp	r2, r3
 8005488:	d00d      	beq.n	80054a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685a      	ldr	r2, [r3, #4]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	441a      	add	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	e008      	b.n	80054b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80054a6:	4b0c      	ldr	r3, [pc, #48]	; (80054d8 <prvInsertBlockIntoFreeList+0xb0>)
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	601a      	str	r2, [r3, #0]
 80054ae:	e003      	b.n	80054b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d002      	beq.n	80054c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054c6:	bf00      	nop
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	200046dc 	.word	0x200046dc
 80054d8:	200046e4 	.word	0x200046e4

080054dc <std>:
 80054dc:	2300      	movs	r3, #0
 80054de:	b510      	push	{r4, lr}
 80054e0:	4604      	mov	r4, r0
 80054e2:	e9c0 3300 	strd	r3, r3, [r0]
 80054e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054ea:	6083      	str	r3, [r0, #8]
 80054ec:	8181      	strh	r1, [r0, #12]
 80054ee:	6643      	str	r3, [r0, #100]	; 0x64
 80054f0:	81c2      	strh	r2, [r0, #14]
 80054f2:	6183      	str	r3, [r0, #24]
 80054f4:	4619      	mov	r1, r3
 80054f6:	2208      	movs	r2, #8
 80054f8:	305c      	adds	r0, #92	; 0x5c
 80054fa:	f000 f9e5 	bl	80058c8 <memset>
 80054fe:	4b0d      	ldr	r3, [pc, #52]	; (8005534 <std+0x58>)
 8005500:	6263      	str	r3, [r4, #36]	; 0x24
 8005502:	4b0d      	ldr	r3, [pc, #52]	; (8005538 <std+0x5c>)
 8005504:	62a3      	str	r3, [r4, #40]	; 0x28
 8005506:	4b0d      	ldr	r3, [pc, #52]	; (800553c <std+0x60>)
 8005508:	62e3      	str	r3, [r4, #44]	; 0x2c
 800550a:	4b0d      	ldr	r3, [pc, #52]	; (8005540 <std+0x64>)
 800550c:	6323      	str	r3, [r4, #48]	; 0x30
 800550e:	4b0d      	ldr	r3, [pc, #52]	; (8005544 <std+0x68>)
 8005510:	6224      	str	r4, [r4, #32]
 8005512:	429c      	cmp	r4, r3
 8005514:	d006      	beq.n	8005524 <std+0x48>
 8005516:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800551a:	4294      	cmp	r4, r2
 800551c:	d002      	beq.n	8005524 <std+0x48>
 800551e:	33d0      	adds	r3, #208	; 0xd0
 8005520:	429c      	cmp	r4, r3
 8005522:	d105      	bne.n	8005530 <std+0x54>
 8005524:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800552c:	f000 ba9a 	b.w	8005a64 <__retarget_lock_init_recursive>
 8005530:	bd10      	pop	{r4, pc}
 8005532:	bf00      	nop
 8005534:	08005719 	.word	0x08005719
 8005538:	0800573b 	.word	0x0800573b
 800553c:	08005773 	.word	0x08005773
 8005540:	08005797 	.word	0x08005797
 8005544:	200046fc 	.word	0x200046fc

08005548 <stdio_exit_handler>:
 8005548:	4a02      	ldr	r2, [pc, #8]	; (8005554 <stdio_exit_handler+0xc>)
 800554a:	4903      	ldr	r1, [pc, #12]	; (8005558 <stdio_exit_handler+0x10>)
 800554c:	4803      	ldr	r0, [pc, #12]	; (800555c <stdio_exit_handler+0x14>)
 800554e:	f000 b869 	b.w	8005624 <_fwalk_sglue>
 8005552:	bf00      	nop
 8005554:	20000010 	.word	0x20000010
 8005558:	08005d85 	.word	0x08005d85
 800555c:	2000001c 	.word	0x2000001c

08005560 <cleanup_stdio>:
 8005560:	6841      	ldr	r1, [r0, #4]
 8005562:	4b0c      	ldr	r3, [pc, #48]	; (8005594 <cleanup_stdio+0x34>)
 8005564:	4299      	cmp	r1, r3
 8005566:	b510      	push	{r4, lr}
 8005568:	4604      	mov	r4, r0
 800556a:	d001      	beq.n	8005570 <cleanup_stdio+0x10>
 800556c:	f000 fc0a 	bl	8005d84 <_fflush_r>
 8005570:	68a1      	ldr	r1, [r4, #8]
 8005572:	4b09      	ldr	r3, [pc, #36]	; (8005598 <cleanup_stdio+0x38>)
 8005574:	4299      	cmp	r1, r3
 8005576:	d002      	beq.n	800557e <cleanup_stdio+0x1e>
 8005578:	4620      	mov	r0, r4
 800557a:	f000 fc03 	bl	8005d84 <_fflush_r>
 800557e:	68e1      	ldr	r1, [r4, #12]
 8005580:	4b06      	ldr	r3, [pc, #24]	; (800559c <cleanup_stdio+0x3c>)
 8005582:	4299      	cmp	r1, r3
 8005584:	d004      	beq.n	8005590 <cleanup_stdio+0x30>
 8005586:	4620      	mov	r0, r4
 8005588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800558c:	f000 bbfa 	b.w	8005d84 <_fflush_r>
 8005590:	bd10      	pop	{r4, pc}
 8005592:	bf00      	nop
 8005594:	200046fc 	.word	0x200046fc
 8005598:	20004764 	.word	0x20004764
 800559c:	200047cc 	.word	0x200047cc

080055a0 <global_stdio_init.part.0>:
 80055a0:	b510      	push	{r4, lr}
 80055a2:	4b0b      	ldr	r3, [pc, #44]	; (80055d0 <global_stdio_init.part.0+0x30>)
 80055a4:	4c0b      	ldr	r4, [pc, #44]	; (80055d4 <global_stdio_init.part.0+0x34>)
 80055a6:	4a0c      	ldr	r2, [pc, #48]	; (80055d8 <global_stdio_init.part.0+0x38>)
 80055a8:	601a      	str	r2, [r3, #0]
 80055aa:	4620      	mov	r0, r4
 80055ac:	2200      	movs	r2, #0
 80055ae:	2104      	movs	r1, #4
 80055b0:	f7ff ff94 	bl	80054dc <std>
 80055b4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80055b8:	2201      	movs	r2, #1
 80055ba:	2109      	movs	r1, #9
 80055bc:	f7ff ff8e 	bl	80054dc <std>
 80055c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80055c4:	2202      	movs	r2, #2
 80055c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055ca:	2112      	movs	r1, #18
 80055cc:	f7ff bf86 	b.w	80054dc <std>
 80055d0:	20004834 	.word	0x20004834
 80055d4:	200046fc 	.word	0x200046fc
 80055d8:	08005549 	.word	0x08005549

080055dc <__sfp_lock_acquire>:
 80055dc:	4801      	ldr	r0, [pc, #4]	; (80055e4 <__sfp_lock_acquire+0x8>)
 80055de:	f000 ba42 	b.w	8005a66 <__retarget_lock_acquire_recursive>
 80055e2:	bf00      	nop
 80055e4:	2000483d 	.word	0x2000483d

080055e8 <__sfp_lock_release>:
 80055e8:	4801      	ldr	r0, [pc, #4]	; (80055f0 <__sfp_lock_release+0x8>)
 80055ea:	f000 ba3d 	b.w	8005a68 <__retarget_lock_release_recursive>
 80055ee:	bf00      	nop
 80055f0:	2000483d 	.word	0x2000483d

080055f4 <__sinit>:
 80055f4:	b510      	push	{r4, lr}
 80055f6:	4604      	mov	r4, r0
 80055f8:	f7ff fff0 	bl	80055dc <__sfp_lock_acquire>
 80055fc:	6a23      	ldr	r3, [r4, #32]
 80055fe:	b11b      	cbz	r3, 8005608 <__sinit+0x14>
 8005600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005604:	f7ff bff0 	b.w	80055e8 <__sfp_lock_release>
 8005608:	4b04      	ldr	r3, [pc, #16]	; (800561c <__sinit+0x28>)
 800560a:	6223      	str	r3, [r4, #32]
 800560c:	4b04      	ldr	r3, [pc, #16]	; (8005620 <__sinit+0x2c>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1f5      	bne.n	8005600 <__sinit+0xc>
 8005614:	f7ff ffc4 	bl	80055a0 <global_stdio_init.part.0>
 8005618:	e7f2      	b.n	8005600 <__sinit+0xc>
 800561a:	bf00      	nop
 800561c:	08005561 	.word	0x08005561
 8005620:	20004834 	.word	0x20004834

08005624 <_fwalk_sglue>:
 8005624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005628:	4607      	mov	r7, r0
 800562a:	4688      	mov	r8, r1
 800562c:	4614      	mov	r4, r2
 800562e:	2600      	movs	r6, #0
 8005630:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005634:	f1b9 0901 	subs.w	r9, r9, #1
 8005638:	d505      	bpl.n	8005646 <_fwalk_sglue+0x22>
 800563a:	6824      	ldr	r4, [r4, #0]
 800563c:	2c00      	cmp	r4, #0
 800563e:	d1f7      	bne.n	8005630 <_fwalk_sglue+0xc>
 8005640:	4630      	mov	r0, r6
 8005642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005646:	89ab      	ldrh	r3, [r5, #12]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d907      	bls.n	800565c <_fwalk_sglue+0x38>
 800564c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005650:	3301      	adds	r3, #1
 8005652:	d003      	beq.n	800565c <_fwalk_sglue+0x38>
 8005654:	4629      	mov	r1, r5
 8005656:	4638      	mov	r0, r7
 8005658:	47c0      	blx	r8
 800565a:	4306      	orrs	r6, r0
 800565c:	3568      	adds	r5, #104	; 0x68
 800565e:	e7e9      	b.n	8005634 <_fwalk_sglue+0x10>

08005660 <_puts_r>:
 8005660:	6a03      	ldr	r3, [r0, #32]
 8005662:	b570      	push	{r4, r5, r6, lr}
 8005664:	6884      	ldr	r4, [r0, #8]
 8005666:	4605      	mov	r5, r0
 8005668:	460e      	mov	r6, r1
 800566a:	b90b      	cbnz	r3, 8005670 <_puts_r+0x10>
 800566c:	f7ff ffc2 	bl	80055f4 <__sinit>
 8005670:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005672:	07db      	lsls	r3, r3, #31
 8005674:	d405      	bmi.n	8005682 <_puts_r+0x22>
 8005676:	89a3      	ldrh	r3, [r4, #12]
 8005678:	0598      	lsls	r0, r3, #22
 800567a:	d402      	bmi.n	8005682 <_puts_r+0x22>
 800567c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800567e:	f000 f9f2 	bl	8005a66 <__retarget_lock_acquire_recursive>
 8005682:	89a3      	ldrh	r3, [r4, #12]
 8005684:	0719      	lsls	r1, r3, #28
 8005686:	d513      	bpl.n	80056b0 <_puts_r+0x50>
 8005688:	6923      	ldr	r3, [r4, #16]
 800568a:	b18b      	cbz	r3, 80056b0 <_puts_r+0x50>
 800568c:	3e01      	subs	r6, #1
 800568e:	68a3      	ldr	r3, [r4, #8]
 8005690:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005694:	3b01      	subs	r3, #1
 8005696:	60a3      	str	r3, [r4, #8]
 8005698:	b9e9      	cbnz	r1, 80056d6 <_puts_r+0x76>
 800569a:	2b00      	cmp	r3, #0
 800569c:	da2e      	bge.n	80056fc <_puts_r+0x9c>
 800569e:	4622      	mov	r2, r4
 80056a0:	210a      	movs	r1, #10
 80056a2:	4628      	mov	r0, r5
 80056a4:	f000 f87b 	bl	800579e <__swbuf_r>
 80056a8:	3001      	adds	r0, #1
 80056aa:	d007      	beq.n	80056bc <_puts_r+0x5c>
 80056ac:	250a      	movs	r5, #10
 80056ae:	e007      	b.n	80056c0 <_puts_r+0x60>
 80056b0:	4621      	mov	r1, r4
 80056b2:	4628      	mov	r0, r5
 80056b4:	f000 f8b0 	bl	8005818 <__swsetup_r>
 80056b8:	2800      	cmp	r0, #0
 80056ba:	d0e7      	beq.n	800568c <_puts_r+0x2c>
 80056bc:	f04f 35ff 	mov.w	r5, #4294967295
 80056c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056c2:	07da      	lsls	r2, r3, #31
 80056c4:	d405      	bmi.n	80056d2 <_puts_r+0x72>
 80056c6:	89a3      	ldrh	r3, [r4, #12]
 80056c8:	059b      	lsls	r3, r3, #22
 80056ca:	d402      	bmi.n	80056d2 <_puts_r+0x72>
 80056cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056ce:	f000 f9cb 	bl	8005a68 <__retarget_lock_release_recursive>
 80056d2:	4628      	mov	r0, r5
 80056d4:	bd70      	pop	{r4, r5, r6, pc}
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	da04      	bge.n	80056e4 <_puts_r+0x84>
 80056da:	69a2      	ldr	r2, [r4, #24]
 80056dc:	429a      	cmp	r2, r3
 80056de:	dc06      	bgt.n	80056ee <_puts_r+0x8e>
 80056e0:	290a      	cmp	r1, #10
 80056e2:	d004      	beq.n	80056ee <_puts_r+0x8e>
 80056e4:	6823      	ldr	r3, [r4, #0]
 80056e6:	1c5a      	adds	r2, r3, #1
 80056e8:	6022      	str	r2, [r4, #0]
 80056ea:	7019      	strb	r1, [r3, #0]
 80056ec:	e7cf      	b.n	800568e <_puts_r+0x2e>
 80056ee:	4622      	mov	r2, r4
 80056f0:	4628      	mov	r0, r5
 80056f2:	f000 f854 	bl	800579e <__swbuf_r>
 80056f6:	3001      	adds	r0, #1
 80056f8:	d1c9      	bne.n	800568e <_puts_r+0x2e>
 80056fa:	e7df      	b.n	80056bc <_puts_r+0x5c>
 80056fc:	6823      	ldr	r3, [r4, #0]
 80056fe:	250a      	movs	r5, #10
 8005700:	1c5a      	adds	r2, r3, #1
 8005702:	6022      	str	r2, [r4, #0]
 8005704:	701d      	strb	r5, [r3, #0]
 8005706:	e7db      	b.n	80056c0 <_puts_r+0x60>

08005708 <puts>:
 8005708:	4b02      	ldr	r3, [pc, #8]	; (8005714 <puts+0xc>)
 800570a:	4601      	mov	r1, r0
 800570c:	6818      	ldr	r0, [r3, #0]
 800570e:	f7ff bfa7 	b.w	8005660 <_puts_r>
 8005712:	bf00      	nop
 8005714:	20000068 	.word	0x20000068

08005718 <__sread>:
 8005718:	b510      	push	{r4, lr}
 800571a:	460c      	mov	r4, r1
 800571c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005720:	f000 f952 	bl	80059c8 <_read_r>
 8005724:	2800      	cmp	r0, #0
 8005726:	bfab      	itete	ge
 8005728:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800572a:	89a3      	ldrhlt	r3, [r4, #12]
 800572c:	181b      	addge	r3, r3, r0
 800572e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005732:	bfac      	ite	ge
 8005734:	6563      	strge	r3, [r4, #84]	; 0x54
 8005736:	81a3      	strhlt	r3, [r4, #12]
 8005738:	bd10      	pop	{r4, pc}

0800573a <__swrite>:
 800573a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800573e:	461f      	mov	r7, r3
 8005740:	898b      	ldrh	r3, [r1, #12]
 8005742:	05db      	lsls	r3, r3, #23
 8005744:	4605      	mov	r5, r0
 8005746:	460c      	mov	r4, r1
 8005748:	4616      	mov	r6, r2
 800574a:	d505      	bpl.n	8005758 <__swrite+0x1e>
 800574c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005750:	2302      	movs	r3, #2
 8005752:	2200      	movs	r2, #0
 8005754:	f000 f926 	bl	80059a4 <_lseek_r>
 8005758:	89a3      	ldrh	r3, [r4, #12]
 800575a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800575e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005762:	81a3      	strh	r3, [r4, #12]
 8005764:	4632      	mov	r2, r6
 8005766:	463b      	mov	r3, r7
 8005768:	4628      	mov	r0, r5
 800576a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800576e:	f000 b93d 	b.w	80059ec <_write_r>

08005772 <__sseek>:
 8005772:	b510      	push	{r4, lr}
 8005774:	460c      	mov	r4, r1
 8005776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800577a:	f000 f913 	bl	80059a4 <_lseek_r>
 800577e:	1c43      	adds	r3, r0, #1
 8005780:	89a3      	ldrh	r3, [r4, #12]
 8005782:	bf15      	itete	ne
 8005784:	6560      	strne	r0, [r4, #84]	; 0x54
 8005786:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800578a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800578e:	81a3      	strheq	r3, [r4, #12]
 8005790:	bf18      	it	ne
 8005792:	81a3      	strhne	r3, [r4, #12]
 8005794:	bd10      	pop	{r4, pc}

08005796 <__sclose>:
 8005796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800579a:	f000 b89d 	b.w	80058d8 <_close_r>

0800579e <__swbuf_r>:
 800579e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057a0:	460e      	mov	r6, r1
 80057a2:	4614      	mov	r4, r2
 80057a4:	4605      	mov	r5, r0
 80057a6:	b118      	cbz	r0, 80057b0 <__swbuf_r+0x12>
 80057a8:	6a03      	ldr	r3, [r0, #32]
 80057aa:	b90b      	cbnz	r3, 80057b0 <__swbuf_r+0x12>
 80057ac:	f7ff ff22 	bl	80055f4 <__sinit>
 80057b0:	69a3      	ldr	r3, [r4, #24]
 80057b2:	60a3      	str	r3, [r4, #8]
 80057b4:	89a3      	ldrh	r3, [r4, #12]
 80057b6:	071a      	lsls	r2, r3, #28
 80057b8:	d525      	bpl.n	8005806 <__swbuf_r+0x68>
 80057ba:	6923      	ldr	r3, [r4, #16]
 80057bc:	b31b      	cbz	r3, 8005806 <__swbuf_r+0x68>
 80057be:	6823      	ldr	r3, [r4, #0]
 80057c0:	6922      	ldr	r2, [r4, #16]
 80057c2:	1a98      	subs	r0, r3, r2
 80057c4:	6963      	ldr	r3, [r4, #20]
 80057c6:	b2f6      	uxtb	r6, r6
 80057c8:	4283      	cmp	r3, r0
 80057ca:	4637      	mov	r7, r6
 80057cc:	dc04      	bgt.n	80057d8 <__swbuf_r+0x3a>
 80057ce:	4621      	mov	r1, r4
 80057d0:	4628      	mov	r0, r5
 80057d2:	f000 fad7 	bl	8005d84 <_fflush_r>
 80057d6:	b9e0      	cbnz	r0, 8005812 <__swbuf_r+0x74>
 80057d8:	68a3      	ldr	r3, [r4, #8]
 80057da:	3b01      	subs	r3, #1
 80057dc:	60a3      	str	r3, [r4, #8]
 80057de:	6823      	ldr	r3, [r4, #0]
 80057e0:	1c5a      	adds	r2, r3, #1
 80057e2:	6022      	str	r2, [r4, #0]
 80057e4:	701e      	strb	r6, [r3, #0]
 80057e6:	6962      	ldr	r2, [r4, #20]
 80057e8:	1c43      	adds	r3, r0, #1
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d004      	beq.n	80057f8 <__swbuf_r+0x5a>
 80057ee:	89a3      	ldrh	r3, [r4, #12]
 80057f0:	07db      	lsls	r3, r3, #31
 80057f2:	d506      	bpl.n	8005802 <__swbuf_r+0x64>
 80057f4:	2e0a      	cmp	r6, #10
 80057f6:	d104      	bne.n	8005802 <__swbuf_r+0x64>
 80057f8:	4621      	mov	r1, r4
 80057fa:	4628      	mov	r0, r5
 80057fc:	f000 fac2 	bl	8005d84 <_fflush_r>
 8005800:	b938      	cbnz	r0, 8005812 <__swbuf_r+0x74>
 8005802:	4638      	mov	r0, r7
 8005804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005806:	4621      	mov	r1, r4
 8005808:	4628      	mov	r0, r5
 800580a:	f000 f805 	bl	8005818 <__swsetup_r>
 800580e:	2800      	cmp	r0, #0
 8005810:	d0d5      	beq.n	80057be <__swbuf_r+0x20>
 8005812:	f04f 37ff 	mov.w	r7, #4294967295
 8005816:	e7f4      	b.n	8005802 <__swbuf_r+0x64>

08005818 <__swsetup_r>:
 8005818:	b538      	push	{r3, r4, r5, lr}
 800581a:	4b2a      	ldr	r3, [pc, #168]	; (80058c4 <__swsetup_r+0xac>)
 800581c:	4605      	mov	r5, r0
 800581e:	6818      	ldr	r0, [r3, #0]
 8005820:	460c      	mov	r4, r1
 8005822:	b118      	cbz	r0, 800582c <__swsetup_r+0x14>
 8005824:	6a03      	ldr	r3, [r0, #32]
 8005826:	b90b      	cbnz	r3, 800582c <__swsetup_r+0x14>
 8005828:	f7ff fee4 	bl	80055f4 <__sinit>
 800582c:	89a3      	ldrh	r3, [r4, #12]
 800582e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005832:	0718      	lsls	r0, r3, #28
 8005834:	d422      	bmi.n	800587c <__swsetup_r+0x64>
 8005836:	06d9      	lsls	r1, r3, #27
 8005838:	d407      	bmi.n	800584a <__swsetup_r+0x32>
 800583a:	2309      	movs	r3, #9
 800583c:	602b      	str	r3, [r5, #0]
 800583e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005842:	81a3      	strh	r3, [r4, #12]
 8005844:	f04f 30ff 	mov.w	r0, #4294967295
 8005848:	e034      	b.n	80058b4 <__swsetup_r+0x9c>
 800584a:	0758      	lsls	r0, r3, #29
 800584c:	d512      	bpl.n	8005874 <__swsetup_r+0x5c>
 800584e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005850:	b141      	cbz	r1, 8005864 <__swsetup_r+0x4c>
 8005852:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005856:	4299      	cmp	r1, r3
 8005858:	d002      	beq.n	8005860 <__swsetup_r+0x48>
 800585a:	4628      	mov	r0, r5
 800585c:	f000 f914 	bl	8005a88 <_free_r>
 8005860:	2300      	movs	r3, #0
 8005862:	6363      	str	r3, [r4, #52]	; 0x34
 8005864:	89a3      	ldrh	r3, [r4, #12]
 8005866:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800586a:	81a3      	strh	r3, [r4, #12]
 800586c:	2300      	movs	r3, #0
 800586e:	6063      	str	r3, [r4, #4]
 8005870:	6923      	ldr	r3, [r4, #16]
 8005872:	6023      	str	r3, [r4, #0]
 8005874:	89a3      	ldrh	r3, [r4, #12]
 8005876:	f043 0308 	orr.w	r3, r3, #8
 800587a:	81a3      	strh	r3, [r4, #12]
 800587c:	6923      	ldr	r3, [r4, #16]
 800587e:	b94b      	cbnz	r3, 8005894 <__swsetup_r+0x7c>
 8005880:	89a3      	ldrh	r3, [r4, #12]
 8005882:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005886:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800588a:	d003      	beq.n	8005894 <__swsetup_r+0x7c>
 800588c:	4621      	mov	r1, r4
 800588e:	4628      	mov	r0, r5
 8005890:	f000 fac6 	bl	8005e20 <__smakebuf_r>
 8005894:	89a0      	ldrh	r0, [r4, #12]
 8005896:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800589a:	f010 0301 	ands.w	r3, r0, #1
 800589e:	d00a      	beq.n	80058b6 <__swsetup_r+0x9e>
 80058a0:	2300      	movs	r3, #0
 80058a2:	60a3      	str	r3, [r4, #8]
 80058a4:	6963      	ldr	r3, [r4, #20]
 80058a6:	425b      	negs	r3, r3
 80058a8:	61a3      	str	r3, [r4, #24]
 80058aa:	6923      	ldr	r3, [r4, #16]
 80058ac:	b943      	cbnz	r3, 80058c0 <__swsetup_r+0xa8>
 80058ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80058b2:	d1c4      	bne.n	800583e <__swsetup_r+0x26>
 80058b4:	bd38      	pop	{r3, r4, r5, pc}
 80058b6:	0781      	lsls	r1, r0, #30
 80058b8:	bf58      	it	pl
 80058ba:	6963      	ldrpl	r3, [r4, #20]
 80058bc:	60a3      	str	r3, [r4, #8]
 80058be:	e7f4      	b.n	80058aa <__swsetup_r+0x92>
 80058c0:	2000      	movs	r0, #0
 80058c2:	e7f7      	b.n	80058b4 <__swsetup_r+0x9c>
 80058c4:	20000068 	.word	0x20000068

080058c8 <memset>:
 80058c8:	4402      	add	r2, r0
 80058ca:	4603      	mov	r3, r0
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d100      	bne.n	80058d2 <memset+0xa>
 80058d0:	4770      	bx	lr
 80058d2:	f803 1b01 	strb.w	r1, [r3], #1
 80058d6:	e7f9      	b.n	80058cc <memset+0x4>

080058d8 <_close_r>:
 80058d8:	b538      	push	{r3, r4, r5, lr}
 80058da:	4d06      	ldr	r5, [pc, #24]	; (80058f4 <_close_r+0x1c>)
 80058dc:	2300      	movs	r3, #0
 80058de:	4604      	mov	r4, r0
 80058e0:	4608      	mov	r0, r1
 80058e2:	602b      	str	r3, [r5, #0]
 80058e4:	f7fb f8fd 	bl	8000ae2 <_close>
 80058e8:	1c43      	adds	r3, r0, #1
 80058ea:	d102      	bne.n	80058f2 <_close_r+0x1a>
 80058ec:	682b      	ldr	r3, [r5, #0]
 80058ee:	b103      	cbz	r3, 80058f2 <_close_r+0x1a>
 80058f0:	6023      	str	r3, [r4, #0]
 80058f2:	bd38      	pop	{r3, r4, r5, pc}
 80058f4:	20004838 	.word	0x20004838

080058f8 <_reclaim_reent>:
 80058f8:	4b29      	ldr	r3, [pc, #164]	; (80059a0 <_reclaim_reent+0xa8>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4283      	cmp	r3, r0
 80058fe:	b570      	push	{r4, r5, r6, lr}
 8005900:	4604      	mov	r4, r0
 8005902:	d04b      	beq.n	800599c <_reclaim_reent+0xa4>
 8005904:	69c3      	ldr	r3, [r0, #28]
 8005906:	b143      	cbz	r3, 800591a <_reclaim_reent+0x22>
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d144      	bne.n	8005998 <_reclaim_reent+0xa0>
 800590e:	69e3      	ldr	r3, [r4, #28]
 8005910:	6819      	ldr	r1, [r3, #0]
 8005912:	b111      	cbz	r1, 800591a <_reclaim_reent+0x22>
 8005914:	4620      	mov	r0, r4
 8005916:	f000 f8b7 	bl	8005a88 <_free_r>
 800591a:	6961      	ldr	r1, [r4, #20]
 800591c:	b111      	cbz	r1, 8005924 <_reclaim_reent+0x2c>
 800591e:	4620      	mov	r0, r4
 8005920:	f000 f8b2 	bl	8005a88 <_free_r>
 8005924:	69e1      	ldr	r1, [r4, #28]
 8005926:	b111      	cbz	r1, 800592e <_reclaim_reent+0x36>
 8005928:	4620      	mov	r0, r4
 800592a:	f000 f8ad 	bl	8005a88 <_free_r>
 800592e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005930:	b111      	cbz	r1, 8005938 <_reclaim_reent+0x40>
 8005932:	4620      	mov	r0, r4
 8005934:	f000 f8a8 	bl	8005a88 <_free_r>
 8005938:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800593a:	b111      	cbz	r1, 8005942 <_reclaim_reent+0x4a>
 800593c:	4620      	mov	r0, r4
 800593e:	f000 f8a3 	bl	8005a88 <_free_r>
 8005942:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005944:	b111      	cbz	r1, 800594c <_reclaim_reent+0x54>
 8005946:	4620      	mov	r0, r4
 8005948:	f000 f89e 	bl	8005a88 <_free_r>
 800594c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800594e:	b111      	cbz	r1, 8005956 <_reclaim_reent+0x5e>
 8005950:	4620      	mov	r0, r4
 8005952:	f000 f899 	bl	8005a88 <_free_r>
 8005956:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005958:	b111      	cbz	r1, 8005960 <_reclaim_reent+0x68>
 800595a:	4620      	mov	r0, r4
 800595c:	f000 f894 	bl	8005a88 <_free_r>
 8005960:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005962:	b111      	cbz	r1, 800596a <_reclaim_reent+0x72>
 8005964:	4620      	mov	r0, r4
 8005966:	f000 f88f 	bl	8005a88 <_free_r>
 800596a:	6a23      	ldr	r3, [r4, #32]
 800596c:	b1b3      	cbz	r3, 800599c <_reclaim_reent+0xa4>
 800596e:	4620      	mov	r0, r4
 8005970:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005974:	4718      	bx	r3
 8005976:	5949      	ldr	r1, [r1, r5]
 8005978:	b941      	cbnz	r1, 800598c <_reclaim_reent+0x94>
 800597a:	3504      	adds	r5, #4
 800597c:	69e3      	ldr	r3, [r4, #28]
 800597e:	2d80      	cmp	r5, #128	; 0x80
 8005980:	68d9      	ldr	r1, [r3, #12]
 8005982:	d1f8      	bne.n	8005976 <_reclaim_reent+0x7e>
 8005984:	4620      	mov	r0, r4
 8005986:	f000 f87f 	bl	8005a88 <_free_r>
 800598a:	e7c0      	b.n	800590e <_reclaim_reent+0x16>
 800598c:	680e      	ldr	r6, [r1, #0]
 800598e:	4620      	mov	r0, r4
 8005990:	f000 f87a 	bl	8005a88 <_free_r>
 8005994:	4631      	mov	r1, r6
 8005996:	e7ef      	b.n	8005978 <_reclaim_reent+0x80>
 8005998:	2500      	movs	r5, #0
 800599a:	e7ef      	b.n	800597c <_reclaim_reent+0x84>
 800599c:	bd70      	pop	{r4, r5, r6, pc}
 800599e:	bf00      	nop
 80059a0:	20000068 	.word	0x20000068

080059a4 <_lseek_r>:
 80059a4:	b538      	push	{r3, r4, r5, lr}
 80059a6:	4d07      	ldr	r5, [pc, #28]	; (80059c4 <_lseek_r+0x20>)
 80059a8:	4604      	mov	r4, r0
 80059aa:	4608      	mov	r0, r1
 80059ac:	4611      	mov	r1, r2
 80059ae:	2200      	movs	r2, #0
 80059b0:	602a      	str	r2, [r5, #0]
 80059b2:	461a      	mov	r2, r3
 80059b4:	f7fb f8bc 	bl	8000b30 <_lseek>
 80059b8:	1c43      	adds	r3, r0, #1
 80059ba:	d102      	bne.n	80059c2 <_lseek_r+0x1e>
 80059bc:	682b      	ldr	r3, [r5, #0]
 80059be:	b103      	cbz	r3, 80059c2 <_lseek_r+0x1e>
 80059c0:	6023      	str	r3, [r4, #0]
 80059c2:	bd38      	pop	{r3, r4, r5, pc}
 80059c4:	20004838 	.word	0x20004838

080059c8 <_read_r>:
 80059c8:	b538      	push	{r3, r4, r5, lr}
 80059ca:	4d07      	ldr	r5, [pc, #28]	; (80059e8 <_read_r+0x20>)
 80059cc:	4604      	mov	r4, r0
 80059ce:	4608      	mov	r0, r1
 80059d0:	4611      	mov	r1, r2
 80059d2:	2200      	movs	r2, #0
 80059d4:	602a      	str	r2, [r5, #0]
 80059d6:	461a      	mov	r2, r3
 80059d8:	f7fb f84a 	bl	8000a70 <_read>
 80059dc:	1c43      	adds	r3, r0, #1
 80059de:	d102      	bne.n	80059e6 <_read_r+0x1e>
 80059e0:	682b      	ldr	r3, [r5, #0]
 80059e2:	b103      	cbz	r3, 80059e6 <_read_r+0x1e>
 80059e4:	6023      	str	r3, [r4, #0]
 80059e6:	bd38      	pop	{r3, r4, r5, pc}
 80059e8:	20004838 	.word	0x20004838

080059ec <_write_r>:
 80059ec:	b538      	push	{r3, r4, r5, lr}
 80059ee:	4d07      	ldr	r5, [pc, #28]	; (8005a0c <_write_r+0x20>)
 80059f0:	4604      	mov	r4, r0
 80059f2:	4608      	mov	r0, r1
 80059f4:	4611      	mov	r1, r2
 80059f6:	2200      	movs	r2, #0
 80059f8:	602a      	str	r2, [r5, #0]
 80059fa:	461a      	mov	r2, r3
 80059fc:	f7fb f855 	bl	8000aaa <_write>
 8005a00:	1c43      	adds	r3, r0, #1
 8005a02:	d102      	bne.n	8005a0a <_write_r+0x1e>
 8005a04:	682b      	ldr	r3, [r5, #0]
 8005a06:	b103      	cbz	r3, 8005a0a <_write_r+0x1e>
 8005a08:	6023      	str	r3, [r4, #0]
 8005a0a:	bd38      	pop	{r3, r4, r5, pc}
 8005a0c:	20004838 	.word	0x20004838

08005a10 <__errno>:
 8005a10:	4b01      	ldr	r3, [pc, #4]	; (8005a18 <__errno+0x8>)
 8005a12:	6818      	ldr	r0, [r3, #0]
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	20000068 	.word	0x20000068

08005a1c <__libc_init_array>:
 8005a1c:	b570      	push	{r4, r5, r6, lr}
 8005a1e:	4d0d      	ldr	r5, [pc, #52]	; (8005a54 <__libc_init_array+0x38>)
 8005a20:	4c0d      	ldr	r4, [pc, #52]	; (8005a58 <__libc_init_array+0x3c>)
 8005a22:	1b64      	subs	r4, r4, r5
 8005a24:	10a4      	asrs	r4, r4, #2
 8005a26:	2600      	movs	r6, #0
 8005a28:	42a6      	cmp	r6, r4
 8005a2a:	d109      	bne.n	8005a40 <__libc_init_array+0x24>
 8005a2c:	4d0b      	ldr	r5, [pc, #44]	; (8005a5c <__libc_init_array+0x40>)
 8005a2e:	4c0c      	ldr	r4, [pc, #48]	; (8005a60 <__libc_init_array+0x44>)
 8005a30:	f000 fa64 	bl	8005efc <_init>
 8005a34:	1b64      	subs	r4, r4, r5
 8005a36:	10a4      	asrs	r4, r4, #2
 8005a38:	2600      	movs	r6, #0
 8005a3a:	42a6      	cmp	r6, r4
 8005a3c:	d105      	bne.n	8005a4a <__libc_init_array+0x2e>
 8005a3e:	bd70      	pop	{r4, r5, r6, pc}
 8005a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a44:	4798      	blx	r3
 8005a46:	3601      	adds	r6, #1
 8005a48:	e7ee      	b.n	8005a28 <__libc_init_array+0xc>
 8005a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a4e:	4798      	blx	r3
 8005a50:	3601      	adds	r6, #1
 8005a52:	e7f2      	b.n	8005a3a <__libc_init_array+0x1e>
 8005a54:	08006010 	.word	0x08006010
 8005a58:	08006010 	.word	0x08006010
 8005a5c:	08006010 	.word	0x08006010
 8005a60:	08006014 	.word	0x08006014

08005a64 <__retarget_lock_init_recursive>:
 8005a64:	4770      	bx	lr

08005a66 <__retarget_lock_acquire_recursive>:
 8005a66:	4770      	bx	lr

08005a68 <__retarget_lock_release_recursive>:
 8005a68:	4770      	bx	lr

08005a6a <memcpy>:
 8005a6a:	440a      	add	r2, r1
 8005a6c:	4291      	cmp	r1, r2
 8005a6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a72:	d100      	bne.n	8005a76 <memcpy+0xc>
 8005a74:	4770      	bx	lr
 8005a76:	b510      	push	{r4, lr}
 8005a78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a80:	4291      	cmp	r1, r2
 8005a82:	d1f9      	bne.n	8005a78 <memcpy+0xe>
 8005a84:	bd10      	pop	{r4, pc}
	...

08005a88 <_free_r>:
 8005a88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a8a:	2900      	cmp	r1, #0
 8005a8c:	d044      	beq.n	8005b18 <_free_r+0x90>
 8005a8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a92:	9001      	str	r0, [sp, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f1a1 0404 	sub.w	r4, r1, #4
 8005a9a:	bfb8      	it	lt
 8005a9c:	18e4      	addlt	r4, r4, r3
 8005a9e:	f000 f8df 	bl	8005c60 <__malloc_lock>
 8005aa2:	4a1e      	ldr	r2, [pc, #120]	; (8005b1c <_free_r+0x94>)
 8005aa4:	9801      	ldr	r0, [sp, #4]
 8005aa6:	6813      	ldr	r3, [r2, #0]
 8005aa8:	b933      	cbnz	r3, 8005ab8 <_free_r+0x30>
 8005aaa:	6063      	str	r3, [r4, #4]
 8005aac:	6014      	str	r4, [r2, #0]
 8005aae:	b003      	add	sp, #12
 8005ab0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ab4:	f000 b8da 	b.w	8005c6c <__malloc_unlock>
 8005ab8:	42a3      	cmp	r3, r4
 8005aba:	d908      	bls.n	8005ace <_free_r+0x46>
 8005abc:	6825      	ldr	r5, [r4, #0]
 8005abe:	1961      	adds	r1, r4, r5
 8005ac0:	428b      	cmp	r3, r1
 8005ac2:	bf01      	itttt	eq
 8005ac4:	6819      	ldreq	r1, [r3, #0]
 8005ac6:	685b      	ldreq	r3, [r3, #4]
 8005ac8:	1949      	addeq	r1, r1, r5
 8005aca:	6021      	streq	r1, [r4, #0]
 8005acc:	e7ed      	b.n	8005aaa <_free_r+0x22>
 8005ace:	461a      	mov	r2, r3
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	b10b      	cbz	r3, 8005ad8 <_free_r+0x50>
 8005ad4:	42a3      	cmp	r3, r4
 8005ad6:	d9fa      	bls.n	8005ace <_free_r+0x46>
 8005ad8:	6811      	ldr	r1, [r2, #0]
 8005ada:	1855      	adds	r5, r2, r1
 8005adc:	42a5      	cmp	r5, r4
 8005ade:	d10b      	bne.n	8005af8 <_free_r+0x70>
 8005ae0:	6824      	ldr	r4, [r4, #0]
 8005ae2:	4421      	add	r1, r4
 8005ae4:	1854      	adds	r4, r2, r1
 8005ae6:	42a3      	cmp	r3, r4
 8005ae8:	6011      	str	r1, [r2, #0]
 8005aea:	d1e0      	bne.n	8005aae <_free_r+0x26>
 8005aec:	681c      	ldr	r4, [r3, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	6053      	str	r3, [r2, #4]
 8005af2:	440c      	add	r4, r1
 8005af4:	6014      	str	r4, [r2, #0]
 8005af6:	e7da      	b.n	8005aae <_free_r+0x26>
 8005af8:	d902      	bls.n	8005b00 <_free_r+0x78>
 8005afa:	230c      	movs	r3, #12
 8005afc:	6003      	str	r3, [r0, #0]
 8005afe:	e7d6      	b.n	8005aae <_free_r+0x26>
 8005b00:	6825      	ldr	r5, [r4, #0]
 8005b02:	1961      	adds	r1, r4, r5
 8005b04:	428b      	cmp	r3, r1
 8005b06:	bf04      	itt	eq
 8005b08:	6819      	ldreq	r1, [r3, #0]
 8005b0a:	685b      	ldreq	r3, [r3, #4]
 8005b0c:	6063      	str	r3, [r4, #4]
 8005b0e:	bf04      	itt	eq
 8005b10:	1949      	addeq	r1, r1, r5
 8005b12:	6021      	streq	r1, [r4, #0]
 8005b14:	6054      	str	r4, [r2, #4]
 8005b16:	e7ca      	b.n	8005aae <_free_r+0x26>
 8005b18:	b003      	add	sp, #12
 8005b1a:	bd30      	pop	{r4, r5, pc}
 8005b1c:	20004840 	.word	0x20004840

08005b20 <sbrk_aligned>:
 8005b20:	b570      	push	{r4, r5, r6, lr}
 8005b22:	4e0e      	ldr	r6, [pc, #56]	; (8005b5c <sbrk_aligned+0x3c>)
 8005b24:	460c      	mov	r4, r1
 8005b26:	6831      	ldr	r1, [r6, #0]
 8005b28:	4605      	mov	r5, r0
 8005b2a:	b911      	cbnz	r1, 8005b32 <sbrk_aligned+0x12>
 8005b2c:	f000 f9d6 	bl	8005edc <_sbrk_r>
 8005b30:	6030      	str	r0, [r6, #0]
 8005b32:	4621      	mov	r1, r4
 8005b34:	4628      	mov	r0, r5
 8005b36:	f000 f9d1 	bl	8005edc <_sbrk_r>
 8005b3a:	1c43      	adds	r3, r0, #1
 8005b3c:	d00a      	beq.n	8005b54 <sbrk_aligned+0x34>
 8005b3e:	1cc4      	adds	r4, r0, #3
 8005b40:	f024 0403 	bic.w	r4, r4, #3
 8005b44:	42a0      	cmp	r0, r4
 8005b46:	d007      	beq.n	8005b58 <sbrk_aligned+0x38>
 8005b48:	1a21      	subs	r1, r4, r0
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	f000 f9c6 	bl	8005edc <_sbrk_r>
 8005b50:	3001      	adds	r0, #1
 8005b52:	d101      	bne.n	8005b58 <sbrk_aligned+0x38>
 8005b54:	f04f 34ff 	mov.w	r4, #4294967295
 8005b58:	4620      	mov	r0, r4
 8005b5a:	bd70      	pop	{r4, r5, r6, pc}
 8005b5c:	20004844 	.word	0x20004844

08005b60 <_malloc_r>:
 8005b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b64:	1ccd      	adds	r5, r1, #3
 8005b66:	f025 0503 	bic.w	r5, r5, #3
 8005b6a:	3508      	adds	r5, #8
 8005b6c:	2d0c      	cmp	r5, #12
 8005b6e:	bf38      	it	cc
 8005b70:	250c      	movcc	r5, #12
 8005b72:	2d00      	cmp	r5, #0
 8005b74:	4607      	mov	r7, r0
 8005b76:	db01      	blt.n	8005b7c <_malloc_r+0x1c>
 8005b78:	42a9      	cmp	r1, r5
 8005b7a:	d905      	bls.n	8005b88 <_malloc_r+0x28>
 8005b7c:	230c      	movs	r3, #12
 8005b7e:	603b      	str	r3, [r7, #0]
 8005b80:	2600      	movs	r6, #0
 8005b82:	4630      	mov	r0, r6
 8005b84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005c5c <_malloc_r+0xfc>
 8005b8c:	f000 f868 	bl	8005c60 <__malloc_lock>
 8005b90:	f8d8 3000 	ldr.w	r3, [r8]
 8005b94:	461c      	mov	r4, r3
 8005b96:	bb5c      	cbnz	r4, 8005bf0 <_malloc_r+0x90>
 8005b98:	4629      	mov	r1, r5
 8005b9a:	4638      	mov	r0, r7
 8005b9c:	f7ff ffc0 	bl	8005b20 <sbrk_aligned>
 8005ba0:	1c43      	adds	r3, r0, #1
 8005ba2:	4604      	mov	r4, r0
 8005ba4:	d155      	bne.n	8005c52 <_malloc_r+0xf2>
 8005ba6:	f8d8 4000 	ldr.w	r4, [r8]
 8005baa:	4626      	mov	r6, r4
 8005bac:	2e00      	cmp	r6, #0
 8005bae:	d145      	bne.n	8005c3c <_malloc_r+0xdc>
 8005bb0:	2c00      	cmp	r4, #0
 8005bb2:	d048      	beq.n	8005c46 <_malloc_r+0xe6>
 8005bb4:	6823      	ldr	r3, [r4, #0]
 8005bb6:	4631      	mov	r1, r6
 8005bb8:	4638      	mov	r0, r7
 8005bba:	eb04 0903 	add.w	r9, r4, r3
 8005bbe:	f000 f98d 	bl	8005edc <_sbrk_r>
 8005bc2:	4581      	cmp	r9, r0
 8005bc4:	d13f      	bne.n	8005c46 <_malloc_r+0xe6>
 8005bc6:	6821      	ldr	r1, [r4, #0]
 8005bc8:	1a6d      	subs	r5, r5, r1
 8005bca:	4629      	mov	r1, r5
 8005bcc:	4638      	mov	r0, r7
 8005bce:	f7ff ffa7 	bl	8005b20 <sbrk_aligned>
 8005bd2:	3001      	adds	r0, #1
 8005bd4:	d037      	beq.n	8005c46 <_malloc_r+0xe6>
 8005bd6:	6823      	ldr	r3, [r4, #0]
 8005bd8:	442b      	add	r3, r5
 8005bda:	6023      	str	r3, [r4, #0]
 8005bdc:	f8d8 3000 	ldr.w	r3, [r8]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d038      	beq.n	8005c56 <_malloc_r+0xf6>
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	42a2      	cmp	r2, r4
 8005be8:	d12b      	bne.n	8005c42 <_malloc_r+0xe2>
 8005bea:	2200      	movs	r2, #0
 8005bec:	605a      	str	r2, [r3, #4]
 8005bee:	e00f      	b.n	8005c10 <_malloc_r+0xb0>
 8005bf0:	6822      	ldr	r2, [r4, #0]
 8005bf2:	1b52      	subs	r2, r2, r5
 8005bf4:	d41f      	bmi.n	8005c36 <_malloc_r+0xd6>
 8005bf6:	2a0b      	cmp	r2, #11
 8005bf8:	d917      	bls.n	8005c2a <_malloc_r+0xca>
 8005bfa:	1961      	adds	r1, r4, r5
 8005bfc:	42a3      	cmp	r3, r4
 8005bfe:	6025      	str	r5, [r4, #0]
 8005c00:	bf18      	it	ne
 8005c02:	6059      	strne	r1, [r3, #4]
 8005c04:	6863      	ldr	r3, [r4, #4]
 8005c06:	bf08      	it	eq
 8005c08:	f8c8 1000 	streq.w	r1, [r8]
 8005c0c:	5162      	str	r2, [r4, r5]
 8005c0e:	604b      	str	r3, [r1, #4]
 8005c10:	4638      	mov	r0, r7
 8005c12:	f104 060b 	add.w	r6, r4, #11
 8005c16:	f000 f829 	bl	8005c6c <__malloc_unlock>
 8005c1a:	f026 0607 	bic.w	r6, r6, #7
 8005c1e:	1d23      	adds	r3, r4, #4
 8005c20:	1af2      	subs	r2, r6, r3
 8005c22:	d0ae      	beq.n	8005b82 <_malloc_r+0x22>
 8005c24:	1b9b      	subs	r3, r3, r6
 8005c26:	50a3      	str	r3, [r4, r2]
 8005c28:	e7ab      	b.n	8005b82 <_malloc_r+0x22>
 8005c2a:	42a3      	cmp	r3, r4
 8005c2c:	6862      	ldr	r2, [r4, #4]
 8005c2e:	d1dd      	bne.n	8005bec <_malloc_r+0x8c>
 8005c30:	f8c8 2000 	str.w	r2, [r8]
 8005c34:	e7ec      	b.n	8005c10 <_malloc_r+0xb0>
 8005c36:	4623      	mov	r3, r4
 8005c38:	6864      	ldr	r4, [r4, #4]
 8005c3a:	e7ac      	b.n	8005b96 <_malloc_r+0x36>
 8005c3c:	4634      	mov	r4, r6
 8005c3e:	6876      	ldr	r6, [r6, #4]
 8005c40:	e7b4      	b.n	8005bac <_malloc_r+0x4c>
 8005c42:	4613      	mov	r3, r2
 8005c44:	e7cc      	b.n	8005be0 <_malloc_r+0x80>
 8005c46:	230c      	movs	r3, #12
 8005c48:	603b      	str	r3, [r7, #0]
 8005c4a:	4638      	mov	r0, r7
 8005c4c:	f000 f80e 	bl	8005c6c <__malloc_unlock>
 8005c50:	e797      	b.n	8005b82 <_malloc_r+0x22>
 8005c52:	6025      	str	r5, [r4, #0]
 8005c54:	e7dc      	b.n	8005c10 <_malloc_r+0xb0>
 8005c56:	605b      	str	r3, [r3, #4]
 8005c58:	deff      	udf	#255	; 0xff
 8005c5a:	bf00      	nop
 8005c5c:	20004840 	.word	0x20004840

08005c60 <__malloc_lock>:
 8005c60:	4801      	ldr	r0, [pc, #4]	; (8005c68 <__malloc_lock+0x8>)
 8005c62:	f7ff bf00 	b.w	8005a66 <__retarget_lock_acquire_recursive>
 8005c66:	bf00      	nop
 8005c68:	2000483c 	.word	0x2000483c

08005c6c <__malloc_unlock>:
 8005c6c:	4801      	ldr	r0, [pc, #4]	; (8005c74 <__malloc_unlock+0x8>)
 8005c6e:	f7ff befb 	b.w	8005a68 <__retarget_lock_release_recursive>
 8005c72:	bf00      	nop
 8005c74:	2000483c 	.word	0x2000483c

08005c78 <__sflush_r>:
 8005c78:	898a      	ldrh	r2, [r1, #12]
 8005c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c7e:	4605      	mov	r5, r0
 8005c80:	0710      	lsls	r0, r2, #28
 8005c82:	460c      	mov	r4, r1
 8005c84:	d458      	bmi.n	8005d38 <__sflush_r+0xc0>
 8005c86:	684b      	ldr	r3, [r1, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	dc05      	bgt.n	8005c98 <__sflush_r+0x20>
 8005c8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	dc02      	bgt.n	8005c98 <__sflush_r+0x20>
 8005c92:	2000      	movs	r0, #0
 8005c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c9a:	2e00      	cmp	r6, #0
 8005c9c:	d0f9      	beq.n	8005c92 <__sflush_r+0x1a>
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ca4:	682f      	ldr	r7, [r5, #0]
 8005ca6:	6a21      	ldr	r1, [r4, #32]
 8005ca8:	602b      	str	r3, [r5, #0]
 8005caa:	d032      	beq.n	8005d12 <__sflush_r+0x9a>
 8005cac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005cae:	89a3      	ldrh	r3, [r4, #12]
 8005cb0:	075a      	lsls	r2, r3, #29
 8005cb2:	d505      	bpl.n	8005cc0 <__sflush_r+0x48>
 8005cb4:	6863      	ldr	r3, [r4, #4]
 8005cb6:	1ac0      	subs	r0, r0, r3
 8005cb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005cba:	b10b      	cbz	r3, 8005cc0 <__sflush_r+0x48>
 8005cbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005cbe:	1ac0      	subs	r0, r0, r3
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005cc6:	6a21      	ldr	r1, [r4, #32]
 8005cc8:	4628      	mov	r0, r5
 8005cca:	47b0      	blx	r6
 8005ccc:	1c43      	adds	r3, r0, #1
 8005cce:	89a3      	ldrh	r3, [r4, #12]
 8005cd0:	d106      	bne.n	8005ce0 <__sflush_r+0x68>
 8005cd2:	6829      	ldr	r1, [r5, #0]
 8005cd4:	291d      	cmp	r1, #29
 8005cd6:	d82b      	bhi.n	8005d30 <__sflush_r+0xb8>
 8005cd8:	4a29      	ldr	r2, [pc, #164]	; (8005d80 <__sflush_r+0x108>)
 8005cda:	410a      	asrs	r2, r1
 8005cdc:	07d6      	lsls	r6, r2, #31
 8005cde:	d427      	bmi.n	8005d30 <__sflush_r+0xb8>
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	6062      	str	r2, [r4, #4]
 8005ce4:	04d9      	lsls	r1, r3, #19
 8005ce6:	6922      	ldr	r2, [r4, #16]
 8005ce8:	6022      	str	r2, [r4, #0]
 8005cea:	d504      	bpl.n	8005cf6 <__sflush_r+0x7e>
 8005cec:	1c42      	adds	r2, r0, #1
 8005cee:	d101      	bne.n	8005cf4 <__sflush_r+0x7c>
 8005cf0:	682b      	ldr	r3, [r5, #0]
 8005cf2:	b903      	cbnz	r3, 8005cf6 <__sflush_r+0x7e>
 8005cf4:	6560      	str	r0, [r4, #84]	; 0x54
 8005cf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cf8:	602f      	str	r7, [r5, #0]
 8005cfa:	2900      	cmp	r1, #0
 8005cfc:	d0c9      	beq.n	8005c92 <__sflush_r+0x1a>
 8005cfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d02:	4299      	cmp	r1, r3
 8005d04:	d002      	beq.n	8005d0c <__sflush_r+0x94>
 8005d06:	4628      	mov	r0, r5
 8005d08:	f7ff febe 	bl	8005a88 <_free_r>
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	6360      	str	r0, [r4, #52]	; 0x34
 8005d10:	e7c0      	b.n	8005c94 <__sflush_r+0x1c>
 8005d12:	2301      	movs	r3, #1
 8005d14:	4628      	mov	r0, r5
 8005d16:	47b0      	blx	r6
 8005d18:	1c41      	adds	r1, r0, #1
 8005d1a:	d1c8      	bne.n	8005cae <__sflush_r+0x36>
 8005d1c:	682b      	ldr	r3, [r5, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d0c5      	beq.n	8005cae <__sflush_r+0x36>
 8005d22:	2b1d      	cmp	r3, #29
 8005d24:	d001      	beq.n	8005d2a <__sflush_r+0xb2>
 8005d26:	2b16      	cmp	r3, #22
 8005d28:	d101      	bne.n	8005d2e <__sflush_r+0xb6>
 8005d2a:	602f      	str	r7, [r5, #0]
 8005d2c:	e7b1      	b.n	8005c92 <__sflush_r+0x1a>
 8005d2e:	89a3      	ldrh	r3, [r4, #12]
 8005d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d34:	81a3      	strh	r3, [r4, #12]
 8005d36:	e7ad      	b.n	8005c94 <__sflush_r+0x1c>
 8005d38:	690f      	ldr	r7, [r1, #16]
 8005d3a:	2f00      	cmp	r7, #0
 8005d3c:	d0a9      	beq.n	8005c92 <__sflush_r+0x1a>
 8005d3e:	0793      	lsls	r3, r2, #30
 8005d40:	680e      	ldr	r6, [r1, #0]
 8005d42:	bf08      	it	eq
 8005d44:	694b      	ldreq	r3, [r1, #20]
 8005d46:	600f      	str	r7, [r1, #0]
 8005d48:	bf18      	it	ne
 8005d4a:	2300      	movne	r3, #0
 8005d4c:	eba6 0807 	sub.w	r8, r6, r7
 8005d50:	608b      	str	r3, [r1, #8]
 8005d52:	f1b8 0f00 	cmp.w	r8, #0
 8005d56:	dd9c      	ble.n	8005c92 <__sflush_r+0x1a>
 8005d58:	6a21      	ldr	r1, [r4, #32]
 8005d5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d5c:	4643      	mov	r3, r8
 8005d5e:	463a      	mov	r2, r7
 8005d60:	4628      	mov	r0, r5
 8005d62:	47b0      	blx	r6
 8005d64:	2800      	cmp	r0, #0
 8005d66:	dc06      	bgt.n	8005d76 <__sflush_r+0xfe>
 8005d68:	89a3      	ldrh	r3, [r4, #12]
 8005d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d6e:	81a3      	strh	r3, [r4, #12]
 8005d70:	f04f 30ff 	mov.w	r0, #4294967295
 8005d74:	e78e      	b.n	8005c94 <__sflush_r+0x1c>
 8005d76:	4407      	add	r7, r0
 8005d78:	eba8 0800 	sub.w	r8, r8, r0
 8005d7c:	e7e9      	b.n	8005d52 <__sflush_r+0xda>
 8005d7e:	bf00      	nop
 8005d80:	dfbffffe 	.word	0xdfbffffe

08005d84 <_fflush_r>:
 8005d84:	b538      	push	{r3, r4, r5, lr}
 8005d86:	690b      	ldr	r3, [r1, #16]
 8005d88:	4605      	mov	r5, r0
 8005d8a:	460c      	mov	r4, r1
 8005d8c:	b913      	cbnz	r3, 8005d94 <_fflush_r+0x10>
 8005d8e:	2500      	movs	r5, #0
 8005d90:	4628      	mov	r0, r5
 8005d92:	bd38      	pop	{r3, r4, r5, pc}
 8005d94:	b118      	cbz	r0, 8005d9e <_fflush_r+0x1a>
 8005d96:	6a03      	ldr	r3, [r0, #32]
 8005d98:	b90b      	cbnz	r3, 8005d9e <_fflush_r+0x1a>
 8005d9a:	f7ff fc2b 	bl	80055f4 <__sinit>
 8005d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d0f3      	beq.n	8005d8e <_fflush_r+0xa>
 8005da6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005da8:	07d0      	lsls	r0, r2, #31
 8005daa:	d404      	bmi.n	8005db6 <_fflush_r+0x32>
 8005dac:	0599      	lsls	r1, r3, #22
 8005dae:	d402      	bmi.n	8005db6 <_fflush_r+0x32>
 8005db0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005db2:	f7ff fe58 	bl	8005a66 <__retarget_lock_acquire_recursive>
 8005db6:	4628      	mov	r0, r5
 8005db8:	4621      	mov	r1, r4
 8005dba:	f7ff ff5d 	bl	8005c78 <__sflush_r>
 8005dbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005dc0:	07da      	lsls	r2, r3, #31
 8005dc2:	4605      	mov	r5, r0
 8005dc4:	d4e4      	bmi.n	8005d90 <_fflush_r+0xc>
 8005dc6:	89a3      	ldrh	r3, [r4, #12]
 8005dc8:	059b      	lsls	r3, r3, #22
 8005dca:	d4e1      	bmi.n	8005d90 <_fflush_r+0xc>
 8005dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dce:	f7ff fe4b 	bl	8005a68 <__retarget_lock_release_recursive>
 8005dd2:	e7dd      	b.n	8005d90 <_fflush_r+0xc>

08005dd4 <__swhatbuf_r>:
 8005dd4:	b570      	push	{r4, r5, r6, lr}
 8005dd6:	460c      	mov	r4, r1
 8005dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ddc:	2900      	cmp	r1, #0
 8005dde:	b096      	sub	sp, #88	; 0x58
 8005de0:	4615      	mov	r5, r2
 8005de2:	461e      	mov	r6, r3
 8005de4:	da0d      	bge.n	8005e02 <__swhatbuf_r+0x2e>
 8005de6:	89a3      	ldrh	r3, [r4, #12]
 8005de8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005dec:	f04f 0100 	mov.w	r1, #0
 8005df0:	bf0c      	ite	eq
 8005df2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005df6:	2340      	movne	r3, #64	; 0x40
 8005df8:	2000      	movs	r0, #0
 8005dfa:	6031      	str	r1, [r6, #0]
 8005dfc:	602b      	str	r3, [r5, #0]
 8005dfe:	b016      	add	sp, #88	; 0x58
 8005e00:	bd70      	pop	{r4, r5, r6, pc}
 8005e02:	466a      	mov	r2, sp
 8005e04:	f000 f848 	bl	8005e98 <_fstat_r>
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	dbec      	blt.n	8005de6 <__swhatbuf_r+0x12>
 8005e0c:	9901      	ldr	r1, [sp, #4]
 8005e0e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005e12:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005e16:	4259      	negs	r1, r3
 8005e18:	4159      	adcs	r1, r3
 8005e1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e1e:	e7eb      	b.n	8005df8 <__swhatbuf_r+0x24>

08005e20 <__smakebuf_r>:
 8005e20:	898b      	ldrh	r3, [r1, #12]
 8005e22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e24:	079d      	lsls	r5, r3, #30
 8005e26:	4606      	mov	r6, r0
 8005e28:	460c      	mov	r4, r1
 8005e2a:	d507      	bpl.n	8005e3c <__smakebuf_r+0x1c>
 8005e2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e30:	6023      	str	r3, [r4, #0]
 8005e32:	6123      	str	r3, [r4, #16]
 8005e34:	2301      	movs	r3, #1
 8005e36:	6163      	str	r3, [r4, #20]
 8005e38:	b002      	add	sp, #8
 8005e3a:	bd70      	pop	{r4, r5, r6, pc}
 8005e3c:	ab01      	add	r3, sp, #4
 8005e3e:	466a      	mov	r2, sp
 8005e40:	f7ff ffc8 	bl	8005dd4 <__swhatbuf_r>
 8005e44:	9900      	ldr	r1, [sp, #0]
 8005e46:	4605      	mov	r5, r0
 8005e48:	4630      	mov	r0, r6
 8005e4a:	f7ff fe89 	bl	8005b60 <_malloc_r>
 8005e4e:	b948      	cbnz	r0, 8005e64 <__smakebuf_r+0x44>
 8005e50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e54:	059a      	lsls	r2, r3, #22
 8005e56:	d4ef      	bmi.n	8005e38 <__smakebuf_r+0x18>
 8005e58:	f023 0303 	bic.w	r3, r3, #3
 8005e5c:	f043 0302 	orr.w	r3, r3, #2
 8005e60:	81a3      	strh	r3, [r4, #12]
 8005e62:	e7e3      	b.n	8005e2c <__smakebuf_r+0xc>
 8005e64:	89a3      	ldrh	r3, [r4, #12]
 8005e66:	6020      	str	r0, [r4, #0]
 8005e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e6c:	81a3      	strh	r3, [r4, #12]
 8005e6e:	9b00      	ldr	r3, [sp, #0]
 8005e70:	6163      	str	r3, [r4, #20]
 8005e72:	9b01      	ldr	r3, [sp, #4]
 8005e74:	6120      	str	r0, [r4, #16]
 8005e76:	b15b      	cbz	r3, 8005e90 <__smakebuf_r+0x70>
 8005e78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e7c:	4630      	mov	r0, r6
 8005e7e:	f000 f81d 	bl	8005ebc <_isatty_r>
 8005e82:	b128      	cbz	r0, 8005e90 <__smakebuf_r+0x70>
 8005e84:	89a3      	ldrh	r3, [r4, #12]
 8005e86:	f023 0303 	bic.w	r3, r3, #3
 8005e8a:	f043 0301 	orr.w	r3, r3, #1
 8005e8e:	81a3      	strh	r3, [r4, #12]
 8005e90:	89a3      	ldrh	r3, [r4, #12]
 8005e92:	431d      	orrs	r5, r3
 8005e94:	81a5      	strh	r5, [r4, #12]
 8005e96:	e7cf      	b.n	8005e38 <__smakebuf_r+0x18>

08005e98 <_fstat_r>:
 8005e98:	b538      	push	{r3, r4, r5, lr}
 8005e9a:	4d07      	ldr	r5, [pc, #28]	; (8005eb8 <_fstat_r+0x20>)
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	4608      	mov	r0, r1
 8005ea2:	4611      	mov	r1, r2
 8005ea4:	602b      	str	r3, [r5, #0]
 8005ea6:	f7fa fe28 	bl	8000afa <_fstat>
 8005eaa:	1c43      	adds	r3, r0, #1
 8005eac:	d102      	bne.n	8005eb4 <_fstat_r+0x1c>
 8005eae:	682b      	ldr	r3, [r5, #0]
 8005eb0:	b103      	cbz	r3, 8005eb4 <_fstat_r+0x1c>
 8005eb2:	6023      	str	r3, [r4, #0]
 8005eb4:	bd38      	pop	{r3, r4, r5, pc}
 8005eb6:	bf00      	nop
 8005eb8:	20004838 	.word	0x20004838

08005ebc <_isatty_r>:
 8005ebc:	b538      	push	{r3, r4, r5, lr}
 8005ebe:	4d06      	ldr	r5, [pc, #24]	; (8005ed8 <_isatty_r+0x1c>)
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	4604      	mov	r4, r0
 8005ec4:	4608      	mov	r0, r1
 8005ec6:	602b      	str	r3, [r5, #0]
 8005ec8:	f7fa fe27 	bl	8000b1a <_isatty>
 8005ecc:	1c43      	adds	r3, r0, #1
 8005ece:	d102      	bne.n	8005ed6 <_isatty_r+0x1a>
 8005ed0:	682b      	ldr	r3, [r5, #0]
 8005ed2:	b103      	cbz	r3, 8005ed6 <_isatty_r+0x1a>
 8005ed4:	6023      	str	r3, [r4, #0]
 8005ed6:	bd38      	pop	{r3, r4, r5, pc}
 8005ed8:	20004838 	.word	0x20004838

08005edc <_sbrk_r>:
 8005edc:	b538      	push	{r3, r4, r5, lr}
 8005ede:	4d06      	ldr	r5, [pc, #24]	; (8005ef8 <_sbrk_r+0x1c>)
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	4604      	mov	r4, r0
 8005ee4:	4608      	mov	r0, r1
 8005ee6:	602b      	str	r3, [r5, #0]
 8005ee8:	f7fa fe30 	bl	8000b4c <_sbrk>
 8005eec:	1c43      	adds	r3, r0, #1
 8005eee:	d102      	bne.n	8005ef6 <_sbrk_r+0x1a>
 8005ef0:	682b      	ldr	r3, [r5, #0]
 8005ef2:	b103      	cbz	r3, 8005ef6 <_sbrk_r+0x1a>
 8005ef4:	6023      	str	r3, [r4, #0]
 8005ef6:	bd38      	pop	{r3, r4, r5, pc}
 8005ef8:	20004838 	.word	0x20004838

08005efc <_init>:
 8005efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005efe:	bf00      	nop
 8005f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f02:	bc08      	pop	{r3}
 8005f04:	469e      	mov	lr, r3
 8005f06:	4770      	bx	lr

08005f08 <_fini>:
 8005f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f0a:	bf00      	nop
 8005f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f0e:	bc08      	pop	{r3}
 8005f10:	469e      	mov	lr, r3
 8005f12:	4770      	bx	lr
