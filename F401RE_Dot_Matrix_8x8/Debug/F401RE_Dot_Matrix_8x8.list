
F401RE_Dot_Matrix_8x8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000268c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002820  08002820  00012820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002838  08002838  0002030c  2**0
                  CONTENTS
  4 .ARM          00000008  08002838  08002838  00012838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002840  08002840  0002030c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002840  08002840  00012840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002844  08002844  00012844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000030c  20000000  08002848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000030c  08002b54  0002030c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b8  08002b54  000203b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002030c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002033c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c8b9  00000000  00000000  0002037f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001efc  00000000  00000000  0002cc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf8  00000000  00000000  0002eb38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000955  00000000  00000000  0002f730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016b9c  00000000  00000000  00030085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f169  00000000  00000000  00046c21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cf79  00000000  00000000  00055d8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003144  00000000  00000000  000e2d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000e5e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000030c 	.word	0x2000030c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002808 	.word	0x08002808

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000310 	.word	0x20000310
 80001d0:	08002808 	.word	0x08002808

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <Dotmatrix_Setup>:
	  HAL_GPIO_WritePin(GPIOA, P7 | P12 | P9 , GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(GPIOB, P8 | P12 | P9 , GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(GPIOC, P5 | P7, GPIO_PIN_RESET);
}

void Dotmatrix_Setup(){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA, P6 | P11 , GPIO_PIN_RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	f44f 6104 	mov.w	r1, #2112	; 0x840
 80004da:	4810      	ldr	r0, [pc, #64]	; (800051c <Dotmatrix_Setup+0x4c>)
 80004dc:	f000 ff42 	bl	8001364 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, P6 | P2 | P1, GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2146      	movs	r1, #70	; 0x46
 80004e4:	480e      	ldr	r0, [pc, #56]	; (8000520 <Dotmatrix_Setup+0x50>)
 80004e6:	f000 ff3d 	bl	8001364 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, P9 | P8 | P6 , GPIO_PIN_RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	f44f 7150 	mov.w	r1, #832	; 0x340
 80004f0:	480c      	ldr	r0, [pc, #48]	; (8000524 <Dotmatrix_Setup+0x54>)
 80004f2:	f000 ff37 	bl	8001364 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, P7 | P12 | P9 , GPIO_PIN_RESET);
 80004f6:	2200      	movs	r2, #0
 80004f8:	f44f 5194 	mov.w	r1, #4736	; 0x1280
 80004fc:	4807      	ldr	r0, [pc, #28]	; (800051c <Dotmatrix_Setup+0x4c>)
 80004fe:	f000 ff31 	bl	8001364 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, P8 | P12 | P9 , GPIO_PIN_RESET);
 8000502:	2200      	movs	r2, #0
 8000504:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8000508:	4805      	ldr	r0, [pc, #20]	; (8000520 <Dotmatrix_Setup+0x50>)
 800050a:	f000 ff2b 	bl	8001364 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, P5 | P7, GPIO_PIN_RESET);
 800050e:	2200      	movs	r2, #0
 8000510:	21a0      	movs	r1, #160	; 0xa0
 8000512:	4804      	ldr	r0, [pc, #16]	; (8000524 <Dotmatrix_Setup+0x54>)
 8000514:	f000 ff26 	bl	8001364 <HAL_GPIO_WritePin>
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}
 800051c:	40020000 	.word	0x40020000
 8000520:	40020400 	.word	0x40020400
 8000524:	40020800 	.word	0x40020800

08000528 <Col_Setup>:

void Col_Setup(){
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA, P7 | P12 | P9 , GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	f44f 5194 	mov.w	r1, #4736	; 0x1280
 8000532:	4808      	ldr	r0, [pc, #32]	; (8000554 <Col_Setup+0x2c>)
 8000534:	f000 ff16 	bl	8001364 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, P8 | P12 | P9 , GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 800053e:	4806      	ldr	r0, [pc, #24]	; (8000558 <Col_Setup+0x30>)
 8000540:	f000 ff10 	bl	8001364 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, P5 | P7, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	21a0      	movs	r1, #160	; 0xa0
 8000548:	4804      	ldr	r0, [pc, #16]	; (800055c <Col_Setup+0x34>)
 800054a:	f000 ff0b 	bl	8001364 <HAL_GPIO_WritePin>
}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40020000 	.word	0x40020000
 8000558:	40020400 	.word	0x40020400
 800055c:	40020800 	.word	0x40020800

08000560 <Row_Control>:

//PC9, PB6, PB1, PA6, PC8, PB2, PC6, PA11
//PA7, PC5, PA12, PB8, PB12, PB9, PC7, PA9

void Row_Control(void) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
	for(int Control = 0; Control <30000; Control++){
 8000566:	2300      	movs	r3, #0
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	e0bb      	b.n	80006e4 <Row_Control+0x184>
		for(int Row = 0; Row < 8; Row++){
 800056c:	2300      	movs	r3, #0
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	e0b1      	b.n	80006d6 <Row_Control+0x176>
			if(Row == 0){
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d112      	bne.n	800059e <Row_Control+0x3e>
				Col_Setup();
 8000578:	f7ff ffd6 	bl	8000528 <Col_Setup>
				Col_Control(Control, Row);
 800057c:	6839      	ldr	r1, [r7, #0]
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f000 f8c2 	bl	8000708 <Col_Control>
				PCS9;
 8000584:	4b5d      	ldr	r3, [pc, #372]	; (80006fc <Row_Control+0x19c>)
 8000586:	695b      	ldr	r3, [r3, #20]
 8000588:	4a5c      	ldr	r2, [pc, #368]	; (80006fc <Row_Control+0x19c>)
 800058a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058e:	6153      	str	r3, [r2, #20]
				PCRS9;
 8000590:	4b5a      	ldr	r3, [pc, #360]	; (80006fc <Row_Control+0x19c>)
 8000592:	695b      	ldr	r3, [r3, #20]
 8000594:	4a59      	ldr	r2, [pc, #356]	; (80006fc <Row_Control+0x19c>)
 8000596:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800059a:	6153      	str	r3, [r2, #20]
 800059c:	e098      	b.n	80006d0 <Row_Control+0x170>
			}
			else if(Row == 1){
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d112      	bne.n	80005ca <Row_Control+0x6a>
				Col_Setup();
 80005a4:	f7ff ffc0 	bl	8000528 <Col_Setup>
				Col_Control(Control, Row);
 80005a8:	6839      	ldr	r1, [r7, #0]
 80005aa:	6878      	ldr	r0, [r7, #4]
 80005ac:	f000 f8ac 	bl	8000708 <Col_Control>
				PBS6;
 80005b0:	4b53      	ldr	r3, [pc, #332]	; (8000700 <Row_Control+0x1a0>)
 80005b2:	695b      	ldr	r3, [r3, #20]
 80005b4:	4a52      	ldr	r2, [pc, #328]	; (8000700 <Row_Control+0x1a0>)
 80005b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005ba:	6153      	str	r3, [r2, #20]
				PBRS6;
 80005bc:	4b50      	ldr	r3, [pc, #320]	; (8000700 <Row_Control+0x1a0>)
 80005be:	695b      	ldr	r3, [r3, #20]
 80005c0:	4a4f      	ldr	r2, [pc, #316]	; (8000700 <Row_Control+0x1a0>)
 80005c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005c6:	6153      	str	r3, [r2, #20]
 80005c8:	e082      	b.n	80006d0 <Row_Control+0x170>
			}
			else if(Row == 2){
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	2b02      	cmp	r3, #2
 80005ce:	d112      	bne.n	80005f6 <Row_Control+0x96>
				Col_Setup();
 80005d0:	f7ff ffaa 	bl	8000528 <Col_Setup>
				Col_Control(Control, Row);
 80005d4:	6839      	ldr	r1, [r7, #0]
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f000 f896 	bl	8000708 <Col_Control>
				PBS1;
 80005dc:	4b48      	ldr	r3, [pc, #288]	; (8000700 <Row_Control+0x1a0>)
 80005de:	695b      	ldr	r3, [r3, #20]
 80005e0:	4a47      	ldr	r2, [pc, #284]	; (8000700 <Row_Control+0x1a0>)
 80005e2:	f043 0302 	orr.w	r3, r3, #2
 80005e6:	6153      	str	r3, [r2, #20]
				PBRS1;
 80005e8:	4b45      	ldr	r3, [pc, #276]	; (8000700 <Row_Control+0x1a0>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	4a44      	ldr	r2, [pc, #272]	; (8000700 <Row_Control+0x1a0>)
 80005ee:	f023 0302 	bic.w	r3, r3, #2
 80005f2:	6153      	str	r3, [r2, #20]
 80005f4:	e06c      	b.n	80006d0 <Row_Control+0x170>
			}
			else if(Row == 3){
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	2b03      	cmp	r3, #3
 80005fa:	d112      	bne.n	8000622 <Row_Control+0xc2>
				Col_Setup();
 80005fc:	f7ff ff94 	bl	8000528 <Col_Setup>
				Col_Control(Control, Row);
 8000600:	6839      	ldr	r1, [r7, #0]
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f000 f880 	bl	8000708 <Col_Control>
				PAS6;
 8000608:	4b3e      	ldr	r3, [pc, #248]	; (8000704 <Row_Control+0x1a4>)
 800060a:	695b      	ldr	r3, [r3, #20]
 800060c:	4a3d      	ldr	r2, [pc, #244]	; (8000704 <Row_Control+0x1a4>)
 800060e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000612:	6153      	str	r3, [r2, #20]
				PARS6;
 8000614:	4b3b      	ldr	r3, [pc, #236]	; (8000704 <Row_Control+0x1a4>)
 8000616:	695b      	ldr	r3, [r3, #20]
 8000618:	4a3a      	ldr	r2, [pc, #232]	; (8000704 <Row_Control+0x1a4>)
 800061a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800061e:	6153      	str	r3, [r2, #20]
 8000620:	e056      	b.n	80006d0 <Row_Control+0x170>
			}
			else if(Row == 4){
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	2b04      	cmp	r3, #4
 8000626:	d112      	bne.n	800064e <Row_Control+0xee>
				Col_Setup();
 8000628:	f7ff ff7e 	bl	8000528 <Col_Setup>
				Col_Control(Control, Row);
 800062c:	6839      	ldr	r1, [r7, #0]
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f000 f86a 	bl	8000708 <Col_Control>
				PCS8;
 8000634:	4b31      	ldr	r3, [pc, #196]	; (80006fc <Row_Control+0x19c>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	4a30      	ldr	r2, [pc, #192]	; (80006fc <Row_Control+0x19c>)
 800063a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800063e:	6153      	str	r3, [r2, #20]
				PCRS8;
 8000640:	4b2e      	ldr	r3, [pc, #184]	; (80006fc <Row_Control+0x19c>)
 8000642:	695b      	ldr	r3, [r3, #20]
 8000644:	4a2d      	ldr	r2, [pc, #180]	; (80006fc <Row_Control+0x19c>)
 8000646:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800064a:	6153      	str	r3, [r2, #20]
 800064c:	e040      	b.n	80006d0 <Row_Control+0x170>
			}
			else if(Row == 5){
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	2b05      	cmp	r3, #5
 8000652:	d112      	bne.n	800067a <Row_Control+0x11a>
				Col_Setup();
 8000654:	f7ff ff68 	bl	8000528 <Col_Setup>
				Col_Control(Control, Row);
 8000658:	6839      	ldr	r1, [r7, #0]
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f000 f854 	bl	8000708 <Col_Control>
				PBS2;
 8000660:	4b27      	ldr	r3, [pc, #156]	; (8000700 <Row_Control+0x1a0>)
 8000662:	695b      	ldr	r3, [r3, #20]
 8000664:	4a26      	ldr	r2, [pc, #152]	; (8000700 <Row_Control+0x1a0>)
 8000666:	f043 0304 	orr.w	r3, r3, #4
 800066a:	6153      	str	r3, [r2, #20]
				PBRS2;
 800066c:	4b24      	ldr	r3, [pc, #144]	; (8000700 <Row_Control+0x1a0>)
 800066e:	695b      	ldr	r3, [r3, #20]
 8000670:	4a23      	ldr	r2, [pc, #140]	; (8000700 <Row_Control+0x1a0>)
 8000672:	f023 0304 	bic.w	r3, r3, #4
 8000676:	6153      	str	r3, [r2, #20]
 8000678:	e02a      	b.n	80006d0 <Row_Control+0x170>
			}
			else if(Row == 6){
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	2b06      	cmp	r3, #6
 800067e:	d112      	bne.n	80006a6 <Row_Control+0x146>
				Col_Setup();
 8000680:	f7ff ff52 	bl	8000528 <Col_Setup>
				Col_Control(Control, Row);
 8000684:	6839      	ldr	r1, [r7, #0]
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f000 f83e 	bl	8000708 <Col_Control>
				PCS6;
 800068c:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <Row_Control+0x19c>)
 800068e:	695b      	ldr	r3, [r3, #20]
 8000690:	4a1a      	ldr	r2, [pc, #104]	; (80006fc <Row_Control+0x19c>)
 8000692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000696:	6153      	str	r3, [r2, #20]
				PCRS6;
 8000698:	4b18      	ldr	r3, [pc, #96]	; (80006fc <Row_Control+0x19c>)
 800069a:	695b      	ldr	r3, [r3, #20]
 800069c:	4a17      	ldr	r2, [pc, #92]	; (80006fc <Row_Control+0x19c>)
 800069e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006a2:	6153      	str	r3, [r2, #20]
 80006a4:	e014      	b.n	80006d0 <Row_Control+0x170>
			}
			else if(Row == 7){
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	2b07      	cmp	r3, #7
 80006aa:	d111      	bne.n	80006d0 <Row_Control+0x170>
				Col_Setup();
 80006ac:	f7ff ff3c 	bl	8000528 <Col_Setup>
				Col_Control(Control, Row);
 80006b0:	6839      	ldr	r1, [r7, #0]
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f000 f828 	bl	8000708 <Col_Control>
				PAS11;
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <Row_Control+0x1a4>)
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	4a11      	ldr	r2, [pc, #68]	; (8000704 <Row_Control+0x1a4>)
 80006be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006c2:	6153      	str	r3, [r2, #20]
				PARS11;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <Row_Control+0x1a4>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	4a0e      	ldr	r2, [pc, #56]	; (8000704 <Row_Control+0x1a4>)
 80006ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80006ce:	6153      	str	r3, [r2, #20]
		for(int Row = 0; Row < 8; Row++){
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	3301      	adds	r3, #1
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	2b07      	cmp	r3, #7
 80006da:	f77f af4a 	ble.w	8000572 <Row_Control+0x12>
	for(int Control = 0; Control <30000; Control++){
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	3301      	adds	r3, #1
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f247 522f 	movw	r2, #29999	; 0x752f
 80006ea:	4293      	cmp	r3, r2
 80006ec:	f77f af3e 	ble.w	800056c <Row_Control+0xc>
			}
		}
	}
}
 80006f0:	bf00      	nop
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40020800 	.word	0x40020800
 8000700:	40020400 	.word	0x40020400
 8000704:	40020000 	.word	0x40020000

08000708 <Col_Control>:

void Col_Control(int Control, int Row){
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]
	if(Control >= 0 && Control <= 10000 ){
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2b00      	cmp	r3, #0
 8000716:	db1a      	blt.n	800074e <Col_Control+0x46>
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f242 7210 	movw	r2, #10000	; 0x2710
 800071e:	4293      	cmp	r3, r2
 8000720:	dc15      	bgt.n	800074e <Col_Control+0x46>
		for(int Col = 0; Col < 8; Col++){
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
 8000726:	e00e      	b.n	8000746 <Col_Control+0x3e>
			if(Dotmatrix_Control_Y[Row][Col] == 0) {
 8000728:	492b      	ldr	r1, [pc, #172]	; (80007d8 <Col_Control+0xd0>)
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	00da      	lsls	r2, r3, #3
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	4413      	add	r3, r2
 8000732:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d102      	bne.n	8000740 <Col_Control+0x38>
				Col_Control_1(Col);
 800073a:	6978      	ldr	r0, [r7, #20]
 800073c:	f000 f852 	bl	80007e4 <Col_Control_1>
		for(int Col = 0; Col < 8; Col++){
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	3301      	adds	r3, #1
 8000744:	617b      	str	r3, [r7, #20]
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	2b07      	cmp	r3, #7
 800074a:	dded      	ble.n	8000728 <Col_Control+0x20>
 800074c:	e03f      	b.n	80007ce <Col_Control+0xc6>
			}
		}
	}
	else if(Control >= 10000 && Control <= 20000){
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f242 720f 	movw	r2, #9999	; 0x270f
 8000754:	4293      	cmp	r3, r2
 8000756:	dd1a      	ble.n	800078e <Col_Control+0x86>
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800075e:	4293      	cmp	r3, r2
 8000760:	dc15      	bgt.n	800078e <Col_Control+0x86>
		for(int Col = 0; Col < 8; Col++){
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
 8000766:	e00e      	b.n	8000786 <Col_Control+0x7e>
			if(Dotmatrix_Control_E[Row][Col] == 0) {
 8000768:	491c      	ldr	r1, [pc, #112]	; (80007dc <Col_Control+0xd4>)
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	00da      	lsls	r2, r3, #3
 800076e:	693b      	ldr	r3, [r7, #16]
 8000770:	4413      	add	r3, r2
 8000772:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d102      	bne.n	8000780 <Col_Control+0x78>
				Col_Control_1(Col);
 800077a:	6938      	ldr	r0, [r7, #16]
 800077c:	f000 f832 	bl	80007e4 <Col_Control_1>
		for(int Col = 0; Col < 8; Col++){
 8000780:	693b      	ldr	r3, [r7, #16]
 8000782:	3301      	adds	r3, #1
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	693b      	ldr	r3, [r7, #16]
 8000788:	2b07      	cmp	r3, #7
 800078a:	dded      	ble.n	8000768 <Col_Control+0x60>
 800078c:	e01f      	b.n	80007ce <Col_Control+0xc6>
			}
		}
	}
	else if(Control >= 20000 && Control <= 30000){
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000794:	4293      	cmp	r3, r2
 8000796:	dd1a      	ble.n	80007ce <Col_Control+0xc6>
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f247 5230 	movw	r2, #30000	; 0x7530
 800079e:	4293      	cmp	r3, r2
 80007a0:	dc15      	bgt.n	80007ce <Col_Control+0xc6>
		for(int Col = 0; Col < 8; Col++){
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	e00e      	b.n	80007c6 <Col_Control+0xbe>
			if(Dotmatrix_Control_S[Row][Col] == 0) {
 80007a8:	490d      	ldr	r1, [pc, #52]	; (80007e0 <Col_Control+0xd8>)
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	00da      	lsls	r2, r3, #3
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	4413      	add	r3, r2
 80007b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d102      	bne.n	80007c0 <Col_Control+0xb8>
				Col_Control_1(Col);
 80007ba:	68f8      	ldr	r0, [r7, #12]
 80007bc:	f000 f812 	bl	80007e4 <Col_Control_1>
		for(int Col = 0; Col < 8; Col++){
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	3301      	adds	r3, #1
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	2b07      	cmp	r3, #7
 80007ca:	dded      	ble.n	80007a8 <Col_Control+0xa0>
			}
		}
	}
}
 80007cc:	e7ff      	b.n	80007ce <Col_Control+0xc6>
 80007ce:	bf00      	nop
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000000 	.word	0x20000000
 80007dc:	20000100 	.word	0x20000100
 80007e0:	20000200 	.word	0x20000200

080007e4 <Col_Control_1>:

void Col_Control_1(int Col){
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	if(Col == 0) PAS7;					// Dotmatrix_Control[x][0]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d106      	bne.n	8000800 <Col_Control_1+0x1c>
 80007f2:	4b29      	ldr	r3, [pc, #164]	; (8000898 <Col_Control_1+0xb4>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	4a28      	ldr	r2, [pc, #160]	; (8000898 <Col_Control_1+0xb4>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fc:	6153      	str	r3, [r2, #20]
	else if(Col == 3) PBS8;			// Dotmatrix_Control[x][3]
	else if(Col == 4) PBS12;			// Dotmatrix_Control[x][4]
	else if(Col == 5) PBS9;			// Dotmatrix_Control[x][5]
	else if(Col == 6) PCS7;			// Dotmatrix_Control[x][6]
	else if(Col == 7) PAS9;			// Dotmatrix_Control[x][7]
}
 80007fe:	e044      	b.n	800088a <Col_Control_1+0xa6>
	else if(Col == 1) PCS5;			// Dotmatrix_Control[x][1]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d106      	bne.n	8000814 <Col_Control_1+0x30>
 8000806:	4b25      	ldr	r3, [pc, #148]	; (800089c <Col_Control_1+0xb8>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	4a24      	ldr	r2, [pc, #144]	; (800089c <Col_Control_1+0xb8>)
 800080c:	f043 0320 	orr.w	r3, r3, #32
 8000810:	6153      	str	r3, [r2, #20]
}
 8000812:	e03a      	b.n	800088a <Col_Control_1+0xa6>
	else if(Col == 2) PAS12;			// Dotmatrix_Control[x][2]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2b02      	cmp	r3, #2
 8000818:	d106      	bne.n	8000828 <Col_Control_1+0x44>
 800081a:	4b1f      	ldr	r3, [pc, #124]	; (8000898 <Col_Control_1+0xb4>)
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	4a1e      	ldr	r2, [pc, #120]	; (8000898 <Col_Control_1+0xb4>)
 8000820:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000824:	6153      	str	r3, [r2, #20]
}
 8000826:	e030      	b.n	800088a <Col_Control_1+0xa6>
	else if(Col == 3) PBS8;			// Dotmatrix_Control[x][3]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2b03      	cmp	r3, #3
 800082c:	d106      	bne.n	800083c <Col_Control_1+0x58>
 800082e:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <Col_Control_1+0xbc>)
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	4a1b      	ldr	r2, [pc, #108]	; (80008a0 <Col_Control_1+0xbc>)
 8000834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000838:	6153      	str	r3, [r2, #20]
}
 800083a:	e026      	b.n	800088a <Col_Control_1+0xa6>
	else if(Col == 4) PBS12;			// Dotmatrix_Control[x][4]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2b04      	cmp	r3, #4
 8000840:	d106      	bne.n	8000850 <Col_Control_1+0x6c>
 8000842:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <Col_Control_1+0xbc>)
 8000844:	695b      	ldr	r3, [r3, #20]
 8000846:	4a16      	ldr	r2, [pc, #88]	; (80008a0 <Col_Control_1+0xbc>)
 8000848:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800084c:	6153      	str	r3, [r2, #20]
}
 800084e:	e01c      	b.n	800088a <Col_Control_1+0xa6>
	else if(Col == 5) PBS9;			// Dotmatrix_Control[x][5]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2b05      	cmp	r3, #5
 8000854:	d106      	bne.n	8000864 <Col_Control_1+0x80>
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <Col_Control_1+0xbc>)
 8000858:	695b      	ldr	r3, [r3, #20]
 800085a:	4a11      	ldr	r2, [pc, #68]	; (80008a0 <Col_Control_1+0xbc>)
 800085c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000860:	6153      	str	r3, [r2, #20]
}
 8000862:	e012      	b.n	800088a <Col_Control_1+0xa6>
	else if(Col == 6) PCS7;			// Dotmatrix_Control[x][6]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2b06      	cmp	r3, #6
 8000868:	d106      	bne.n	8000878 <Col_Control_1+0x94>
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <Col_Control_1+0xb8>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	4a0b      	ldr	r2, [pc, #44]	; (800089c <Col_Control_1+0xb8>)
 8000870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000874:	6153      	str	r3, [r2, #20]
}
 8000876:	e008      	b.n	800088a <Col_Control_1+0xa6>
	else if(Col == 7) PAS9;			// Dotmatrix_Control[x][7]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2b07      	cmp	r3, #7
 800087c:	d105      	bne.n	800088a <Col_Control_1+0xa6>
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <Col_Control_1+0xb4>)
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	4a05      	ldr	r2, [pc, #20]	; (8000898 <Col_Control_1+0xb4>)
 8000884:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000888:	6153      	str	r3, [r2, #20]
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	40020000 	.word	0x40020000
 800089c:	40020800 	.word	0x40020800
 80008a0:	40020400 	.word	0x40020400

080008a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	; 0x28
 80008a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
 80008be:	4b43      	ldr	r3, [pc, #268]	; (80009cc <MX_GPIO_Init+0x128>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a42      	ldr	r2, [pc, #264]	; (80009cc <MX_GPIO_Init+0x128>)
 80008c4:	f043 0304 	orr.w	r3, r3, #4
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b40      	ldr	r3, [pc, #256]	; (80009cc <MX_GPIO_Init+0x128>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0304 	and.w	r3, r3, #4
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	4b3c      	ldr	r3, [pc, #240]	; (80009cc <MX_GPIO_Init+0x128>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a3b      	ldr	r2, [pc, #236]	; (80009cc <MX_GPIO_Init+0x128>)
 80008e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b39      	ldr	r3, [pc, #228]	; (80009cc <MX_GPIO_Init+0x128>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	4b35      	ldr	r3, [pc, #212]	; (80009cc <MX_GPIO_Init+0x128>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a34      	ldr	r2, [pc, #208]	; (80009cc <MX_GPIO_Init+0x128>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b32      	ldr	r3, [pc, #200]	; (80009cc <MX_GPIO_Init+0x128>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	4b2e      	ldr	r3, [pc, #184]	; (80009cc <MX_GPIO_Init+0x128>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a2d      	ldr	r2, [pc, #180]	; (80009cc <MX_GPIO_Init+0x128>)
 8000918:	f043 0302 	orr.w	r3, r3, #2
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b2b      	ldr	r3, [pc, #172]	; (80009cc <MX_GPIO_Init+0x128>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 800092a:	2200      	movs	r2, #0
 800092c:	f44f 51f7 	mov.w	r1, #7904	; 0x1ee0
 8000930:	4827      	ldr	r0, [pc, #156]	; (80009d0 <MX_GPIO_Init+0x12c>)
 8000932:	f000 fd17 	bl	8001364 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000936:	2200      	movs	r2, #0
 8000938:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 800093c:	4825      	ldr	r0, [pc, #148]	; (80009d4 <MX_GPIO_Init+0x130>)
 800093e:	f000 fd11 	bl	8001364 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_6
 8000942:	2200      	movs	r2, #0
 8000944:	f241 3146 	movw	r1, #4934	; 0x1346
 8000948:	4823      	ldr	r0, [pc, #140]	; (80009d8 <MX_GPIO_Init+0x134>)
 800094a:	f000 fd0b 	bl	8001364 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800094e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000954:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4619      	mov	r1, r3
 8000964:	481b      	ldr	r0, [pc, #108]	; (80009d4 <MX_GPIO_Init+0x130>)
 8000966:	f000 fb79 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 PA7 PA9
                           PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 800096a:	f44f 53f7 	mov.w	r3, #7904	; 0x1ee0
 800096e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000970:	2301      	movs	r3, #1
 8000972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4619      	mov	r1, r3
 8000982:	4813      	ldr	r0, [pc, #76]	; (80009d0 <MX_GPIO_Init+0x12c>)
 8000984:	f000 fb6a 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000988:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800098c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4619      	mov	r1, r3
 80009a0:	480c      	ldr	r0, [pc, #48]	; (80009d4 <MX_GPIO_Init+0x130>)
 80009a2:	f000 fb5b 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB6
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_6
 80009a6:	f241 3346 	movw	r3, #4934	; 0x1346
 80009aa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4619      	mov	r1, r3
 80009be:	4806      	ldr	r0, [pc, #24]	; (80009d8 <MX_GPIO_Init+0x134>)
 80009c0:	f000 fb4c 	bl	800105c <HAL_GPIO_Init>

}
 80009c4:	bf00      	nop
 80009c6:	3728      	adds	r7, #40	; 0x28
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40020000 	.word	0x40020000
 80009d4:	40020800 	.word	0x40020800
 80009d8:	40020400 	.word	0x40020400

080009dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e0:	f000 fa18 	bl	8000e14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e4:	f000 f80a 	bl	80009fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e8:	f7ff ff5c 	bl	80008a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009ec:	f000 f976 	bl	8000cdc <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Dotmatrix_Setup();
 80009f0:	f7ff fd6e 	bl	80004d0 <Dotmatrix_Setup>
	  Row_Control();
 80009f4:	f7ff fdb4 	bl	8000560 <Row_Control>
	  Dotmatrix_Setup();
 80009f8:	e7fa      	b.n	80009f0 <main+0x14>
	...

080009fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b094      	sub	sp, #80	; 0x50
 8000a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a02:	f107 0320 	add.w	r3, r7, #32
 8000a06:	2230      	movs	r2, #48	; 0x30
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f001 fed0 	bl	80027b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a20:	2300      	movs	r3, #0
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	4b29      	ldr	r3, [pc, #164]	; (8000acc <SystemClock_Config+0xd0>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a28:	4a28      	ldr	r2, [pc, #160]	; (8000acc <SystemClock_Config+0xd0>)
 8000a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a30:	4b26      	ldr	r3, [pc, #152]	; (8000acc <SystemClock_Config+0xd0>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	4b23      	ldr	r3, [pc, #140]	; (8000ad0 <SystemClock_Config+0xd4>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a48:	4a21      	ldr	r2, [pc, #132]	; (8000ad0 <SystemClock_Config+0xd4>)
 8000a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a4e:	6013      	str	r3, [r2, #0]
 8000a50:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <SystemClock_Config+0xd4>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a60:	2301      	movs	r3, #1
 8000a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a64:	2310      	movs	r3, #16
 8000a66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a70:	2310      	movs	r3, #16
 8000a72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a74:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a78:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a7a:	2304      	movs	r3, #4
 8000a7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a7e:	2307      	movs	r3, #7
 8000a80:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a82:	f107 0320 	add.w	r3, r7, #32
 8000a86:	4618      	mov	r0, r3
 8000a88:	f000 fc86 	bl	8001398 <HAL_RCC_OscConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a92:	f000 f831 	bl	8000af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a96:	230f      	movs	r3, #15
 8000a98:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aac:	f107 030c 	add.w	r3, r7, #12
 8000ab0:	2102      	movs	r1, #2
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 fee8 	bl	8001888 <HAL_RCC_ClockConfig>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000abe:	f000 f81b 	bl	8000af8 <Error_Handler>
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	3750      	adds	r7, #80	; 0x50
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40007000 	.word	0x40007000

08000ad4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d101      	bne.n	8000aea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ae6:	f000 f9b7 	bl	8000e58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40000800 	.word	0x40000800

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afc:	b672      	cpsid	i
}
 8000afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <Error_Handler+0x8>
	...

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b18:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b42:	2007      	movs	r0, #7
 8000b44:	f000 fa55 	bl	8000ff2 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40023800 	.word	0x40023800

08000b54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08e      	sub	sp, #56	; 0x38
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	4b33      	ldr	r3, [pc, #204]	; (8000c38 <HAL_InitTick+0xe4>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	4a32      	ldr	r2, [pc, #200]	; (8000c38 <HAL_InitTick+0xe4>)
 8000b6e:	f043 0304 	orr.w	r3, r3, #4
 8000b72:	6413      	str	r3, [r2, #64]	; 0x40
 8000b74:	4b30      	ldr	r3, [pc, #192]	; (8000c38 <HAL_InitTick+0xe4>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	f003 0304 	and.w	r3, r3, #4
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b80:	f107 0210 	add.w	r2, r7, #16
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4611      	mov	r1, r2
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f001 f89c 	bl	8001cc8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b90:	6a3b      	ldr	r3, [r7, #32]
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d103      	bne.n	8000ba2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b9a:	f001 f86d 	bl	8001c78 <HAL_RCC_GetPCLK1Freq>
 8000b9e:	6378      	str	r0, [r7, #52]	; 0x34
 8000ba0:	e004      	b.n	8000bac <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ba2:	f001 f869 	bl	8001c78 <HAL_RCC_GetPCLK1Freq>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bae:	4a23      	ldr	r2, [pc, #140]	; (8000c3c <HAL_InitTick+0xe8>)
 8000bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb4:	0c9b      	lsrs	r3, r3, #18
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000bba:	4b21      	ldr	r3, [pc, #132]	; (8000c40 <HAL_InitTick+0xec>)
 8000bbc:	4a21      	ldr	r2, [pc, #132]	; (8000c44 <HAL_InitTick+0xf0>)
 8000bbe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000bc0:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <HAL_InitTick+0xec>)
 8000bc2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bc6:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000bc8:	4a1d      	ldr	r2, [pc, #116]	; (8000c40 <HAL_InitTick+0xec>)
 8000bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bcc:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000bce:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <HAL_InitTick+0xec>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <HAL_InitTick+0xec>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bda:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <HAL_InitTick+0xec>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000be0:	4817      	ldr	r0, [pc, #92]	; (8000c40 <HAL_InitTick+0xec>)
 8000be2:	f001 f8a3 	bl	8001d2c <HAL_TIM_Base_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000bec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d11b      	bne.n	8000c2c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000bf4:	4812      	ldr	r0, [pc, #72]	; (8000c40 <HAL_InitTick+0xec>)
 8000bf6:	f001 f8f3 	bl	8001de0 <HAL_TIM_Base_Start_IT>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d111      	bne.n	8000c2c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000c08:	201e      	movs	r0, #30
 8000c0a:	f000 fa19 	bl	8001040 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2b0f      	cmp	r3, #15
 8000c12:	d808      	bhi.n	8000c26 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000c14:	2200      	movs	r2, #0
 8000c16:	6879      	ldr	r1, [r7, #4]
 8000c18:	201e      	movs	r0, #30
 8000c1a:	f000 f9f5 	bl	8001008 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <HAL_InitTick+0xf4>)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6013      	str	r3, [r2, #0]
 8000c24:	e002      	b.n	8000c2c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3738      	adds	r7, #56	; 0x38
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	431bde83 	.word	0x431bde83
 8000c40:	20000328 	.word	0x20000328
 8000c44:	40000800 	.word	0x40000800
 8000c48:	20000304 	.word	0x20000304

08000c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <NMI_Handler+0x4>

08000c52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <HardFault_Handler+0x4>

08000c58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <MemManage_Handler+0x4>

08000c5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <BusFault_Handler+0x4>

08000c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <UsageFault_Handler+0x4>

08000c6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
	...

08000ca4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ca8:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <TIM4_IRQHandler+0x10>)
 8000caa:	f001 f8fb 	bl	8001ea4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000328 	.word	0x20000328

08000cb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <SystemInit+0x20>)
 8000cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc2:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <SystemInit+0x20>)
 8000cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <MX_USART2_UART_Init+0x4c>)
 8000ce2:	4a12      	ldr	r2, [pc, #72]	; (8000d2c <MX_USART2_UART_Init+0x50>)
 8000ce4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ce6:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <MX_USART2_UART_Init+0x4c>)
 8000ce8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <MX_USART2_UART_Init+0x4c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <MX_USART2_UART_Init+0x4c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <MX_USART2_UART_Init+0x4c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d00:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <MX_USART2_UART_Init+0x4c>)
 8000d02:	220c      	movs	r2, #12
 8000d04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d06:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <MX_USART2_UART_Init+0x4c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <MX_USART2_UART_Init+0x4c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d12:	4805      	ldr	r0, [pc, #20]	; (8000d28 <MX_USART2_UART_Init+0x4c>)
 8000d14:	f001 fa8a 	bl	800222c <HAL_UART_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d1e:	f7ff feeb 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000370 	.word	0x20000370
 8000d2c:	40004400 	.word	0x40004400

08000d30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a19      	ldr	r2, [pc, #100]	; (8000db4 <HAL_UART_MspInit+0x84>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d12b      	bne.n	8000daa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <HAL_UART_MspInit+0x88>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	4a17      	ldr	r2, [pc, #92]	; (8000db8 <HAL_UART_MspInit+0x88>)
 8000d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d60:	6413      	str	r3, [r2, #64]	; 0x40
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <HAL_UART_MspInit+0x88>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <HAL_UART_MspInit+0x88>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a10      	ldr	r2, [pc, #64]	; (8000db8 <HAL_UART_MspInit+0x88>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <HAL_UART_MspInit+0x88>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d8a:	230c      	movs	r3, #12
 8000d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d96:	2303      	movs	r3, #3
 8000d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d9a:	2307      	movs	r3, #7
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4619      	mov	r1, r3
 8000da4:	4805      	ldr	r0, [pc, #20]	; (8000dbc <HAL_UART_MspInit+0x8c>)
 8000da6:	f000 f959 	bl	800105c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000daa:	bf00      	nop
 8000dac:	3728      	adds	r7, #40	; 0x28
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40004400 	.word	0x40004400
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020000 	.word	0x40020000

08000dc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc4:	480d      	ldr	r0, [pc, #52]	; (8000dfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dc6:	490e      	ldr	r1, [pc, #56]	; (8000e00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dc8:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dcc:	e002      	b.n	8000dd4 <LoopCopyDataInit>

08000dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd2:	3304      	adds	r3, #4

08000dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd8:	d3f9      	bcc.n	8000dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dda:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ddc:	4c0b      	ldr	r4, [pc, #44]	; (8000e0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de0:	e001      	b.n	8000de6 <LoopFillZerobss>

08000de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de4:	3204      	adds	r2, #4

08000de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de8:	d3fb      	bcc.n	8000de2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dea:	f7ff ff65 	bl	8000cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dee:	f001 fce7 	bl	80027c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000df2:	f7ff fdf3 	bl	80009dc <main>
  bx  lr    
 8000df6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000df8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e00:	2000030c 	.word	0x2000030c
  ldr r2, =_sidata
 8000e04:	08002848 	.word	0x08002848
  ldr r2, =_sbss
 8000e08:	2000030c 	.word	0x2000030c
  ldr r4, =_ebss
 8000e0c:	200003b8 	.word	0x200003b8

08000e10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e10:	e7fe      	b.n	8000e10 <ADC_IRQHandler>
	...

08000e14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e18:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	; (8000e54 <HAL_Init+0x40>)
 8000e1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e24:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <HAL_Init+0x40>)
 8000e2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <HAL_Init+0x40>)
 8000e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e3c:	2003      	movs	r0, #3
 8000e3e:	f000 f8d8 	bl	8000ff2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e42:	2000      	movs	r0, #0
 8000e44:	f7ff fe86 	bl	8000b54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e48:	f7ff fe5c 	bl	8000b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40023c00 	.word	0x40023c00

08000e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <HAL_IncTick+0x20>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_IncTick+0x24>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <HAL_IncTick+0x24>)
 8000e6a:	6013      	str	r3, [r2, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	20000308 	.word	0x20000308
 8000e7c:	200003b4 	.word	0x200003b4

08000e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return uwTick;
 8000e84:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <HAL_GetTick+0x14>)
 8000e86:	681b      	ldr	r3, [r3, #0]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	200003b4 	.word	0x200003b4

08000e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <__NVIC_SetPriorityGrouping+0x44>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eae:	68ba      	ldr	r2, [r7, #8]
 8000eb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eca:	4a04      	ldr	r2, [pc, #16]	; (8000edc <__NVIC_SetPriorityGrouping+0x44>)
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	60d3      	str	r3, [r2, #12]
}
 8000ed0:	bf00      	nop
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee4:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	0a1b      	lsrs	r3, r3, #8
 8000eea:	f003 0307 	and.w	r3, r3, #7
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	db0b      	blt.n	8000f26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	f003 021f 	and.w	r2, r3, #31
 8000f14:	4907      	ldr	r1, [pc, #28]	; (8000f34 <__NVIC_EnableIRQ+0x38>)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	095b      	lsrs	r3, r3, #5
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000e100 	.word	0xe000e100

08000f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	6039      	str	r1, [r7, #0]
 8000f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	db0a      	blt.n	8000f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	490c      	ldr	r1, [pc, #48]	; (8000f84 <__NVIC_SetPriority+0x4c>)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	0112      	lsls	r2, r2, #4
 8000f58:	b2d2      	uxtb	r2, r2
 8000f5a:	440b      	add	r3, r1
 8000f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f60:	e00a      	b.n	8000f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	4908      	ldr	r1, [pc, #32]	; (8000f88 <__NVIC_SetPriority+0x50>)
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	f003 030f 	and.w	r3, r3, #15
 8000f6e:	3b04      	subs	r3, #4
 8000f70:	0112      	lsls	r2, r2, #4
 8000f72:	b2d2      	uxtb	r2, r2
 8000f74:	440b      	add	r3, r1
 8000f76:	761a      	strb	r2, [r3, #24]
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000e100 	.word	0xe000e100
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b089      	sub	sp, #36	; 0x24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	f1c3 0307 	rsb	r3, r3, #7
 8000fa6:	2b04      	cmp	r3, #4
 8000fa8:	bf28      	it	cs
 8000faa:	2304      	movcs	r3, #4
 8000fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3304      	adds	r3, #4
 8000fb2:	2b06      	cmp	r3, #6
 8000fb4:	d902      	bls.n	8000fbc <NVIC_EncodePriority+0x30>
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3b03      	subs	r3, #3
 8000fba:	e000      	b.n	8000fbe <NVIC_EncodePriority+0x32>
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43da      	mvns	r2, r3
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	401a      	ands	r2, r3
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	fa01 f303 	lsl.w	r3, r1, r3
 8000fde:	43d9      	mvns	r1, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe4:	4313      	orrs	r3, r2
         );
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3724      	adds	r7, #36	; 0x24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff ff4c 	bl	8000e98 <__NVIC_SetPriorityGrouping>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
 8001014:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800101a:	f7ff ff61 	bl	8000ee0 <__NVIC_GetPriorityGrouping>
 800101e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	68b9      	ldr	r1, [r7, #8]
 8001024:	6978      	ldr	r0, [r7, #20]
 8001026:	f7ff ffb1 	bl	8000f8c <NVIC_EncodePriority>
 800102a:	4602      	mov	r2, r0
 800102c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001030:	4611      	mov	r1, r2
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff ff80 	bl	8000f38 <__NVIC_SetPriority>
}
 8001038:	bf00      	nop
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff ff54 	bl	8000efc <__NVIC_EnableIRQ>
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800105c:	b480      	push	{r7}
 800105e:	b089      	sub	sp, #36	; 0x24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800106e:	2300      	movs	r3, #0
 8001070:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
 8001076:	e159      	b.n	800132c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001078:	2201      	movs	r2, #1
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	429a      	cmp	r2, r3
 8001092:	f040 8148 	bne.w	8001326 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d005      	beq.n	80010ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d130      	bne.n	8001110 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	2203      	movs	r2, #3
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	68da      	ldr	r2, [r3, #12]
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010e4:	2201      	movs	r2, #1
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	091b      	lsrs	r3, r3, #4
 80010fa:	f003 0201 	and.w	r2, r3, #1
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 0303 	and.w	r3, r3, #3
 8001118:	2b03      	cmp	r3, #3
 800111a:	d017      	beq.n	800114c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	2203      	movs	r2, #3
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	2b02      	cmp	r3, #2
 8001156:	d123      	bne.n	80011a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	08da      	lsrs	r2, r3, #3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3208      	adds	r2, #8
 8001160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001164:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	f003 0307 	and.w	r3, r3, #7
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	220f      	movs	r2, #15
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	691a      	ldr	r2, [r3, #16]
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	08da      	lsrs	r2, r3, #3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3208      	adds	r2, #8
 800119a:	69b9      	ldr	r1, [r7, #24]
 800119c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	2203      	movs	r2, #3
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0203 	and.w	r2, r3, #3
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f000 80a2 	beq.w	8001326 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	4b57      	ldr	r3, [pc, #348]	; (8001344 <HAL_GPIO_Init+0x2e8>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	4a56      	ldr	r2, [pc, #344]	; (8001344 <HAL_GPIO_Init+0x2e8>)
 80011ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f0:	6453      	str	r3, [r2, #68]	; 0x44
 80011f2:	4b54      	ldr	r3, [pc, #336]	; (8001344 <HAL_GPIO_Init+0x2e8>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011fe:	4a52      	ldr	r2, [pc, #328]	; (8001348 <HAL_GPIO_Init+0x2ec>)
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	089b      	lsrs	r3, r3, #2
 8001204:	3302      	adds	r3, #2
 8001206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	220f      	movs	r2, #15
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a49      	ldr	r2, [pc, #292]	; (800134c <HAL_GPIO_Init+0x2f0>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d019      	beq.n	800125e <HAL_GPIO_Init+0x202>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a48      	ldr	r2, [pc, #288]	; (8001350 <HAL_GPIO_Init+0x2f4>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d013      	beq.n	800125a <HAL_GPIO_Init+0x1fe>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a47      	ldr	r2, [pc, #284]	; (8001354 <HAL_GPIO_Init+0x2f8>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d00d      	beq.n	8001256 <HAL_GPIO_Init+0x1fa>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a46      	ldr	r2, [pc, #280]	; (8001358 <HAL_GPIO_Init+0x2fc>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d007      	beq.n	8001252 <HAL_GPIO_Init+0x1f6>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a45      	ldr	r2, [pc, #276]	; (800135c <HAL_GPIO_Init+0x300>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d101      	bne.n	800124e <HAL_GPIO_Init+0x1f2>
 800124a:	2304      	movs	r3, #4
 800124c:	e008      	b.n	8001260 <HAL_GPIO_Init+0x204>
 800124e:	2307      	movs	r3, #7
 8001250:	e006      	b.n	8001260 <HAL_GPIO_Init+0x204>
 8001252:	2303      	movs	r3, #3
 8001254:	e004      	b.n	8001260 <HAL_GPIO_Init+0x204>
 8001256:	2302      	movs	r3, #2
 8001258:	e002      	b.n	8001260 <HAL_GPIO_Init+0x204>
 800125a:	2301      	movs	r3, #1
 800125c:	e000      	b.n	8001260 <HAL_GPIO_Init+0x204>
 800125e:	2300      	movs	r3, #0
 8001260:	69fa      	ldr	r2, [r7, #28]
 8001262:	f002 0203 	and.w	r2, r2, #3
 8001266:	0092      	lsls	r2, r2, #2
 8001268:	4093      	lsls	r3, r2
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001270:	4935      	ldr	r1, [pc, #212]	; (8001348 <HAL_GPIO_Init+0x2ec>)
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	089b      	lsrs	r3, r3, #2
 8001276:	3302      	adds	r3, #2
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800127e:	4b38      	ldr	r3, [pc, #224]	; (8001360 <HAL_GPIO_Init+0x304>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	43db      	mvns	r3, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4013      	ands	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012a2:	4a2f      	ldr	r2, [pc, #188]	; (8001360 <HAL_GPIO_Init+0x304>)
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012a8:	4b2d      	ldr	r3, [pc, #180]	; (8001360 <HAL_GPIO_Init+0x304>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012cc:	4a24      	ldr	r2, [pc, #144]	; (8001360 <HAL_GPIO_Init+0x304>)
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012d2:	4b23      	ldr	r3, [pc, #140]	; (8001360 <HAL_GPIO_Init+0x304>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012f6:	4a1a      	ldr	r2, [pc, #104]	; (8001360 <HAL_GPIO_Init+0x304>)
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012fc:	4b18      	ldr	r3, [pc, #96]	; (8001360 <HAL_GPIO_Init+0x304>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	4313      	orrs	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001320:	4a0f      	ldr	r2, [pc, #60]	; (8001360 <HAL_GPIO_Init+0x304>)
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3301      	adds	r3, #1
 800132a:	61fb      	str	r3, [r7, #28]
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	2b0f      	cmp	r3, #15
 8001330:	f67f aea2 	bls.w	8001078 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	3724      	adds	r7, #36	; 0x24
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800
 8001348:	40013800 	.word	0x40013800
 800134c:	40020000 	.word	0x40020000
 8001350:	40020400 	.word	0x40020400
 8001354:	40020800 	.word	0x40020800
 8001358:	40020c00 	.word	0x40020c00
 800135c:	40021000 	.word	0x40021000
 8001360:	40013c00 	.word	0x40013c00

08001364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	807b      	strh	r3, [r7, #2]
 8001370:	4613      	mov	r3, r2
 8001372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001374:	787b      	ldrb	r3, [r7, #1]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800137a:	887a      	ldrh	r2, [r7, #2]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001380:	e003      	b.n	800138a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001382:	887b      	ldrh	r3, [r7, #2]
 8001384:	041a      	lsls	r2, r3, #16
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	619a      	str	r2, [r3, #24]
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e267      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d075      	beq.n	80014a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013b6:	4b88      	ldr	r3, [pc, #544]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 030c 	and.w	r3, r3, #12
 80013be:	2b04      	cmp	r3, #4
 80013c0:	d00c      	beq.n	80013dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013c2:	4b85      	ldr	r3, [pc, #532]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ca:	2b08      	cmp	r3, #8
 80013cc:	d112      	bne.n	80013f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ce:	4b82      	ldr	r3, [pc, #520]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013da:	d10b      	bne.n	80013f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013dc:	4b7e      	ldr	r3, [pc, #504]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d05b      	beq.n	80014a0 <HAL_RCC_OscConfig+0x108>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d157      	bne.n	80014a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e242      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013fc:	d106      	bne.n	800140c <HAL_RCC_OscConfig+0x74>
 80013fe:	4b76      	ldr	r3, [pc, #472]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a75      	ldr	r2, [pc, #468]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 8001404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	e01d      	b.n	8001448 <HAL_RCC_OscConfig+0xb0>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001414:	d10c      	bne.n	8001430 <HAL_RCC_OscConfig+0x98>
 8001416:	4b70      	ldr	r3, [pc, #448]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a6f      	ldr	r2, [pc, #444]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 800141c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	4b6d      	ldr	r3, [pc, #436]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a6c      	ldr	r2, [pc, #432]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 8001428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	e00b      	b.n	8001448 <HAL_RCC_OscConfig+0xb0>
 8001430:	4b69      	ldr	r3, [pc, #420]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a68      	ldr	r2, [pc, #416]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 8001436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b66      	ldr	r3, [pc, #408]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a65      	ldr	r2, [pc, #404]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 8001442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d013      	beq.n	8001478 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001450:	f7ff fd16 	bl	8000e80 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001458:	f7ff fd12 	bl	8000e80 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b64      	cmp	r3, #100	; 0x64
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e207      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146a:	4b5b      	ldr	r3, [pc, #364]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f0      	beq.n	8001458 <HAL_RCC_OscConfig+0xc0>
 8001476:	e014      	b.n	80014a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001478:	f7ff fd02 	bl	8000e80 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001480:	f7ff fcfe 	bl	8000e80 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b64      	cmp	r3, #100	; 0x64
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e1f3      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001492:	4b51      	ldr	r3, [pc, #324]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f0      	bne.n	8001480 <HAL_RCC_OscConfig+0xe8>
 800149e:	e000      	b.n	80014a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d063      	beq.n	8001576 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014ae:	4b4a      	ldr	r3, [pc, #296]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 030c 	and.w	r3, r3, #12
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d00b      	beq.n	80014d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ba:	4b47      	ldr	r3, [pc, #284]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014c2:	2b08      	cmp	r3, #8
 80014c4:	d11c      	bne.n	8001500 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014c6:	4b44      	ldr	r3, [pc, #272]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d116      	bne.n	8001500 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014d2:	4b41      	ldr	r3, [pc, #260]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d005      	beq.n	80014ea <HAL_RCC_OscConfig+0x152>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d001      	beq.n	80014ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e1c7      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ea:	4b3b      	ldr	r3, [pc, #236]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	4937      	ldr	r1, [pc, #220]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014fe:	e03a      	b.n	8001576 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d020      	beq.n	800154a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001508:	4b34      	ldr	r3, [pc, #208]	; (80015dc <HAL_RCC_OscConfig+0x244>)
 800150a:	2201      	movs	r2, #1
 800150c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150e:	f7ff fcb7 	bl	8000e80 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001516:	f7ff fcb3 	bl	8000e80 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e1a8      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001528:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0f0      	beq.n	8001516 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001534:	4b28      	ldr	r3, [pc, #160]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	4925      	ldr	r1, [pc, #148]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 8001544:	4313      	orrs	r3, r2
 8001546:	600b      	str	r3, [r1, #0]
 8001548:	e015      	b.n	8001576 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800154a:	4b24      	ldr	r3, [pc, #144]	; (80015dc <HAL_RCC_OscConfig+0x244>)
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001550:	f7ff fc96 	bl	8000e80 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001558:	f7ff fc92 	bl	8000e80 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e187      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156a:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	2b00      	cmp	r3, #0
 8001580:	d036      	beq.n	80015f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d016      	beq.n	80015b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <HAL_RCC_OscConfig+0x248>)
 800158c:	2201      	movs	r2, #1
 800158e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001590:	f7ff fc76 	bl	8000e80 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001598:	f7ff fc72 	bl	8000e80 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e167      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 80015ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0f0      	beq.n	8001598 <HAL_RCC_OscConfig+0x200>
 80015b6:	e01b      	b.n	80015f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <HAL_RCC_OscConfig+0x248>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015be:	f7ff fc5f 	bl	8000e80 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c4:	e00e      	b.n	80015e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015c6:	f7ff fc5b 	bl	8000e80 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d907      	bls.n	80015e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e150      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
 80015d8:	40023800 	.word	0x40023800
 80015dc:	42470000 	.word	0x42470000
 80015e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e4:	4b88      	ldr	r3, [pc, #544]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 80015e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1ea      	bne.n	80015c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f000 8097 	beq.w	800172c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015fe:	2300      	movs	r3, #0
 8001600:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001602:	4b81      	ldr	r3, [pc, #516]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10f      	bne.n	800162e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	4b7d      	ldr	r3, [pc, #500]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	4a7c      	ldr	r2, [pc, #496]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 8001618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800161c:	6413      	str	r3, [r2, #64]	; 0x40
 800161e:	4b7a      	ldr	r3, [pc, #488]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800162a:	2301      	movs	r3, #1
 800162c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162e:	4b77      	ldr	r3, [pc, #476]	; (800180c <HAL_RCC_OscConfig+0x474>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001636:	2b00      	cmp	r3, #0
 8001638:	d118      	bne.n	800166c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800163a:	4b74      	ldr	r3, [pc, #464]	; (800180c <HAL_RCC_OscConfig+0x474>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a73      	ldr	r2, [pc, #460]	; (800180c <HAL_RCC_OscConfig+0x474>)
 8001640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001646:	f7ff fc1b 	bl	8000e80 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800164e:	f7ff fc17 	bl	8000e80 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e10c      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001660:	4b6a      	ldr	r3, [pc, #424]	; (800180c <HAL_RCC_OscConfig+0x474>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0f0      	beq.n	800164e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d106      	bne.n	8001682 <HAL_RCC_OscConfig+0x2ea>
 8001674:	4b64      	ldr	r3, [pc, #400]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 8001676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001678:	4a63      	ldr	r2, [pc, #396]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	6713      	str	r3, [r2, #112]	; 0x70
 8001680:	e01c      	b.n	80016bc <HAL_RCC_OscConfig+0x324>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	2b05      	cmp	r3, #5
 8001688:	d10c      	bne.n	80016a4 <HAL_RCC_OscConfig+0x30c>
 800168a:	4b5f      	ldr	r3, [pc, #380]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 800168c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800168e:	4a5e      	ldr	r2, [pc, #376]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 8001690:	f043 0304 	orr.w	r3, r3, #4
 8001694:	6713      	str	r3, [r2, #112]	; 0x70
 8001696:	4b5c      	ldr	r3, [pc, #368]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 8001698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169a:	4a5b      	ldr	r2, [pc, #364]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6713      	str	r3, [r2, #112]	; 0x70
 80016a2:	e00b      	b.n	80016bc <HAL_RCC_OscConfig+0x324>
 80016a4:	4b58      	ldr	r3, [pc, #352]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 80016a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a8:	4a57      	ldr	r2, [pc, #348]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 80016aa:	f023 0301 	bic.w	r3, r3, #1
 80016ae:	6713      	str	r3, [r2, #112]	; 0x70
 80016b0:	4b55      	ldr	r3, [pc, #340]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 80016b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b4:	4a54      	ldr	r2, [pc, #336]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 80016b6:	f023 0304 	bic.w	r3, r3, #4
 80016ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d015      	beq.n	80016f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c4:	f7ff fbdc 	bl	8000e80 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ca:	e00a      	b.n	80016e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016cc:	f7ff fbd8 	bl	8000e80 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016da:	4293      	cmp	r3, r2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e0cb      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e2:	4b49      	ldr	r3, [pc, #292]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 80016e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0ee      	beq.n	80016cc <HAL_RCC_OscConfig+0x334>
 80016ee:	e014      	b.n	800171a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f0:	f7ff fbc6 	bl	8000e80 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f6:	e00a      	b.n	800170e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016f8:	f7ff fbc2 	bl	8000e80 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	f241 3288 	movw	r2, #5000	; 0x1388
 8001706:	4293      	cmp	r3, r2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e0b5      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800170e:	4b3e      	ldr	r3, [pc, #248]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 8001710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1ee      	bne.n	80016f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800171a:	7dfb      	ldrb	r3, [r7, #23]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d105      	bne.n	800172c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001720:	4b39      	ldr	r3, [pc, #228]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	4a38      	ldr	r2, [pc, #224]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 8001726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800172a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	2b00      	cmp	r3, #0
 8001732:	f000 80a1 	beq.w	8001878 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001736:	4b34      	ldr	r3, [pc, #208]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 030c 	and.w	r3, r3, #12
 800173e:	2b08      	cmp	r3, #8
 8001740:	d05c      	beq.n	80017fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	2b02      	cmp	r3, #2
 8001748:	d141      	bne.n	80017ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174a:	4b31      	ldr	r3, [pc, #196]	; (8001810 <HAL_RCC_OscConfig+0x478>)
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001750:	f7ff fb96 	bl	8000e80 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001758:	f7ff fb92 	bl	8000e80 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e087      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176a:	4b27      	ldr	r3, [pc, #156]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1f0      	bne.n	8001758 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69da      	ldr	r2, [r3, #28]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	431a      	orrs	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	019b      	lsls	r3, r3, #6
 8001786:	431a      	orrs	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178c:	085b      	lsrs	r3, r3, #1
 800178e:	3b01      	subs	r3, #1
 8001790:	041b      	lsls	r3, r3, #16
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001798:	061b      	lsls	r3, r3, #24
 800179a:	491b      	ldr	r1, [pc, #108]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 800179c:	4313      	orrs	r3, r2
 800179e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017a0:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <HAL_RCC_OscConfig+0x478>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a6:	f7ff fb6b 	bl	8000e80 <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ae:	f7ff fb67 	bl	8000e80 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e05c      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0f0      	beq.n	80017ae <HAL_RCC_OscConfig+0x416>
 80017cc:	e054      	b.n	8001878 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <HAL_RCC_OscConfig+0x478>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d4:	f7ff fb54 	bl	8000e80 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017dc:	f7ff fb50 	bl	8000e80 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e045      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x444>
 80017fa:	e03d      	b.n	8001878 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d107      	bne.n	8001814 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e038      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
 8001808:	40023800 	.word	0x40023800
 800180c:	40007000 	.word	0x40007000
 8001810:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001814:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <HAL_RCC_OscConfig+0x4ec>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d028      	beq.n	8001874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800182c:	429a      	cmp	r2, r3
 800182e:	d121      	bne.n	8001874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183a:	429a      	cmp	r2, r3
 800183c:	d11a      	bne.n	8001874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001844:	4013      	ands	r3, r2
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800184a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800184c:	4293      	cmp	r3, r2
 800184e:	d111      	bne.n	8001874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185a:	085b      	lsrs	r3, r3, #1
 800185c:	3b01      	subs	r3, #1
 800185e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001860:	429a      	cmp	r2, r3
 8001862:	d107      	bne.n	8001874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001870:	429a      	cmp	r2, r3
 8001872:	d001      	beq.n	8001878 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e000      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023800 	.word	0x40023800

08001888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e0cc      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800189c:	4b68      	ldr	r3, [pc, #416]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d90c      	bls.n	80018c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018aa:	4b65      	ldr	r3, [pc, #404]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b2:	4b63      	ldr	r3, [pc, #396]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d001      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e0b8      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d020      	beq.n	8001912 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d005      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018dc:	4b59      	ldr	r3, [pc, #356]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	4a58      	ldr	r2, [pc, #352]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d005      	beq.n	8001900 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018f4:	4b53      	ldr	r3, [pc, #332]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	4a52      	ldr	r2, [pc, #328]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001900:	4b50      	ldr	r3, [pc, #320]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	494d      	ldr	r1, [pc, #308]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	4313      	orrs	r3, r2
 8001910:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d044      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d107      	bne.n	8001936 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001926:	4b47      	ldr	r3, [pc, #284]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d119      	bne.n	8001966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e07f      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d003      	beq.n	8001946 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001942:	2b03      	cmp	r3, #3
 8001944:	d107      	bne.n	8001956 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001946:	4b3f      	ldr	r3, [pc, #252]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d109      	bne.n	8001966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e06f      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001956:	4b3b      	ldr	r3, [pc, #236]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e067      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001966:	4b37      	ldr	r3, [pc, #220]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f023 0203 	bic.w	r2, r3, #3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	4934      	ldr	r1, [pc, #208]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001974:	4313      	orrs	r3, r2
 8001976:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001978:	f7ff fa82 	bl	8000e80 <HAL_GetTick>
 800197c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197e:	e00a      	b.n	8001996 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001980:	f7ff fa7e 	bl	8000e80 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	f241 3288 	movw	r2, #5000	; 0x1388
 800198e:	4293      	cmp	r3, r2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e04f      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001996:	4b2b      	ldr	r3, [pc, #172]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 020c 	and.w	r2, r3, #12
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d1eb      	bne.n	8001980 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019a8:	4b25      	ldr	r3, [pc, #148]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d20c      	bcs.n	80019d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b6:	4b22      	ldr	r3, [pc, #136]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019be:	4b20      	ldr	r3, [pc, #128]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d001      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e032      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d008      	beq.n	80019ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019dc:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	4916      	ldr	r1, [pc, #88]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d009      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	490e      	ldr	r1, [pc, #56]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a0e:	f000 f821 	bl	8001a54 <HAL_RCC_GetSysClockFreq>
 8001a12:	4602      	mov	r2, r0
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	091b      	lsrs	r3, r3, #4
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	490a      	ldr	r1, [pc, #40]	; (8001a48 <HAL_RCC_ClockConfig+0x1c0>)
 8001a20:	5ccb      	ldrb	r3, [r1, r3]
 8001a22:	fa22 f303 	lsr.w	r3, r2, r3
 8001a26:	4a09      	ldr	r2, [pc, #36]	; (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 8001a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <HAL_RCC_ClockConfig+0x1c8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff f890 	bl	8000b54 <HAL_InitTick>

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40023c00 	.word	0x40023c00
 8001a44:	40023800 	.word	0x40023800
 8001a48:	08002820 	.word	0x08002820
 8001a4c:	20000300 	.word	0x20000300
 8001a50:	20000304 	.word	0x20000304

08001a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a58:	b094      	sub	sp, #80	; 0x50
 8001a5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	647b      	str	r3, [r7, #68]	; 0x44
 8001a60:	2300      	movs	r3, #0
 8001a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a64:	2300      	movs	r3, #0
 8001a66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a6c:	4b79      	ldr	r3, [pc, #484]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 030c 	and.w	r3, r3, #12
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d00d      	beq.n	8001a94 <HAL_RCC_GetSysClockFreq+0x40>
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	f200 80e1 	bhi.w	8001c40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d002      	beq.n	8001a88 <HAL_RCC_GetSysClockFreq+0x34>
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d003      	beq.n	8001a8e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a86:	e0db      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a88:	4b73      	ldr	r3, [pc, #460]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a8a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a8c:	e0db      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a8e:	4b73      	ldr	r3, [pc, #460]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x208>)
 8001a90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a92:	e0d8      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a94:	4b6f      	ldr	r3, [pc, #444]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a9c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a9e:	4b6d      	ldr	r3, [pc, #436]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d063      	beq.n	8001b72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aaa:	4b6a      	ldr	r3, [pc, #424]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	099b      	lsrs	r3, r3, #6
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ab4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001abc:	633b      	str	r3, [r7, #48]	; 0x30
 8001abe:	2300      	movs	r3, #0
 8001ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ac2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ac6:	4622      	mov	r2, r4
 8001ac8:	462b      	mov	r3, r5
 8001aca:	f04f 0000 	mov.w	r0, #0
 8001ace:	f04f 0100 	mov.w	r1, #0
 8001ad2:	0159      	lsls	r1, r3, #5
 8001ad4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ad8:	0150      	lsls	r0, r2, #5
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	4621      	mov	r1, r4
 8001ae0:	1a51      	subs	r1, r2, r1
 8001ae2:	6139      	str	r1, [r7, #16]
 8001ae4:	4629      	mov	r1, r5
 8001ae6:	eb63 0301 	sbc.w	r3, r3, r1
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001af8:	4659      	mov	r1, fp
 8001afa:	018b      	lsls	r3, r1, #6
 8001afc:	4651      	mov	r1, sl
 8001afe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b02:	4651      	mov	r1, sl
 8001b04:	018a      	lsls	r2, r1, #6
 8001b06:	4651      	mov	r1, sl
 8001b08:	ebb2 0801 	subs.w	r8, r2, r1
 8001b0c:	4659      	mov	r1, fp
 8001b0e:	eb63 0901 	sbc.w	r9, r3, r1
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b26:	4690      	mov	r8, r2
 8001b28:	4699      	mov	r9, r3
 8001b2a:	4623      	mov	r3, r4
 8001b2c:	eb18 0303 	adds.w	r3, r8, r3
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	462b      	mov	r3, r5
 8001b34:	eb49 0303 	adc.w	r3, r9, r3
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	f04f 0300 	mov.w	r3, #0
 8001b42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b46:	4629      	mov	r1, r5
 8001b48:	024b      	lsls	r3, r1, #9
 8001b4a:	4621      	mov	r1, r4
 8001b4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b50:	4621      	mov	r1, r4
 8001b52:	024a      	lsls	r2, r1, #9
 8001b54:	4610      	mov	r0, r2
 8001b56:	4619      	mov	r1, r3
 8001b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b64:	f7fe fb36 	bl	80001d4 <__aeabi_uldivmod>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b70:	e058      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b72:	4b38      	ldr	r3, [pc, #224]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	099b      	lsrs	r3, r3, #6
 8001b78:	2200      	movs	r2, #0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	4611      	mov	r1, r2
 8001b7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b82:	623b      	str	r3, [r7, #32]
 8001b84:	2300      	movs	r3, #0
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
 8001b88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b8c:	4642      	mov	r2, r8
 8001b8e:	464b      	mov	r3, r9
 8001b90:	f04f 0000 	mov.w	r0, #0
 8001b94:	f04f 0100 	mov.w	r1, #0
 8001b98:	0159      	lsls	r1, r3, #5
 8001b9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b9e:	0150      	lsls	r0, r2, #5
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4641      	mov	r1, r8
 8001ba6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001baa:	4649      	mov	r1, r9
 8001bac:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	f04f 0300 	mov.w	r3, #0
 8001bb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bc4:	ebb2 040a 	subs.w	r4, r2, sl
 8001bc8:	eb63 050b 	sbc.w	r5, r3, fp
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	f04f 0300 	mov.w	r3, #0
 8001bd4:	00eb      	lsls	r3, r5, #3
 8001bd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bda:	00e2      	lsls	r2, r4, #3
 8001bdc:	4614      	mov	r4, r2
 8001bde:	461d      	mov	r5, r3
 8001be0:	4643      	mov	r3, r8
 8001be2:	18e3      	adds	r3, r4, r3
 8001be4:	603b      	str	r3, [r7, #0]
 8001be6:	464b      	mov	r3, r9
 8001be8:	eb45 0303 	adc.w	r3, r5, r3
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bfa:	4629      	mov	r1, r5
 8001bfc:	028b      	lsls	r3, r1, #10
 8001bfe:	4621      	mov	r1, r4
 8001c00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c04:	4621      	mov	r1, r4
 8001c06:	028a      	lsls	r2, r1, #10
 8001c08:	4610      	mov	r0, r2
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c0e:	2200      	movs	r2, #0
 8001c10:	61bb      	str	r3, [r7, #24]
 8001c12:	61fa      	str	r2, [r7, #28]
 8001c14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c18:	f7fe fadc 	bl	80001d4 <__aeabi_uldivmod>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4613      	mov	r3, r2
 8001c22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	0c1b      	lsrs	r3, r3, #16
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	3301      	adds	r3, #1
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c3e:	e002      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c40:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3750      	adds	r7, #80	; 0x50
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800
 8001c58:	00f42400 	.word	0x00f42400
 8001c5c:	007a1200 	.word	0x007a1200

08001c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c64:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c66:	681b      	ldr	r3, [r3, #0]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20000300 	.word	0x20000300

08001c78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c7c:	f7ff fff0 	bl	8001c60 <HAL_RCC_GetHCLKFreq>
 8001c80:	4602      	mov	r2, r0
 8001c82:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	0a9b      	lsrs	r3, r3, #10
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	4903      	ldr	r1, [pc, #12]	; (8001c9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c8e:	5ccb      	ldrb	r3, [r1, r3]
 8001c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	08002830 	.word	0x08002830

08001ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ca4:	f7ff ffdc 	bl	8001c60 <HAL_RCC_GetHCLKFreq>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	0b5b      	lsrs	r3, r3, #13
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	4903      	ldr	r1, [pc, #12]	; (8001cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cb6:	5ccb      	ldrb	r3, [r1, r3]
 8001cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	08002830 	.word	0x08002830

08001cc8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	220f      	movs	r2, #15
 8001cd6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cd8:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <HAL_RCC_GetClockConfig+0x5c>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 0203 	and.w	r2, r3, #3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <HAL_RCC_GetClockConfig+0x5c>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <HAL_RCC_GetClockConfig+0x5c>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001cfc:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <HAL_RCC_GetClockConfig+0x5c>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	08db      	lsrs	r3, r3, #3
 8001d02:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d0a:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <HAL_RCC_GetClockConfig+0x60>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0207 	and.w	r2, r3, #7
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	601a      	str	r2, [r3, #0]
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40023c00 	.word	0x40023c00

08001d2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e041      	b.n	8001dc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d106      	bne.n	8001d58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f839 	bl	8001dca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3304      	adds	r3, #4
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	f000 f9ca 	bl	8002104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d001      	beq.n	8001df8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e044      	b.n	8001e82 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68da      	ldr	r2, [r3, #12]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0201 	orr.w	r2, r2, #1
 8001e0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a1e      	ldr	r2, [pc, #120]	; (8001e90 <HAL_TIM_Base_Start_IT+0xb0>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d018      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x6c>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e22:	d013      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x6c>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a1a      	ldr	r2, [pc, #104]	; (8001e94 <HAL_TIM_Base_Start_IT+0xb4>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d00e      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x6c>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a19      	ldr	r2, [pc, #100]	; (8001e98 <HAL_TIM_Base_Start_IT+0xb8>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d009      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x6c>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a17      	ldr	r2, [pc, #92]	; (8001e9c <HAL_TIM_Base_Start_IT+0xbc>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d004      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x6c>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a16      	ldr	r2, [pc, #88]	; (8001ea0 <HAL_TIM_Base_Start_IT+0xc0>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d111      	bne.n	8001e70 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2b06      	cmp	r3, #6
 8001e5c:	d010      	beq.n	8001e80 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f042 0201 	orr.w	r2, r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e6e:	e007      	b.n	8001e80 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0201 	orr.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	40010000 	.word	0x40010000
 8001e94:	40000400 	.word	0x40000400
 8001e98:	40000800 	.word	0x40000800
 8001e9c:	40000c00 	.word	0x40000c00
 8001ea0:	40014000 	.word	0x40014000

08001ea4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d122      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d11b      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f06f 0202 	mvn.w	r2, #2
 8001ed0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f8ee 	bl	80020c8 <HAL_TIM_IC_CaptureCallback>
 8001eec:	e005      	b.n	8001efa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f8e0 	bl	80020b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f8f1 	bl	80020dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	f003 0304 	and.w	r3, r3, #4
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	d122      	bne.n	8001f54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d11b      	bne.n	8001f54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f06f 0204 	mvn.w	r2, #4
 8001f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2202      	movs	r2, #2
 8001f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f8c4 	bl	80020c8 <HAL_TIM_IC_CaptureCallback>
 8001f40:	e005      	b.n	8001f4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f8b6 	bl	80020b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 f8c7 	bl	80020dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	f003 0308 	and.w	r3, r3, #8
 8001f5e:	2b08      	cmp	r3, #8
 8001f60:	d122      	bne.n	8001fa8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	d11b      	bne.n	8001fa8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f06f 0208 	mvn.w	r2, #8
 8001f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2204      	movs	r2, #4
 8001f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f89a 	bl	80020c8 <HAL_TIM_IC_CaptureCallback>
 8001f94:	e005      	b.n	8001fa2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f88c 	bl	80020b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f89d 	bl	80020dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	f003 0310 	and.w	r3, r3, #16
 8001fb2:	2b10      	cmp	r3, #16
 8001fb4:	d122      	bne.n	8001ffc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f003 0310 	and.w	r3, r3, #16
 8001fc0:	2b10      	cmp	r3, #16
 8001fc2:	d11b      	bne.n	8001ffc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f06f 0210 	mvn.w	r2, #16
 8001fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2208      	movs	r2, #8
 8001fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f870 	bl	80020c8 <HAL_TIM_IC_CaptureCallback>
 8001fe8:	e005      	b.n	8001ff6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f862 	bl	80020b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f873 	bl	80020dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b01      	cmp	r3, #1
 8002008:	d10e      	bne.n	8002028 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b01      	cmp	r3, #1
 8002016:	d107      	bne.n	8002028 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f06f 0201 	mvn.w	r2, #1
 8002020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7fe fd56 	bl	8000ad4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002032:	2b80      	cmp	r3, #128	; 0x80
 8002034:	d10e      	bne.n	8002054 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002040:	2b80      	cmp	r3, #128	; 0x80
 8002042:	d107      	bne.n	8002054 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800204c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f8e2 	bl	8002218 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800205e:	2b40      	cmp	r3, #64	; 0x40
 8002060:	d10e      	bne.n	8002080 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206c:	2b40      	cmp	r3, #64	; 0x40
 800206e:	d107      	bne.n	8002080 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f838 	bl	80020f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	f003 0320 	and.w	r3, r3, #32
 800208a:	2b20      	cmp	r3, #32
 800208c:	d10e      	bne.n	80020ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	f003 0320 	and.w	r3, r3, #32
 8002098:	2b20      	cmp	r3, #32
 800209a:	d107      	bne.n	80020ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f06f 0220 	mvn.w	r2, #32
 80020a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f8ac 	bl	8002204 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a34      	ldr	r2, [pc, #208]	; (80021e8 <TIM_Base_SetConfig+0xe4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d00f      	beq.n	800213c <TIM_Base_SetConfig+0x38>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002122:	d00b      	beq.n	800213c <TIM_Base_SetConfig+0x38>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a31      	ldr	r2, [pc, #196]	; (80021ec <TIM_Base_SetConfig+0xe8>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d007      	beq.n	800213c <TIM_Base_SetConfig+0x38>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a30      	ldr	r2, [pc, #192]	; (80021f0 <TIM_Base_SetConfig+0xec>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d003      	beq.n	800213c <TIM_Base_SetConfig+0x38>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a2f      	ldr	r2, [pc, #188]	; (80021f4 <TIM_Base_SetConfig+0xf0>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d108      	bne.n	800214e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002142:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	4313      	orrs	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a25      	ldr	r2, [pc, #148]	; (80021e8 <TIM_Base_SetConfig+0xe4>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d01b      	beq.n	800218e <TIM_Base_SetConfig+0x8a>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800215c:	d017      	beq.n	800218e <TIM_Base_SetConfig+0x8a>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a22      	ldr	r2, [pc, #136]	; (80021ec <TIM_Base_SetConfig+0xe8>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d013      	beq.n	800218e <TIM_Base_SetConfig+0x8a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a21      	ldr	r2, [pc, #132]	; (80021f0 <TIM_Base_SetConfig+0xec>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d00f      	beq.n	800218e <TIM_Base_SetConfig+0x8a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a20      	ldr	r2, [pc, #128]	; (80021f4 <TIM_Base_SetConfig+0xf0>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00b      	beq.n	800218e <TIM_Base_SetConfig+0x8a>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a1f      	ldr	r2, [pc, #124]	; (80021f8 <TIM_Base_SetConfig+0xf4>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d007      	beq.n	800218e <TIM_Base_SetConfig+0x8a>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a1e      	ldr	r2, [pc, #120]	; (80021fc <TIM_Base_SetConfig+0xf8>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d003      	beq.n	800218e <TIM_Base_SetConfig+0x8a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a1d      	ldr	r2, [pc, #116]	; (8002200 <TIM_Base_SetConfig+0xfc>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d108      	bne.n	80021a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4313      	orrs	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a08      	ldr	r2, [pc, #32]	; (80021e8 <TIM_Base_SetConfig+0xe4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d103      	bne.n	80021d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	615a      	str	r2, [r3, #20]
}
 80021da:	bf00      	nop
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40010000 	.word	0x40010000
 80021ec:	40000400 	.word	0x40000400
 80021f0:	40000800 	.word	0x40000800
 80021f4:	40000c00 	.word	0x40000c00
 80021f8:	40014000 	.word	0x40014000
 80021fc:	40014400 	.word	0x40014400
 8002200:	40014800 	.word	0x40014800

08002204 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e03f      	b.n	80022be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d106      	bne.n	8002258 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7fe fd6c 	bl	8000d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2224      	movs	r2, #36	; 0x24
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800226e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f829 	bl	80022c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002284:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	695a      	ldr	r2, [r3, #20]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002294:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2220      	movs	r2, #32
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2220      	movs	r2, #32
 80022b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022cc:	b0c0      	sub	sp, #256	; 0x100
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80022e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022e4:	68d9      	ldr	r1, [r3, #12]
 80022e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	ea40 0301 	orr.w	r3, r0, r1
 80022f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	431a      	orrs	r2, r3
 8002300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	431a      	orrs	r2, r3
 8002308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	4313      	orrs	r3, r2
 8002310:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002320:	f021 010c 	bic.w	r1, r1, #12
 8002324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800232e:	430b      	orrs	r3, r1
 8002330:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800233e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002342:	6999      	ldr	r1, [r3, #24]
 8002344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	ea40 0301 	orr.w	r3, r0, r1
 800234e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	4b8f      	ldr	r3, [pc, #572]	; (8002594 <UART_SetConfig+0x2cc>)
 8002358:	429a      	cmp	r2, r3
 800235a:	d005      	beq.n	8002368 <UART_SetConfig+0xa0>
 800235c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	4b8d      	ldr	r3, [pc, #564]	; (8002598 <UART_SetConfig+0x2d0>)
 8002364:	429a      	cmp	r2, r3
 8002366:	d104      	bne.n	8002372 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002368:	f7ff fc9a 	bl	8001ca0 <HAL_RCC_GetPCLK2Freq>
 800236c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002370:	e003      	b.n	800237a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002372:	f7ff fc81 	bl	8001c78 <HAL_RCC_GetPCLK1Freq>
 8002376:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800237a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002384:	f040 810c 	bne.w	80025a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002388:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800238c:	2200      	movs	r2, #0
 800238e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002392:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002396:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800239a:	4622      	mov	r2, r4
 800239c:	462b      	mov	r3, r5
 800239e:	1891      	adds	r1, r2, r2
 80023a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80023a2:	415b      	adcs	r3, r3
 80023a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80023aa:	4621      	mov	r1, r4
 80023ac:	eb12 0801 	adds.w	r8, r2, r1
 80023b0:	4629      	mov	r1, r5
 80023b2:	eb43 0901 	adc.w	r9, r3, r1
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	f04f 0300 	mov.w	r3, #0
 80023be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023ca:	4690      	mov	r8, r2
 80023cc:	4699      	mov	r9, r3
 80023ce:	4623      	mov	r3, r4
 80023d0:	eb18 0303 	adds.w	r3, r8, r3
 80023d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80023d8:	462b      	mov	r3, r5
 80023da:	eb49 0303 	adc.w	r3, r9, r3
 80023de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80023e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80023ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80023f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80023f6:	460b      	mov	r3, r1
 80023f8:	18db      	adds	r3, r3, r3
 80023fa:	653b      	str	r3, [r7, #80]	; 0x50
 80023fc:	4613      	mov	r3, r2
 80023fe:	eb42 0303 	adc.w	r3, r2, r3
 8002402:	657b      	str	r3, [r7, #84]	; 0x54
 8002404:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002408:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800240c:	f7fd fee2 	bl	80001d4 <__aeabi_uldivmod>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4b61      	ldr	r3, [pc, #388]	; (800259c <UART_SetConfig+0x2d4>)
 8002416:	fba3 2302 	umull	r2, r3, r3, r2
 800241a:	095b      	lsrs	r3, r3, #5
 800241c:	011c      	lsls	r4, r3, #4
 800241e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002422:	2200      	movs	r2, #0
 8002424:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002428:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800242c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002430:	4642      	mov	r2, r8
 8002432:	464b      	mov	r3, r9
 8002434:	1891      	adds	r1, r2, r2
 8002436:	64b9      	str	r1, [r7, #72]	; 0x48
 8002438:	415b      	adcs	r3, r3
 800243a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800243c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002440:	4641      	mov	r1, r8
 8002442:	eb12 0a01 	adds.w	sl, r2, r1
 8002446:	4649      	mov	r1, r9
 8002448:	eb43 0b01 	adc.w	fp, r3, r1
 800244c:	f04f 0200 	mov.w	r2, #0
 8002450:	f04f 0300 	mov.w	r3, #0
 8002454:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002458:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800245c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002460:	4692      	mov	sl, r2
 8002462:	469b      	mov	fp, r3
 8002464:	4643      	mov	r3, r8
 8002466:	eb1a 0303 	adds.w	r3, sl, r3
 800246a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800246e:	464b      	mov	r3, r9
 8002470:	eb4b 0303 	adc.w	r3, fp, r3
 8002474:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002484:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002488:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800248c:	460b      	mov	r3, r1
 800248e:	18db      	adds	r3, r3, r3
 8002490:	643b      	str	r3, [r7, #64]	; 0x40
 8002492:	4613      	mov	r3, r2
 8002494:	eb42 0303 	adc.w	r3, r2, r3
 8002498:	647b      	str	r3, [r7, #68]	; 0x44
 800249a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800249e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80024a2:	f7fd fe97 	bl	80001d4 <__aeabi_uldivmod>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4611      	mov	r1, r2
 80024ac:	4b3b      	ldr	r3, [pc, #236]	; (800259c <UART_SetConfig+0x2d4>)
 80024ae:	fba3 2301 	umull	r2, r3, r3, r1
 80024b2:	095b      	lsrs	r3, r3, #5
 80024b4:	2264      	movs	r2, #100	; 0x64
 80024b6:	fb02 f303 	mul.w	r3, r2, r3
 80024ba:	1acb      	subs	r3, r1, r3
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80024c2:	4b36      	ldr	r3, [pc, #216]	; (800259c <UART_SetConfig+0x2d4>)
 80024c4:	fba3 2302 	umull	r2, r3, r3, r2
 80024c8:	095b      	lsrs	r3, r3, #5
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80024d0:	441c      	add	r4, r3
 80024d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024d6:	2200      	movs	r2, #0
 80024d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80024dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80024e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80024e4:	4642      	mov	r2, r8
 80024e6:	464b      	mov	r3, r9
 80024e8:	1891      	adds	r1, r2, r2
 80024ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80024ec:	415b      	adcs	r3, r3
 80024ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80024f4:	4641      	mov	r1, r8
 80024f6:	1851      	adds	r1, r2, r1
 80024f8:	6339      	str	r1, [r7, #48]	; 0x30
 80024fa:	4649      	mov	r1, r9
 80024fc:	414b      	adcs	r3, r1
 80024fe:	637b      	str	r3, [r7, #52]	; 0x34
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	f04f 0300 	mov.w	r3, #0
 8002508:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800250c:	4659      	mov	r1, fp
 800250e:	00cb      	lsls	r3, r1, #3
 8002510:	4651      	mov	r1, sl
 8002512:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002516:	4651      	mov	r1, sl
 8002518:	00ca      	lsls	r2, r1, #3
 800251a:	4610      	mov	r0, r2
 800251c:	4619      	mov	r1, r3
 800251e:	4603      	mov	r3, r0
 8002520:	4642      	mov	r2, r8
 8002522:	189b      	adds	r3, r3, r2
 8002524:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002528:	464b      	mov	r3, r9
 800252a:	460a      	mov	r2, r1
 800252c:	eb42 0303 	adc.w	r3, r2, r3
 8002530:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002540:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002544:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002548:	460b      	mov	r3, r1
 800254a:	18db      	adds	r3, r3, r3
 800254c:	62bb      	str	r3, [r7, #40]	; 0x28
 800254e:	4613      	mov	r3, r2
 8002550:	eb42 0303 	adc.w	r3, r2, r3
 8002554:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002556:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800255a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800255e:	f7fd fe39 	bl	80001d4 <__aeabi_uldivmod>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	4b0d      	ldr	r3, [pc, #52]	; (800259c <UART_SetConfig+0x2d4>)
 8002568:	fba3 1302 	umull	r1, r3, r3, r2
 800256c:	095b      	lsrs	r3, r3, #5
 800256e:	2164      	movs	r1, #100	; 0x64
 8002570:	fb01 f303 	mul.w	r3, r1, r3
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	3332      	adds	r3, #50	; 0x32
 800257a:	4a08      	ldr	r2, [pc, #32]	; (800259c <UART_SetConfig+0x2d4>)
 800257c:	fba2 2303 	umull	r2, r3, r2, r3
 8002580:	095b      	lsrs	r3, r3, #5
 8002582:	f003 0207 	and.w	r2, r3, #7
 8002586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4422      	add	r2, r4
 800258e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002590:	e106      	b.n	80027a0 <UART_SetConfig+0x4d8>
 8002592:	bf00      	nop
 8002594:	40011000 	.word	0x40011000
 8002598:	40011400 	.word	0x40011400
 800259c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025a4:	2200      	movs	r2, #0
 80025a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80025aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80025ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80025b2:	4642      	mov	r2, r8
 80025b4:	464b      	mov	r3, r9
 80025b6:	1891      	adds	r1, r2, r2
 80025b8:	6239      	str	r1, [r7, #32]
 80025ba:	415b      	adcs	r3, r3
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
 80025be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025c2:	4641      	mov	r1, r8
 80025c4:	1854      	adds	r4, r2, r1
 80025c6:	4649      	mov	r1, r9
 80025c8:	eb43 0501 	adc.w	r5, r3, r1
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	00eb      	lsls	r3, r5, #3
 80025d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025da:	00e2      	lsls	r2, r4, #3
 80025dc:	4614      	mov	r4, r2
 80025de:	461d      	mov	r5, r3
 80025e0:	4643      	mov	r3, r8
 80025e2:	18e3      	adds	r3, r4, r3
 80025e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80025e8:	464b      	mov	r3, r9
 80025ea:	eb45 0303 	adc.w	r3, r5, r3
 80025ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80025f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80025fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800260e:	4629      	mov	r1, r5
 8002610:	008b      	lsls	r3, r1, #2
 8002612:	4621      	mov	r1, r4
 8002614:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002618:	4621      	mov	r1, r4
 800261a:	008a      	lsls	r2, r1, #2
 800261c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002620:	f7fd fdd8 	bl	80001d4 <__aeabi_uldivmod>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4b60      	ldr	r3, [pc, #384]	; (80027ac <UART_SetConfig+0x4e4>)
 800262a:	fba3 2302 	umull	r2, r3, r3, r2
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	011c      	lsls	r4, r3, #4
 8002632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002636:	2200      	movs	r2, #0
 8002638:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800263c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002640:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002644:	4642      	mov	r2, r8
 8002646:	464b      	mov	r3, r9
 8002648:	1891      	adds	r1, r2, r2
 800264a:	61b9      	str	r1, [r7, #24]
 800264c:	415b      	adcs	r3, r3
 800264e:	61fb      	str	r3, [r7, #28]
 8002650:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002654:	4641      	mov	r1, r8
 8002656:	1851      	adds	r1, r2, r1
 8002658:	6139      	str	r1, [r7, #16]
 800265a:	4649      	mov	r1, r9
 800265c:	414b      	adcs	r3, r1
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	f04f 0300 	mov.w	r3, #0
 8002668:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800266c:	4659      	mov	r1, fp
 800266e:	00cb      	lsls	r3, r1, #3
 8002670:	4651      	mov	r1, sl
 8002672:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002676:	4651      	mov	r1, sl
 8002678:	00ca      	lsls	r2, r1, #3
 800267a:	4610      	mov	r0, r2
 800267c:	4619      	mov	r1, r3
 800267e:	4603      	mov	r3, r0
 8002680:	4642      	mov	r2, r8
 8002682:	189b      	adds	r3, r3, r2
 8002684:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002688:	464b      	mov	r3, r9
 800268a:	460a      	mov	r2, r1
 800268c:	eb42 0303 	adc.w	r3, r2, r3
 8002690:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	67bb      	str	r3, [r7, #120]	; 0x78
 800269e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	f04f 0300 	mov.w	r3, #0
 80026a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80026ac:	4649      	mov	r1, r9
 80026ae:	008b      	lsls	r3, r1, #2
 80026b0:	4641      	mov	r1, r8
 80026b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026b6:	4641      	mov	r1, r8
 80026b8:	008a      	lsls	r2, r1, #2
 80026ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80026be:	f7fd fd89 	bl	80001d4 <__aeabi_uldivmod>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4611      	mov	r1, r2
 80026c8:	4b38      	ldr	r3, [pc, #224]	; (80027ac <UART_SetConfig+0x4e4>)
 80026ca:	fba3 2301 	umull	r2, r3, r3, r1
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	2264      	movs	r2, #100	; 0x64
 80026d2:	fb02 f303 	mul.w	r3, r2, r3
 80026d6:	1acb      	subs	r3, r1, r3
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	3332      	adds	r3, #50	; 0x32
 80026dc:	4a33      	ldr	r2, [pc, #204]	; (80027ac <UART_SetConfig+0x4e4>)
 80026de:	fba2 2303 	umull	r2, r3, r2, r3
 80026e2:	095b      	lsrs	r3, r3, #5
 80026e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026e8:	441c      	add	r4, r3
 80026ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026ee:	2200      	movs	r2, #0
 80026f0:	673b      	str	r3, [r7, #112]	; 0x70
 80026f2:	677a      	str	r2, [r7, #116]	; 0x74
 80026f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80026f8:	4642      	mov	r2, r8
 80026fa:	464b      	mov	r3, r9
 80026fc:	1891      	adds	r1, r2, r2
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	415b      	adcs	r3, r3
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002708:	4641      	mov	r1, r8
 800270a:	1851      	adds	r1, r2, r1
 800270c:	6039      	str	r1, [r7, #0]
 800270e:	4649      	mov	r1, r9
 8002710:	414b      	adcs	r3, r1
 8002712:	607b      	str	r3, [r7, #4]
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	f04f 0300 	mov.w	r3, #0
 800271c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002720:	4659      	mov	r1, fp
 8002722:	00cb      	lsls	r3, r1, #3
 8002724:	4651      	mov	r1, sl
 8002726:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800272a:	4651      	mov	r1, sl
 800272c:	00ca      	lsls	r2, r1, #3
 800272e:	4610      	mov	r0, r2
 8002730:	4619      	mov	r1, r3
 8002732:	4603      	mov	r3, r0
 8002734:	4642      	mov	r2, r8
 8002736:	189b      	adds	r3, r3, r2
 8002738:	66bb      	str	r3, [r7, #104]	; 0x68
 800273a:	464b      	mov	r3, r9
 800273c:	460a      	mov	r2, r1
 800273e:	eb42 0303 	adc.w	r3, r2, r3
 8002742:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	663b      	str	r3, [r7, #96]	; 0x60
 800274e:	667a      	str	r2, [r7, #100]	; 0x64
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800275c:	4649      	mov	r1, r9
 800275e:	008b      	lsls	r3, r1, #2
 8002760:	4641      	mov	r1, r8
 8002762:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002766:	4641      	mov	r1, r8
 8002768:	008a      	lsls	r2, r1, #2
 800276a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800276e:	f7fd fd31 	bl	80001d4 <__aeabi_uldivmod>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	4b0d      	ldr	r3, [pc, #52]	; (80027ac <UART_SetConfig+0x4e4>)
 8002778:	fba3 1302 	umull	r1, r3, r3, r2
 800277c:	095b      	lsrs	r3, r3, #5
 800277e:	2164      	movs	r1, #100	; 0x64
 8002780:	fb01 f303 	mul.w	r3, r1, r3
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	3332      	adds	r3, #50	; 0x32
 800278a:	4a08      	ldr	r2, [pc, #32]	; (80027ac <UART_SetConfig+0x4e4>)
 800278c:	fba2 2303 	umull	r2, r3, r2, r3
 8002790:	095b      	lsrs	r3, r3, #5
 8002792:	f003 020f 	and.w	r2, r3, #15
 8002796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4422      	add	r2, r4
 800279e:	609a      	str	r2, [r3, #8]
}
 80027a0:	bf00      	nop
 80027a2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80027a6:	46bd      	mov	sp, r7
 80027a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027ac:	51eb851f 	.word	0x51eb851f

080027b0 <memset>:
 80027b0:	4402      	add	r2, r0
 80027b2:	4603      	mov	r3, r0
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d100      	bne.n	80027ba <memset+0xa>
 80027b8:	4770      	bx	lr
 80027ba:	f803 1b01 	strb.w	r1, [r3], #1
 80027be:	e7f9      	b.n	80027b4 <memset+0x4>

080027c0 <__libc_init_array>:
 80027c0:	b570      	push	{r4, r5, r6, lr}
 80027c2:	4d0d      	ldr	r5, [pc, #52]	; (80027f8 <__libc_init_array+0x38>)
 80027c4:	4c0d      	ldr	r4, [pc, #52]	; (80027fc <__libc_init_array+0x3c>)
 80027c6:	1b64      	subs	r4, r4, r5
 80027c8:	10a4      	asrs	r4, r4, #2
 80027ca:	2600      	movs	r6, #0
 80027cc:	42a6      	cmp	r6, r4
 80027ce:	d109      	bne.n	80027e4 <__libc_init_array+0x24>
 80027d0:	4d0b      	ldr	r5, [pc, #44]	; (8002800 <__libc_init_array+0x40>)
 80027d2:	4c0c      	ldr	r4, [pc, #48]	; (8002804 <__libc_init_array+0x44>)
 80027d4:	f000 f818 	bl	8002808 <_init>
 80027d8:	1b64      	subs	r4, r4, r5
 80027da:	10a4      	asrs	r4, r4, #2
 80027dc:	2600      	movs	r6, #0
 80027de:	42a6      	cmp	r6, r4
 80027e0:	d105      	bne.n	80027ee <__libc_init_array+0x2e>
 80027e2:	bd70      	pop	{r4, r5, r6, pc}
 80027e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80027e8:	4798      	blx	r3
 80027ea:	3601      	adds	r6, #1
 80027ec:	e7ee      	b.n	80027cc <__libc_init_array+0xc>
 80027ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80027f2:	4798      	blx	r3
 80027f4:	3601      	adds	r6, #1
 80027f6:	e7f2      	b.n	80027de <__libc_init_array+0x1e>
 80027f8:	08002840 	.word	0x08002840
 80027fc:	08002840 	.word	0x08002840
 8002800:	08002840 	.word	0x08002840
 8002804:	08002844 	.word	0x08002844

08002808 <_init>:
 8002808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800280a:	bf00      	nop
 800280c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800280e:	bc08      	pop	{r3}
 8002810:	469e      	mov	lr, r3
 8002812:	4770      	bx	lr

08002814 <_fini>:
 8002814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002816:	bf00      	nop
 8002818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800281a:	bc08      	pop	{r3}
 800281c:	469e      	mov	lr, r3
 800281e:	4770      	bx	lr
